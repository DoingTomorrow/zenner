// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Schema_Access.Schema
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#nullable disable
namespace ZR_ClassLibrary.Schema_Access
{
  [DesignerCategory("code")]
  [ToolboxItem(true)]
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [XmlRoot("Schema")]
  [HelpKeyword("vs.data.DataSet")]
  [Serializable]
  public class Schema : DataSet
  {
    private ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationDataTable tableEnumTranslation;
    private ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicDataTable tableMTypeElectronic;
    private ZR_ClassLibrary.Schema_Access.Schema.BlockNamesDataTable tableBlockNames;
    private ZR_ClassLibrary.Schema_Access.Schema.CodeDataTable tableCode;
    private ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeDataTable tableControllerCode;
    private ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersDataTable tableCurrentUsers;
    private ZR_ClassLibrary.Schema_Access.Schema.CustomerDataTable tableCustomer;
    private ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationDataTable tableDatabaseIdentification;
    private ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationDataTable tableDatabaseLocation;
    private ZR_ClassLibrary.Schema_Access.Schema.DataloggerDataTable tableDatalogger;
    private ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryDataTable tableDataLoggerentry;
    private ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorDataTable tableDBTranslator;
    private ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructDataTable tableDBTranslatorStruct;
    private ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeDataTable tableDisplayCode;
    private ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionDataTable tableEquipmentTypeDescription;
    private ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentDataTable tableFactoryEquipment;
    private ZR_ClassLibrary.Schema_Access.Schema.GMM_UserDataTable tableGMM_User;
    private ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesDataTable tableHardwareResources;
    private ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeDataTable tableHardwareType;
    private ZR_ClassLibrary.Schema_Access.Schema.IncludeDefDataTable tableIncludeDef;
    private ZR_ClassLibrary.Schema_Access.Schema.LinkerTableDataTable tableLinkerTable;
    private ZR_ClassLibrary.Schema_Access.Schema.ManufacturerDataTable tableManufacturer;
    private ZR_ClassLibrary.Schema_Access.Schema.MapBaseDataTable tableMapBase;
    private ZR_ClassLibrary.Schema_Access.Schema.MapDefDataTable tableMapDef;
    private ZR_ClassLibrary.Schema_Access.Schema.MBusCodeDataTable tableMBusCode;
    private ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationDataTable tableMBusParameterTranslation;
    private ZR_ClassLibrary.Schema_Access.Schema.MenuDataTable tableMenu;
    private ZR_ClassLibrary.Schema_Access.Schema.MeterDataTable tableMeter;
    private ZR_ClassLibrary.Schema_Access.Schema.MeterDataDataTable tableMeterData;
    private ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestDataTable tableMeterDataRequest;
    private ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareDataTable tableMeterHardware;
    private ZR_ClassLibrary.Schema_Access.Schema.MeterInfoDataTable tableMeterInfo;
    private ZR_ClassLibrary.Schema_Access.Schema.MeterPositionDataTable tableMeterPosition;
    private ZR_ClassLibrary.Schema_Access.Schema.MeterTypeDataTable tableMeterType;
    private ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselDataTable tableMTypeKapsel;
    private ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterDataTable tableMTypeMIDWaterMeter;
    private ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusDataTable tableMTypeSaarius;
    private ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorDataTable tableMTypeTempSensor;
    private ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterDataTable tableMTypeWaterMeter;
    private ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusDataTable tableMTypeZelsius;
    private ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleDataTable tableMTypeZelsiusModule;
    private ZR_ClassLibrary.Schema_Access.Schema.NodeListDataTable tableNodeList;
    private ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesDataTable tableNodeReferences;
    private ZR_ClassLibrary.Schema_Access.Schema.PartlistDataTable tablePartlist;
    private ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheDataTable tablePPS_Cache;
    private ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesDataTable tablePPS_CacheClassNames;
    private ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesDataTable tablePPS_CacheParmNames;
    private ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperDataTable tablePPS_RW_WMZ_Mapper;
    private ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceDataTable tablePPS_STS_Reference;
    private ZR_ClassLibrary.Schema_Access.Schema.ProgFilesDataTable tableProgFiles;
    private ZR_ClassLibrary.Schema_Access.Schema.PValueIdentDataTable tablePValueIdent;
    private ZR_ClassLibrary.Schema_Access.Schema.RepairDataTable tableRepair;
    private ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsDataTable tableRepairErrorGroups;
    private ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeDataTable tableRuntimeCode;
    private ZR_ClassLibrary.Schema_Access.Schema.TestDataTable tableTest;
    private ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesDataTable tableTestbenchActualValues;
    private ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesDataTable tableTestbenchNominalValues;
    private ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentDataTable tableTestEquipment;
    private ZR_ClassLibrary.Schema_Access.Schema.TestPointListDataTable tableTestPointList;
    private ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableDataTable tableTestResistorTable;
    private ZR_ClassLibrary.Schema_Access.Schema.TestResultDataTable tableTestResult;
    private ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedDataTable tableTestResultExtended;
    private ZR_ClassLibrary.Schema_Access.Schema.TestTypeDataTable tableTestType;
    private ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersDataTable tableTypeOverwriteParameters;
    private ZR_ClassLibrary.Schema_Access.Schema.UnitsDataTable tableUnits;
    private ZR_ClassLibrary.Schema_Access.Schema.WaterDensityDataTable tableWaterDensity;
    private ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataDataTable tableWMApprovalData;
    private ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsDataTable tableWMApprovals;
    private ZR_ClassLibrary.Schema_Access.Schema.WMClassesDataTable tableWMClasses;
    private ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesDataTable tableWMCounterTypes;
    private ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetDataTable tableWMErrorOffset;
    private ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataDataTable tableWMMIDApprovalData;
    private ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetDataTable tableWMMIDErrorOffset;
    private ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesDataTable tableWMMIDTestingTypes;
    private ZR_ClassLibrary.Schema_Access.Schema.WMOrdersDataTable tableWMOrders;
    private ZR_ClassLibrary.Schema_Access.Schema.WMRatiosDataTable tableWMRatios;
    private ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesDataTable tableWMTestingTypes;
    private ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionDataTable tableZRFunction;
    private ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDDataTable tableZRGlobalID;
    private ZR_ClassLibrary.Schema_Access.Schema.ZrOrderDataTable tableZrOrder;
    private ZR_ClassLibrary.Schema_Access.Schema.ZRParameterDataTable tableZRParameter;
    private ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesDataTable tableZRTableNames;
    private ZR_ClassLibrary.Schema_Access.Schema.NodeLayersDataTable tableNodeLayers;
    private ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableDataTable tableExternalUserTable;
    private ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsDataTable tableDocumentGroups;
    private ZR_ClassLibrary.Schema_Access.Schema.DocumentsDataTable tableDocuments;
    private ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionDataTable tableErrorDescription;
    private ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheDataTable tableMultidataCache;
    private ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsDataTable tableWaveFlowDeviceModels;
    private ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadDataTable tableMinolDeviceDataRead;
    private ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataDataTable tableMinolDeviceData;
    private ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationDataTable tableAutoboxCardConfiguration;
    private ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataDataTable tableAutoboxResistorCalibrationData;
    private ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationDataTable tableAutoboxConfiguration;
    private ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsDataTable tableAutoboxResistorPairs;
    private ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsDataTable tableEnergyFactors;
    private ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesDataTable tableMeterInfoProperties;
    private ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationDataTable tableEquipmentCalibration;
    private ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesDataTable tableTranslationRules;
    private ZR_ClassLibrary.Schema_Access.Schema.MeterValuesDataTable tableMeterValues;
    private ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialDataTable tableMeterValuesAndSerial;
    private ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationDataTable tableOnlineTranslation;
    private ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterDataTable tableS3_FunctionParameter;
    private ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicDataTable tableMTypeVMT_Electronic;
    private ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicDataTable tableMTypeVMT_Hydraulic;
    private ZR_ClassLibrary.Schema_Access.Schema.DataQsDataTable tableDataQs;
    private ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterDataTable tableS3_Parameter;
    private ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationDataTable tableSerialPortConfiguration;
    private ZR_ClassLibrary.Schema_Access.Schema.FilterDataTable tableFilter;
    private ZR_ClassLibrary.Schema_Access.Schema.FilterValueDataTable tableFilterValue;
    private ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingDataTable tablePostTranslationMapping;
    private ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesDataTable tablePostTranslationRules;
    private ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersDataTable tablePTSensorParameters;
    private ZR_ClassLibrary.Schema_Access.Schema.SensorObservationDataTable tableSensorObservation;
    private ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryDataTable tableTestbenchNominalValuesHistory;
    private ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledDataTable tableZRFunctionCompiled;
    private ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistDataTable tableFactoryEquipmentPartlist;
    private ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationDataTable tableEquipmentPartlistCreation;
    private ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationDataTable tablePTCardChannelCalibration;
    private ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationDataTable tablePTSensorCalibration;
    private ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationDataTable tableEtalonCalibration;
    private ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsDataTable tableUserPermissions;
    private ZR_ClassLibrary.Schema_Access.Schema.MinomatListDataTable tableMinomatList;
    private ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogDataTable tableInstallationChangeLog;
    private ZR_ClassLibrary.Schema_Access.Schema.InstallationsDataTable tableInstallations;
    private ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersDataTable tableInstallationUsers;
    private ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersDataTable tableChangeableParameters;
    private ZR_ClassLibrary.Schema_Access.Schema.GmmImagesDataTable tableGmmImages;
    private ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsDataTable tableConnectionSettings;
    private ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsDataTable tableConnectionItems;
    private ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesDataTable tableConnectionProfiles;
    private ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultDataTable tableServiceTaskResult;
    private ZR_ClassLibrary.Schema_Access.Schema.MeterMSSDataTable tableMeterMSS;
    private ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsDataTable tableTestbenchFlowSettings;
    private ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsDataTable tableMinomatConnectionLogs;
    private ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsDataTable tableMinomatDataLogs;
    private ZR_ClassLibrary.Schema_Access.Schema.MeterChangesDataTable tableMeterChanges;
    private ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletDataTable tableTransducerPallet;
    private ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateDataTable tableTransducerPalletState;
    private ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeDataTable tableTransducerPalletType;
    private ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersDataTable tableConnectionItemParameters;
    private ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersDataTable tableConnectionProfileParameters;
    private ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersDataTable tableConnectionProfileFilters;
    private ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersDataTable tableSoftwareUsers;
    private ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordDataTable tableNotificationRecord;
    private ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheDataTable tableSAP_Cache;
    private ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingDataTable tableSAP_ClassUsing;
    private DataRelation relationFunctionDatalogger;
    private DataRelation relationEquipmentTypeDescriptionFactoryEquipment;
    private DataRelation relationProgFilesHardwareType;
    private DataRelation relationHTypeSaariusIncludeDef;
    private DataRelation relationBlockNamesLinkerTable;
    private DataRelation relationHardwareTypeLinkerTable;
    private DataRelation relationHTypeSaariusMapDef;
    private DataRelation relationFunctionMBusCode;
    private DataRelation relationFunctionMenu;
    private DataRelation relationMeterInfoMeter;
    private DataRelation relationMeterMeterData;
    private DataRelation relationManufacturerMeterHardware;
    private DataRelation relationHardwareTypeMeterInfo;
    private DataRelation relationMeterTypeMeterInfo;
    private DataRelation relationMeterTypeMTypeSaariuskapsel;
    private DataRelation relationMeterTypeMTypeSaarius;
    private DataRelation relationMeterTypeMTypeTempSensor;
    private DataRelation relationMeterTypeMTypeZelsius;
    private DataRelation relationMeterTypeMTypeZelsiusModule;
    private DataRelation relationMeterRepair;
    private DataRelation relationRepairErrorGroupsRepair;
    private DataRelation relationFunctionRuntimeCodeKopf;
    private DataRelation relationMeterInfoTypeOverrideParameters;
    private DataRelation relationFunctionParameter;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public Schema()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected Schema(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.InitVars(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (EnumTranslation)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationDataTable(dataSet.Tables[nameof (EnumTranslation)]));
          if (dataSet.Tables[nameof (MTypeElectronic)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicDataTable(dataSet.Tables[nameof (MTypeElectronic)]));
          if (dataSet.Tables[nameof (BlockNames)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.BlockNamesDataTable(dataSet.Tables[nameof (BlockNames)]));
          if (dataSet.Tables[nameof (Code)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.CodeDataTable(dataSet.Tables[nameof (Code)]));
          if (dataSet.Tables[nameof (ControllerCode)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeDataTable(dataSet.Tables[nameof (ControllerCode)]));
          if (dataSet.Tables[nameof (CurrentUsers)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersDataTable(dataSet.Tables[nameof (CurrentUsers)]));
          if (dataSet.Tables[nameof (Customer)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.CustomerDataTable(dataSet.Tables[nameof (Customer)]));
          if (dataSet.Tables[nameof (DatabaseIdentification)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationDataTable(dataSet.Tables[nameof (DatabaseIdentification)]));
          if (dataSet.Tables[nameof (DatabaseLocation)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationDataTable(dataSet.Tables[nameof (DatabaseLocation)]));
          if (dataSet.Tables[nameof (Datalogger)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DataloggerDataTable(dataSet.Tables[nameof (Datalogger)]));
          if (dataSet.Tables[nameof (DataLoggerentry)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryDataTable(dataSet.Tables[nameof (DataLoggerentry)]));
          if (dataSet.Tables[nameof (DBTranslator)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorDataTable(dataSet.Tables[nameof (DBTranslator)]));
          if (dataSet.Tables[nameof (DBTranslatorStruct)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructDataTable(dataSet.Tables[nameof (DBTranslatorStruct)]));
          if (dataSet.Tables[nameof (DisplayCode)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeDataTable(dataSet.Tables[nameof (DisplayCode)]));
          if (dataSet.Tables[nameof (EquipmentTypeDescription)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionDataTable(dataSet.Tables[nameof (EquipmentTypeDescription)]));
          if (dataSet.Tables[nameof (FactoryEquipment)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentDataTable(dataSet.Tables[nameof (FactoryEquipment)]));
          if (dataSet.Tables[nameof (GMM_User)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.GMM_UserDataTable(dataSet.Tables[nameof (GMM_User)]));
          if (dataSet.Tables[nameof (HardwareResources)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesDataTable(dataSet.Tables[nameof (HardwareResources)]));
          if (dataSet.Tables[nameof (HardwareType)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeDataTable(dataSet.Tables[nameof (HardwareType)]));
          if (dataSet.Tables[nameof (IncludeDef)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.IncludeDefDataTable(dataSet.Tables[nameof (IncludeDef)]));
          if (dataSet.Tables[nameof (LinkerTable)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.LinkerTableDataTable(dataSet.Tables[nameof (LinkerTable)]));
          if (dataSet.Tables[nameof (Manufacturer)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ManufacturerDataTable(dataSet.Tables[nameof (Manufacturer)]));
          if (dataSet.Tables[nameof (MapBase)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MapBaseDataTable(dataSet.Tables[nameof (MapBase)]));
          if (dataSet.Tables[nameof (MapDef)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MapDefDataTable(dataSet.Tables[nameof (MapDef)]));
          if (dataSet.Tables[nameof (MBusCode)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MBusCodeDataTable(dataSet.Tables[nameof (MBusCode)]));
          if (dataSet.Tables[nameof (MBusParameterTranslation)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationDataTable(dataSet.Tables[nameof (MBusParameterTranslation)]));
          if (dataSet.Tables[nameof (Menu)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MenuDataTable(dataSet.Tables[nameof (Menu)]));
          if (dataSet.Tables[nameof (Meter)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterDataTable(dataSet.Tables[nameof (Meter)]));
          if (dataSet.Tables[nameof (MeterData)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterDataDataTable(dataSet.Tables[nameof (MeterData)]));
          if (dataSet.Tables[nameof (MeterDataRequest)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestDataTable(dataSet.Tables[nameof (MeterDataRequest)]));
          if (dataSet.Tables[nameof (MeterHardware)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareDataTable(dataSet.Tables[nameof (MeterHardware)]));
          if (dataSet.Tables[nameof (MeterInfo)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoDataTable(dataSet.Tables[nameof (MeterInfo)]));
          if (dataSet.Tables[nameof (MeterPosition)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterPositionDataTable(dataSet.Tables[nameof (MeterPosition)]));
          if (dataSet.Tables[nameof (MeterType)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterTypeDataTable(dataSet.Tables[nameof (MeterType)]));
          if (dataSet.Tables[nameof (MTypeKapsel)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselDataTable(dataSet.Tables[nameof (MTypeKapsel)]));
          if (dataSet.Tables[nameof (MTypeMIDWaterMeter)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterDataTable(dataSet.Tables[nameof (MTypeMIDWaterMeter)]));
          if (dataSet.Tables[nameof (MTypeSaarius)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusDataTable(dataSet.Tables[nameof (MTypeSaarius)]));
          if (dataSet.Tables[nameof (MTypeTempSensor)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorDataTable(dataSet.Tables[nameof (MTypeTempSensor)]));
          if (dataSet.Tables[nameof (MTypeWaterMeter)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterDataTable(dataSet.Tables[nameof (MTypeWaterMeter)]));
          if (dataSet.Tables[nameof (MTypeZelsius)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusDataTable(dataSet.Tables[nameof (MTypeZelsius)]));
          if (dataSet.Tables[nameof (MTypeZelsiusModule)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleDataTable(dataSet.Tables[nameof (MTypeZelsiusModule)]));
          if (dataSet.Tables[nameof (NodeList)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.NodeListDataTable(dataSet.Tables[nameof (NodeList)]));
          if (dataSet.Tables[nameof (NodeReferences)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesDataTable(dataSet.Tables[nameof (NodeReferences)]));
          if (dataSet.Tables[nameof (Partlist)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PartlistDataTable(dataSet.Tables[nameof (Partlist)]));
          if (dataSet.Tables[nameof (PPS_Cache)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheDataTable(dataSet.Tables[nameof (PPS_Cache)]));
          if (dataSet.Tables[nameof (PPS_CacheClassNames)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesDataTable(dataSet.Tables[nameof (PPS_CacheClassNames)]));
          if (dataSet.Tables[nameof (PPS_CacheParmNames)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesDataTable(dataSet.Tables[nameof (PPS_CacheParmNames)]));
          if (dataSet.Tables[nameof (PPS_RW_WMZ_Mapper)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperDataTable(dataSet.Tables[nameof (PPS_RW_WMZ_Mapper)]));
          if (dataSet.Tables[nameof (PPS_STS_Reference)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceDataTable(dataSet.Tables[nameof (PPS_STS_Reference)]));
          if (dataSet.Tables[nameof (ProgFiles)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ProgFilesDataTable(dataSet.Tables[nameof (ProgFiles)]));
          if (dataSet.Tables[nameof (PValueIdent)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PValueIdentDataTable(dataSet.Tables[nameof (PValueIdent)]));
          if (dataSet.Tables[nameof (Repair)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.RepairDataTable(dataSet.Tables[nameof (Repair)]));
          if (dataSet.Tables[nameof (RepairErrorGroups)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsDataTable(dataSet.Tables[nameof (RepairErrorGroups)]));
          if (dataSet.Tables[nameof (RuntimeCode)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeDataTable(dataSet.Tables[nameof (RuntimeCode)]));
          if (dataSet.Tables[nameof (Test)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestDataTable(dataSet.Tables[nameof (Test)]));
          if (dataSet.Tables[nameof (TestbenchActualValues)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesDataTable(dataSet.Tables[nameof (TestbenchActualValues)]));
          if (dataSet.Tables[nameof (TestbenchNominalValues)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesDataTable(dataSet.Tables[nameof (TestbenchNominalValues)]));
          if (dataSet.Tables[nameof (TestEquipment)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentDataTable(dataSet.Tables[nameof (TestEquipment)]));
          if (dataSet.Tables[nameof (TestPointList)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestPointListDataTable(dataSet.Tables[nameof (TestPointList)]));
          if (dataSet.Tables[nameof (TestResistorTable)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableDataTable(dataSet.Tables[nameof (TestResistorTable)]));
          if (dataSet.Tables[nameof (TestResult)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestResultDataTable(dataSet.Tables[nameof (TestResult)]));
          if (dataSet.Tables[nameof (TestResultExtended)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedDataTable(dataSet.Tables[nameof (TestResultExtended)]));
          if (dataSet.Tables[nameof (TestType)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestTypeDataTable(dataSet.Tables[nameof (TestType)]));
          if (dataSet.Tables[nameof (TypeOverwriteParameters)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersDataTable(dataSet.Tables[nameof (TypeOverwriteParameters)]));
          if (dataSet.Tables[nameof (Units)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.UnitsDataTable(dataSet.Tables[nameof (Units)]));
          if (dataSet.Tables[nameof (WaterDensity)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WaterDensityDataTable(dataSet.Tables[nameof (WaterDensity)]));
          if (dataSet.Tables[nameof (WMApprovalData)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataDataTable(dataSet.Tables[nameof (WMApprovalData)]));
          if (dataSet.Tables[nameof (WMApprovals)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsDataTable(dataSet.Tables[nameof (WMApprovals)]));
          if (dataSet.Tables[nameof (WMClasses)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMClassesDataTable(dataSet.Tables[nameof (WMClasses)]));
          if (dataSet.Tables[nameof (WMCounterTypes)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesDataTable(dataSet.Tables[nameof (WMCounterTypes)]));
          if (dataSet.Tables[nameof (WMErrorOffset)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetDataTable(dataSet.Tables[nameof (WMErrorOffset)]));
          if (dataSet.Tables[nameof (WMMIDApprovalData)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataDataTable(dataSet.Tables[nameof (WMMIDApprovalData)]));
          if (dataSet.Tables[nameof (WMMIDErrorOffset)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetDataTable(dataSet.Tables[nameof (WMMIDErrorOffset)]));
          if (dataSet.Tables[nameof (WMMIDTestingTypes)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesDataTable(dataSet.Tables[nameof (WMMIDTestingTypes)]));
          if (dataSet.Tables[nameof (WMOrders)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMOrdersDataTable(dataSet.Tables[nameof (WMOrders)]));
          if (dataSet.Tables[nameof (WMRatios)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMRatiosDataTable(dataSet.Tables[nameof (WMRatios)]));
          if (dataSet.Tables[nameof (WMTestingTypes)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesDataTable(dataSet.Tables[nameof (WMTestingTypes)]));
          if (dataSet.Tables[nameof (ZRFunction)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionDataTable(dataSet.Tables[nameof (ZRFunction)]));
          if (dataSet.Tables[nameof (ZRGlobalID)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDDataTable(dataSet.Tables[nameof (ZRGlobalID)]));
          if (dataSet.Tables[nameof (ZrOrder)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZrOrderDataTable(dataSet.Tables[nameof (ZrOrder)]));
          if (dataSet.Tables[nameof (ZRParameter)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRParameterDataTable(dataSet.Tables[nameof (ZRParameter)]));
          if (dataSet.Tables[nameof (ZRTableNames)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesDataTable(dataSet.Tables[nameof (ZRTableNames)]));
          if (dataSet.Tables[nameof (NodeLayers)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.NodeLayersDataTable(dataSet.Tables[nameof (NodeLayers)]));
          if (dataSet.Tables[nameof (ExternalUserTable)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableDataTable(dataSet.Tables[nameof (ExternalUserTable)]));
          if (dataSet.Tables[nameof (DocumentGroups)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsDataTable(dataSet.Tables[nameof (DocumentGroups)]));
          if (dataSet.Tables[nameof (Documents)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DocumentsDataTable(dataSet.Tables[nameof (Documents)]));
          if (dataSet.Tables[nameof (ErrorDescription)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionDataTable(dataSet.Tables[nameof (ErrorDescription)]));
          if (dataSet.Tables[nameof (MultidataCache)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheDataTable(dataSet.Tables[nameof (MultidataCache)]));
          if (dataSet.Tables[nameof (WaveFlowDeviceModels)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsDataTable(dataSet.Tables[nameof (WaveFlowDeviceModels)]));
          if (dataSet.Tables[nameof (MinolDeviceDataRead)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadDataTable(dataSet.Tables[nameof (MinolDeviceDataRead)]));
          if (dataSet.Tables[nameof (MinolDeviceData)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataDataTable(dataSet.Tables[nameof (MinolDeviceData)]));
          if (dataSet.Tables[nameof (AutoboxCardConfiguration)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationDataTable(dataSet.Tables[nameof (AutoboxCardConfiguration)]));
          if (dataSet.Tables[nameof (AutoboxResistorCalibrationData)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataDataTable(dataSet.Tables[nameof (AutoboxResistorCalibrationData)]));
          if (dataSet.Tables[nameof (AutoboxConfiguration)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationDataTable(dataSet.Tables[nameof (AutoboxConfiguration)]));
          if (dataSet.Tables[nameof (AutoboxResistorPairs)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsDataTable(dataSet.Tables[nameof (AutoboxResistorPairs)]));
          if (dataSet.Tables[nameof (EnergyFactors)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsDataTable(dataSet.Tables[nameof (EnergyFactors)]));
          if (dataSet.Tables[nameof (MeterInfoProperties)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesDataTable(dataSet.Tables[nameof (MeterInfoProperties)]));
          if (dataSet.Tables[nameof (EquipmentCalibration)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationDataTable(dataSet.Tables[nameof (EquipmentCalibration)]));
          if (dataSet.Tables[nameof (TranslationRules)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesDataTable(dataSet.Tables[nameof (TranslationRules)]));
          if (dataSet.Tables[nameof (MeterValues)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesDataTable(dataSet.Tables[nameof (MeterValues)]));
          if (dataSet.Tables[nameof (MeterValuesAndSerial)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialDataTable(dataSet.Tables[nameof (MeterValuesAndSerial)]));
          if (dataSet.Tables[nameof (OnlineTranslation)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationDataTable(dataSet.Tables[nameof (OnlineTranslation)]));
          if (dataSet.Tables[nameof (S3_FunctionParameter)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterDataTable(dataSet.Tables[nameof (S3_FunctionParameter)]));
          if (dataSet.Tables[nameof (MTypeVMT_Electronic)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicDataTable(dataSet.Tables[nameof (MTypeVMT_Electronic)]));
          if (dataSet.Tables[nameof (MTypeVMT_Hydraulic)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicDataTable(dataSet.Tables[nameof (MTypeVMT_Hydraulic)]));
          if (dataSet.Tables[nameof (DataQs)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DataQsDataTable(dataSet.Tables[nameof (DataQs)]));
          if (dataSet.Tables[nameof (S3_Parameter)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterDataTable(dataSet.Tables[nameof (S3_Parameter)]));
          if (dataSet.Tables[nameof (SerialPortConfiguration)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationDataTable(dataSet.Tables[nameof (SerialPortConfiguration)]));
          if (dataSet.Tables[nameof (Filter)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.FilterDataTable(dataSet.Tables[nameof (Filter)]));
          if (dataSet.Tables[nameof (FilterValue)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.FilterValueDataTable(dataSet.Tables[nameof (FilterValue)]));
          if (dataSet.Tables[nameof (PostTranslationMapping)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingDataTable(dataSet.Tables[nameof (PostTranslationMapping)]));
          if (dataSet.Tables[nameof (PostTranslationRules)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesDataTable(dataSet.Tables[nameof (PostTranslationRules)]));
          if (dataSet.Tables[nameof (PTSensorParameters)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersDataTable(dataSet.Tables[nameof (PTSensorParameters)]));
          if (dataSet.Tables[nameof (SensorObservation)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SensorObservationDataTable(dataSet.Tables[nameof (SensorObservation)]));
          if (dataSet.Tables[nameof (TestbenchNominalValuesHistory)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryDataTable(dataSet.Tables[nameof (TestbenchNominalValuesHistory)]));
          if (dataSet.Tables[nameof (ZRFunctionCompiled)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledDataTable(dataSet.Tables[nameof (ZRFunctionCompiled)]));
          if (dataSet.Tables[nameof (FactoryEquipmentPartlist)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistDataTable(dataSet.Tables[nameof (FactoryEquipmentPartlist)]));
          if (dataSet.Tables[nameof (EquipmentPartlistCreation)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationDataTable(dataSet.Tables[nameof (EquipmentPartlistCreation)]));
          if (dataSet.Tables[nameof (PTCardChannelCalibration)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationDataTable(dataSet.Tables[nameof (PTCardChannelCalibration)]));
          if (dataSet.Tables[nameof (PTSensorCalibration)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationDataTable(dataSet.Tables[nameof (PTSensorCalibration)]));
          if (dataSet.Tables[nameof (EtalonCalibration)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationDataTable(dataSet.Tables[nameof (EtalonCalibration)]));
          if (dataSet.Tables[nameof (UserPermissions)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsDataTable(dataSet.Tables[nameof (UserPermissions)]));
          if (dataSet.Tables[nameof (MinomatList)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinomatListDataTable(dataSet.Tables[nameof (MinomatList)]));
          if (dataSet.Tables[nameof (InstallationChangeLog)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogDataTable(dataSet.Tables[nameof (InstallationChangeLog)]));
          if (dataSet.Tables[nameof (Installations)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.InstallationsDataTable(dataSet.Tables[nameof (Installations)]));
          if (dataSet.Tables[nameof (InstallationUsers)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersDataTable(dataSet.Tables[nameof (InstallationUsers)]));
          if (dataSet.Tables[nameof (ChangeableParameters)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersDataTable(dataSet.Tables[nameof (ChangeableParameters)]));
          if (dataSet.Tables[nameof (GmmImages)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.GmmImagesDataTable(dataSet.Tables[nameof (GmmImages)]));
          if (dataSet.Tables[nameof (ConnectionSettings)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsDataTable(dataSet.Tables[nameof (ConnectionSettings)]));
          if (dataSet.Tables[nameof (ConnectionItems)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsDataTable(dataSet.Tables[nameof (ConnectionItems)]));
          if (dataSet.Tables[nameof (ConnectionProfiles)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesDataTable(dataSet.Tables[nameof (ConnectionProfiles)]));
          if (dataSet.Tables[nameof (ServiceTaskResult)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultDataTable(dataSet.Tables[nameof (ServiceTaskResult)]));
          if (dataSet.Tables[nameof (MeterMSS)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterMSSDataTable(dataSet.Tables[nameof (MeterMSS)]));
          if (dataSet.Tables[nameof (TestbenchFlowSettings)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsDataTable(dataSet.Tables[nameof (TestbenchFlowSettings)]));
          if (dataSet.Tables[nameof (MinomatConnectionLogs)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsDataTable(dataSet.Tables[nameof (MinomatConnectionLogs)]));
          if (dataSet.Tables[nameof (MinomatDataLogs)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsDataTable(dataSet.Tables[nameof (MinomatDataLogs)]));
          if (dataSet.Tables[nameof (MeterChanges)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterChangesDataTable(dataSet.Tables[nameof (MeterChanges)]));
          if (dataSet.Tables[nameof (TransducerPallet)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletDataTable(dataSet.Tables[nameof (TransducerPallet)]));
          if (dataSet.Tables[nameof (TransducerPalletState)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateDataTable(dataSet.Tables[nameof (TransducerPalletState)]));
          if (dataSet.Tables[nameof (TransducerPalletType)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeDataTable(dataSet.Tables[nameof (TransducerPalletType)]));
          if (dataSet.Tables[nameof (ConnectionItemParameters)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersDataTable(dataSet.Tables[nameof (ConnectionItemParameters)]));
          if (dataSet.Tables[nameof (ConnectionProfileParameters)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersDataTable(dataSet.Tables[nameof (ConnectionProfileParameters)]));
          if (dataSet.Tables[nameof (ConnectionProfileFilters)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersDataTable(dataSet.Tables[nameof (ConnectionProfileFilters)]));
          if (dataSet.Tables[nameof (SoftwareUsers)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersDataTable(dataSet.Tables[nameof (SoftwareUsers)]));
          if (dataSet.Tables[nameof (NotificationRecord)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordDataTable(dataSet.Tables[nameof (NotificationRecord)]));
          if (dataSet.Tables[nameof (SAP_Cache)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheDataTable(dataSet.Tables[nameof (SAP_Cache)]));
          if (dataSet.Tables[nameof (SAP_ClassUsing)] != null)
            base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingDataTable(dataSet.Tables[nameof (SAP_ClassUsing)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.InitVars();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationDataTable EnumTranslation
    {
      get => this.tableEnumTranslation;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicDataTable MTypeElectronic
    {
      get => this.tableMTypeElectronic;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.BlockNamesDataTable BlockNames
    {
      get => this.tableBlockNames;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.CodeDataTable Code => this.tableCode;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeDataTable ControllerCode
    {
      get => this.tableControllerCode;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersDataTable CurrentUsers
    {
      get => this.tableCurrentUsers;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.CustomerDataTable Customer => this.tableCustomer;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationDataTable DatabaseIdentification
    {
      get => this.tableDatabaseIdentification;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationDataTable DatabaseLocation
    {
      get => this.tableDatabaseLocation;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.DataloggerDataTable Datalogger
    {
      get => this.tableDatalogger;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryDataTable DataLoggerentry
    {
      get => this.tableDataLoggerentry;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorDataTable DBTranslator
    {
      get => this.tableDBTranslator;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructDataTable DBTranslatorStruct
    {
      get => this.tableDBTranslatorStruct;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeDataTable DisplayCode
    {
      get => this.tableDisplayCode;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionDataTable EquipmentTypeDescription
    {
      get => this.tableEquipmentTypeDescription;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentDataTable FactoryEquipment
    {
      get => this.tableFactoryEquipment;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.GMM_UserDataTable GMM_User => this.tableGMM_User;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesDataTable HardwareResources
    {
      get => this.tableHardwareResources;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeDataTable HardwareType
    {
      get => this.tableHardwareType;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.IncludeDefDataTable IncludeDef
    {
      get => this.tableIncludeDef;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.LinkerTableDataTable LinkerTable
    {
      get => this.tableLinkerTable;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ManufacturerDataTable Manufacturer
    {
      get => this.tableManufacturer;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MapBaseDataTable MapBase => this.tableMapBase;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MapDefDataTable MapDef => this.tableMapDef;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MBusCodeDataTable MBusCode => this.tableMBusCode;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationDataTable MBusParameterTranslation
    {
      get => this.tableMBusParameterTranslation;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MenuDataTable Menu => this.tableMenu;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MeterDataTable Meter => this.tableMeter;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MeterDataDataTable MeterData => this.tableMeterData;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestDataTable MeterDataRequest
    {
      get => this.tableMeterDataRequest;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareDataTable MeterHardware
    {
      get => this.tableMeterHardware;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoDataTable MeterInfo => this.tableMeterInfo;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MeterPositionDataTable MeterPosition
    {
      get => this.tableMeterPosition;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MeterTypeDataTable MeterType => this.tableMeterType;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselDataTable MTypeKapsel
    {
      get => this.tableMTypeKapsel;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterDataTable MTypeMIDWaterMeter
    {
      get => this.tableMTypeMIDWaterMeter;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusDataTable MTypeSaarius
    {
      get => this.tableMTypeSaarius;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorDataTable MTypeTempSensor
    {
      get => this.tableMTypeTempSensor;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterDataTable MTypeWaterMeter
    {
      get => this.tableMTypeWaterMeter;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusDataTable MTypeZelsius
    {
      get => this.tableMTypeZelsius;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleDataTable MTypeZelsiusModule
    {
      get => this.tableMTypeZelsiusModule;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.NodeListDataTable NodeList => this.tableNodeList;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesDataTable NodeReferences
    {
      get => this.tableNodeReferences;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.PartlistDataTable Partlist => this.tablePartlist;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheDataTable PPS_Cache => this.tablePPS_Cache;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesDataTable PPS_CacheClassNames
    {
      get => this.tablePPS_CacheClassNames;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesDataTable PPS_CacheParmNames
    {
      get => this.tablePPS_CacheParmNames;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperDataTable PPS_RW_WMZ_Mapper
    {
      get => this.tablePPS_RW_WMZ_Mapper;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceDataTable PPS_STS_Reference
    {
      get => this.tablePPS_STS_Reference;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ProgFilesDataTable ProgFiles => this.tableProgFiles;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.PValueIdentDataTable PValueIdent
    {
      get => this.tablePValueIdent;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.RepairDataTable Repair => this.tableRepair;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsDataTable RepairErrorGroups
    {
      get => this.tableRepairErrorGroups;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeDataTable RuntimeCode
    {
      get => this.tableRuntimeCode;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TestDataTable Test => this.tableTest;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesDataTable TestbenchActualValues
    {
      get => this.tableTestbenchActualValues;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesDataTable TestbenchNominalValues
    {
      get => this.tableTestbenchNominalValues;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentDataTable TestEquipment
    {
      get => this.tableTestEquipment;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TestPointListDataTable TestPointList
    {
      get => this.tableTestPointList;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableDataTable TestResistorTable
    {
      get => this.tableTestResistorTable;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TestResultDataTable TestResult
    {
      get => this.tableTestResult;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedDataTable TestResultExtended
    {
      get => this.tableTestResultExtended;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TestTypeDataTable TestType => this.tableTestType;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersDataTable TypeOverwriteParameters
    {
      get => this.tableTypeOverwriteParameters;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.UnitsDataTable Units => this.tableUnits;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WaterDensityDataTable WaterDensity
    {
      get => this.tableWaterDensity;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataDataTable WMApprovalData
    {
      get => this.tableWMApprovalData;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsDataTable WMApprovals
    {
      get => this.tableWMApprovals;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WMClassesDataTable WMClasses => this.tableWMClasses;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesDataTable WMCounterTypes
    {
      get => this.tableWMCounterTypes;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetDataTable WMErrorOffset
    {
      get => this.tableWMErrorOffset;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataDataTable WMMIDApprovalData
    {
      get => this.tableWMMIDApprovalData;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetDataTable WMMIDErrorOffset
    {
      get => this.tableWMMIDErrorOffset;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesDataTable WMMIDTestingTypes
    {
      get => this.tableWMMIDTestingTypes;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WMOrdersDataTable WMOrders => this.tableWMOrders;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WMRatiosDataTable WMRatios => this.tableWMRatios;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesDataTable WMTestingTypes
    {
      get => this.tableWMTestingTypes;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionDataTable ZRFunction
    {
      get => this.tableZRFunction;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDDataTable ZRGlobalID
    {
      get => this.tableZRGlobalID;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ZrOrderDataTable ZrOrder => this.tableZrOrder;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ZRParameterDataTable ZRParameter
    {
      get => this.tableZRParameter;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesDataTable ZRTableNames
    {
      get => this.tableZRTableNames;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.NodeLayersDataTable NodeLayers
    {
      get => this.tableNodeLayers;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableDataTable ExternalUserTable
    {
      get => this.tableExternalUserTable;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsDataTable DocumentGroups
    {
      get => this.tableDocumentGroups;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.DocumentsDataTable Documents => this.tableDocuments;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionDataTable ErrorDescription
    {
      get => this.tableErrorDescription;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheDataTable MultidataCache
    {
      get => this.tableMultidataCache;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsDataTable WaveFlowDeviceModels
    {
      get => this.tableWaveFlowDeviceModels;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadDataTable MinolDeviceDataRead
    {
      get => this.tableMinolDeviceDataRead;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataDataTable MinolDeviceData
    {
      get => this.tableMinolDeviceData;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationDataTable AutoboxCardConfiguration
    {
      get => this.tableAutoboxCardConfiguration;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataDataTable AutoboxResistorCalibrationData
    {
      get => this.tableAutoboxResistorCalibrationData;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationDataTable AutoboxConfiguration
    {
      get => this.tableAutoboxConfiguration;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsDataTable AutoboxResistorPairs
    {
      get => this.tableAutoboxResistorPairs;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsDataTable EnergyFactors
    {
      get => this.tableEnergyFactors;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesDataTable MeterInfoProperties
    {
      get => this.tableMeterInfoProperties;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationDataTable EquipmentCalibration
    {
      get => this.tableEquipmentCalibration;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesDataTable TranslationRules
    {
      get => this.tableTranslationRules;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MeterValuesDataTable MeterValues
    {
      get => this.tableMeterValues;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialDataTable MeterValuesAndSerial
    {
      get => this.tableMeterValuesAndSerial;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationDataTable OnlineTranslation
    {
      get => this.tableOnlineTranslation;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterDataTable S3_FunctionParameter
    {
      get => this.tableS3_FunctionParameter;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicDataTable MTypeVMT_Electronic
    {
      get => this.tableMTypeVMT_Electronic;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicDataTable MTypeVMT_Hydraulic
    {
      get => this.tableMTypeVMT_Hydraulic;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.DataQsDataTable DataQs => this.tableDataQs;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterDataTable S3_Parameter
    {
      get => this.tableS3_Parameter;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationDataTable SerialPortConfiguration
    {
      get => this.tableSerialPortConfiguration;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.FilterDataTable Filter => this.tableFilter;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.FilterValueDataTable FilterValue
    {
      get => this.tableFilterValue;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingDataTable PostTranslationMapping
    {
      get => this.tablePostTranslationMapping;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesDataTable PostTranslationRules
    {
      get => this.tablePostTranslationRules;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersDataTable PTSensorParameters
    {
      get => this.tablePTSensorParameters;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.SensorObservationDataTable SensorObservation
    {
      get => this.tableSensorObservation;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryDataTable TestbenchNominalValuesHistory
    {
      get => this.tableTestbenchNominalValuesHistory;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledDataTable ZRFunctionCompiled
    {
      get => this.tableZRFunctionCompiled;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistDataTable FactoryEquipmentPartlist
    {
      get => this.tableFactoryEquipmentPartlist;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationDataTable EquipmentPartlistCreation
    {
      get => this.tableEquipmentPartlistCreation;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationDataTable PTCardChannelCalibration
    {
      get => this.tablePTCardChannelCalibration;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationDataTable PTSensorCalibration
    {
      get => this.tablePTSensorCalibration;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationDataTable EtalonCalibration
    {
      get => this.tableEtalonCalibration;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsDataTable UserPermissions
    {
      get => this.tableUserPermissions;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MinomatListDataTable MinomatList
    {
      get => this.tableMinomatList;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogDataTable InstallationChangeLog
    {
      get => this.tableInstallationChangeLog;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.InstallationsDataTable Installations
    {
      get => this.tableInstallations;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersDataTable InstallationUsers
    {
      get => this.tableInstallationUsers;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersDataTable ChangeableParameters
    {
      get => this.tableChangeableParameters;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.GmmImagesDataTable GmmImages => this.tableGmmImages;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsDataTable ConnectionSettings
    {
      get => this.tableConnectionSettings;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsDataTable ConnectionItems
    {
      get => this.tableConnectionItems;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesDataTable ConnectionProfiles
    {
      get => this.tableConnectionProfiles;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultDataTable ServiceTaskResult
    {
      get => this.tableServiceTaskResult;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MeterMSSDataTable MeterMSS => this.tableMeterMSS;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsDataTable TestbenchFlowSettings
    {
      get => this.tableTestbenchFlowSettings;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsDataTable MinomatConnectionLogs
    {
      get => this.tableMinomatConnectionLogs;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsDataTable MinomatDataLogs
    {
      get => this.tableMinomatDataLogs;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.MeterChangesDataTable MeterChanges
    {
      get => this.tableMeterChanges;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletDataTable TransducerPallet
    {
      get => this.tableTransducerPallet;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateDataTable TransducerPalletState
    {
      get => this.tableTransducerPalletState;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeDataTable TransducerPalletType
    {
      get => this.tableTransducerPalletType;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersDataTable ConnectionItemParameters
    {
      get => this.tableConnectionItemParameters;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersDataTable ConnectionProfileParameters
    {
      get => this.tableConnectionProfileParameters;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersDataTable ConnectionProfileFilters
    {
      get => this.tableConnectionProfileFilters;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersDataTable SoftwareUsers
    {
      get => this.tableSoftwareUsers;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordDataTable NotificationRecord
    {
      get => this.tableNotificationRecord;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheDataTable SAP_Cache => this.tableSAP_Cache;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingDataTable SAP_ClassUsing
    {
      get => this.tableSAP_ClassUsing;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get => this._schemaSerializationMode;
      set => this._schemaSerializationMode = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataTableCollection Tables => base.Tables;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataRelationCollection Relations => base.Relations;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void InitializeDerivedDataSet()
    {
      this.BeginInit();
      this.InitClass();
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public override DataSet Clone()
    {
      ZR_ClassLibrary.Schema_Access.Schema schema = (ZR_ClassLibrary.Schema_Access.Schema) base.Clone();
      schema.InitVars();
      schema.SchemaSerializationMode = this.SchemaSerializationMode;
      return (DataSet) schema;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeTables() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeRelations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
      if (this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
      {
        this.Reset();
        DataSet dataSet = new DataSet();
        int num = (int) dataSet.ReadXml(reader);
        if (dataSet.Tables["EnumTranslation"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationDataTable(dataSet.Tables["EnumTranslation"]));
        if (dataSet.Tables["MTypeElectronic"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicDataTable(dataSet.Tables["MTypeElectronic"]));
        if (dataSet.Tables["BlockNames"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.BlockNamesDataTable(dataSet.Tables["BlockNames"]));
        if (dataSet.Tables["Code"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.CodeDataTable(dataSet.Tables["Code"]));
        if (dataSet.Tables["ControllerCode"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeDataTable(dataSet.Tables["ControllerCode"]));
        if (dataSet.Tables["CurrentUsers"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersDataTable(dataSet.Tables["CurrentUsers"]));
        if (dataSet.Tables["Customer"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.CustomerDataTable(dataSet.Tables["Customer"]));
        if (dataSet.Tables["DatabaseIdentification"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationDataTable(dataSet.Tables["DatabaseIdentification"]));
        if (dataSet.Tables["DatabaseLocation"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationDataTable(dataSet.Tables["DatabaseLocation"]));
        if (dataSet.Tables["Datalogger"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DataloggerDataTable(dataSet.Tables["Datalogger"]));
        if (dataSet.Tables["DataLoggerentry"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryDataTable(dataSet.Tables["DataLoggerentry"]));
        if (dataSet.Tables["DBTranslator"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorDataTable(dataSet.Tables["DBTranslator"]));
        if (dataSet.Tables["DBTranslatorStruct"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructDataTable(dataSet.Tables["DBTranslatorStruct"]));
        if (dataSet.Tables["DisplayCode"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeDataTable(dataSet.Tables["DisplayCode"]));
        if (dataSet.Tables["EquipmentTypeDescription"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionDataTable(dataSet.Tables["EquipmentTypeDescription"]));
        if (dataSet.Tables["FactoryEquipment"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentDataTable(dataSet.Tables["FactoryEquipment"]));
        if (dataSet.Tables["GMM_User"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.GMM_UserDataTable(dataSet.Tables["GMM_User"]));
        if (dataSet.Tables["HardwareResources"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesDataTable(dataSet.Tables["HardwareResources"]));
        if (dataSet.Tables["HardwareType"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeDataTable(dataSet.Tables["HardwareType"]));
        if (dataSet.Tables["IncludeDef"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.IncludeDefDataTable(dataSet.Tables["IncludeDef"]));
        if (dataSet.Tables["LinkerTable"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.LinkerTableDataTable(dataSet.Tables["LinkerTable"]));
        if (dataSet.Tables["Manufacturer"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ManufacturerDataTable(dataSet.Tables["Manufacturer"]));
        if (dataSet.Tables["MapBase"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MapBaseDataTable(dataSet.Tables["MapBase"]));
        if (dataSet.Tables["MapDef"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MapDefDataTable(dataSet.Tables["MapDef"]));
        if (dataSet.Tables["MBusCode"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MBusCodeDataTable(dataSet.Tables["MBusCode"]));
        if (dataSet.Tables["MBusParameterTranslation"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationDataTable(dataSet.Tables["MBusParameterTranslation"]));
        if (dataSet.Tables["Menu"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MenuDataTable(dataSet.Tables["Menu"]));
        if (dataSet.Tables["Meter"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterDataTable(dataSet.Tables["Meter"]));
        if (dataSet.Tables["MeterData"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterDataDataTable(dataSet.Tables["MeterData"]));
        if (dataSet.Tables["MeterDataRequest"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestDataTable(dataSet.Tables["MeterDataRequest"]));
        if (dataSet.Tables["MeterHardware"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareDataTable(dataSet.Tables["MeterHardware"]));
        if (dataSet.Tables["MeterInfo"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoDataTable(dataSet.Tables["MeterInfo"]));
        if (dataSet.Tables["MeterPosition"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterPositionDataTable(dataSet.Tables["MeterPosition"]));
        if (dataSet.Tables["MeterType"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterTypeDataTable(dataSet.Tables["MeterType"]));
        if (dataSet.Tables["MTypeKapsel"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselDataTable(dataSet.Tables["MTypeKapsel"]));
        if (dataSet.Tables["MTypeMIDWaterMeter"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterDataTable(dataSet.Tables["MTypeMIDWaterMeter"]));
        if (dataSet.Tables["MTypeSaarius"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusDataTable(dataSet.Tables["MTypeSaarius"]));
        if (dataSet.Tables["MTypeTempSensor"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorDataTable(dataSet.Tables["MTypeTempSensor"]));
        if (dataSet.Tables["MTypeWaterMeter"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterDataTable(dataSet.Tables["MTypeWaterMeter"]));
        if (dataSet.Tables["MTypeZelsius"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusDataTable(dataSet.Tables["MTypeZelsius"]));
        if (dataSet.Tables["MTypeZelsiusModule"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleDataTable(dataSet.Tables["MTypeZelsiusModule"]));
        if (dataSet.Tables["NodeList"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.NodeListDataTable(dataSet.Tables["NodeList"]));
        if (dataSet.Tables["NodeReferences"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesDataTable(dataSet.Tables["NodeReferences"]));
        if (dataSet.Tables["Partlist"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PartlistDataTable(dataSet.Tables["Partlist"]));
        if (dataSet.Tables["PPS_Cache"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheDataTable(dataSet.Tables["PPS_Cache"]));
        if (dataSet.Tables["PPS_CacheClassNames"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesDataTable(dataSet.Tables["PPS_CacheClassNames"]));
        if (dataSet.Tables["PPS_CacheParmNames"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesDataTable(dataSet.Tables["PPS_CacheParmNames"]));
        if (dataSet.Tables["PPS_RW_WMZ_Mapper"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperDataTable(dataSet.Tables["PPS_RW_WMZ_Mapper"]));
        if (dataSet.Tables["PPS_STS_Reference"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceDataTable(dataSet.Tables["PPS_STS_Reference"]));
        if (dataSet.Tables["ProgFiles"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ProgFilesDataTable(dataSet.Tables["ProgFiles"]));
        if (dataSet.Tables["PValueIdent"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PValueIdentDataTable(dataSet.Tables["PValueIdent"]));
        if (dataSet.Tables["Repair"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.RepairDataTable(dataSet.Tables["Repair"]));
        if (dataSet.Tables["RepairErrorGroups"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsDataTable(dataSet.Tables["RepairErrorGroups"]));
        if (dataSet.Tables["RuntimeCode"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeDataTable(dataSet.Tables["RuntimeCode"]));
        if (dataSet.Tables["Test"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestDataTable(dataSet.Tables["Test"]));
        if (dataSet.Tables["TestbenchActualValues"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesDataTable(dataSet.Tables["TestbenchActualValues"]));
        if (dataSet.Tables["TestbenchNominalValues"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesDataTable(dataSet.Tables["TestbenchNominalValues"]));
        if (dataSet.Tables["TestEquipment"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentDataTable(dataSet.Tables["TestEquipment"]));
        if (dataSet.Tables["TestPointList"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestPointListDataTable(dataSet.Tables["TestPointList"]));
        if (dataSet.Tables["TestResistorTable"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableDataTable(dataSet.Tables["TestResistorTable"]));
        if (dataSet.Tables["TestResult"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestResultDataTable(dataSet.Tables["TestResult"]));
        if (dataSet.Tables["TestResultExtended"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedDataTable(dataSet.Tables["TestResultExtended"]));
        if (dataSet.Tables["TestType"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestTypeDataTable(dataSet.Tables["TestType"]));
        if (dataSet.Tables["TypeOverwriteParameters"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersDataTable(dataSet.Tables["TypeOverwriteParameters"]));
        if (dataSet.Tables["Units"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.UnitsDataTable(dataSet.Tables["Units"]));
        if (dataSet.Tables["WaterDensity"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WaterDensityDataTable(dataSet.Tables["WaterDensity"]));
        if (dataSet.Tables["WMApprovalData"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataDataTable(dataSet.Tables["WMApprovalData"]));
        if (dataSet.Tables["WMApprovals"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsDataTable(dataSet.Tables["WMApprovals"]));
        if (dataSet.Tables["WMClasses"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMClassesDataTable(dataSet.Tables["WMClasses"]));
        if (dataSet.Tables["WMCounterTypes"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesDataTable(dataSet.Tables["WMCounterTypes"]));
        if (dataSet.Tables["WMErrorOffset"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetDataTable(dataSet.Tables["WMErrorOffset"]));
        if (dataSet.Tables["WMMIDApprovalData"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataDataTable(dataSet.Tables["WMMIDApprovalData"]));
        if (dataSet.Tables["WMMIDErrorOffset"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetDataTable(dataSet.Tables["WMMIDErrorOffset"]));
        if (dataSet.Tables["WMMIDTestingTypes"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesDataTable(dataSet.Tables["WMMIDTestingTypes"]));
        if (dataSet.Tables["WMOrders"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMOrdersDataTable(dataSet.Tables["WMOrders"]));
        if (dataSet.Tables["WMRatios"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMRatiosDataTable(dataSet.Tables["WMRatios"]));
        if (dataSet.Tables["WMTestingTypes"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesDataTable(dataSet.Tables["WMTestingTypes"]));
        if (dataSet.Tables["ZRFunction"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionDataTable(dataSet.Tables["ZRFunction"]));
        if (dataSet.Tables["ZRGlobalID"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDDataTable(dataSet.Tables["ZRGlobalID"]));
        if (dataSet.Tables["ZrOrder"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZrOrderDataTable(dataSet.Tables["ZrOrder"]));
        if (dataSet.Tables["ZRParameter"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRParameterDataTable(dataSet.Tables["ZRParameter"]));
        if (dataSet.Tables["ZRTableNames"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesDataTable(dataSet.Tables["ZRTableNames"]));
        if (dataSet.Tables["NodeLayers"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.NodeLayersDataTable(dataSet.Tables["NodeLayers"]));
        if (dataSet.Tables["ExternalUserTable"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableDataTable(dataSet.Tables["ExternalUserTable"]));
        if (dataSet.Tables["DocumentGroups"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsDataTable(dataSet.Tables["DocumentGroups"]));
        if (dataSet.Tables["Documents"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DocumentsDataTable(dataSet.Tables["Documents"]));
        if (dataSet.Tables["ErrorDescription"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionDataTable(dataSet.Tables["ErrorDescription"]));
        if (dataSet.Tables["MultidataCache"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheDataTable(dataSet.Tables["MultidataCache"]));
        if (dataSet.Tables["WaveFlowDeviceModels"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsDataTable(dataSet.Tables["WaveFlowDeviceModels"]));
        if (dataSet.Tables["MinolDeviceDataRead"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadDataTable(dataSet.Tables["MinolDeviceDataRead"]));
        if (dataSet.Tables["MinolDeviceData"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataDataTable(dataSet.Tables["MinolDeviceData"]));
        if (dataSet.Tables["AutoboxCardConfiguration"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationDataTable(dataSet.Tables["AutoboxCardConfiguration"]));
        if (dataSet.Tables["AutoboxResistorCalibrationData"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataDataTable(dataSet.Tables["AutoboxResistorCalibrationData"]));
        if (dataSet.Tables["AutoboxConfiguration"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationDataTable(dataSet.Tables["AutoboxConfiguration"]));
        if (dataSet.Tables["AutoboxResistorPairs"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsDataTable(dataSet.Tables["AutoboxResistorPairs"]));
        if (dataSet.Tables["EnergyFactors"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsDataTable(dataSet.Tables["EnergyFactors"]));
        if (dataSet.Tables["MeterInfoProperties"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesDataTable(dataSet.Tables["MeterInfoProperties"]));
        if (dataSet.Tables["EquipmentCalibration"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationDataTable(dataSet.Tables["EquipmentCalibration"]));
        if (dataSet.Tables["TranslationRules"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesDataTable(dataSet.Tables["TranslationRules"]));
        if (dataSet.Tables["MeterValues"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesDataTable(dataSet.Tables["MeterValues"]));
        if (dataSet.Tables["MeterValuesAndSerial"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialDataTable(dataSet.Tables["MeterValuesAndSerial"]));
        if (dataSet.Tables["OnlineTranslation"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationDataTable(dataSet.Tables["OnlineTranslation"]));
        if (dataSet.Tables["S3_FunctionParameter"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterDataTable(dataSet.Tables["S3_FunctionParameter"]));
        if (dataSet.Tables["MTypeVMT_Electronic"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicDataTable(dataSet.Tables["MTypeVMT_Electronic"]));
        if (dataSet.Tables["MTypeVMT_Hydraulic"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicDataTable(dataSet.Tables["MTypeVMT_Hydraulic"]));
        if (dataSet.Tables["DataQs"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DataQsDataTable(dataSet.Tables["DataQs"]));
        if (dataSet.Tables["S3_Parameter"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterDataTable(dataSet.Tables["S3_Parameter"]));
        if (dataSet.Tables["SerialPortConfiguration"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationDataTable(dataSet.Tables["SerialPortConfiguration"]));
        if (dataSet.Tables["Filter"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.FilterDataTable(dataSet.Tables["Filter"]));
        if (dataSet.Tables["FilterValue"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.FilterValueDataTable(dataSet.Tables["FilterValue"]));
        if (dataSet.Tables["PostTranslationMapping"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingDataTable(dataSet.Tables["PostTranslationMapping"]));
        if (dataSet.Tables["PostTranslationRules"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesDataTable(dataSet.Tables["PostTranslationRules"]));
        if (dataSet.Tables["PTSensorParameters"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersDataTable(dataSet.Tables["PTSensorParameters"]));
        if (dataSet.Tables["SensorObservation"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SensorObservationDataTable(dataSet.Tables["SensorObservation"]));
        if (dataSet.Tables["TestbenchNominalValuesHistory"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryDataTable(dataSet.Tables["TestbenchNominalValuesHistory"]));
        if (dataSet.Tables["ZRFunctionCompiled"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledDataTable(dataSet.Tables["ZRFunctionCompiled"]));
        if (dataSet.Tables["FactoryEquipmentPartlist"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistDataTable(dataSet.Tables["FactoryEquipmentPartlist"]));
        if (dataSet.Tables["EquipmentPartlistCreation"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationDataTable(dataSet.Tables["EquipmentPartlistCreation"]));
        if (dataSet.Tables["PTCardChannelCalibration"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationDataTable(dataSet.Tables["PTCardChannelCalibration"]));
        if (dataSet.Tables["PTSensorCalibration"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationDataTable(dataSet.Tables["PTSensorCalibration"]));
        if (dataSet.Tables["EtalonCalibration"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationDataTable(dataSet.Tables["EtalonCalibration"]));
        if (dataSet.Tables["UserPermissions"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsDataTable(dataSet.Tables["UserPermissions"]));
        if (dataSet.Tables["MinomatList"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinomatListDataTable(dataSet.Tables["MinomatList"]));
        if (dataSet.Tables["InstallationChangeLog"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogDataTable(dataSet.Tables["InstallationChangeLog"]));
        if (dataSet.Tables["Installations"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.InstallationsDataTable(dataSet.Tables["Installations"]));
        if (dataSet.Tables["InstallationUsers"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersDataTable(dataSet.Tables["InstallationUsers"]));
        if (dataSet.Tables["ChangeableParameters"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersDataTable(dataSet.Tables["ChangeableParameters"]));
        if (dataSet.Tables["GmmImages"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.GmmImagesDataTable(dataSet.Tables["GmmImages"]));
        if (dataSet.Tables["ConnectionSettings"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsDataTable(dataSet.Tables["ConnectionSettings"]));
        if (dataSet.Tables["ConnectionItems"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsDataTable(dataSet.Tables["ConnectionItems"]));
        if (dataSet.Tables["ConnectionProfiles"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesDataTable(dataSet.Tables["ConnectionProfiles"]));
        if (dataSet.Tables["ServiceTaskResult"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultDataTable(dataSet.Tables["ServiceTaskResult"]));
        if (dataSet.Tables["MeterMSS"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterMSSDataTable(dataSet.Tables["MeterMSS"]));
        if (dataSet.Tables["TestbenchFlowSettings"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsDataTable(dataSet.Tables["TestbenchFlowSettings"]));
        if (dataSet.Tables["MinomatConnectionLogs"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsDataTable(dataSet.Tables["MinomatConnectionLogs"]));
        if (dataSet.Tables["MinomatDataLogs"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsDataTable(dataSet.Tables["MinomatDataLogs"]));
        if (dataSet.Tables["MeterChanges"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterChangesDataTable(dataSet.Tables["MeterChanges"]));
        if (dataSet.Tables["TransducerPallet"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletDataTable(dataSet.Tables["TransducerPallet"]));
        if (dataSet.Tables["TransducerPalletState"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateDataTable(dataSet.Tables["TransducerPalletState"]));
        if (dataSet.Tables["TransducerPalletType"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeDataTable(dataSet.Tables["TransducerPalletType"]));
        if (dataSet.Tables["ConnectionItemParameters"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersDataTable(dataSet.Tables["ConnectionItemParameters"]));
        if (dataSet.Tables["ConnectionProfileParameters"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersDataTable(dataSet.Tables["ConnectionProfileParameters"]));
        if (dataSet.Tables["ConnectionProfileFilters"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersDataTable(dataSet.Tables["ConnectionProfileFilters"]));
        if (dataSet.Tables["SoftwareUsers"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersDataTable(dataSet.Tables["SoftwareUsers"]));
        if (dataSet.Tables["NotificationRecord"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordDataTable(dataSet.Tables["NotificationRecord"]));
        if (dataSet.Tables["SAP_Cache"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheDataTable(dataSet.Tables["SAP_Cache"]));
        if (dataSet.Tables["SAP_ClassUsing"] != null)
          base.Tables.Add((DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingDataTable(dataSet.Tables["SAP_ClassUsing"]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.InitVars();
      }
      else
      {
        int num = (int) this.ReadXml(reader);
        this.InitVars();
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override XmlSchema GetSchemaSerializable()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars() => this.InitVars(true);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars(bool initTable)
    {
      this.tableEnumTranslation = (ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationDataTable) base.Tables["EnumTranslation"];
      if (initTable && this.tableEnumTranslation != null)
        this.tableEnumTranslation.InitVars();
      this.tableMTypeElectronic = (ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicDataTable) base.Tables["MTypeElectronic"];
      if (initTable && this.tableMTypeElectronic != null)
        this.tableMTypeElectronic.InitVars();
      this.tableBlockNames = (ZR_ClassLibrary.Schema_Access.Schema.BlockNamesDataTable) base.Tables["BlockNames"];
      if (initTable && this.tableBlockNames != null)
        this.tableBlockNames.InitVars();
      this.tableCode = (ZR_ClassLibrary.Schema_Access.Schema.CodeDataTable) base.Tables["Code"];
      if (initTable && this.tableCode != null)
        this.tableCode.InitVars();
      this.tableControllerCode = (ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeDataTable) base.Tables["ControllerCode"];
      if (initTable && this.tableControllerCode != null)
        this.tableControllerCode.InitVars();
      this.tableCurrentUsers = (ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersDataTable) base.Tables["CurrentUsers"];
      if (initTable && this.tableCurrentUsers != null)
        this.tableCurrentUsers.InitVars();
      this.tableCustomer = (ZR_ClassLibrary.Schema_Access.Schema.CustomerDataTable) base.Tables["Customer"];
      if (initTable && this.tableCustomer != null)
        this.tableCustomer.InitVars();
      this.tableDatabaseIdentification = (ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationDataTable) base.Tables["DatabaseIdentification"];
      if (initTable && this.tableDatabaseIdentification != null)
        this.tableDatabaseIdentification.InitVars();
      this.tableDatabaseLocation = (ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationDataTable) base.Tables["DatabaseLocation"];
      if (initTable && this.tableDatabaseLocation != null)
        this.tableDatabaseLocation.InitVars();
      this.tableDatalogger = (ZR_ClassLibrary.Schema_Access.Schema.DataloggerDataTable) base.Tables["Datalogger"];
      if (initTable && this.tableDatalogger != null)
        this.tableDatalogger.InitVars();
      this.tableDataLoggerentry = (ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryDataTable) base.Tables["DataLoggerentry"];
      if (initTable && this.tableDataLoggerentry != null)
        this.tableDataLoggerentry.InitVars();
      this.tableDBTranslator = (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorDataTable) base.Tables["DBTranslator"];
      if (initTable && this.tableDBTranslator != null)
        this.tableDBTranslator.InitVars();
      this.tableDBTranslatorStruct = (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructDataTable) base.Tables["DBTranslatorStruct"];
      if (initTable && this.tableDBTranslatorStruct != null)
        this.tableDBTranslatorStruct.InitVars();
      this.tableDisplayCode = (ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeDataTable) base.Tables["DisplayCode"];
      if (initTable && this.tableDisplayCode != null)
        this.tableDisplayCode.InitVars();
      this.tableEquipmentTypeDescription = (ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionDataTable) base.Tables["EquipmentTypeDescription"];
      if (initTable && this.tableEquipmentTypeDescription != null)
        this.tableEquipmentTypeDescription.InitVars();
      this.tableFactoryEquipment = (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentDataTable) base.Tables["FactoryEquipment"];
      if (initTable && this.tableFactoryEquipment != null)
        this.tableFactoryEquipment.InitVars();
      this.tableGMM_User = (ZR_ClassLibrary.Schema_Access.Schema.GMM_UserDataTable) base.Tables["GMM_User"];
      if (initTable && this.tableGMM_User != null)
        this.tableGMM_User.InitVars();
      this.tableHardwareResources = (ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesDataTable) base.Tables["HardwareResources"];
      if (initTable && this.tableHardwareResources != null)
        this.tableHardwareResources.InitVars();
      this.tableHardwareType = (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeDataTable) base.Tables["HardwareType"];
      if (initTable && this.tableHardwareType != null)
        this.tableHardwareType.InitVars();
      this.tableIncludeDef = (ZR_ClassLibrary.Schema_Access.Schema.IncludeDefDataTable) base.Tables["IncludeDef"];
      if (initTable && this.tableIncludeDef != null)
        this.tableIncludeDef.InitVars();
      this.tableLinkerTable = (ZR_ClassLibrary.Schema_Access.Schema.LinkerTableDataTable) base.Tables["LinkerTable"];
      if (initTable && this.tableLinkerTable != null)
        this.tableLinkerTable.InitVars();
      this.tableManufacturer = (ZR_ClassLibrary.Schema_Access.Schema.ManufacturerDataTable) base.Tables["Manufacturer"];
      if (initTable && this.tableManufacturer != null)
        this.tableManufacturer.InitVars();
      this.tableMapBase = (ZR_ClassLibrary.Schema_Access.Schema.MapBaseDataTable) base.Tables["MapBase"];
      if (initTable && this.tableMapBase != null)
        this.tableMapBase.InitVars();
      this.tableMapDef = (ZR_ClassLibrary.Schema_Access.Schema.MapDefDataTable) base.Tables["MapDef"];
      if (initTable && this.tableMapDef != null)
        this.tableMapDef.InitVars();
      this.tableMBusCode = (ZR_ClassLibrary.Schema_Access.Schema.MBusCodeDataTable) base.Tables["MBusCode"];
      if (initTable && this.tableMBusCode != null)
        this.tableMBusCode.InitVars();
      this.tableMBusParameterTranslation = (ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationDataTable) base.Tables["MBusParameterTranslation"];
      if (initTable && this.tableMBusParameterTranslation != null)
        this.tableMBusParameterTranslation.InitVars();
      this.tableMenu = (ZR_ClassLibrary.Schema_Access.Schema.MenuDataTable) base.Tables["Menu"];
      if (initTable && this.tableMenu != null)
        this.tableMenu.InitVars();
      this.tableMeter = (ZR_ClassLibrary.Schema_Access.Schema.MeterDataTable) base.Tables["Meter"];
      if (initTable && this.tableMeter != null)
        this.tableMeter.InitVars();
      this.tableMeterData = (ZR_ClassLibrary.Schema_Access.Schema.MeterDataDataTable) base.Tables["MeterData"];
      if (initTable && this.tableMeterData != null)
        this.tableMeterData.InitVars();
      this.tableMeterDataRequest = (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestDataTable) base.Tables["MeterDataRequest"];
      if (initTable && this.tableMeterDataRequest != null)
        this.tableMeterDataRequest.InitVars();
      this.tableMeterHardware = (ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareDataTable) base.Tables["MeterHardware"];
      if (initTable && this.tableMeterHardware != null)
        this.tableMeterHardware.InitVars();
      this.tableMeterInfo = (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoDataTable) base.Tables["MeterInfo"];
      if (initTable && this.tableMeterInfo != null)
        this.tableMeterInfo.InitVars();
      this.tableMeterPosition = (ZR_ClassLibrary.Schema_Access.Schema.MeterPositionDataTable) base.Tables["MeterPosition"];
      if (initTable && this.tableMeterPosition != null)
        this.tableMeterPosition.InitVars();
      this.tableMeterType = (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeDataTable) base.Tables["MeterType"];
      if (initTable && this.tableMeterType != null)
        this.tableMeterType.InitVars();
      this.tableMTypeKapsel = (ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselDataTable) base.Tables["MTypeKapsel"];
      if (initTable && this.tableMTypeKapsel != null)
        this.tableMTypeKapsel.InitVars();
      this.tableMTypeMIDWaterMeter = (ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterDataTable) base.Tables["MTypeMIDWaterMeter"];
      if (initTable && this.tableMTypeMIDWaterMeter != null)
        this.tableMTypeMIDWaterMeter.InitVars();
      this.tableMTypeSaarius = (ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusDataTable) base.Tables["MTypeSaarius"];
      if (initTable && this.tableMTypeSaarius != null)
        this.tableMTypeSaarius.InitVars();
      this.tableMTypeTempSensor = (ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorDataTable) base.Tables["MTypeTempSensor"];
      if (initTable && this.tableMTypeTempSensor != null)
        this.tableMTypeTempSensor.InitVars();
      this.tableMTypeWaterMeter = (ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterDataTable) base.Tables["MTypeWaterMeter"];
      if (initTable && this.tableMTypeWaterMeter != null)
        this.tableMTypeWaterMeter.InitVars();
      this.tableMTypeZelsius = (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusDataTable) base.Tables["MTypeZelsius"];
      if (initTable && this.tableMTypeZelsius != null)
        this.tableMTypeZelsius.InitVars();
      this.tableMTypeZelsiusModule = (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleDataTable) base.Tables["MTypeZelsiusModule"];
      if (initTable && this.tableMTypeZelsiusModule != null)
        this.tableMTypeZelsiusModule.InitVars();
      this.tableNodeList = (ZR_ClassLibrary.Schema_Access.Schema.NodeListDataTable) base.Tables["NodeList"];
      if (initTable && this.tableNodeList != null)
        this.tableNodeList.InitVars();
      this.tableNodeReferences = (ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesDataTable) base.Tables["NodeReferences"];
      if (initTable && this.tableNodeReferences != null)
        this.tableNodeReferences.InitVars();
      this.tablePartlist = (ZR_ClassLibrary.Schema_Access.Schema.PartlistDataTable) base.Tables["Partlist"];
      if (initTable && this.tablePartlist != null)
        this.tablePartlist.InitVars();
      this.tablePPS_Cache = (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheDataTable) base.Tables["PPS_Cache"];
      if (initTable && this.tablePPS_Cache != null)
        this.tablePPS_Cache.InitVars();
      this.tablePPS_CacheClassNames = (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesDataTable) base.Tables["PPS_CacheClassNames"];
      if (initTable && this.tablePPS_CacheClassNames != null)
        this.tablePPS_CacheClassNames.InitVars();
      this.tablePPS_CacheParmNames = (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesDataTable) base.Tables["PPS_CacheParmNames"];
      if (initTable && this.tablePPS_CacheParmNames != null)
        this.tablePPS_CacheParmNames.InitVars();
      this.tablePPS_RW_WMZ_Mapper = (ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperDataTable) base.Tables["PPS_RW_WMZ_Mapper"];
      if (initTable && this.tablePPS_RW_WMZ_Mapper != null)
        this.tablePPS_RW_WMZ_Mapper.InitVars();
      this.tablePPS_STS_Reference = (ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceDataTable) base.Tables["PPS_STS_Reference"];
      if (initTable && this.tablePPS_STS_Reference != null)
        this.tablePPS_STS_Reference.InitVars();
      this.tableProgFiles = (ZR_ClassLibrary.Schema_Access.Schema.ProgFilesDataTable) base.Tables["ProgFiles"];
      if (initTable && this.tableProgFiles != null)
        this.tableProgFiles.InitVars();
      this.tablePValueIdent = (ZR_ClassLibrary.Schema_Access.Schema.PValueIdentDataTable) base.Tables["PValueIdent"];
      if (initTable && this.tablePValueIdent != null)
        this.tablePValueIdent.InitVars();
      this.tableRepair = (ZR_ClassLibrary.Schema_Access.Schema.RepairDataTable) base.Tables["Repair"];
      if (initTable && this.tableRepair != null)
        this.tableRepair.InitVars();
      this.tableRepairErrorGroups = (ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsDataTable) base.Tables["RepairErrorGroups"];
      if (initTable && this.tableRepairErrorGroups != null)
        this.tableRepairErrorGroups.InitVars();
      this.tableRuntimeCode = (ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeDataTable) base.Tables["RuntimeCode"];
      if (initTable && this.tableRuntimeCode != null)
        this.tableRuntimeCode.InitVars();
      this.tableTest = (ZR_ClassLibrary.Schema_Access.Schema.TestDataTable) base.Tables["Test"];
      if (initTable && this.tableTest != null)
        this.tableTest.InitVars();
      this.tableTestbenchActualValues = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesDataTable) base.Tables["TestbenchActualValues"];
      if (initTable && this.tableTestbenchActualValues != null)
        this.tableTestbenchActualValues.InitVars();
      this.tableTestbenchNominalValues = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesDataTable) base.Tables["TestbenchNominalValues"];
      if (initTable && this.tableTestbenchNominalValues != null)
        this.tableTestbenchNominalValues.InitVars();
      this.tableTestEquipment = (ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentDataTable) base.Tables["TestEquipment"];
      if (initTable && this.tableTestEquipment != null)
        this.tableTestEquipment.InitVars();
      this.tableTestPointList = (ZR_ClassLibrary.Schema_Access.Schema.TestPointListDataTable) base.Tables["TestPointList"];
      if (initTable && this.tableTestPointList != null)
        this.tableTestPointList.InitVars();
      this.tableTestResistorTable = (ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableDataTable) base.Tables["TestResistorTable"];
      if (initTable && this.tableTestResistorTable != null)
        this.tableTestResistorTable.InitVars();
      this.tableTestResult = (ZR_ClassLibrary.Schema_Access.Schema.TestResultDataTable) base.Tables["TestResult"];
      if (initTable && this.tableTestResult != null)
        this.tableTestResult.InitVars();
      this.tableTestResultExtended = (ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedDataTable) base.Tables["TestResultExtended"];
      if (initTable && this.tableTestResultExtended != null)
        this.tableTestResultExtended.InitVars();
      this.tableTestType = (ZR_ClassLibrary.Schema_Access.Schema.TestTypeDataTable) base.Tables["TestType"];
      if (initTable && this.tableTestType != null)
        this.tableTestType.InitVars();
      this.tableTypeOverwriteParameters = (ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersDataTable) base.Tables["TypeOverwriteParameters"];
      if (initTable && this.tableTypeOverwriteParameters != null)
        this.tableTypeOverwriteParameters.InitVars();
      this.tableUnits = (ZR_ClassLibrary.Schema_Access.Schema.UnitsDataTable) base.Tables["Units"];
      if (initTable && this.tableUnits != null)
        this.tableUnits.InitVars();
      this.tableWaterDensity = (ZR_ClassLibrary.Schema_Access.Schema.WaterDensityDataTable) base.Tables["WaterDensity"];
      if (initTable && this.tableWaterDensity != null)
        this.tableWaterDensity.InitVars();
      this.tableWMApprovalData = (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataDataTable) base.Tables["WMApprovalData"];
      if (initTable && this.tableWMApprovalData != null)
        this.tableWMApprovalData.InitVars();
      this.tableWMApprovals = (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsDataTable) base.Tables["WMApprovals"];
      if (initTable && this.tableWMApprovals != null)
        this.tableWMApprovals.InitVars();
      this.tableWMClasses = (ZR_ClassLibrary.Schema_Access.Schema.WMClassesDataTable) base.Tables["WMClasses"];
      if (initTable && this.tableWMClasses != null)
        this.tableWMClasses.InitVars();
      this.tableWMCounterTypes = (ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesDataTable) base.Tables["WMCounterTypes"];
      if (initTable && this.tableWMCounterTypes != null)
        this.tableWMCounterTypes.InitVars();
      this.tableWMErrorOffset = (ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetDataTable) base.Tables["WMErrorOffset"];
      if (initTable && this.tableWMErrorOffset != null)
        this.tableWMErrorOffset.InitVars();
      this.tableWMMIDApprovalData = (ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataDataTable) base.Tables["WMMIDApprovalData"];
      if (initTable && this.tableWMMIDApprovalData != null)
        this.tableWMMIDApprovalData.InitVars();
      this.tableWMMIDErrorOffset = (ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetDataTable) base.Tables["WMMIDErrorOffset"];
      if (initTable && this.tableWMMIDErrorOffset != null)
        this.tableWMMIDErrorOffset.InitVars();
      this.tableWMMIDTestingTypes = (ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesDataTable) base.Tables["WMMIDTestingTypes"];
      if (initTable && this.tableWMMIDTestingTypes != null)
        this.tableWMMIDTestingTypes.InitVars();
      this.tableWMOrders = (ZR_ClassLibrary.Schema_Access.Schema.WMOrdersDataTable) base.Tables["WMOrders"];
      if (initTable && this.tableWMOrders != null)
        this.tableWMOrders.InitVars();
      this.tableWMRatios = (ZR_ClassLibrary.Schema_Access.Schema.WMRatiosDataTable) base.Tables["WMRatios"];
      if (initTable && this.tableWMRatios != null)
        this.tableWMRatios.InitVars();
      this.tableWMTestingTypes = (ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesDataTable) base.Tables["WMTestingTypes"];
      if (initTable && this.tableWMTestingTypes != null)
        this.tableWMTestingTypes.InitVars();
      this.tableZRFunction = (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionDataTable) base.Tables["ZRFunction"];
      if (initTable && this.tableZRFunction != null)
        this.tableZRFunction.InitVars();
      this.tableZRGlobalID = (ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDDataTable) base.Tables["ZRGlobalID"];
      if (initTable && this.tableZRGlobalID != null)
        this.tableZRGlobalID.InitVars();
      this.tableZrOrder = (ZR_ClassLibrary.Schema_Access.Schema.ZrOrderDataTable) base.Tables["ZrOrder"];
      if (initTable && this.tableZrOrder != null)
        this.tableZrOrder.InitVars();
      this.tableZRParameter = (ZR_ClassLibrary.Schema_Access.Schema.ZRParameterDataTable) base.Tables["ZRParameter"];
      if (initTable && this.tableZRParameter != null)
        this.tableZRParameter.InitVars();
      this.tableZRTableNames = (ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesDataTable) base.Tables["ZRTableNames"];
      if (initTable && this.tableZRTableNames != null)
        this.tableZRTableNames.InitVars();
      this.tableNodeLayers = (ZR_ClassLibrary.Schema_Access.Schema.NodeLayersDataTable) base.Tables["NodeLayers"];
      if (initTable && this.tableNodeLayers != null)
        this.tableNodeLayers.InitVars();
      this.tableExternalUserTable = (ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableDataTable) base.Tables["ExternalUserTable"];
      if (initTable && this.tableExternalUserTable != null)
        this.tableExternalUserTable.InitVars();
      this.tableDocumentGroups = (ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsDataTable) base.Tables["DocumentGroups"];
      if (initTable && this.tableDocumentGroups != null)
        this.tableDocumentGroups.InitVars();
      this.tableDocuments = (ZR_ClassLibrary.Schema_Access.Schema.DocumentsDataTable) base.Tables["Documents"];
      if (initTable && this.tableDocuments != null)
        this.tableDocuments.InitVars();
      this.tableErrorDescription = (ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionDataTable) base.Tables["ErrorDescription"];
      if (initTable && this.tableErrorDescription != null)
        this.tableErrorDescription.InitVars();
      this.tableMultidataCache = (ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheDataTable) base.Tables["MultidataCache"];
      if (initTable && this.tableMultidataCache != null)
        this.tableMultidataCache.InitVars();
      this.tableWaveFlowDeviceModels = (ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsDataTable) base.Tables["WaveFlowDeviceModels"];
      if (initTable && this.tableWaveFlowDeviceModels != null)
        this.tableWaveFlowDeviceModels.InitVars();
      this.tableMinolDeviceDataRead = (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadDataTable) base.Tables["MinolDeviceDataRead"];
      if (initTable && this.tableMinolDeviceDataRead != null)
        this.tableMinolDeviceDataRead.InitVars();
      this.tableMinolDeviceData = (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataDataTable) base.Tables["MinolDeviceData"];
      if (initTable && this.tableMinolDeviceData != null)
        this.tableMinolDeviceData.InitVars();
      this.tableAutoboxCardConfiguration = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationDataTable) base.Tables["AutoboxCardConfiguration"];
      if (initTable && this.tableAutoboxCardConfiguration != null)
        this.tableAutoboxCardConfiguration.InitVars();
      this.tableAutoboxResistorCalibrationData = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataDataTable) base.Tables["AutoboxResistorCalibrationData"];
      if (initTable && this.tableAutoboxResistorCalibrationData != null)
        this.tableAutoboxResistorCalibrationData.InitVars();
      this.tableAutoboxConfiguration = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationDataTable) base.Tables["AutoboxConfiguration"];
      if (initTable && this.tableAutoboxConfiguration != null)
        this.tableAutoboxConfiguration.InitVars();
      this.tableAutoboxResistorPairs = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsDataTable) base.Tables["AutoboxResistorPairs"];
      if (initTable && this.tableAutoboxResistorPairs != null)
        this.tableAutoboxResistorPairs.InitVars();
      this.tableEnergyFactors = (ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsDataTable) base.Tables["EnergyFactors"];
      if (initTable && this.tableEnergyFactors != null)
        this.tableEnergyFactors.InitVars();
      this.tableMeterInfoProperties = (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesDataTable) base.Tables["MeterInfoProperties"];
      if (initTable && this.tableMeterInfoProperties != null)
        this.tableMeterInfoProperties.InitVars();
      this.tableEquipmentCalibration = (ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationDataTable) base.Tables["EquipmentCalibration"];
      if (initTable && this.tableEquipmentCalibration != null)
        this.tableEquipmentCalibration.InitVars();
      this.tableTranslationRules = (ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesDataTable) base.Tables["TranslationRules"];
      if (initTable && this.tableTranslationRules != null)
        this.tableTranslationRules.InitVars();
      this.tableMeterValues = (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesDataTable) base.Tables["MeterValues"];
      if (initTable && this.tableMeterValues != null)
        this.tableMeterValues.InitVars();
      this.tableMeterValuesAndSerial = (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialDataTable) base.Tables["MeterValuesAndSerial"];
      if (initTable && this.tableMeterValuesAndSerial != null)
        this.tableMeterValuesAndSerial.InitVars();
      this.tableOnlineTranslation = (ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationDataTable) base.Tables["OnlineTranslation"];
      if (initTable && this.tableOnlineTranslation != null)
        this.tableOnlineTranslation.InitVars();
      this.tableS3_FunctionParameter = (ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterDataTable) base.Tables["S3_FunctionParameter"];
      if (initTable && this.tableS3_FunctionParameter != null)
        this.tableS3_FunctionParameter.InitVars();
      this.tableMTypeVMT_Electronic = (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicDataTable) base.Tables["MTypeVMT_Electronic"];
      if (initTable && this.tableMTypeVMT_Electronic != null)
        this.tableMTypeVMT_Electronic.InitVars();
      this.tableMTypeVMT_Hydraulic = (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicDataTable) base.Tables["MTypeVMT_Hydraulic"];
      if (initTable && this.tableMTypeVMT_Hydraulic != null)
        this.tableMTypeVMT_Hydraulic.InitVars();
      this.tableDataQs = (ZR_ClassLibrary.Schema_Access.Schema.DataQsDataTable) base.Tables["DataQs"];
      if (initTable && this.tableDataQs != null)
        this.tableDataQs.InitVars();
      this.tableS3_Parameter = (ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterDataTable) base.Tables["S3_Parameter"];
      if (initTable && this.tableS3_Parameter != null)
        this.tableS3_Parameter.InitVars();
      this.tableSerialPortConfiguration = (ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationDataTable) base.Tables["SerialPortConfiguration"];
      if (initTable && this.tableSerialPortConfiguration != null)
        this.tableSerialPortConfiguration.InitVars();
      this.tableFilter = (ZR_ClassLibrary.Schema_Access.Schema.FilterDataTable) base.Tables["Filter"];
      if (initTable && this.tableFilter != null)
        this.tableFilter.InitVars();
      this.tableFilterValue = (ZR_ClassLibrary.Schema_Access.Schema.FilterValueDataTable) base.Tables["FilterValue"];
      if (initTable && this.tableFilterValue != null)
        this.tableFilterValue.InitVars();
      this.tablePostTranslationMapping = (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingDataTable) base.Tables["PostTranslationMapping"];
      if (initTable && this.tablePostTranslationMapping != null)
        this.tablePostTranslationMapping.InitVars();
      this.tablePostTranslationRules = (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesDataTable) base.Tables["PostTranslationRules"];
      if (initTable && this.tablePostTranslationRules != null)
        this.tablePostTranslationRules.InitVars();
      this.tablePTSensorParameters = (ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersDataTable) base.Tables["PTSensorParameters"];
      if (initTable && this.tablePTSensorParameters != null)
        this.tablePTSensorParameters.InitVars();
      this.tableSensorObservation = (ZR_ClassLibrary.Schema_Access.Schema.SensorObservationDataTable) base.Tables["SensorObservation"];
      if (initTable && this.tableSensorObservation != null)
        this.tableSensorObservation.InitVars();
      this.tableTestbenchNominalValuesHistory = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryDataTable) base.Tables["TestbenchNominalValuesHistory"];
      if (initTable && this.tableTestbenchNominalValuesHistory != null)
        this.tableTestbenchNominalValuesHistory.InitVars();
      this.tableZRFunctionCompiled = (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledDataTable) base.Tables["ZRFunctionCompiled"];
      if (initTable && this.tableZRFunctionCompiled != null)
        this.tableZRFunctionCompiled.InitVars();
      this.tableFactoryEquipmentPartlist = (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistDataTable) base.Tables["FactoryEquipmentPartlist"];
      if (initTable && this.tableFactoryEquipmentPartlist != null)
        this.tableFactoryEquipmentPartlist.InitVars();
      this.tableEquipmentPartlistCreation = (ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationDataTable) base.Tables["EquipmentPartlistCreation"];
      if (initTable && this.tableEquipmentPartlistCreation != null)
        this.tableEquipmentPartlistCreation.InitVars();
      this.tablePTCardChannelCalibration = (ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationDataTable) base.Tables["PTCardChannelCalibration"];
      if (initTable && this.tablePTCardChannelCalibration != null)
        this.tablePTCardChannelCalibration.InitVars();
      this.tablePTSensorCalibration = (ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationDataTable) base.Tables["PTSensorCalibration"];
      if (initTable && this.tablePTSensorCalibration != null)
        this.tablePTSensorCalibration.InitVars();
      this.tableEtalonCalibration = (ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationDataTable) base.Tables["EtalonCalibration"];
      if (initTable && this.tableEtalonCalibration != null)
        this.tableEtalonCalibration.InitVars();
      this.tableUserPermissions = (ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsDataTable) base.Tables["UserPermissions"];
      if (initTable && this.tableUserPermissions != null)
        this.tableUserPermissions.InitVars();
      this.tableMinomatList = (ZR_ClassLibrary.Schema_Access.Schema.MinomatListDataTable) base.Tables["MinomatList"];
      if (initTable && this.tableMinomatList != null)
        this.tableMinomatList.InitVars();
      this.tableInstallationChangeLog = (ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogDataTable) base.Tables["InstallationChangeLog"];
      if (initTable && this.tableInstallationChangeLog != null)
        this.tableInstallationChangeLog.InitVars();
      this.tableInstallations = (ZR_ClassLibrary.Schema_Access.Schema.InstallationsDataTable) base.Tables["Installations"];
      if (initTable && this.tableInstallations != null)
        this.tableInstallations.InitVars();
      this.tableInstallationUsers = (ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersDataTable) base.Tables["InstallationUsers"];
      if (initTable && this.tableInstallationUsers != null)
        this.tableInstallationUsers.InitVars();
      this.tableChangeableParameters = (ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersDataTable) base.Tables["ChangeableParameters"];
      if (initTable && this.tableChangeableParameters != null)
        this.tableChangeableParameters.InitVars();
      this.tableGmmImages = (ZR_ClassLibrary.Schema_Access.Schema.GmmImagesDataTable) base.Tables["GmmImages"];
      if (initTable && this.tableGmmImages != null)
        this.tableGmmImages.InitVars();
      this.tableConnectionSettings = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsDataTable) base.Tables["ConnectionSettings"];
      if (initTable && this.tableConnectionSettings != null)
        this.tableConnectionSettings.InitVars();
      this.tableConnectionItems = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsDataTable) base.Tables["ConnectionItems"];
      if (initTable && this.tableConnectionItems != null)
        this.tableConnectionItems.InitVars();
      this.tableConnectionProfiles = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesDataTable) base.Tables["ConnectionProfiles"];
      if (initTable && this.tableConnectionProfiles != null)
        this.tableConnectionProfiles.InitVars();
      this.tableServiceTaskResult = (ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultDataTable) base.Tables["ServiceTaskResult"];
      if (initTable && this.tableServiceTaskResult != null)
        this.tableServiceTaskResult.InitVars();
      this.tableMeterMSS = (ZR_ClassLibrary.Schema_Access.Schema.MeterMSSDataTable) base.Tables["MeterMSS"];
      if (initTable && this.tableMeterMSS != null)
        this.tableMeterMSS.InitVars();
      this.tableTestbenchFlowSettings = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsDataTable) base.Tables["TestbenchFlowSettings"];
      if (initTable && this.tableTestbenchFlowSettings != null)
        this.tableTestbenchFlowSettings.InitVars();
      this.tableMinomatConnectionLogs = (ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsDataTable) base.Tables["MinomatConnectionLogs"];
      if (initTable && this.tableMinomatConnectionLogs != null)
        this.tableMinomatConnectionLogs.InitVars();
      this.tableMinomatDataLogs = (ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsDataTable) base.Tables["MinomatDataLogs"];
      if (initTable && this.tableMinomatDataLogs != null)
        this.tableMinomatDataLogs.InitVars();
      this.tableMeterChanges = (ZR_ClassLibrary.Schema_Access.Schema.MeterChangesDataTable) base.Tables["MeterChanges"];
      if (initTable && this.tableMeterChanges != null)
        this.tableMeterChanges.InitVars();
      this.tableTransducerPallet = (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletDataTable) base.Tables["TransducerPallet"];
      if (initTable && this.tableTransducerPallet != null)
        this.tableTransducerPallet.InitVars();
      this.tableTransducerPalletState = (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateDataTable) base.Tables["TransducerPalletState"];
      if (initTable && this.tableTransducerPalletState != null)
        this.tableTransducerPalletState.InitVars();
      this.tableTransducerPalletType = (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeDataTable) base.Tables["TransducerPalletType"];
      if (initTable && this.tableTransducerPalletType != null)
        this.tableTransducerPalletType.InitVars();
      this.tableConnectionItemParameters = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersDataTable) base.Tables["ConnectionItemParameters"];
      if (initTable && this.tableConnectionItemParameters != null)
        this.tableConnectionItemParameters.InitVars();
      this.tableConnectionProfileParameters = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersDataTable) base.Tables["ConnectionProfileParameters"];
      if (initTable && this.tableConnectionProfileParameters != null)
        this.tableConnectionProfileParameters.InitVars();
      this.tableConnectionProfileFilters = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersDataTable) base.Tables["ConnectionProfileFilters"];
      if (initTable && this.tableConnectionProfileFilters != null)
        this.tableConnectionProfileFilters.InitVars();
      this.tableSoftwareUsers = (ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersDataTable) base.Tables["SoftwareUsers"];
      if (initTable && this.tableSoftwareUsers != null)
        this.tableSoftwareUsers.InitVars();
      this.tableNotificationRecord = (ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordDataTable) base.Tables["NotificationRecord"];
      if (initTable && this.tableNotificationRecord != null)
        this.tableNotificationRecord.InitVars();
      this.tableSAP_Cache = (ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheDataTable) base.Tables["SAP_Cache"];
      if (initTable && this.tableSAP_Cache != null)
        this.tableSAP_Cache.InitVars();
      this.tableSAP_ClassUsing = (ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingDataTable) base.Tables["SAP_ClassUsing"];
      if (initTable && this.tableSAP_ClassUsing != null)
        this.tableSAP_ClassUsing.InitVars();
      this.relationFunctionDatalogger = this.Relations["FunctionDatalogger"];
      this.relationEquipmentTypeDescriptionFactoryEquipment = this.Relations["EquipmentTypeDescriptionFactoryEquipment"];
      this.relationProgFilesHardwareType = this.Relations["ProgFilesHardwareType"];
      this.relationHTypeSaariusIncludeDef = this.Relations["HTypeSaariusIncludeDef"];
      this.relationBlockNamesLinkerTable = this.Relations["BlockNamesLinkerTable"];
      this.relationHardwareTypeLinkerTable = this.Relations["HardwareTypeLinkerTable"];
      this.relationHTypeSaariusMapDef = this.Relations["HTypeSaariusMapDef"];
      this.relationFunctionMBusCode = this.Relations["FunctionMBusCode"];
      this.relationFunctionMenu = this.Relations["FunctionMenu"];
      this.relationMeterInfoMeter = this.Relations["MeterInfoMeter"];
      this.relationMeterMeterData = this.Relations["MeterMeterData"];
      this.relationManufacturerMeterHardware = this.Relations["ManufacturerMeterHardware"];
      this.relationHardwareTypeMeterInfo = this.Relations["HardwareTypeMeterInfo"];
      this.relationMeterTypeMeterInfo = this.Relations["MeterTypeMeterInfo"];
      this.relationMeterTypeMTypeSaariuskapsel = this.Relations["MeterTypeMTypeSaariuskapsel"];
      this.relationMeterTypeMTypeSaarius = this.Relations["MeterTypeMTypeSaarius"];
      this.relationMeterTypeMTypeTempSensor = this.Relations["MeterTypeMTypeTempSensor"];
      this.relationMeterTypeMTypeZelsius = this.Relations["MeterTypeMTypeZelsius"];
      this.relationMeterTypeMTypeZelsiusModule = this.Relations["MeterTypeMTypeZelsiusModule"];
      this.relationMeterRepair = this.Relations["MeterRepair"];
      this.relationRepairErrorGroupsRepair = this.Relations["RepairErrorGroupsRepair"];
      this.relationFunctionRuntimeCodeKopf = this.Relations["FunctionRuntimeCodeKopf"];
      this.relationMeterInfoTypeOverrideParameters = this.Relations["MeterInfoTypeOverrideParameters"];
      this.relationFunctionParameter = this.Relations["FunctionParameter"];
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void InitClass()
    {
      this.DataSetName = nameof (Schema);
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/Schema.xsd";
      this.EnforceConstraints = true;
      this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
      this.tableEnumTranslation = new ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationDataTable();
      base.Tables.Add((DataTable) this.tableEnumTranslation);
      this.tableMTypeElectronic = new ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicDataTable();
      base.Tables.Add((DataTable) this.tableMTypeElectronic);
      this.tableBlockNames = new ZR_ClassLibrary.Schema_Access.Schema.BlockNamesDataTable();
      base.Tables.Add((DataTable) this.tableBlockNames);
      this.tableCode = new ZR_ClassLibrary.Schema_Access.Schema.CodeDataTable();
      base.Tables.Add((DataTable) this.tableCode);
      this.tableControllerCode = new ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeDataTable();
      base.Tables.Add((DataTable) this.tableControllerCode);
      this.tableCurrentUsers = new ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersDataTable();
      base.Tables.Add((DataTable) this.tableCurrentUsers);
      this.tableCustomer = new ZR_ClassLibrary.Schema_Access.Schema.CustomerDataTable();
      base.Tables.Add((DataTable) this.tableCustomer);
      this.tableDatabaseIdentification = new ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationDataTable();
      base.Tables.Add((DataTable) this.tableDatabaseIdentification);
      this.tableDatabaseLocation = new ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationDataTable();
      base.Tables.Add((DataTable) this.tableDatabaseLocation);
      this.tableDatalogger = new ZR_ClassLibrary.Schema_Access.Schema.DataloggerDataTable();
      base.Tables.Add((DataTable) this.tableDatalogger);
      this.tableDataLoggerentry = new ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryDataTable();
      base.Tables.Add((DataTable) this.tableDataLoggerentry);
      this.tableDBTranslator = new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorDataTable();
      base.Tables.Add((DataTable) this.tableDBTranslator);
      this.tableDBTranslatorStruct = new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructDataTable();
      base.Tables.Add((DataTable) this.tableDBTranslatorStruct);
      this.tableDisplayCode = new ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeDataTable();
      base.Tables.Add((DataTable) this.tableDisplayCode);
      this.tableEquipmentTypeDescription = new ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionDataTable();
      base.Tables.Add((DataTable) this.tableEquipmentTypeDescription);
      this.tableFactoryEquipment = new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentDataTable();
      base.Tables.Add((DataTable) this.tableFactoryEquipment);
      this.tableGMM_User = new ZR_ClassLibrary.Schema_Access.Schema.GMM_UserDataTable();
      base.Tables.Add((DataTable) this.tableGMM_User);
      this.tableHardwareResources = new ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesDataTable();
      base.Tables.Add((DataTable) this.tableHardwareResources);
      this.tableHardwareType = new ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeDataTable();
      base.Tables.Add((DataTable) this.tableHardwareType);
      this.tableIncludeDef = new ZR_ClassLibrary.Schema_Access.Schema.IncludeDefDataTable();
      base.Tables.Add((DataTable) this.tableIncludeDef);
      this.tableLinkerTable = new ZR_ClassLibrary.Schema_Access.Schema.LinkerTableDataTable();
      base.Tables.Add((DataTable) this.tableLinkerTable);
      this.tableManufacturer = new ZR_ClassLibrary.Schema_Access.Schema.ManufacturerDataTable();
      base.Tables.Add((DataTable) this.tableManufacturer);
      this.tableMapBase = new ZR_ClassLibrary.Schema_Access.Schema.MapBaseDataTable();
      base.Tables.Add((DataTable) this.tableMapBase);
      this.tableMapDef = new ZR_ClassLibrary.Schema_Access.Schema.MapDefDataTable();
      base.Tables.Add((DataTable) this.tableMapDef);
      this.tableMBusCode = new ZR_ClassLibrary.Schema_Access.Schema.MBusCodeDataTable();
      base.Tables.Add((DataTable) this.tableMBusCode);
      this.tableMBusParameterTranslation = new ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationDataTable();
      base.Tables.Add((DataTable) this.tableMBusParameterTranslation);
      this.tableMenu = new ZR_ClassLibrary.Schema_Access.Schema.MenuDataTable();
      base.Tables.Add((DataTable) this.tableMenu);
      this.tableMeter = new ZR_ClassLibrary.Schema_Access.Schema.MeterDataTable();
      base.Tables.Add((DataTable) this.tableMeter);
      this.tableMeterData = new ZR_ClassLibrary.Schema_Access.Schema.MeterDataDataTable();
      base.Tables.Add((DataTable) this.tableMeterData);
      this.tableMeterDataRequest = new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestDataTable();
      base.Tables.Add((DataTable) this.tableMeterDataRequest);
      this.tableMeterHardware = new ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareDataTable();
      base.Tables.Add((DataTable) this.tableMeterHardware);
      this.tableMeterInfo = new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoDataTable();
      base.Tables.Add((DataTable) this.tableMeterInfo);
      this.tableMeterPosition = new ZR_ClassLibrary.Schema_Access.Schema.MeterPositionDataTable();
      base.Tables.Add((DataTable) this.tableMeterPosition);
      this.tableMeterType = new ZR_ClassLibrary.Schema_Access.Schema.MeterTypeDataTable();
      base.Tables.Add((DataTable) this.tableMeterType);
      this.tableMTypeKapsel = new ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselDataTable();
      base.Tables.Add((DataTable) this.tableMTypeKapsel);
      this.tableMTypeMIDWaterMeter = new ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterDataTable();
      base.Tables.Add((DataTable) this.tableMTypeMIDWaterMeter);
      this.tableMTypeSaarius = new ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusDataTable();
      base.Tables.Add((DataTable) this.tableMTypeSaarius);
      this.tableMTypeTempSensor = new ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorDataTable();
      base.Tables.Add((DataTable) this.tableMTypeTempSensor);
      this.tableMTypeWaterMeter = new ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterDataTable();
      base.Tables.Add((DataTable) this.tableMTypeWaterMeter);
      this.tableMTypeZelsius = new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusDataTable();
      base.Tables.Add((DataTable) this.tableMTypeZelsius);
      this.tableMTypeZelsiusModule = new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleDataTable();
      base.Tables.Add((DataTable) this.tableMTypeZelsiusModule);
      this.tableNodeList = new ZR_ClassLibrary.Schema_Access.Schema.NodeListDataTable();
      base.Tables.Add((DataTable) this.tableNodeList);
      this.tableNodeReferences = new ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesDataTable();
      base.Tables.Add((DataTable) this.tableNodeReferences);
      this.tablePartlist = new ZR_ClassLibrary.Schema_Access.Schema.PartlistDataTable();
      base.Tables.Add((DataTable) this.tablePartlist);
      this.tablePPS_Cache = new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheDataTable();
      base.Tables.Add((DataTable) this.tablePPS_Cache);
      this.tablePPS_CacheClassNames = new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesDataTable();
      base.Tables.Add((DataTable) this.tablePPS_CacheClassNames);
      this.tablePPS_CacheParmNames = new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesDataTable();
      base.Tables.Add((DataTable) this.tablePPS_CacheParmNames);
      this.tablePPS_RW_WMZ_Mapper = new ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperDataTable();
      base.Tables.Add((DataTable) this.tablePPS_RW_WMZ_Mapper);
      this.tablePPS_STS_Reference = new ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceDataTable();
      base.Tables.Add((DataTable) this.tablePPS_STS_Reference);
      this.tableProgFiles = new ZR_ClassLibrary.Schema_Access.Schema.ProgFilesDataTable();
      base.Tables.Add((DataTable) this.tableProgFiles);
      this.tablePValueIdent = new ZR_ClassLibrary.Schema_Access.Schema.PValueIdentDataTable();
      base.Tables.Add((DataTable) this.tablePValueIdent);
      this.tableRepair = new ZR_ClassLibrary.Schema_Access.Schema.RepairDataTable();
      base.Tables.Add((DataTable) this.tableRepair);
      this.tableRepairErrorGroups = new ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsDataTable();
      base.Tables.Add((DataTable) this.tableRepairErrorGroups);
      this.tableRuntimeCode = new ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeDataTable();
      base.Tables.Add((DataTable) this.tableRuntimeCode);
      this.tableTest = new ZR_ClassLibrary.Schema_Access.Schema.TestDataTable();
      base.Tables.Add((DataTable) this.tableTest);
      this.tableTestbenchActualValues = new ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesDataTable();
      base.Tables.Add((DataTable) this.tableTestbenchActualValues);
      this.tableTestbenchNominalValues = new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesDataTable();
      base.Tables.Add((DataTable) this.tableTestbenchNominalValues);
      this.tableTestEquipment = new ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentDataTable();
      base.Tables.Add((DataTable) this.tableTestEquipment);
      this.tableTestPointList = new ZR_ClassLibrary.Schema_Access.Schema.TestPointListDataTable();
      base.Tables.Add((DataTable) this.tableTestPointList);
      this.tableTestResistorTable = new ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableDataTable();
      base.Tables.Add((DataTable) this.tableTestResistorTable);
      this.tableTestResult = new ZR_ClassLibrary.Schema_Access.Schema.TestResultDataTable();
      base.Tables.Add((DataTable) this.tableTestResult);
      this.tableTestResultExtended = new ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedDataTable();
      base.Tables.Add((DataTable) this.tableTestResultExtended);
      this.tableTestType = new ZR_ClassLibrary.Schema_Access.Schema.TestTypeDataTable();
      base.Tables.Add((DataTable) this.tableTestType);
      this.tableTypeOverwriteParameters = new ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersDataTable();
      base.Tables.Add((DataTable) this.tableTypeOverwriteParameters);
      this.tableUnits = new ZR_ClassLibrary.Schema_Access.Schema.UnitsDataTable();
      base.Tables.Add((DataTable) this.tableUnits);
      this.tableWaterDensity = new ZR_ClassLibrary.Schema_Access.Schema.WaterDensityDataTable();
      base.Tables.Add((DataTable) this.tableWaterDensity);
      this.tableWMApprovalData = new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataDataTable();
      base.Tables.Add((DataTable) this.tableWMApprovalData);
      this.tableWMApprovals = new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsDataTable();
      base.Tables.Add((DataTable) this.tableWMApprovals);
      this.tableWMClasses = new ZR_ClassLibrary.Schema_Access.Schema.WMClassesDataTable();
      base.Tables.Add((DataTable) this.tableWMClasses);
      this.tableWMCounterTypes = new ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesDataTable();
      base.Tables.Add((DataTable) this.tableWMCounterTypes);
      this.tableWMErrorOffset = new ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetDataTable();
      base.Tables.Add((DataTable) this.tableWMErrorOffset);
      this.tableWMMIDApprovalData = new ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataDataTable();
      base.Tables.Add((DataTable) this.tableWMMIDApprovalData);
      this.tableWMMIDErrorOffset = new ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetDataTable();
      base.Tables.Add((DataTable) this.tableWMMIDErrorOffset);
      this.tableWMMIDTestingTypes = new ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesDataTable();
      base.Tables.Add((DataTable) this.tableWMMIDTestingTypes);
      this.tableWMOrders = new ZR_ClassLibrary.Schema_Access.Schema.WMOrdersDataTable();
      base.Tables.Add((DataTable) this.tableWMOrders);
      this.tableWMRatios = new ZR_ClassLibrary.Schema_Access.Schema.WMRatiosDataTable();
      base.Tables.Add((DataTable) this.tableWMRatios);
      this.tableWMTestingTypes = new ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesDataTable();
      base.Tables.Add((DataTable) this.tableWMTestingTypes);
      this.tableZRFunction = new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionDataTable();
      base.Tables.Add((DataTable) this.tableZRFunction);
      this.tableZRGlobalID = new ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDDataTable();
      base.Tables.Add((DataTable) this.tableZRGlobalID);
      this.tableZrOrder = new ZR_ClassLibrary.Schema_Access.Schema.ZrOrderDataTable();
      base.Tables.Add((DataTable) this.tableZrOrder);
      this.tableZRParameter = new ZR_ClassLibrary.Schema_Access.Schema.ZRParameterDataTable();
      base.Tables.Add((DataTable) this.tableZRParameter);
      this.tableZRTableNames = new ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesDataTable();
      base.Tables.Add((DataTable) this.tableZRTableNames);
      this.tableNodeLayers = new ZR_ClassLibrary.Schema_Access.Schema.NodeLayersDataTable();
      base.Tables.Add((DataTable) this.tableNodeLayers);
      this.tableExternalUserTable = new ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableDataTable();
      base.Tables.Add((DataTable) this.tableExternalUserTable);
      this.tableDocumentGroups = new ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsDataTable();
      base.Tables.Add((DataTable) this.tableDocumentGroups);
      this.tableDocuments = new ZR_ClassLibrary.Schema_Access.Schema.DocumentsDataTable();
      base.Tables.Add((DataTable) this.tableDocuments);
      this.tableErrorDescription = new ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionDataTable();
      base.Tables.Add((DataTable) this.tableErrorDescription);
      this.tableMultidataCache = new ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheDataTable();
      base.Tables.Add((DataTable) this.tableMultidataCache);
      this.tableWaveFlowDeviceModels = new ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsDataTable();
      base.Tables.Add((DataTable) this.tableWaveFlowDeviceModels);
      this.tableMinolDeviceDataRead = new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadDataTable();
      base.Tables.Add((DataTable) this.tableMinolDeviceDataRead);
      this.tableMinolDeviceData = new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataDataTable();
      base.Tables.Add((DataTable) this.tableMinolDeviceData);
      this.tableAutoboxCardConfiguration = new ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationDataTable();
      base.Tables.Add((DataTable) this.tableAutoboxCardConfiguration);
      this.tableAutoboxResistorCalibrationData = new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataDataTable();
      base.Tables.Add((DataTable) this.tableAutoboxResistorCalibrationData);
      this.tableAutoboxConfiguration = new ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationDataTable();
      base.Tables.Add((DataTable) this.tableAutoboxConfiguration);
      this.tableAutoboxResistorPairs = new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsDataTable();
      base.Tables.Add((DataTable) this.tableAutoboxResistorPairs);
      this.tableEnergyFactors = new ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsDataTable();
      base.Tables.Add((DataTable) this.tableEnergyFactors);
      this.tableMeterInfoProperties = new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesDataTable();
      base.Tables.Add((DataTable) this.tableMeterInfoProperties);
      this.tableEquipmentCalibration = new ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationDataTable();
      base.Tables.Add((DataTable) this.tableEquipmentCalibration);
      this.tableTranslationRules = new ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesDataTable();
      base.Tables.Add((DataTable) this.tableTranslationRules);
      this.tableMeterValues = new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesDataTable();
      base.Tables.Add((DataTable) this.tableMeterValues);
      this.tableMeterValuesAndSerial = new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialDataTable();
      base.Tables.Add((DataTable) this.tableMeterValuesAndSerial);
      this.tableOnlineTranslation = new ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationDataTable();
      base.Tables.Add((DataTable) this.tableOnlineTranslation);
      this.tableS3_FunctionParameter = new ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterDataTable();
      base.Tables.Add((DataTable) this.tableS3_FunctionParameter);
      this.tableMTypeVMT_Electronic = new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicDataTable();
      base.Tables.Add((DataTable) this.tableMTypeVMT_Electronic);
      this.tableMTypeVMT_Hydraulic = new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicDataTable();
      base.Tables.Add((DataTable) this.tableMTypeVMT_Hydraulic);
      this.tableDataQs = new ZR_ClassLibrary.Schema_Access.Schema.DataQsDataTable();
      base.Tables.Add((DataTable) this.tableDataQs);
      this.tableS3_Parameter = new ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterDataTable();
      base.Tables.Add((DataTable) this.tableS3_Parameter);
      this.tableSerialPortConfiguration = new ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationDataTable();
      base.Tables.Add((DataTable) this.tableSerialPortConfiguration);
      this.tableFilter = new ZR_ClassLibrary.Schema_Access.Schema.FilterDataTable();
      base.Tables.Add((DataTable) this.tableFilter);
      this.tableFilterValue = new ZR_ClassLibrary.Schema_Access.Schema.FilterValueDataTable();
      base.Tables.Add((DataTable) this.tableFilterValue);
      this.tablePostTranslationMapping = new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingDataTable();
      base.Tables.Add((DataTable) this.tablePostTranslationMapping);
      this.tablePostTranslationRules = new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesDataTable();
      base.Tables.Add((DataTable) this.tablePostTranslationRules);
      this.tablePTSensorParameters = new ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersDataTable();
      base.Tables.Add((DataTable) this.tablePTSensorParameters);
      this.tableSensorObservation = new ZR_ClassLibrary.Schema_Access.Schema.SensorObservationDataTable();
      base.Tables.Add((DataTable) this.tableSensorObservation);
      this.tableTestbenchNominalValuesHistory = new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryDataTable();
      base.Tables.Add((DataTable) this.tableTestbenchNominalValuesHistory);
      this.tableZRFunctionCompiled = new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledDataTable();
      base.Tables.Add((DataTable) this.tableZRFunctionCompiled);
      this.tableFactoryEquipmentPartlist = new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistDataTable();
      base.Tables.Add((DataTable) this.tableFactoryEquipmentPartlist);
      this.tableEquipmentPartlistCreation = new ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationDataTable();
      base.Tables.Add((DataTable) this.tableEquipmentPartlistCreation);
      this.tablePTCardChannelCalibration = new ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationDataTable();
      base.Tables.Add((DataTable) this.tablePTCardChannelCalibration);
      this.tablePTSensorCalibration = new ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationDataTable();
      base.Tables.Add((DataTable) this.tablePTSensorCalibration);
      this.tableEtalonCalibration = new ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationDataTable();
      base.Tables.Add((DataTable) this.tableEtalonCalibration);
      this.tableUserPermissions = new ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsDataTable();
      base.Tables.Add((DataTable) this.tableUserPermissions);
      this.tableMinomatList = new ZR_ClassLibrary.Schema_Access.Schema.MinomatListDataTable();
      base.Tables.Add((DataTable) this.tableMinomatList);
      this.tableInstallationChangeLog = new ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogDataTable();
      base.Tables.Add((DataTable) this.tableInstallationChangeLog);
      this.tableInstallations = new ZR_ClassLibrary.Schema_Access.Schema.InstallationsDataTable();
      base.Tables.Add((DataTable) this.tableInstallations);
      this.tableInstallationUsers = new ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersDataTable();
      base.Tables.Add((DataTable) this.tableInstallationUsers);
      this.tableChangeableParameters = new ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersDataTable();
      base.Tables.Add((DataTable) this.tableChangeableParameters);
      this.tableGmmImages = new ZR_ClassLibrary.Schema_Access.Schema.GmmImagesDataTable();
      base.Tables.Add((DataTable) this.tableGmmImages);
      this.tableConnectionSettings = new ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsDataTable();
      base.Tables.Add((DataTable) this.tableConnectionSettings);
      this.tableConnectionItems = new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsDataTable();
      base.Tables.Add((DataTable) this.tableConnectionItems);
      this.tableConnectionProfiles = new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesDataTable();
      base.Tables.Add((DataTable) this.tableConnectionProfiles);
      this.tableServiceTaskResult = new ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultDataTable();
      base.Tables.Add((DataTable) this.tableServiceTaskResult);
      this.tableMeterMSS = new ZR_ClassLibrary.Schema_Access.Schema.MeterMSSDataTable();
      base.Tables.Add((DataTable) this.tableMeterMSS);
      this.tableTestbenchFlowSettings = new ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsDataTable();
      base.Tables.Add((DataTable) this.tableTestbenchFlowSettings);
      this.tableMinomatConnectionLogs = new ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsDataTable();
      base.Tables.Add((DataTable) this.tableMinomatConnectionLogs);
      this.tableMinomatDataLogs = new ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsDataTable();
      base.Tables.Add((DataTable) this.tableMinomatDataLogs);
      this.tableMeterChanges = new ZR_ClassLibrary.Schema_Access.Schema.MeterChangesDataTable();
      base.Tables.Add((DataTable) this.tableMeterChanges);
      this.tableTransducerPallet = new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletDataTable();
      base.Tables.Add((DataTable) this.tableTransducerPallet);
      this.tableTransducerPalletState = new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateDataTable();
      base.Tables.Add((DataTable) this.tableTransducerPalletState);
      this.tableTransducerPalletType = new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeDataTable();
      base.Tables.Add((DataTable) this.tableTransducerPalletType);
      this.tableConnectionItemParameters = new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersDataTable();
      base.Tables.Add((DataTable) this.tableConnectionItemParameters);
      this.tableConnectionProfileParameters = new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersDataTable();
      base.Tables.Add((DataTable) this.tableConnectionProfileParameters);
      this.tableConnectionProfileFilters = new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersDataTable();
      base.Tables.Add((DataTable) this.tableConnectionProfileFilters);
      this.tableSoftwareUsers = new ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersDataTable();
      base.Tables.Add((DataTable) this.tableSoftwareUsers);
      this.tableNotificationRecord = new ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordDataTable();
      base.Tables.Add((DataTable) this.tableNotificationRecord);
      this.tableSAP_Cache = new ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheDataTable();
      base.Tables.Add((DataTable) this.tableSAP_Cache);
      this.tableSAP_ClassUsing = new ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingDataTable();
      base.Tables.Add((DataTable) this.tableSAP_ClassUsing);
      ForeignKeyConstraint foreignKeyConstraint = new ForeignKeyConstraint("FK_MinomatConnections_MinomatLogs", new DataColumn[1]
      {
        this.tableMinomatConnectionLogs.ConnectionIDColumn
      }, new DataColumn[1]
      {
        this.tableMinomatDataLogs.ConnectionIDColumn
      });
      this.tableMinomatDataLogs.Constraints.Add((Constraint) foreignKeyConstraint);
      foreignKeyConstraint.AcceptRejectRule = AcceptRejectRule.None;
      foreignKeyConstraint.DeleteRule = Rule.Cascade;
      foreignKeyConstraint.UpdateRule = Rule.Cascade;
      this.relationFunctionDatalogger = new DataRelation("FunctionDatalogger", new DataColumn[1]
      {
        this.tableZRFunction.FunctionNumberColumn
      }, new DataColumn[1]
      {
        this.tableDatalogger.FunctionNumberColumn
      }, false);
      this.Relations.Add(this.relationFunctionDatalogger);
      this.relationEquipmentTypeDescriptionFactoryEquipment = new DataRelation("EquipmentTypeDescriptionFactoryEquipment", new DataColumn[1]
      {
        this.tableEquipmentTypeDescription.EquipmentTypeColumn
      }, new DataColumn[1]
      {
        this.tableFactoryEquipment.EquipmentTypeColumn
      }, false);
      this.Relations.Add(this.relationEquipmentTypeDescriptionFactoryEquipment);
      this.relationProgFilesHardwareType = new DataRelation("ProgFilesHardwareType", new DataColumn[1]
      {
        this.tableProgFiles.MapIDColumn
      }, new DataColumn[1]
      {
        this.tableHardwareType.MapIDColumn
      }, false);
      this.Relations.Add(this.relationProgFilesHardwareType);
      this.relationHTypeSaariusIncludeDef = new DataRelation("HTypeSaariusIncludeDef", new DataColumn[1]
      {
        this.tableHardwareType.HardwareTypeIDColumn
      }, new DataColumn[1]
      {
        this.tableIncludeDef.MapIDColumn
      }, false);
      this.Relations.Add(this.relationHTypeSaariusIncludeDef);
      this.relationBlockNamesLinkerTable = new DataRelation("BlockNamesLinkerTable", new DataColumn[1]
      {
        this.tableBlockNames.BlockIdColumn
      }, new DataColumn[1]
      {
        this.tableLinkerTable.BlockIdColumn
      }, false);
      this.Relations.Add(this.relationBlockNamesLinkerTable);
      this.relationHardwareTypeLinkerTable = new DataRelation("HardwareTypeLinkerTable", new DataColumn[1]
      {
        this.tableHardwareType.HardwareTypeIDColumn
      }, new DataColumn[1]
      {
        this.tableLinkerTable.LinkerTableIDColumn
      }, false);
      this.Relations.Add(this.relationHardwareTypeLinkerTable);
      this.relationHTypeSaariusMapDef = new DataRelation("HTypeSaariusMapDef", new DataColumn[1]
      {
        this.tableHardwareType.HardwareTypeIDColumn
      }, new DataColumn[1]{ this.tableMapDef.MapIDColumn }, false);
      this.Relations.Add(this.relationHTypeSaariusMapDef);
      this.relationFunctionMBusCode = new DataRelation("FunctionMBusCode", new DataColumn[1]
      {
        this.tableZRFunction.FunctionNumberColumn
      }, new DataColumn[1]
      {
        this.tableMBusCode.FunctionNumberColumn
      }, false);
      this.Relations.Add(this.relationFunctionMBusCode);
      this.relationFunctionMenu = new DataRelation("FunctionMenu", new DataColumn[1]
      {
        this.tableZRFunction.FunctionNumberColumn
      }, new DataColumn[1]
      {
        this.tableMenu.FunctionNumberColumn
      }, false);
      this.Relations.Add(this.relationFunctionMenu);
      this.relationMeterInfoMeter = new DataRelation("MeterInfoMeter", new DataColumn[1]
      {
        this.tableMeterInfo.MeterInfoIDColumn
      }, new DataColumn[1]
      {
        this.tableMeter.MeterInfoIDColumn
      }, false);
      this.Relations.Add(this.relationMeterInfoMeter);
      this.relationMeterMeterData = new DataRelation("MeterMeterData", new DataColumn[1]
      {
        this.tableMeter.MeterIDColumn
      }, new DataColumn[1]
      {
        this.tableMeterData.MeterIDColumn
      }, false);
      this.Relations.Add(this.relationMeterMeterData);
      this.relationManufacturerMeterHardware = new DataRelation("ManufacturerMeterHardware", new DataColumn[1]
      {
        this.tableManufacturer.ManufacturerIDColumn
      }, new DataColumn[1]
      {
        this.tableMeterHardware.ManufacturerIDColumn
      }, false);
      this.Relations.Add(this.relationManufacturerMeterHardware);
      this.relationHardwareTypeMeterInfo = new DataRelation("HardwareTypeMeterInfo", new DataColumn[1]
      {
        this.tableHardwareType.HardwareTypeIDColumn
      }, new DataColumn[1]
      {
        this.tableMeterInfo.HardwareTypeIDColumn
      }, false);
      this.Relations.Add(this.relationHardwareTypeMeterInfo);
      this.relationMeterTypeMeterInfo = new DataRelation("MeterTypeMeterInfo", new DataColumn[1]
      {
        this.tableMeterType.MeterTypeIDColumn
      }, new DataColumn[1]
      {
        this.tableMeterInfo.MeterTypeIDColumn
      }, false);
      this.Relations.Add(this.relationMeterTypeMeterInfo);
      this.relationMeterTypeMTypeSaariuskapsel = new DataRelation("MeterTypeMTypeSaariuskapsel", new DataColumn[1]
      {
        this.tableMeterType.MeterTypeIDColumn
      }, new DataColumn[1]
      {
        this.tableMTypeKapsel.MeterTypeIDColumn
      }, false);
      this.Relations.Add(this.relationMeterTypeMTypeSaariuskapsel);
      this.relationMeterTypeMTypeSaarius = new DataRelation("MeterTypeMTypeSaarius", new DataColumn[1]
      {
        this.tableMeterType.MeterTypeIDColumn
      }, new DataColumn[1]
      {
        this.tableMTypeSaarius.MeterTypeIDColumn
      }, false);
      this.Relations.Add(this.relationMeterTypeMTypeSaarius);
      this.relationMeterTypeMTypeTempSensor = new DataRelation("MeterTypeMTypeTempSensor", new DataColumn[1]
      {
        this.tableMeterType.MeterTypeIDColumn
      }, new DataColumn[1]
      {
        this.tableMTypeTempSensor.MeterTypeIDColumn
      }, false);
      this.Relations.Add(this.relationMeterTypeMTypeTempSensor);
      this.relationMeterTypeMTypeZelsius = new DataRelation("MeterTypeMTypeZelsius", new DataColumn[1]
      {
        this.tableMeterType.MeterTypeIDColumn
      }, new DataColumn[1]
      {
        this.tableMTypeZelsius.MeterTypeIDColumn
      }, false);
      this.Relations.Add(this.relationMeterTypeMTypeZelsius);
      this.relationMeterTypeMTypeZelsiusModule = new DataRelation("MeterTypeMTypeZelsiusModule", new DataColumn[1]
      {
        this.tableMeterType.MeterTypeIDColumn
      }, new DataColumn[1]
      {
        this.tableMTypeZelsiusModule.MeterTypeIDColumn
      }, false);
      this.Relations.Add(this.relationMeterTypeMTypeZelsiusModule);
      this.relationMeterRepair = new DataRelation("MeterRepair", new DataColumn[1]
      {
        this.tableMeter.MeterIDColumn
      }, new DataColumn[1]{ this.tableRepair.MeterIDColumn }, false);
      this.Relations.Add(this.relationMeterRepair);
      this.relationRepairErrorGroupsRepair = new DataRelation("RepairErrorGroupsRepair", new DataColumn[1]
      {
        this.tableRepairErrorGroups.RepairErrorGroupIdColumn
      }, new DataColumn[1]
      {
        this.tableRepair.RepairErrorGroupIdColumn
      }, false);
      this.Relations.Add(this.relationRepairErrorGroupsRepair);
      this.relationFunctionRuntimeCodeKopf = new DataRelation("FunctionRuntimeCodeKopf", new DataColumn[1]
      {
        this.tableZRFunction.FunctionNumberColumn
      }, new DataColumn[1]
      {
        this.tableRuntimeCode.FunctionNumberColumn
      }, false);
      this.Relations.Add(this.relationFunctionRuntimeCodeKopf);
      this.relationMeterInfoTypeOverrideParameters = new DataRelation("MeterInfoTypeOverrideParameters", new DataColumn[1]
      {
        this.tableMeterInfo.MeterInfoIDColumn
      }, new DataColumn[1]
      {
        this.tableTypeOverwriteParameters.MeterInfoIDColumn
      }, false);
      this.Relations.Add(this.relationMeterInfoTypeOverrideParameters);
      this.relationFunctionParameter = new DataRelation("FunctionParameter", new DataColumn[1]
      {
        this.tableZRFunction.FunctionNumberColumn
      }, new DataColumn[1]
      {
        this.tableZRParameter.FunctionNumberColumn
      }, false);
      this.Relations.Add(this.relationFunctionParameter);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeEnumTranslation() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMTypeElectronic() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeBlockNames() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeCode() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeControllerCode() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeCurrentUsers() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeCustomer() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeDatabaseIdentification() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeDatabaseLocation() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeDatalogger() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeDataLoggerentry() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeDBTranslator() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeDBTranslatorStruct() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeDisplayCode() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeEquipmentTypeDescription() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeFactoryEquipment() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeGMM_User() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeHardwareResources() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeHardwareType() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeIncludeDef() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeLinkerTable() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeManufacturer() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMapBase() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMapDef() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMBusCode() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMBusParameterTranslation() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMenu() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeter() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterData() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterDataRequest() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterHardware() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterInfo() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterPosition() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterType() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMTypeKapsel() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMTypeMIDWaterMeter() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMTypeSaarius() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMTypeTempSensor() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMTypeWaterMeter() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMTypeZelsius() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMTypeZelsiusModule() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeNodeList() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeNodeReferences() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePartlist() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePPS_Cache() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePPS_CacheClassNames() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePPS_CacheParmNames() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePPS_RW_WMZ_Mapper() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePPS_STS_Reference() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeProgFiles() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePValueIdent() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeRepair() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeRepairErrorGroups() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeRuntimeCode() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTest() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTestbenchActualValues() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTestbenchNominalValues() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTestEquipment() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTestPointList() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTestResistorTable() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTestResult() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTestResultExtended() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTestType() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTypeOverwriteParameters() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeUnits() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWaterDensity() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWMApprovalData() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWMApprovals() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWMClasses() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWMCounterTypes() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWMErrorOffset() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWMMIDApprovalData() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWMMIDErrorOffset() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWMMIDTestingTypes() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWMOrders() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWMRatios() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWMTestingTypes() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeZRFunction() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeZRGlobalID() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeZrOrder() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeZRParameter() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeZRTableNames() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeNodeLayers() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeExternalUserTable() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeDocumentGroups() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeDocuments() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeErrorDescription() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMultidataCache() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeWaveFlowDeviceModels() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMinolDeviceDataRead() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMinolDeviceData() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeAutoboxCardConfiguration() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeAutoboxResistorCalibrationData() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeAutoboxConfiguration() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeAutoboxResistorPairs() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeEnergyFactors() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterInfoProperties() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeEquipmentCalibration() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTranslationRules() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterValues() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterValuesAndSerial() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeOnlineTranslation() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeS3_FunctionParameter() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMTypeVMT_Electronic() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMTypeVMT_Hydraulic() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeDataQs() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeS3_Parameter() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSerialPortConfiguration() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeFilter() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeFilterValue() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePostTranslationMapping() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePostTranslationRules() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePTSensorParameters() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSensorObservation() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTestbenchNominalValuesHistory() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeZRFunctionCompiled() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeFactoryEquipmentPartlist() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeEquipmentPartlistCreation() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePTCardChannelCalibration() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializePTSensorCalibration() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeEtalonCalibration() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeUserPermissions() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMinomatList() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeInstallationChangeLog() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeInstallations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeInstallationUsers() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeChangeableParameters() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeGmmImages() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeConnectionSettings() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeConnectionItems() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeConnectionProfiles() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeServiceTaskResult() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterMSS() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTestbenchFlowSettings() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMinomatConnectionLogs() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMinomatDataLogs() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterChanges() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTransducerPallet() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTransducerPalletState() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeTransducerPalletType() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeConnectionItemParameters() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeConnectionProfileParameters() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeConnectionProfileFilters() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSoftwareUsers() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeNotificationRecord() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSAP_Cache() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSAP_ClassUsing() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
      if (e.Action != CollectionChangeAction.Remove)
        return;
      this.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
      ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
      XmlSchemaComplexType typedDataSetSchema = new XmlSchemaComplexType();
      XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
      xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
      {
        Namespace = schema.Namespace
      });
      typedDataSetSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
      XmlSchema schemaSerializable = schema.GetSchemaSerializable();
      if (xs.Contains(schemaSerializable.TargetNamespace))
      {
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        try
        {
          schemaSerializable.Write((Stream) memoryStream1);
          IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
          while (enumerator.MoveNext())
          {
            XmlSchema current = (XmlSchema) enumerator.Current;
            memoryStream2.SetLength(0L);
            current.Write((Stream) memoryStream2);
            if (memoryStream1.Length == memoryStream2.Length)
            {
              memoryStream1.Position = 0L;
              memoryStream2.Position = 0L;
              do
                ;
              while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
              if (memoryStream1.Position == memoryStream1.Length)
                return typedDataSetSchema;
            }
          }
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
      }
      xs.Add(schemaSerializable);
      return typedDataSetSchema;
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class SoftwareUsersDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow>
    {
      private DataColumn columnUserId;
      private DataColumn columnName;
      private DataColumn columnPersonalNumber;
      private DataColumn columnPassword;
      private DataColumn columnLanguageSetting;
      private DataColumn columnControlKey;
      private DataColumn columnUserRole;
      private DataColumn columnOnlyFinterprintLogin;
      private DataColumn columnPhoneNumber;
      private DataColumn columnEmailAddress;
      private DataColumn columnPNSource;
      private DataColumn columnUserExtendedInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SoftwareUsersDataTable()
      {
        this.TableName = "SoftwareUsers";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SoftwareUsersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected SoftwareUsersDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserIdColumn => this.columnUserId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NameColumn => this.columnName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonalNumberColumn => this.columnPersonalNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PasswordColumn => this.columnPassword;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LanguageSettingColumn => this.columnLanguageSetting;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ControlKeyColumn => this.columnControlKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserRoleColumn => this.columnUserRole;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn OnlyFinterprintLoginColumn => this.columnOnlyFinterprintLogin;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PhoneNumberColumn => this.columnPhoneNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EmailAddressColumn => this.columnEmailAddress;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PNSourceColumn => this.columnPNSource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserExtendedInfoColumn => this.columnUserExtendedInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRowChangeEventHandler SoftwareUsersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRowChangeEventHandler SoftwareUsersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRowChangeEventHandler SoftwareUsersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRowChangeEventHandler SoftwareUsersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddSoftwareUsersRow(ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow AddSoftwareUsersRow(
        int UserId,
        string Name,
        int PersonalNumber,
        string Password,
        string LanguageSetting,
        string ControlKey,
        int UserRole,
        bool OnlyFinterprintLogin,
        string PhoneNumber,
        string EmailAddress,
        string PNSource,
        string UserExtendedInfo)
      {
        ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow row = (ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) UserId,
          (object) Name,
          (object) PersonalNumber,
          (object) Password,
          (object) LanguageSetting,
          (object) ControlKey,
          (object) UserRole,
          (object) OnlyFinterprintLogin,
          (object) PhoneNumber,
          (object) EmailAddress,
          (object) PNSource,
          (object) UserExtendedInfo
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow FindByUserId(int UserId)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow) this.Rows.Find(new object[1]
        {
          (object) UserId
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersDataTable softwareUsersDataTable = (ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersDataTable) base.Clone();
        softwareUsersDataTable.InitVars();
        return (DataTable) softwareUsersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnUserId = this.Columns["UserId"];
        this.columnName = this.Columns["Name"];
        this.columnPersonalNumber = this.Columns["PersonalNumber"];
        this.columnPassword = this.Columns["Password"];
        this.columnLanguageSetting = this.Columns["LanguageSetting"];
        this.columnControlKey = this.Columns["ControlKey"];
        this.columnUserRole = this.Columns["UserRole"];
        this.columnOnlyFinterprintLogin = this.Columns["OnlyFinterprintLogin"];
        this.columnPhoneNumber = this.Columns["PhoneNumber"];
        this.columnEmailAddress = this.Columns["EmailAddress"];
        this.columnPNSource = this.Columns["PNSource"];
        this.columnUserExtendedInfo = this.Columns["UserExtendedInfo"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnUserId = new DataColumn("UserId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserId);
        this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnName);
        this.columnPersonalNumber = new DataColumn("PersonalNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonalNumber);
        this.columnPassword = new DataColumn("Password", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPassword);
        this.columnLanguageSetting = new DataColumn("LanguageSetting", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLanguageSetting);
        this.columnControlKey = new DataColumn("ControlKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnControlKey);
        this.columnUserRole = new DataColumn("UserRole", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserRole);
        this.columnOnlyFinterprintLogin = new DataColumn("OnlyFinterprintLogin", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOnlyFinterprintLogin);
        this.columnPhoneNumber = new DataColumn("PhoneNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPhoneNumber);
        this.columnEmailAddress = new DataColumn("EmailAddress", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEmailAddress);
        this.columnPNSource = new DataColumn("PNSource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPNSource);
        this.columnUserExtendedInfo = new DataColumn("UserExtendedInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserExtendedInfo);
        this.Constraints.Add((Constraint) new UniqueConstraint("UsersPk", new DataColumn[1]
        {
          this.columnUserId
        }, true));
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnName
        }, false));
        this.columnUserId.AllowDBNull = false;
        this.columnUserId.Unique = true;
        this.columnName.AllowDBNull = false;
        this.columnName.Unique = true;
        this.columnName.MaxLength = 50;
        this.columnPassword.MaxLength = 100;
        this.columnLanguageSetting.MaxLength = 20;
        this.columnControlKey.MaxLength = 100;
        this.columnUserRole.DefaultValue = (object) 0;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow NewSoftwareUsersRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.SoftwareUsersRowChanged == null)
          return;
        this.SoftwareUsersRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.SoftwareUsersRowChanging == null)
          return;
        this.SoftwareUsersRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.SoftwareUsersRowDeleted == null)
          return;
        this.SoftwareUsersRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.SoftwareUsersRowDeleting == null)
          return;
        this.SoftwareUsersRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveSoftwareUsersRow(ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (SoftwareUsersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TestbenchFlowSettingsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow>
    {
      private DataColumn columnCreationDate;
      private DataColumn columnEquipmentID;
      private DataColumn columnTestbenchLine;
      private DataColumn columnNumberOfDevices;
      private DataColumn columnDeviceType;
      private DataColumn columnNominalFlow;
      private DataColumn columnFlowSettings;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchFlowSettingsDataTable()
      {
        this.TableName = "TestbenchFlowSettings";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestbenchFlowSettingsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TestbenchFlowSettingsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CreationDateColumn => this.columnCreationDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestbenchLineColumn => this.columnTestbenchLine;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NumberOfDevicesColumn => this.columnNumberOfDevices;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DeviceTypeColumn => this.columnDeviceType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NominalFlowColumn => this.columnNominalFlow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowSettingsColumn => this.columnFlowSettings;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRowChangeEventHandler TestbenchFlowSettingsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRowChangeEventHandler TestbenchFlowSettingsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRowChangeEventHandler TestbenchFlowSettingsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRowChangeEventHandler TestbenchFlowSettingsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTestbenchFlowSettingsRow(ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow AddTestbenchFlowSettingsRow(
        DateTime CreationDate,
        int EquipmentID,
        short TestbenchLine,
        short NumberOfDevices,
        string DeviceType,
        int NominalFlow,
        string FlowSettings)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow row = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) CreationDate,
          (object) EquipmentID,
          (object) TestbenchLine,
          (object) NumberOfDevices,
          (object) DeviceType,
          (object) NominalFlow,
          (object) FlowSettings
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow FindByCreationDateEquipmentID(
        DateTime CreationDate,
        int EquipmentID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow) this.Rows.Find(new object[2]
        {
          (object) CreationDate,
          (object) EquipmentID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsDataTable settingsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsDataTable) base.Clone();
        settingsDataTable.InitVars();
        return (DataTable) settingsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnCreationDate = this.Columns["CreationDate"];
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnTestbenchLine = this.Columns["TestbenchLine"];
        this.columnNumberOfDevices = this.Columns["NumberOfDevices"];
        this.columnDeviceType = this.Columns["DeviceType"];
        this.columnNominalFlow = this.Columns["NominalFlow"];
        this.columnFlowSettings = this.Columns["FlowSettings"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnCreationDate = new DataColumn("CreationDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCreationDate);
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnTestbenchLine = new DataColumn("TestbenchLine", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestbenchLine);
        this.columnNumberOfDevices = new DataColumn("NumberOfDevices", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNumberOfDevices);
        this.columnDeviceType = new DataColumn("DeviceType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeviceType);
        this.columnNominalFlow = new DataColumn("NominalFlow", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNominalFlow);
        this.columnFlowSettings = new DataColumn("FlowSettings", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowSettings);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnCreationDate,
          this.columnEquipmentID
        }, true));
        this.columnCreationDate.AllowDBNull = false;
        this.columnEquipmentID.AllowDBNull = false;
        this.columnDeviceType.MaxLength = (int) byte.MaxValue;
        this.columnFlowSettings.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow NewTestbenchFlowSettingsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TestbenchFlowSettingsRowChanged == null)
          return;
        this.TestbenchFlowSettingsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TestbenchFlowSettingsRowChanging == null)
          return;
        this.TestbenchFlowSettingsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TestbenchFlowSettingsRowDeleted == null)
          return;
        this.TestbenchFlowSettingsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TestbenchFlowSettingsRowDeleting == null)
          return;
        this.TestbenchFlowSettingsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTestbenchFlowSettingsRow(ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TestbenchFlowSettingsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    private class ConnectionSelectionDataTable
    {
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class PTCardChannelCalibrationDataTable : 
      TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow>
    {
      private DataColumn columnEquipmentIDCard;
      private DataColumn columnEquipmentIDCardChannel;
      private DataColumn columnCalibrationID;
      private DataColumn columnResistance1_Device;
      private DataColumn columnResistance1_Ref;
      private DataColumn columnResistance2_Device;
      private DataColumn columnResistance2_Ref;
      private DataColumn columnResistanceOffset;
      private DataColumn columnResistanceGradient;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PTCardChannelCalibrationDataTable()
      {
        this.TableName = "PTCardChannelCalibration";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PTCardChannelCalibrationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected PTCardChannelCalibrationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDCardColumn => this.columnEquipmentIDCard;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDCardChannelColumn => this.columnEquipmentIDCardChannel;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationIDColumn => this.columnCalibrationID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Resistance1_DeviceColumn => this.columnResistance1_Device;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Resistance1_RefColumn => this.columnResistance1_Ref;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Resistance2_DeviceColumn => this.columnResistance2_Device;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Resistance2_RefColumn => this.columnResistance2_Ref;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistanceOffsetColumn => this.columnResistanceOffset;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistanceGradientColumn => this.columnResistanceGradient;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRowChangeEventHandler PTCardChannelCalibrationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRowChangeEventHandler PTCardChannelCalibrationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRowChangeEventHandler PTCardChannelCalibrationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRowChangeEventHandler PTCardChannelCalibrationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddPTCardChannelCalibrationRow(ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow AddPTCardChannelCalibrationRow(
        int EquipmentIDCard,
        int EquipmentIDCardChannel,
        int CalibrationID,
        double Resistance1_Device,
        double Resistance1_Ref,
        double Resistance2_Device,
        double Resistance2_Ref,
        double ResistanceOffset,
        double ResistanceGradient)
      {
        ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow row = (ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) EquipmentIDCard,
          (object) EquipmentIDCardChannel,
          (object) CalibrationID,
          (object) Resistance1_Device,
          (object) Resistance1_Ref,
          (object) Resistance2_Device,
          (object) Resistance2_Ref,
          (object) ResistanceOffset,
          (object) ResistanceGradient
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow FindByEquipmentIDCardEquipmentIDCardChannelCalibrationID(
        int EquipmentIDCard,
        int EquipmentIDCardChannel,
        int CalibrationID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow) this.Rows.Find(new object[3]
        {
          (object) EquipmentIDCard,
          (object) EquipmentIDCardChannel,
          (object) CalibrationID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationDataTable calibrationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationDataTable) base.Clone();
        calibrationDataTable.InitVars();
        return (DataTable) calibrationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentIDCard = this.Columns["EquipmentIDCard"];
        this.columnEquipmentIDCardChannel = this.Columns["EquipmentIDCardChannel"];
        this.columnCalibrationID = this.Columns["CalibrationID"];
        this.columnResistance1_Device = this.Columns["Resistance1_Device"];
        this.columnResistance1_Ref = this.Columns["Resistance1_Ref"];
        this.columnResistance2_Device = this.Columns["Resistance2_Device"];
        this.columnResistance2_Ref = this.Columns["Resistance2_Ref"];
        this.columnResistanceOffset = this.Columns["ResistanceOffset"];
        this.columnResistanceGradient = this.Columns["ResistanceGradient"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentIDCard = new DataColumn("EquipmentIDCard", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentIDCard);
        this.columnEquipmentIDCardChannel = new DataColumn("EquipmentIDCardChannel", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentIDCardChannel);
        this.columnCalibrationID = new DataColumn("CalibrationID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationID);
        this.columnResistance1_Device = new DataColumn("Resistance1_Device", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistance1_Device);
        this.columnResistance1_Ref = new DataColumn("Resistance1_Ref", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistance1_Ref);
        this.columnResistance2_Device = new DataColumn("Resistance2_Device", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistance2_Device);
        this.columnResistance2_Ref = new DataColumn("Resistance2_Ref", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistance2_Ref);
        this.columnResistanceOffset = new DataColumn("ResistanceOffset", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistanceOffset);
        this.columnResistanceGradient = new DataColumn("ResistanceGradient", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistanceGradient);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnEquipmentIDCard,
          this.columnEquipmentIDCardChannel,
          this.columnCalibrationID
        }, true));
        this.columnEquipmentIDCard.AllowDBNull = false;
        this.columnEquipmentIDCardChannel.AllowDBNull = false;
        this.columnCalibrationID.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow NewPTCardChannelCalibrationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.PTCardChannelCalibrationRowChanged == null)
          return;
        this.PTCardChannelCalibrationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.PTCardChannelCalibrationRowChanging == null)
          return;
        this.PTCardChannelCalibrationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.PTCardChannelCalibrationRowDeleted == null)
          return;
        this.PTCardChannelCalibrationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.PTCardChannelCalibrationRowDeleting == null)
          return;
        this.PTCardChannelCalibrationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemovePTCardChannelCalibrationRow(ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (PTCardChannelCalibrationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class FactoryEquipmentPartlistDataTable : 
      TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow>
    {
      private DataColumn columnPartlistID;
      private DataColumn columnMainEquipmentID;
      private DataColumn columnPartEquipmentID;
      private DataColumn columnEquipmentIdentifier;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public FactoryEquipmentPartlistDataTable()
      {
        this.TableName = "FactoryEquipmentPartlist";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal FactoryEquipmentPartlistDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected FactoryEquipmentPartlistDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PartlistIDColumn => this.columnPartlistID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MainEquipmentIDColumn => this.columnMainEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PartEquipmentIDColumn => this.columnPartEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIdentifierColumn => this.columnEquipmentIdentifier;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRowChangeEventHandler FactoryEquipmentPartlistRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRowChangeEventHandler FactoryEquipmentPartlistRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRowChangeEventHandler FactoryEquipmentPartlistRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRowChangeEventHandler FactoryEquipmentPartlistRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddFactoryEquipmentPartlistRow(ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow AddFactoryEquipmentPartlistRow(
        int PartlistID,
        int MainEquipmentID,
        int PartEquipmentID,
        int EquipmentIdentifier)
      {
        ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow row = (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) PartlistID,
          (object) MainEquipmentID,
          (object) PartEquipmentID,
          (object) EquipmentIdentifier
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow FindByPartlistIDEquipmentIdentifierPartEquipmentIDMainEquipmentID(
        int PartlistID,
        int EquipmentIdentifier,
        int PartEquipmentID,
        int MainEquipmentID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow) this.Rows.Find(new object[4]
        {
          (object) PartlistID,
          (object) EquipmentIdentifier,
          (object) PartEquipmentID,
          (object) MainEquipmentID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistDataTable partlistDataTable = (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistDataTable) base.Clone();
        partlistDataTable.InitVars();
        return (DataTable) partlistDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPartlistID = this.Columns["PartlistID"];
        this.columnMainEquipmentID = this.Columns["MainEquipmentID"];
        this.columnPartEquipmentID = this.Columns["PartEquipmentID"];
        this.columnEquipmentIdentifier = this.Columns["EquipmentIdentifier"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPartlistID = new DataColumn("PartlistID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPartlistID);
        this.columnMainEquipmentID = new DataColumn("MainEquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMainEquipmentID);
        this.columnPartEquipmentID = new DataColumn("PartEquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPartEquipmentID);
        this.columnEquipmentIdentifier = new DataColumn("EquipmentIdentifier", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentIdentifier);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[4]
        {
          this.columnPartlistID,
          this.columnEquipmentIdentifier,
          this.columnPartEquipmentID,
          this.columnMainEquipmentID
        }, true));
        this.columnPartlistID.AllowDBNull = false;
        this.columnMainEquipmentID.AllowDBNull = false;
        this.columnPartEquipmentID.AllowDBNull = false;
        this.columnEquipmentIdentifier.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow NewFactoryEquipmentPartlistRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.FactoryEquipmentPartlistRowChanged == null)
          return;
        this.FactoryEquipmentPartlistRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.FactoryEquipmentPartlistRowChanging == null)
          return;
        this.FactoryEquipmentPartlistRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.FactoryEquipmentPartlistRowDeleted == null)
          return;
        this.FactoryEquipmentPartlistRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.FactoryEquipmentPartlistRowDeleting == null)
          return;
        this.FactoryEquipmentPartlistRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveFactoryEquipmentPartlistRow(ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (FactoryEquipmentPartlistDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    private class SensorCalibrationDataTable
    {
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void EnumTranslationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MTypeElectronicRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void BlockNamesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void CodeRowChangeEventHandler(object sender, ZR_ClassLibrary.Schema_Access.Schema.CodeRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ControllerCodeRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void CurrentUsersRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void CustomerRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.CustomerRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void DatabaseIdentificationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void DatabaseLocationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void DataloggerRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.DataloggerRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void DataLoggerentryRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void DBTranslatorRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void DBTranslatorStructRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void DisplayCodeRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void EquipmentTypeDescriptionRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void FactoryEquipmentRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void GMM_UserRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void HardwareResourcesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void HardwareTypeRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void IncludeDefRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void LinkerTableRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ManufacturerRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MapBaseRowChangeEventHandler(object sender, ZR_ClassLibrary.Schema_Access.Schema.MapBaseRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MapDefRowChangeEventHandler(object sender, ZR_ClassLibrary.Schema_Access.Schema.MapDefRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MBusCodeRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MBusParameterTranslationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MenuRowChangeEventHandler(object sender, ZR_ClassLibrary.Schema_Access.Schema.MenuRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterRowChangeEventHandler(object sender, ZR_ClassLibrary.Schema_Access.Schema.MeterRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterDataRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MeterDataRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterDataRequestRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterHardwareRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterInfoRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterPositionRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterTypeRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MTypeKapselRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MTypeMIDWaterMeterRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MTypeSaariusRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MTypeTempSensorRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MTypeWaterMeterRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MTypeZelsiusRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MTypeZelsiusModuleRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void NodeListRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.NodeListRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void NodeReferencesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PartlistRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.PartlistRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PPS_CacheRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PPS_CacheClassNamesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PPS_CacheParmNamesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PPS_RW_WMZ_MapperRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PPS_STS_ReferenceRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ProgFilesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PValueIdentRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void RepairRowChangeEventHandler(object sender, ZR_ClassLibrary.Schema_Access.Schema.RepairRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void RepairErrorGroupsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void RuntimeCodeRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TestRowChangeEventHandler(object sender, ZR_ClassLibrary.Schema_Access.Schema.TestRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TestbenchActualValuesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TestbenchNominalValuesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TestEquipmentRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TestPointListRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TestPointListRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TestResistorTableRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TestResultRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TestResultRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TestResultExtendedRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TestTypeRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TestTypeRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TypeOverwriteParametersRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void UnitsRowChangeEventHandler(object sender, ZR_ClassLibrary.Schema_Access.Schema.UnitsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WaterDensityRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WMApprovalDataRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WMApprovalsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WMClassesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WMClassesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WMCounterTypesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WMErrorOffsetRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WMMIDApprovalDataRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WMMIDErrorOffsetRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WMMIDTestingTypesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WMOrdersRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WMRatiosRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WMTestingTypesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ZRFunctionRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ZRGlobalIDRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ZrOrderRowChangeEventHandler(object sender, ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ZRParameterRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ZRTableNamesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void NodeLayersRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ExternalUserTableRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void DocumentGroupsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void DocumentsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.DocumentsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ErrorDescriptionRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MultidataCacheRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void WaveFlowDeviceModelsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MinolDeviceDataReadRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MinolDeviceDataRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void AutoboxCardConfigurationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void AutoboxResistorCalibrationDataRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void AutoboxConfigurationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void AutoboxResistorPairsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void EnergyFactorsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterInfoPropertiesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void EquipmentCalibrationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TranslationRulesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterValuesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterValuesAndSerialRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void OnlineTranslationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void S3_FunctionParameterRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MTypeVMT_ElectronicRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MTypeVMT_HydraulicRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void DataQsRowChangeEventHandler(object sender, ZR_ClassLibrary.Schema_Access.Schema.DataQsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void S3_ParameterRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SerialPortConfigurationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void FilterRowChangeEventHandler(object sender, ZR_ClassLibrary.Schema_Access.Schema.FilterRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void FilterValueRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.FilterValueRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PostTranslationMappingRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PostTranslationRulesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PTSensorParametersRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SensorObservationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TestbenchNominalValuesHistoryRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ZRFunctionCompiledRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void FactoryEquipmentPartlistRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void EquipmentPartlistCreationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PTCardChannelCalibrationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void PTSensorCalibrationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void EtalonCalibrationRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void UserPermissionsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MinomatListRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MinomatListRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void InstallationChangeLogRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void InstallationsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.InstallationsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void InstallationUsersRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ChangeableParametersRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void GmmImagesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ConnectionSettingsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ConnectionItemsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ConnectionProfilesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ServiceTaskResultRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterMSSRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TestbenchFlowSettingsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MinomatConnectionLogsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MinomatDataLogsRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterChangesRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TransducerPalletRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TransducerPalletStateRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void TransducerPalletTypeRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ConnectionItemParametersRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ConnectionProfileParametersRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ConnectionProfileFiltersRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SoftwareUsersRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void NotificationRecordRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SAP_CacheRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SAP_ClassUsingRowChangeEventHandler(
      object sender,
      ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class EnumTranslationDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow>
    {
      private DataColumn columnEnumName;
      private DataColumn columnEnumElement;
      private DataColumn columnde_Name;
      private DataColumn columnde_Description;
      private DataColumn columnen_Name;
      private DataColumn columnen_Description;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EnumTranslationDataTable()
      {
        this.TableName = "EnumTranslation";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EnumTranslationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected EnumTranslationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EnumNameColumn => this.columnEnumName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EnumElementColumn => this.columnEnumElement;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn de_NameColumn => this.columnde_Name;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn de_DescriptionColumn => this.columnde_Description;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn en_NameColumn => this.columnen_Name;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn en_DescriptionColumn => this.columnen_Description;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRowChangeEventHandler EnumTranslationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRowChangeEventHandler EnumTranslationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRowChangeEventHandler EnumTranslationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRowChangeEventHandler EnumTranslationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddEnumTranslationRow(ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow AddEnumTranslationRow(
        string EnumName,
        string EnumElement,
        string de_Name,
        string de_Description,
        string en_Name,
        string en_Description)
      {
        ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow row = (ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) EnumName,
          (object) EnumElement,
          (object) de_Name,
          (object) de_Description,
          (object) en_Name,
          (object) en_Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow FindByEnumNameEnumElement(
        string EnumName,
        string EnumElement)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow) this.Rows.Find(new object[2]
        {
          (object) EnumName,
          (object) EnumElement
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationDataTable translationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationDataTable) base.Clone();
        translationDataTable.InitVars();
        return (DataTable) translationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEnumName = this.Columns["EnumName"];
        this.columnEnumElement = this.Columns["EnumElement"];
        this.columnde_Name = this.Columns["de_Name"];
        this.columnde_Description = this.Columns["de_Description"];
        this.columnen_Name = this.Columns["en_Name"];
        this.columnen_Description = this.Columns["en_Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEnumName = new DataColumn("EnumName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEnumName);
        this.columnEnumElement = new DataColumn("EnumElement", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEnumElement);
        this.columnde_Name = new DataColumn("de_Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnde_Name);
        this.columnde_Description = new DataColumn("de_Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnde_Description);
        this.columnen_Name = new DataColumn("en_Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnen_Name);
        this.columnen_Description = new DataColumn("en_Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnen_Description);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnEnumName,
          this.columnEnumElement
        }, true));
        this.columnEnumName.AllowDBNull = false;
        this.columnEnumName.MaxLength = 50;
        this.columnEnumElement.AllowDBNull = false;
        this.columnEnumElement.MaxLength = 50;
        this.columnde_Name.MaxLength = 50;
        this.columnde_Description.MaxLength = 536870910;
        this.columnen_Name.MaxLength = 50;
        this.columnen_Description.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow NewEnumTranslationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.EnumTranslationRowChanged == null)
          return;
        this.EnumTranslationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.EnumTranslationRowChanging == null)
          return;
        this.EnumTranslationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.EnumTranslationRowDeleted == null)
          return;
        this.EnumTranslationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.EnumTranslationRowDeleting == null)
          return;
        this.EnumTranslationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveEnumTranslationRow(ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (EnumTranslationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MTypeElectronicDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow>
    {
      private DataColumn columnMeterTypeID;
      private DataColumn columnEEPdata;
      private DataColumn columnTypeCreationString;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeElectronicDataTable()
      {
        this.TableName = "MTypeElectronic";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeElectronicDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MTypeElectronicDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EEPdataColumn => this.columnEEPdata;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TypeCreationStringColumn => this.columnTypeCreationString;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRowChangeEventHandler MTypeElectronicRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRowChangeEventHandler MTypeElectronicRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRowChangeEventHandler MTypeElectronicRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRowChangeEventHandler MTypeElectronicRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMTypeElectronicRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow AddMTypeElectronicRow(
        int MeterTypeID,
        byte[] EEPdata,
        string TypeCreationString)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow row = (ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) MeterTypeID,
          (object) EEPdata,
          (object) TypeCreationString
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow FindByMeterTypeID(
        int MeterTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow) this.Rows.Find(new object[1]
        {
          (object) MeterTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicDataTable electronicDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicDataTable) base.Clone();
        electronicDataTable.InitVars();
        return (DataTable) electronicDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnEEPdata = this.Columns["EEPdata"];
        this.columnTypeCreationString = this.Columns["TypeCreationString"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnEEPdata = new DataColumn("EEPdata", typeof (byte[]), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEEPdata);
        this.columnTypeCreationString = new DataColumn("TypeCreationString", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTypeCreationString);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterTypeID
        }, true));
        this.columnMeterTypeID.AllowDBNull = false;
        this.columnMeterTypeID.Unique = true;
        this.columnTypeCreationString.MaxLength = 250;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow NewMTypeElectronicRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MTypeElectronicRowChanged == null)
          return;
        this.MTypeElectronicRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MTypeElectronicRowChanging == null)
          return;
        this.MTypeElectronicRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MTypeElectronicRowDeleted == null)
          return;
        this.MTypeElectronicRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MTypeElectronicRowDeleting == null)
          return;
        this.MTypeElectronicRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMTypeElectronicRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MTypeElectronicDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class BlockNamesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow>
    {
      private DataColumn columnBlockId;
      private DataColumn columnBlockName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public BlockNamesDataTable()
      {
        this.TableName = "BlockNames";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal BlockNamesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected BlockNamesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BlockIdColumn => this.columnBlockId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BlockNameColumn => this.columnBlockName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRowChangeEventHandler BlockNamesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRowChangeEventHandler BlockNamesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRowChangeEventHandler BlockNamesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRowChangeEventHandler BlockNamesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddBlockNamesRow(ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow AddBlockNamesRow(
        int BlockId,
        string BlockName)
      {
        ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow row = (ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) BlockId,
          (object) BlockName
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow FindByBlockId(int BlockId)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow) this.Rows.Find(new object[1]
        {
          (object) BlockId
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.BlockNamesDataTable blockNamesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.BlockNamesDataTable) base.Clone();
        blockNamesDataTable.InitVars();
        return (DataTable) blockNamesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.BlockNamesDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnBlockId = this.Columns["BlockId"];
        this.columnBlockName = this.Columns["BlockName"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnBlockId = new DataColumn("BlockId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBlockId);
        this.columnBlockName = new DataColumn("BlockName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBlockName);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnBlockId
        }, true));
        this.columnBlockId.AllowDBNull = false;
        this.columnBlockId.Unique = true;
        this.columnBlockName.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow NewBlockNamesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.BlockNamesRowChanged == null)
          return;
        this.BlockNamesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.BlockNamesRowChanging == null)
          return;
        this.BlockNamesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.BlockNamesRowDeleted == null)
          return;
        this.BlockNamesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.BlockNamesRowDeleting == null)
          return;
        this.BlockNamesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveBlockNamesRow(ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (BlockNamesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class CodeDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.CodeRow>
    {
      private DataColumn columnCodeID;
      private DataColumn columnLineNr;
      private DataColumn columnCodeType;
      private DataColumn columnCodeValue;
      private DataColumn columnLineInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public CodeDataTable()
      {
        this.TableName = "Code";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal CodeDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected CodeDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeIDColumn => this.columnCodeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LineNrColumn => this.columnLineNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeTypeColumn => this.columnCodeType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeValueColumn => this.columnCodeValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LineInfoColumn => this.columnLineInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CodeRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.CodeRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.CodeRowChangeEventHandler CodeRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.CodeRowChangeEventHandler CodeRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.CodeRowChangeEventHandler CodeRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.CodeRowChangeEventHandler CodeRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddCodeRow(ZR_ClassLibrary.Schema_Access.Schema.CodeRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CodeRow AddCodeRow(
        int CodeID,
        int LineNr,
        string CodeType,
        string CodeValue,
        string LineInfo)
      {
        ZR_ClassLibrary.Schema_Access.Schema.CodeRow row = (ZR_ClassLibrary.Schema_Access.Schema.CodeRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) CodeID,
          (object) LineNr,
          (object) CodeType,
          (object) CodeValue,
          (object) LineInfo
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CodeRow FindByCodeIDLineNr(int CodeID, int LineNr)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.CodeRow) this.Rows.Find(new object[2]
        {
          (object) CodeID,
          (object) LineNr
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.CodeDataTable codeDataTable = (ZR_ClassLibrary.Schema_Access.Schema.CodeDataTable) base.Clone();
        codeDataTable.InitVars();
        return (DataTable) codeDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.CodeDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnCodeID = this.Columns["CodeID"];
        this.columnLineNr = this.Columns["LineNr"];
        this.columnCodeType = this.Columns["CodeType"];
        this.columnCodeValue = this.Columns["CodeValue"];
        this.columnLineInfo = this.Columns["LineInfo"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnCodeID = new DataColumn("CodeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeID);
        this.columnLineNr = new DataColumn("LineNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLineNr);
        this.columnCodeType = new DataColumn("CodeType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeType);
        this.columnCodeValue = new DataColumn("CodeValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeValue);
        this.columnLineInfo = new DataColumn("LineInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLineInfo);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnCodeID,
          this.columnLineNr
        }, true));
        this.columnCodeID.AllowDBNull = false;
        this.columnLineNr.AllowDBNull = false;
        this.columnCodeType.MaxLength = 50;
        this.columnCodeValue.MaxLength = 536870910;
        this.columnLineInfo.MaxLength = 250;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CodeRow NewCodeRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.CodeRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.CodeRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.CodeRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.CodeRowChanged == null)
          return;
        this.CodeRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.CodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.CodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.CodeRowChanging == null)
          return;
        this.CodeRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.CodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.CodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.CodeRowDeleted == null)
          return;
        this.CodeRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.CodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.CodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.CodeRowDeleting == null)
          return;
        this.CodeRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.CodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.CodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveCodeRow(ZR_ClassLibrary.Schema_Access.Schema.CodeRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (CodeDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ControllerCodeDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow>
    {
      private DataColumn columnMapID;
      private DataColumn columnFirmwareCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ControllerCodeDataTable()
      {
        this.TableName = "ControllerCode";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ControllerCodeDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ControllerCodeDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FirmwareCodeColumn => this.columnFirmwareCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRowChangeEventHandler ControllerCodeRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRowChangeEventHandler ControllerCodeRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRowChangeEventHandler ControllerCodeRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRowChangeEventHandler ControllerCodeRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddControllerCodeRow(ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow AddControllerCodeRow(
        int MapID,
        byte[] FirmwareCode)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow row = (ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) MapID,
          (object) FirmwareCode
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow FindByMapID(int MapID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow) this.Rows.Find(new object[1]
        {
          (object) MapID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeDataTable controllerCodeDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeDataTable) base.Clone();
        controllerCodeDataTable.InitVars();
        return (DataTable) controllerCodeDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMapID = this.Columns["MapID"];
        this.columnFirmwareCode = this.Columns["FirmwareCode"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnFirmwareCode = new DataColumn("FirmwareCode", typeof (byte[]), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareCode);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMapID
        }, true));
        this.columnMapID.AllowDBNull = false;
        this.columnMapID.Unique = true;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow NewControllerCodeRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ControllerCodeRowChanged == null)
          return;
        this.ControllerCodeRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ControllerCodeRowChanging == null)
          return;
        this.ControllerCodeRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ControllerCodeRowDeleted == null)
          return;
        this.ControllerCodeRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ControllerCodeRowDeleting == null)
          return;
        this.ControllerCodeRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveControllerCodeRow(ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ControllerCodeDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class CurrentUsersDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow>
    {
      private DataColumn columnUserName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public CurrentUsersDataTable()
      {
        this.TableName = "CurrentUsers";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal CurrentUsersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected CurrentUsersDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserNameColumn => this.columnUserName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRowChangeEventHandler CurrentUsersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRowChangeEventHandler CurrentUsersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRowChangeEventHandler CurrentUsersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRowChangeEventHandler CurrentUsersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddCurrentUsersRow(ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow AddCurrentUsersRow(string UserName)
      {
        ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow row = (ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow) this.NewRow();
        object[] objArray = new object[1]
        {
          (object) UserName
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow FindByUserName(string UserName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow) this.Rows.Find(new object[1]
        {
          (object) UserName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersDataTable currentUsersDataTable = (ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersDataTable) base.Clone();
        currentUsersDataTable.InitVars();
        return (DataTable) currentUsersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars() => this.columnUserName = this.Columns["UserName"];

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnUserName = new DataColumn("UserName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserName);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnUserName
        }, true));
        this.columnUserName.AllowDBNull = false;
        this.columnUserName.Unique = true;
        this.columnUserName.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow NewCurrentUsersRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.CurrentUsersRowChanged == null)
          return;
        this.CurrentUsersRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.CurrentUsersRowChanging == null)
          return;
        this.CurrentUsersRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.CurrentUsersRowDeleted == null)
          return;
        this.CurrentUsersRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.CurrentUsersRowDeleting == null)
          return;
        this.CurrentUsersRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveCurrentUsersRow(ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (CurrentUsersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class CustomerDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.CustomerRow>
    {
      private DataColumn columnCustomerID;
      private DataColumn columnLastName;
      private DataColumn columnFirstName;
      private DataColumn columnCustomerGroup;
      private DataColumn columnSecondName;
      private DataColumn columnTitle;
      private DataColumn columnStreet;
      private DataColumn columnHouseNr;
      private DataColumn columnZipCode;
      private DataColumn columnTown;
      private DataColumn columnCountry;
      private DataColumn columnState;
      private DataColumn columnPhone;
      private DataColumn columnMobile;
      private DataColumn columnFAX;
      private DataColumn columnEmail;
      private DataColumn columnInternet;
      private DataColumn columnMemo;
      private DataColumn columnMwSt;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public CustomerDataTable()
      {
        this.TableName = "Customer";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal CustomerDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected CustomerDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CustomerIDColumn => this.columnCustomerID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LastNameColumn => this.columnLastName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FirstNameColumn => this.columnFirstName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CustomerGroupColumn => this.columnCustomerGroup;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SecondNameColumn => this.columnSecondName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TitleColumn => this.columnTitle;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StreetColumn => this.columnStreet;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HouseNrColumn => this.columnHouseNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ZipCodeColumn => this.columnZipCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TownColumn => this.columnTown;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CountryColumn => this.columnCountry;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StateColumn => this.columnState;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PhoneColumn => this.columnPhone;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MobileColumn => this.columnMobile;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FAXColumn => this.columnFAX;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EmailColumn => this.columnEmail;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InternetColumn => this.columnInternet;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MemoColumn => this.columnMemo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MwStColumn => this.columnMwSt;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CustomerRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.CustomerRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.CustomerRowChangeEventHandler CustomerRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.CustomerRowChangeEventHandler CustomerRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.CustomerRowChangeEventHandler CustomerRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.CustomerRowChangeEventHandler CustomerRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddCustomerRow(ZR_ClassLibrary.Schema_Access.Schema.CustomerRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CustomerRow AddCustomerRow(
        int CustomerID,
        string LastName,
        string FirstName,
        int CustomerGroup,
        string SecondName,
        string Title,
        string Street,
        string HouseNr,
        string ZipCode,
        string Town,
        string Country,
        string State,
        string Phone,
        string Mobile,
        string FAX,
        string Email,
        string Internet,
        string Memo,
        float MwSt)
      {
        ZR_ClassLibrary.Schema_Access.Schema.CustomerRow row = (ZR_ClassLibrary.Schema_Access.Schema.CustomerRow) this.NewRow();
        object[] objArray = new object[19]
        {
          (object) CustomerID,
          (object) LastName,
          (object) FirstName,
          (object) CustomerGroup,
          (object) SecondName,
          (object) Title,
          (object) Street,
          (object) HouseNr,
          (object) ZipCode,
          (object) Town,
          (object) Country,
          (object) State,
          (object) Phone,
          (object) Mobile,
          (object) FAX,
          (object) Email,
          (object) Internet,
          (object) Memo,
          (object) MwSt
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CustomerRow FindByCustomerID(int CustomerID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.CustomerRow) this.Rows.Find(new object[1]
        {
          (object) CustomerID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.CustomerDataTable customerDataTable = (ZR_ClassLibrary.Schema_Access.Schema.CustomerDataTable) base.Clone();
        customerDataTable.InitVars();
        return (DataTable) customerDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.CustomerDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnCustomerID = this.Columns["CustomerID"];
        this.columnLastName = this.Columns["LastName"];
        this.columnFirstName = this.Columns["FirstName"];
        this.columnCustomerGroup = this.Columns["CustomerGroup"];
        this.columnSecondName = this.Columns["SecondName"];
        this.columnTitle = this.Columns["Title"];
        this.columnStreet = this.Columns["Street"];
        this.columnHouseNr = this.Columns["HouseNr"];
        this.columnZipCode = this.Columns["ZipCode"];
        this.columnTown = this.Columns["Town"];
        this.columnCountry = this.Columns["Country"];
        this.columnState = this.Columns["State"];
        this.columnPhone = this.Columns["Phone"];
        this.columnMobile = this.Columns["Mobile"];
        this.columnFAX = this.Columns["FAX"];
        this.columnEmail = this.Columns["Email"];
        this.columnInternet = this.Columns["Internet"];
        this.columnMemo = this.Columns["Memo"];
        this.columnMwSt = this.Columns["MwSt"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnCustomerID = new DataColumn("CustomerID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCustomerID);
        this.columnLastName = new DataColumn("LastName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastName);
        this.columnFirstName = new DataColumn("FirstName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirstName);
        this.columnCustomerGroup = new DataColumn("CustomerGroup", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCustomerGroup);
        this.columnSecondName = new DataColumn("SecondName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSecondName);
        this.columnTitle = new DataColumn("Title", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTitle);
        this.columnStreet = new DataColumn("Street", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStreet);
        this.columnHouseNr = new DataColumn("HouseNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHouseNr);
        this.columnZipCode = new DataColumn("ZipCode", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZipCode);
        this.columnTown = new DataColumn("Town", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTown);
        this.columnCountry = new DataColumn("Country", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCountry);
        this.columnState = new DataColumn("State", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnState);
        this.columnPhone = new DataColumn("Phone", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPhone);
        this.columnMobile = new DataColumn("Mobile", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMobile);
        this.columnFAX = new DataColumn("FAX", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFAX);
        this.columnEmail = new DataColumn("Email", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEmail);
        this.columnInternet = new DataColumn("Internet", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInternet);
        this.columnMemo = new DataColumn("Memo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMemo);
        this.columnMwSt = new DataColumn("MwSt", typeof (float), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMwSt);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnCustomerID
        }, true));
        this.columnCustomerID.AllowDBNull = false;
        this.columnCustomerID.Unique = true;
        this.columnLastName.MaxLength = 60;
        this.columnFirstName.MaxLength = 60;
        this.columnSecondName.MaxLength = 60;
        this.columnTitle.MaxLength = 50;
        this.columnStreet.MaxLength = 80;
        this.columnHouseNr.MaxLength = 8;
        this.columnZipCode.MaxLength = 12;
        this.columnTown.MaxLength = 80;
        this.columnCountry.MaxLength = 60;
        this.columnState.MaxLength = 60;
        this.columnPhone.MaxLength = 40;
        this.columnMobile.MaxLength = 40;
        this.columnFAX.MaxLength = 40;
        this.columnEmail.MaxLength = 40;
        this.columnInternet.MaxLength = 250;
        this.columnMemo.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CustomerRow NewCustomerRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.CustomerRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.CustomerRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.CustomerRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.CustomerRowChanged == null)
          return;
        this.CustomerRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.CustomerRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.CustomerRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.CustomerRowChanging == null)
          return;
        this.CustomerRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.CustomerRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.CustomerRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.CustomerRowDeleted == null)
          return;
        this.CustomerRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.CustomerRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.CustomerRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.CustomerRowDeleting == null)
          return;
        this.CustomerRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.CustomerRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.CustomerRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveCustomerRow(ZR_ClassLibrary.Schema_Access.Schema.CustomerRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (CustomerDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DatabaseIdentificationDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow>
    {
      private DataColumn columnInfoName;
      private DataColumn columnInfoData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DatabaseIdentificationDataTable()
      {
        this.TableName = "DatabaseIdentification";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DatabaseIdentificationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected DatabaseIdentificationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InfoNameColumn => this.columnInfoName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InfoDataColumn => this.columnInfoData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRowChangeEventHandler DatabaseIdentificationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRowChangeEventHandler DatabaseIdentificationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRowChangeEventHandler DatabaseIdentificationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRowChangeEventHandler DatabaseIdentificationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddDatabaseIdentificationRow(ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow AddDatabaseIdentificationRow(
        string InfoName,
        string InfoData)
      {
        ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow row = (ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) InfoName,
          (object) InfoData
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow FindByInfoName(
        string InfoName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow) this.Rows.Find(new object[1]
        {
          (object) InfoName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationDataTable identificationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationDataTable) base.Clone();
        identificationDataTable.InitVars();
        return (DataTable) identificationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnInfoName = this.Columns["InfoName"];
        this.columnInfoData = this.Columns["InfoData"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnInfoName = new DataColumn("InfoName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInfoName);
        this.columnInfoData = new DataColumn("InfoData", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInfoData);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnInfoName
        }, true));
        this.columnInfoName.AllowDBNull = false;
        this.columnInfoName.Unique = true;
        this.columnInfoName.MaxLength = 50;
        this.columnInfoData.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow NewDatabaseIdentificationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DatabaseIdentificationRowChanged == null)
          return;
        this.DatabaseIdentificationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DatabaseIdentificationRowChanging == null)
          return;
        this.DatabaseIdentificationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DatabaseIdentificationRowDeleted == null)
          return;
        this.DatabaseIdentificationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DatabaseIdentificationRowDeleting == null)
          return;
        this.DatabaseIdentificationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveDatabaseIdentificationRow(ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DatabaseIdentificationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DatabaseLocationDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow>
    {
      private DataColumn columnDatabaseLocationName;
      private DataColumn columnLand;
      private DataColumn columnTown;
      private DataColumn columnCompanyName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DatabaseLocationDataTable()
      {
        this.TableName = "DatabaseLocation";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DatabaseLocationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected DatabaseLocationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DatabaseLocationNameColumn => this.columnDatabaseLocationName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LandColumn => this.columnLand;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TownColumn => this.columnTown;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CompanyNameColumn => this.columnCompanyName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRowChangeEventHandler DatabaseLocationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRowChangeEventHandler DatabaseLocationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRowChangeEventHandler DatabaseLocationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRowChangeEventHandler DatabaseLocationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddDatabaseLocationRow(ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow AddDatabaseLocationRow(
        string DatabaseLocationName,
        string Land,
        string Town,
        string CompanyName)
      {
        ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow row = (ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) DatabaseLocationName,
          (object) Land,
          (object) Town,
          (object) CompanyName
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow FindByDatabaseLocationName(
        string DatabaseLocationName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow) this.Rows.Find(new object[1]
        {
          (object) DatabaseLocationName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationDataTable locationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationDataTable) base.Clone();
        locationDataTable.InitVars();
        return (DataTable) locationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnDatabaseLocationName = this.Columns["DatabaseLocationName"];
        this.columnLand = this.Columns["Land"];
        this.columnTown = this.Columns["Town"];
        this.columnCompanyName = this.Columns["CompanyName"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnDatabaseLocationName = new DataColumn("DatabaseLocationName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDatabaseLocationName);
        this.columnLand = new DataColumn("Land", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLand);
        this.columnTown = new DataColumn("Town", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTown);
        this.columnCompanyName = new DataColumn("CompanyName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCompanyName);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnDatabaseLocationName
        }, true));
        this.columnDatabaseLocationName.AllowDBNull = false;
        this.columnDatabaseLocationName.Unique = true;
        this.columnDatabaseLocationName.MaxLength = 50;
        this.columnLand.MaxLength = 50;
        this.columnTown.MaxLength = 50;
        this.columnCompanyName.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow NewDatabaseLocationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DatabaseLocationRowChanged == null)
          return;
        this.DatabaseLocationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DatabaseLocationRowChanging == null)
          return;
        this.DatabaseLocationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DatabaseLocationRowDeleted == null)
          return;
        this.DatabaseLocationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DatabaseLocationRowDeleting == null)
          return;
        this.DatabaseLocationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveDatabaseLocationRow(ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DatabaseLocationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DataloggerDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow>
    {
      private DataColumn columnFunctionNumber;
      private DataColumn columnLoggerID;
      private DataColumn columnLoggername;
      private DataColumn columnLoggerDescription;
      private DataColumn columnMaxLoggerEntries;
      private DataColumn columnEntrySize;
      private DataColumn columnLoggerType;
      private DataColumn columnLoggerInterval;
      private DataColumn columnStructureNr;
      private DataColumn columnMBusMaxEntries;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataloggerDataTable()
      {
        this.TableName = "Datalogger";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DataloggerDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected DataloggerDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionNumberColumn => this.columnFunctionNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LoggerIDColumn => this.columnLoggerID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LoggernameColumn => this.columnLoggername;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LoggerDescriptionColumn => this.columnLoggerDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MaxLoggerEntriesColumn => this.columnMaxLoggerEntries;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EntrySizeColumn => this.columnEntrySize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LoggerTypeColumn => this.columnLoggerType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LoggerIntervalColumn => this.columnLoggerInterval;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StructureNrColumn => this.columnStructureNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusMaxEntriesColumn => this.columnMBusMaxEntries;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DataloggerRowChangeEventHandler DataloggerRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DataloggerRowChangeEventHandler DataloggerRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DataloggerRowChangeEventHandler DataloggerRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DataloggerRowChangeEventHandler DataloggerRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddDataloggerRow(ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow AddDataloggerRow(
        ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow parentZRFunctionRowByFunctionDatalogger,
        int LoggerID,
        string Loggername,
        string LoggerDescription,
        short MaxLoggerEntries,
        byte EntrySize,
        byte LoggerType,
        int LoggerInterval,
        short StructureNr,
        byte MBusMaxEntries)
      {
        ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow row = (ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow) this.NewRow();
        object[] objArray = new object[10]
        {
          null,
          (object) LoggerID,
          (object) Loggername,
          (object) LoggerDescription,
          (object) MaxLoggerEntries,
          (object) EntrySize,
          (object) LoggerType,
          (object) LoggerInterval,
          (object) StructureNr,
          (object) MBusMaxEntries
        };
        if (parentZRFunctionRowByFunctionDatalogger != null)
          objArray[0] = parentZRFunctionRowByFunctionDatalogger[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow FindByFunctionNumberLoggerID(
        int FunctionNumber,
        int LoggerID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow) this.Rows.Find(new object[2]
        {
          (object) FunctionNumber,
          (object) LoggerID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.DataloggerDataTable dataloggerDataTable = (ZR_ClassLibrary.Schema_Access.Schema.DataloggerDataTable) base.Clone();
        dataloggerDataTable.InitVars();
        return (DataTable) dataloggerDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DataloggerDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnFunctionNumber = this.Columns["FunctionNumber"];
        this.columnLoggerID = this.Columns["LoggerID"];
        this.columnLoggername = this.Columns["Loggername"];
        this.columnLoggerDescription = this.Columns["LoggerDescription"];
        this.columnMaxLoggerEntries = this.Columns["MaxLoggerEntries"];
        this.columnEntrySize = this.Columns["EntrySize"];
        this.columnLoggerType = this.Columns["LoggerType"];
        this.columnLoggerInterval = this.Columns["LoggerInterval"];
        this.columnStructureNr = this.Columns["StructureNr"];
        this.columnMBusMaxEntries = this.Columns["MBusMaxEntries"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnFunctionNumber = new DataColumn("FunctionNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionNumber);
        this.columnLoggerID = new DataColumn("LoggerID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLoggerID);
        this.columnLoggername = new DataColumn("Loggername", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLoggername);
        this.columnLoggerDescription = new DataColumn("LoggerDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLoggerDescription);
        this.columnMaxLoggerEntries = new DataColumn("MaxLoggerEntries", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMaxLoggerEntries);
        this.columnEntrySize = new DataColumn("EntrySize", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEntrySize);
        this.columnLoggerType = new DataColumn("LoggerType", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLoggerType);
        this.columnLoggerInterval = new DataColumn("LoggerInterval", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLoggerInterval);
        this.columnStructureNr = new DataColumn("StructureNr", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStructureNr);
        this.columnMBusMaxEntries = new DataColumn("MBusMaxEntries", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusMaxEntries);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnFunctionNumber,
          this.columnLoggerID
        }, true));
        this.columnFunctionNumber.AllowDBNull = false;
        this.columnLoggerID.AllowDBNull = false;
        this.columnLoggername.MaxLength = 50;
        this.columnLoggerDescription.MaxLength = 250;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow NewDataloggerRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DataloggerRowChanged == null)
          return;
        this.DataloggerRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DataloggerRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DataloggerRowChanging == null)
          return;
        this.DataloggerRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DataloggerRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DataloggerRowDeleted == null)
          return;
        this.DataloggerRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DataloggerRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DataloggerRowDeleting == null)
          return;
        this.DataloggerRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DataloggerRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveDataloggerRow(ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DataloggerDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DataLoggerentryDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow>
    {
      private DataColumn columnLoggerID;
      private DataColumn columnParameterPosition;
      private DataColumn columnParameterName;
      private DataColumn columnParameterType;
      private DataColumn columnParameterSize;
      private DataColumn columnParameterDescription;
      private DataColumn columnParameterUnit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataLoggerentryDataTable()
      {
        this.TableName = "DataLoggerentry";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DataLoggerentryDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected DataLoggerentryDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LoggerIDColumn => this.columnLoggerID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterPositionColumn => this.columnParameterPosition;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterNameColumn => this.columnParameterName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterTypeColumn => this.columnParameterType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterSizeColumn => this.columnParameterSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterDescriptionColumn => this.columnParameterDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterUnitColumn => this.columnParameterUnit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRowChangeEventHandler DataLoggerentryRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRowChangeEventHandler DataLoggerentryRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRowChangeEventHandler DataLoggerentryRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRowChangeEventHandler DataLoggerentryRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddDataLoggerentryRow(ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow AddDataLoggerentryRow(
        int LoggerID,
        byte ParameterPosition,
        string ParameterName,
        byte ParameterType,
        byte ParameterSize,
        string ParameterDescription,
        string ParameterUnit)
      {
        ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow row = (ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) LoggerID,
          (object) ParameterPosition,
          (object) ParameterName,
          (object) ParameterType,
          (object) ParameterSize,
          (object) ParameterDescription,
          (object) ParameterUnit
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow FindByLoggerIDParameterPosition(
        int LoggerID,
        byte ParameterPosition)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow) this.Rows.Find(new object[2]
        {
          (object) LoggerID,
          (object) ParameterPosition
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryDataTable loggerentryDataTable = (ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryDataTable) base.Clone();
        loggerentryDataTable.InitVars();
        return (DataTable) loggerentryDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnLoggerID = this.Columns["LoggerID"];
        this.columnParameterPosition = this.Columns["ParameterPosition"];
        this.columnParameterName = this.Columns["ParameterName"];
        this.columnParameterType = this.Columns["ParameterType"];
        this.columnParameterSize = this.Columns["ParameterSize"];
        this.columnParameterDescription = this.Columns["ParameterDescription"];
        this.columnParameterUnit = this.Columns["ParameterUnit"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnLoggerID = new DataColumn("LoggerID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLoggerID);
        this.columnParameterPosition = new DataColumn("ParameterPosition", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterPosition);
        this.columnParameterName = new DataColumn("ParameterName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterName);
        this.columnParameterType = new DataColumn("ParameterType", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterType);
        this.columnParameterSize = new DataColumn("ParameterSize", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterSize);
        this.columnParameterDescription = new DataColumn("ParameterDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterDescription);
        this.columnParameterUnit = new DataColumn("ParameterUnit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterUnit);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnLoggerID,
          this.columnParameterPosition
        }, true));
        this.columnLoggerID.AllowDBNull = false;
        this.columnParameterPosition.AllowDBNull = false;
        this.columnParameterName.MaxLength = 50;
        this.columnParameterDescription.MaxLength = 100;
        this.columnParameterUnit.MaxLength = 250;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow NewDataLoggerentryRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DataLoggerentryRowChanged == null)
          return;
        this.DataLoggerentryRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DataLoggerentryRowChanging == null)
          return;
        this.DataLoggerentryRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DataLoggerentryRowDeleted == null)
          return;
        this.DataLoggerentryRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DataLoggerentryRowDeleting == null)
          return;
        this.DataLoggerentryRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveDataLoggerentryRow(ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DataLoggerentryDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DBTranslatorDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow>
    {
      private DataColumn columnTextID;
      private DataColumn columnTableName;
      private DataColumn columnTableKey;
      private DataColumn columnFieldName;
      private DataColumn columnLANG_de;
      private DataColumn columnLANG_en;
      private DataColumn columnLANG_fr;
      private DataColumn columnLANG_it;
      private DataColumn columnLANG_sk;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DBTranslatorDataTable()
      {
        this.TableName = "DBTranslator";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DBTranslatorDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected DBTranslatorDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TextIDColumn => this.columnTextID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TableNameColumn => this.columnTableName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TableKeyColumn => this.columnTableKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FieldNameColumn => this.columnFieldName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LANG_deColumn => this.columnLANG_de;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LANG_enColumn => this.columnLANG_en;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LANG_frColumn => this.columnLANG_fr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LANG_itColumn => this.columnLANG_it;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LANG_skColumn => this.columnLANG_sk;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRowChangeEventHandler DBTranslatorRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRowChangeEventHandler DBTranslatorRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRowChangeEventHandler DBTranslatorRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRowChangeEventHandler DBTranslatorRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddDBTranslatorRow(ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow AddDBTranslatorRow(
        int TextID,
        string TableName,
        string TableKey,
        string FieldName,
        string LANG_de,
        string LANG_en,
        string LANG_fr,
        string LANG_it,
        string LANG_sk)
      {
        ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow row = (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) TextID,
          (object) TableName,
          (object) TableKey,
          (object) FieldName,
          (object) LANG_de,
          (object) LANG_en,
          (object) LANG_fr,
          (object) LANG_it,
          (object) LANG_sk
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow FindByTextID(int TextID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow) this.Rows.Find(new object[1]
        {
          (object) TextID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorDataTable translatorDataTable = (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorDataTable) base.Clone();
        translatorDataTable.InitVars();
        return (DataTable) translatorDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTextID = this.Columns["TextID"];
        this.columnTableName = this.Columns["TableName"];
        this.columnTableKey = this.Columns["TableKey"];
        this.columnFieldName = this.Columns["FieldName"];
        this.columnLANG_de = this.Columns["LANG_de"];
        this.columnLANG_en = this.Columns["LANG_en"];
        this.columnLANG_fr = this.Columns["LANG_fr"];
        this.columnLANG_it = this.Columns["LANG_it"];
        this.columnLANG_sk = this.Columns["LANG_sk"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTextID = new DataColumn("TextID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTextID);
        this.columnTableName = new DataColumn("TableName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTableName);
        this.columnTableKey = new DataColumn("TableKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTableKey);
        this.columnFieldName = new DataColumn("FieldName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFieldName);
        this.columnLANG_de = new DataColumn("LANG_de", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLANG_de);
        this.columnLANG_en = new DataColumn("LANG_en", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLANG_en);
        this.columnLANG_fr = new DataColumn("LANG_fr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLANG_fr);
        this.columnLANG_it = new DataColumn("LANG_it", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLANG_it);
        this.columnLANG_sk = new DataColumn("LANG_sk", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLANG_sk);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnTextID
        }, true));
        this.columnTextID.AllowDBNull = false;
        this.columnTextID.Unique = true;
        this.columnTableName.MaxLength = 100;
        this.columnTableKey.MaxLength = 250;
        this.columnFieldName.MaxLength = 250;
        this.columnLANG_de.MaxLength = 536870910;
        this.columnLANG_en.MaxLength = 536870910;
        this.columnLANG_fr.MaxLength = 536870910;
        this.columnLANG_it.MaxLength = 536870910;
        this.columnLANG_sk.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow NewDBTranslatorRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DBTranslatorRowChanged == null)
          return;
        this.DBTranslatorRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DBTranslatorRowChanging == null)
          return;
        this.DBTranslatorRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DBTranslatorRowDeleted == null)
          return;
        this.DBTranslatorRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DBTranslatorRowDeleting == null)
          return;
        this.DBTranslatorRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveDBTranslatorRow(ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DBTranslatorDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DBTranslatorStructDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow>
    {
      private DataColumn columnTableName;
      private DataColumn columnFieldName;
      private DataColumn columnKeyFields;
      private DataColumn columnKeyFieldTypes;
      private DataColumn columnFieldSize;
      private DataColumn columnRequirements;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DBTranslatorStructDataTable()
      {
        this.TableName = "DBTranslatorStruct";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DBTranslatorStructDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected DBTranslatorStructDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TableNameColumn => this.columnTableName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FieldNameColumn => this.columnFieldName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn KeyFieldsColumn => this.columnKeyFields;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn KeyFieldTypesColumn => this.columnKeyFieldTypes;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FieldSizeColumn => this.columnFieldSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RequirementsColumn => this.columnRequirements;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRowChangeEventHandler DBTranslatorStructRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRowChangeEventHandler DBTranslatorStructRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRowChangeEventHandler DBTranslatorStructRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRowChangeEventHandler DBTranslatorStructRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddDBTranslatorStructRow(ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow AddDBTranslatorStructRow(
        string TableName,
        string FieldName,
        string KeyFields,
        string KeyFieldTypes,
        int FieldSize,
        string Requirements)
      {
        ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow row = (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) TableName,
          (object) FieldName,
          (object) KeyFields,
          (object) KeyFieldTypes,
          (object) FieldSize,
          (object) Requirements
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow FindByTableNameFieldName(
        string TableName,
        string FieldName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow) this.Rows.Find(new object[2]
        {
          (object) TableName,
          (object) FieldName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructDataTable translatorStructDataTable = (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructDataTable) base.Clone();
        translatorStructDataTable.InitVars();
        return (DataTable) translatorStructDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTableName = this.Columns["TableName"];
        this.columnFieldName = this.Columns["FieldName"];
        this.columnKeyFields = this.Columns["KeyFields"];
        this.columnKeyFieldTypes = this.Columns["KeyFieldTypes"];
        this.columnFieldSize = this.Columns["FieldSize"];
        this.columnRequirements = this.Columns["Requirements"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTableName = new DataColumn("TableName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTableName);
        this.columnFieldName = new DataColumn("FieldName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFieldName);
        this.columnKeyFields = new DataColumn("KeyFields", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKeyFields);
        this.columnKeyFieldTypes = new DataColumn("KeyFieldTypes", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKeyFieldTypes);
        this.columnFieldSize = new DataColumn("FieldSize", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFieldSize);
        this.columnRequirements = new DataColumn("Requirements", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRequirements);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnTableName,
          this.columnFieldName
        }, true));
        this.columnTableName.AllowDBNull = false;
        this.columnTableName.MaxLength = 100;
        this.columnFieldName.AllowDBNull = false;
        this.columnFieldName.MaxLength = 100;
        this.columnKeyFields.MaxLength = 250;
        this.columnKeyFieldTypes.MaxLength = 150;
        this.columnRequirements.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow NewDBTranslatorStructRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DBTranslatorStructRowChanged == null)
          return;
        this.DBTranslatorStructRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DBTranslatorStructRowChanging == null)
          return;
        this.DBTranslatorStructRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DBTranslatorStructRowDeleted == null)
          return;
        this.DBTranslatorStructRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DBTranslatorStructRowDeleting == null)
          return;
        this.DBTranslatorStructRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveDBTranslatorStructRow(ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DBTranslatorStructDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DisplayCodeDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow>
    {
      private DataColumn columnInterpreterCode;
      private DataColumn columnSequenceNr;
      private DataColumn columnCodeSequenceType;
      private DataColumn columnCodeSequenceInfo;
      private DataColumn columnCodeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DisplayCodeDataTable()
      {
        this.TableName = "DisplayCode";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DisplayCodeDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected DisplayCodeDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InterpreterCodeColumn => this.columnInterpreterCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SequenceNrColumn => this.columnSequenceNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeSequenceTypeColumn => this.columnCodeSequenceType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeSequenceInfoColumn => this.columnCodeSequenceInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeIDColumn => this.columnCodeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRowChangeEventHandler DisplayCodeRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRowChangeEventHandler DisplayCodeRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRowChangeEventHandler DisplayCodeRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRowChangeEventHandler DisplayCodeRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddDisplayCodeRow(ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow AddDisplayCodeRow(
        int InterpreterCode,
        int SequenceNr,
        string CodeSequenceType,
        string CodeSequenceInfo,
        int CodeID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow row = (ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) InterpreterCode,
          (object) SequenceNr,
          (object) CodeSequenceType,
          (object) CodeSequenceInfo,
          (object) CodeID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow FindByInterpreterCodeSequenceNr(
        int InterpreterCode,
        int SequenceNr)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow) this.Rows.Find(new object[2]
        {
          (object) InterpreterCode,
          (object) SequenceNr
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeDataTable displayCodeDataTable = (ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeDataTable) base.Clone();
        displayCodeDataTable.InitVars();
        return (DataTable) displayCodeDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnInterpreterCode = this.Columns["InterpreterCode"];
        this.columnSequenceNr = this.Columns["SequenceNr"];
        this.columnCodeSequenceType = this.Columns["CodeSequenceType"];
        this.columnCodeSequenceInfo = this.Columns["CodeSequenceInfo"];
        this.columnCodeID = this.Columns["CodeID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnInterpreterCode = new DataColumn("InterpreterCode", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInterpreterCode);
        this.columnSequenceNr = new DataColumn("SequenceNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSequenceNr);
        this.columnCodeSequenceType = new DataColumn("CodeSequenceType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeSequenceType);
        this.columnCodeSequenceInfo = new DataColumn("CodeSequenceInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeSequenceInfo);
        this.columnCodeID = new DataColumn("CodeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnInterpreterCode,
          this.columnSequenceNr
        }, true));
        this.columnInterpreterCode.AllowDBNull = false;
        this.columnSequenceNr.AllowDBNull = false;
        this.columnCodeSequenceType.MaxLength = 50;
        this.columnCodeSequenceInfo.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow NewDisplayCodeRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DisplayCodeRowChanged == null)
          return;
        this.DisplayCodeRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DisplayCodeRowChanging == null)
          return;
        this.DisplayCodeRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DisplayCodeRowDeleted == null)
          return;
        this.DisplayCodeRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DisplayCodeRowDeleting == null)
          return;
        this.DisplayCodeRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveDisplayCodeRow(ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DisplayCodeDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class EquipmentTypeDescriptionDataTable : 
      TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow>
    {
      private DataColumn columnEquipmentType;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EquipmentTypeDescriptionDataTable()
      {
        this.TableName = "EquipmentTypeDescription";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EquipmentTypeDescriptionDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected EquipmentTypeDescriptionDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentTypeColumn => this.columnEquipmentType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRowChangeEventHandler EquipmentTypeDescriptionRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRowChangeEventHandler EquipmentTypeDescriptionRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRowChangeEventHandler EquipmentTypeDescriptionRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRowChangeEventHandler EquipmentTypeDescriptionRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddEquipmentTypeDescriptionRow(ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow AddEquipmentTypeDescriptionRow(
        int EquipmentType,
        string Description)
      {
        ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow row = (ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) EquipmentType,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow FindByEquipmentType(
        int EquipmentType)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow) this.Rows.Find(new object[1]
        {
          (object) EquipmentType
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionDataTable descriptionDataTable = (ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionDataTable) base.Clone();
        descriptionDataTable.InitVars();
        return (DataTable) descriptionDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentType = this.Columns["EquipmentType"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentType = new DataColumn("EquipmentType", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentType);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnEquipmentType
        }, true));
        this.columnEquipmentType.AllowDBNull = false;
        this.columnEquipmentType.Unique = true;
        this.columnDescription.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow NewEquipmentTypeDescriptionRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.EquipmentTypeDescriptionRowChanged == null)
          return;
        this.EquipmentTypeDescriptionRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.EquipmentTypeDescriptionRowChanging == null)
          return;
        this.EquipmentTypeDescriptionRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.EquipmentTypeDescriptionRowDeleted == null)
          return;
        this.EquipmentTypeDescriptionRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.EquipmentTypeDescriptionRowDeleting == null)
          return;
        this.EquipmentTypeDescriptionRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveEquipmentTypeDescriptionRow(ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (EquipmentTypeDescriptionDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class FactoryEquipmentDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow>
    {
      private DataColumn columnEquipmentID;
      private DataColumn columnEquipmentName;
      private DataColumn columnEquipmentDescription;
      private DataColumn columnEquipmentType;
      private DataColumn columnEquipmentOwner;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public FactoryEquipmentDataTable()
      {
        this.TableName = "FactoryEquipment";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal FactoryEquipmentDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected FactoryEquipmentDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentNameColumn => this.columnEquipmentName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentDescriptionColumn => this.columnEquipmentDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentTypeColumn => this.columnEquipmentType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentOwnerColumn => this.columnEquipmentOwner;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRowChangeEventHandler FactoryEquipmentRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRowChangeEventHandler FactoryEquipmentRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRowChangeEventHandler FactoryEquipmentRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRowChangeEventHandler FactoryEquipmentRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddFactoryEquipmentRow(ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow AddFactoryEquipmentRow(
        int EquipmentID,
        string EquipmentName,
        string EquipmentDescription,
        ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow parentEquipmentTypeDescriptionRowByEquipmentTypeDescriptionFactoryEquipment,
        string EquipmentOwner)
      {
        ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow row = (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) EquipmentID,
          (object) EquipmentName,
          (object) EquipmentDescription,
          null,
          (object) EquipmentOwner
        };
        if (parentEquipmentTypeDescriptionRowByEquipmentTypeDescriptionFactoryEquipment != null)
          objArray[3] = parentEquipmentTypeDescriptionRowByEquipmentTypeDescriptionFactoryEquipment[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow FindByEquipmentID(
        int EquipmentID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow) this.Rows.Find(new object[1]
        {
          (object) EquipmentID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentDataTable equipmentDataTable = (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentDataTable) base.Clone();
        equipmentDataTable.InitVars();
        return (DataTable) equipmentDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnEquipmentName = this.Columns["EquipmentName"];
        this.columnEquipmentDescription = this.Columns["EquipmentDescription"];
        this.columnEquipmentType = this.Columns["EquipmentType"];
        this.columnEquipmentOwner = this.Columns["EquipmentOwner"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnEquipmentName = new DataColumn("EquipmentName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentName);
        this.columnEquipmentDescription = new DataColumn("EquipmentDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentDescription);
        this.columnEquipmentType = new DataColumn("EquipmentType", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentType);
        this.columnEquipmentOwner = new DataColumn("EquipmentOwner", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentOwner);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnEquipmentID
        }, true));
        this.columnEquipmentID.AllowDBNull = false;
        this.columnEquipmentID.Unique = true;
        this.columnEquipmentName.MaxLength = 50;
        this.columnEquipmentDescription.MaxLength = 536870910;
        this.columnEquipmentOwner.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow NewFactoryEquipmentRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.FactoryEquipmentRowChanged == null)
          return;
        this.FactoryEquipmentRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.FactoryEquipmentRowChanging == null)
          return;
        this.FactoryEquipmentRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.FactoryEquipmentRowDeleted == null)
          return;
        this.FactoryEquipmentRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.FactoryEquipmentRowDeleting == null)
          return;
        this.FactoryEquipmentRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveFactoryEquipmentRow(ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (FactoryEquipmentDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class GMM_UserDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow>
    {
      private DataColumn columnUserName;
      private DataColumn columnUserPersonalNumber;
      private DataColumn columnUserRights;
      private DataColumn columnUserKey;
      private DataColumn columnChangedUserRights;
      private DataColumn columnChangedUserKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public GMM_UserDataTable()
      {
        this.TableName = "GMM_User";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal GMM_UserDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected GMM_UserDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserNameColumn => this.columnUserName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserPersonalNumberColumn => this.columnUserPersonalNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserRightsColumn => this.columnUserRights;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserKeyColumn => this.columnUserKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangedUserRightsColumn => this.columnChangedUserRights;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangedUserKeyColumn => this.columnChangedUserKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRowChangeEventHandler GMM_UserRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRowChangeEventHandler GMM_UserRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRowChangeEventHandler GMM_UserRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRowChangeEventHandler GMM_UserRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddGMM_UserRow(ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow AddGMM_UserRow(
        string UserName,
        int UserPersonalNumber,
        string UserRights,
        string UserKey,
        string ChangedUserRights,
        string ChangedUserKey)
      {
        ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow row = (ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) UserName,
          (object) UserPersonalNumber,
          (object) UserRights,
          (object) UserKey,
          (object) ChangedUserRights,
          (object) ChangedUserKey
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow FindByUserName(string UserName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow) this.Rows.Find(new object[1]
        {
          (object) UserName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.GMM_UserDataTable gmmUserDataTable = (ZR_ClassLibrary.Schema_Access.Schema.GMM_UserDataTable) base.Clone();
        gmmUserDataTable.InitVars();
        return (DataTable) gmmUserDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.GMM_UserDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnUserName = this.Columns["UserName"];
        this.columnUserPersonalNumber = this.Columns["UserPersonalNumber"];
        this.columnUserRights = this.Columns["UserRights"];
        this.columnUserKey = this.Columns["UserKey"];
        this.columnChangedUserRights = this.Columns["ChangedUserRights"];
        this.columnChangedUserKey = this.Columns["ChangedUserKey"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnUserName = new DataColumn("UserName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserName);
        this.columnUserPersonalNumber = new DataColumn("UserPersonalNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserPersonalNumber);
        this.columnUserRights = new DataColumn("UserRights", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserRights);
        this.columnUserKey = new DataColumn("UserKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserKey);
        this.columnChangedUserRights = new DataColumn("ChangedUserRights", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangedUserRights);
        this.columnChangedUserKey = new DataColumn("ChangedUserKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangedUserKey);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnUserName
        }, true));
        this.columnUserName.AllowDBNull = false;
        this.columnUserName.Unique = true;
        this.columnUserName.MaxLength = 50;
        this.columnUserRights.MaxLength = 536870910;
        this.columnUserKey.MaxLength = (int) byte.MaxValue;
        this.columnChangedUserRights.MaxLength = 536870910;
        this.columnChangedUserKey.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow NewGMM_UserRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GMM_UserRowChanged == null)
          return;
        this.GMM_UserRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GMM_UserRowChanging == null)
          return;
        this.GMM_UserRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GMM_UserRowDeleted == null)
          return;
        this.GMM_UserRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GMM_UserRowDeleting == null)
          return;
        this.GMM_UserRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveGMM_UserRow(ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GMM_UserDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class HardwareResourcesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow>
    {
      private DataColumn columnResourceName;
      private DataColumn columnHardwareName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public HardwareResourcesDataTable()
      {
        this.TableName = "HardwareResources";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal HardwareResourcesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected HardwareResourcesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResourceNameColumn => this.columnResourceName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareNameColumn => this.columnHardwareName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRowChangeEventHandler HardwareResourcesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRowChangeEventHandler HardwareResourcesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRowChangeEventHandler HardwareResourcesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRowChangeEventHandler HardwareResourcesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddHardwareResourcesRow(ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow AddHardwareResourcesRow(
        string ResourceName,
        string HardwareName)
      {
        ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow row = (ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) ResourceName,
          (object) HardwareName
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow FindByResourceNameHardwareName(
        string ResourceName,
        string HardwareName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow) this.Rows.Find(new object[2]
        {
          (object) ResourceName,
          (object) HardwareName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesDataTable resourcesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesDataTable) base.Clone();
        resourcesDataTable.InitVars();
        return (DataTable) resourcesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnResourceName = this.Columns["ResourceName"];
        this.columnHardwareName = this.Columns["HardwareName"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnResourceName = new DataColumn("ResourceName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResourceName);
        this.columnHardwareName = new DataColumn("HardwareName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareName);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnResourceName,
          this.columnHardwareName
        }, true));
        this.columnResourceName.AllowDBNull = false;
        this.columnResourceName.MaxLength = 50;
        this.columnHardwareName.AllowDBNull = false;
        this.columnHardwareName.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow NewHardwareResourcesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.HardwareResourcesRowChanged == null)
          return;
        this.HardwareResourcesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.HardwareResourcesRowChanging == null)
          return;
        this.HardwareResourcesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.HardwareResourcesRowDeleted == null)
          return;
        this.HardwareResourcesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.HardwareResourcesRowDeleting == null)
          return;
        this.HardwareResourcesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveHardwareResourcesRow(ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (HardwareResourcesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class HardwareTypeDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow>
    {
      private DataColumn columnHardwareTypeID;
      private DataColumn columnMapID;
      private DataColumn columnLinkerTableID;
      private DataColumn columnFirmwareVersion;
      private DataColumn columnHardwareName;
      private DataColumn columnHardwareVersion;
      private DataColumn columnHardwareResource;
      private DataColumn columnextEEPSize;
      private DataColumn columnmaxStackSize;
      private DataColumn columnRAMSize;
      private DataColumn columnRAMStartAdr;
      private DataColumn columnintEEPStartAdr;
      private DataColumn columnintEEPSize;
      private DataColumn columnDescription;
      private DataColumn columnTestinfo;
      private DataColumn columnHardwareOptions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public HardwareTypeDataTable()
      {
        this.TableName = "HardwareType";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal HardwareTypeDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected HardwareTypeDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareTypeIDColumn => this.columnHardwareTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LinkerTableIDColumn => this.columnLinkerTableID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FirmwareVersionColumn => this.columnFirmwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareNameColumn => this.columnHardwareName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareVersionColumn => this.columnHardwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareResourceColumn => this.columnHardwareResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn extEEPSizeColumn => this.columnextEEPSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn maxStackSizeColumn => this.columnmaxStackSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RAMSizeColumn => this.columnRAMSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RAMStartAdrColumn => this.columnRAMStartAdr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn intEEPStartAdrColumn => this.columnintEEPStartAdr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn intEEPSizeColumn => this.columnintEEPSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestinfoColumn => this.columnTestinfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareOptionsColumn => this.columnHardwareOptions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRowChangeEventHandler HardwareTypeRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRowChangeEventHandler HardwareTypeRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRowChangeEventHandler HardwareTypeRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRowChangeEventHandler HardwareTypeRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddHardwareTypeRow(ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow AddHardwareTypeRow(
        int HardwareTypeID,
        ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow parentProgFilesRowByProgFilesHardwareType,
        int LinkerTableID,
        int FirmwareVersion,
        string HardwareName,
        int HardwareVersion,
        string HardwareResource,
        int extEEPSize,
        short maxStackSize,
        short RAMSize,
        short RAMStartAdr,
        short intEEPStartAdr,
        short intEEPSize,
        string Description,
        string Testinfo,
        string HardwareOptions)
      {
        ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow row = (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow) this.NewRow();
        object[] objArray = new object[16]
        {
          (object) HardwareTypeID,
          null,
          (object) LinkerTableID,
          (object) FirmwareVersion,
          (object) HardwareName,
          (object) HardwareVersion,
          (object) HardwareResource,
          (object) extEEPSize,
          (object) maxStackSize,
          (object) RAMSize,
          (object) RAMStartAdr,
          (object) intEEPStartAdr,
          (object) intEEPSize,
          (object) Description,
          (object) Testinfo,
          (object) HardwareOptions
        };
        if (parentProgFilesRowByProgFilesHardwareType != null)
          objArray[1] = parentProgFilesRowByProgFilesHardwareType[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow FindByHardwareTypeID(
        int HardwareTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow) this.Rows.Find(new object[1]
        {
          (object) HardwareTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeDataTable hardwareTypeDataTable = (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeDataTable) base.Clone();
        hardwareTypeDataTable.InitVars();
        return (DataTable) hardwareTypeDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnHardwareTypeID = this.Columns["HardwareTypeID"];
        this.columnMapID = this.Columns["MapID"];
        this.columnLinkerTableID = this.Columns["LinkerTableID"];
        this.columnFirmwareVersion = this.Columns["FirmwareVersion"];
        this.columnHardwareName = this.Columns["HardwareName"];
        this.columnHardwareVersion = this.Columns["HardwareVersion"];
        this.columnHardwareResource = this.Columns["HardwareResource"];
        this.columnextEEPSize = this.Columns["extEEPSize"];
        this.columnmaxStackSize = this.Columns["maxStackSize"];
        this.columnRAMSize = this.Columns["RAMSize"];
        this.columnRAMStartAdr = this.Columns["RAMStartAdr"];
        this.columnintEEPStartAdr = this.Columns["intEEPStartAdr"];
        this.columnintEEPSize = this.Columns["intEEPSize"];
        this.columnDescription = this.Columns["Description"];
        this.columnTestinfo = this.Columns["Testinfo"];
        this.columnHardwareOptions = this.Columns["HardwareOptions"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnHardwareTypeID = new DataColumn("HardwareTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareTypeID);
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnLinkerTableID = new DataColumn("LinkerTableID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLinkerTableID);
        this.columnFirmwareVersion = new DataColumn("FirmwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareVersion);
        this.columnHardwareName = new DataColumn("HardwareName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareName);
        this.columnHardwareVersion = new DataColumn("HardwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareVersion);
        this.columnHardwareResource = new DataColumn("HardwareResource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareResource);
        this.columnextEEPSize = new DataColumn("extEEPSize", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnextEEPSize);
        this.columnmaxStackSize = new DataColumn("maxStackSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnmaxStackSize);
        this.columnRAMSize = new DataColumn("RAMSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRAMSize);
        this.columnRAMStartAdr = new DataColumn("RAMStartAdr", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRAMStartAdr);
        this.columnintEEPStartAdr = new DataColumn("intEEPStartAdr", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnintEEPStartAdr);
        this.columnintEEPSize = new DataColumn("intEEPSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnintEEPSize);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnTestinfo = new DataColumn("Testinfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestinfo);
        this.columnHardwareOptions = new DataColumn("HardwareOptions", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareOptions);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnHardwareTypeID
        }, true));
        this.columnHardwareTypeID.AllowDBNull = false;
        this.columnHardwareTypeID.Unique = true;
        this.columnHardwareName.MaxLength = 50;
        this.columnHardwareResource.MaxLength = 536870910;
        this.columnDescription.MaxLength = 536870910;
        this.columnTestinfo.MaxLength = 536870910;
        this.columnHardwareOptions.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow NewHardwareTypeRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.HardwareTypeRowChanged == null)
          return;
        this.HardwareTypeRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.HardwareTypeRowChanging == null)
          return;
        this.HardwareTypeRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.HardwareTypeRowDeleted == null)
          return;
        this.HardwareTypeRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.HardwareTypeRowDeleting == null)
          return;
        this.HardwareTypeRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveHardwareTypeRow(ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (HardwareTypeDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class IncludeDefDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow>
    {
      private DataColumn columnMapID;
      private DataColumn columnConstName;
      private DataColumn columncValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public IncludeDefDataTable()
      {
        this.TableName = "IncludeDef";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal IncludeDefDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected IncludeDefDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConstNameColumn => this.columnConstName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn cValueColumn => this.columncValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRowChangeEventHandler IncludeDefRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRowChangeEventHandler IncludeDefRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRowChangeEventHandler IncludeDefRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRowChangeEventHandler IncludeDefRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddIncludeDefRow(ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow AddIncludeDefRow(
        ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow parentHardwareTypeRowByHTypeSaariusIncludeDef,
        string ConstName,
        int cValue)
      {
        ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow row = (ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow) this.NewRow();
        object[] objArray = new object[3]
        {
          null,
          (object) ConstName,
          (object) cValue
        };
        if (parentHardwareTypeRowByHTypeSaariusIncludeDef != null)
          objArray[0] = parentHardwareTypeRowByHTypeSaariusIncludeDef[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow FindByMapIDConstName(
        int MapID,
        string ConstName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow) this.Rows.Find(new object[2]
        {
          (object) MapID,
          (object) ConstName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.IncludeDefDataTable includeDefDataTable = (ZR_ClassLibrary.Schema_Access.Schema.IncludeDefDataTable) base.Clone();
        includeDefDataTable.InitVars();
        return (DataTable) includeDefDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.IncludeDefDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMapID = this.Columns["MapID"];
        this.columnConstName = this.Columns["ConstName"];
        this.columncValue = this.Columns["cValue"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnConstName = new DataColumn("ConstName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConstName);
        this.columncValue = new DataColumn("cValue", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columncValue);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnMapID,
          this.columnConstName
        }, true));
        this.columnMapID.AllowDBNull = false;
        this.columnConstName.AllowDBNull = false;
        this.columnConstName.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow NewIncludeDefRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.IncludeDefRowChanged == null)
          return;
        this.IncludeDefRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.IncludeDefRowChanging == null)
          return;
        this.IncludeDefRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.IncludeDefRowDeleted == null)
          return;
        this.IncludeDefRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.IncludeDefRowDeleting == null)
          return;
        this.IncludeDefRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveIncludeDefRow(ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (IncludeDefDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class LinkerTableDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow>
    {
      private DataColumn columnLinkerTableID;
      private DataColumn columnBlockPosition;
      private DataColumn columnBlockId;
      private DataColumn columnAddressRangeCPU;
      private DataColumn columnAddressRangePosition;
      private DataColumn columnAddressRangeVariable;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public LinkerTableDataTable()
      {
        this.TableName = "LinkerTable";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal LinkerTableDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected LinkerTableDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LinkerTableIDColumn => this.columnLinkerTableID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BlockPositionColumn => this.columnBlockPosition;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BlockIdColumn => this.columnBlockId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AddressRangeCPUColumn => this.columnAddressRangeCPU;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AddressRangePositionColumn => this.columnAddressRangePosition;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AddressRangeVariableColumn => this.columnAddressRangeVariable;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRowChangeEventHandler LinkerTableRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRowChangeEventHandler LinkerTableRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRowChangeEventHandler LinkerTableRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRowChangeEventHandler LinkerTableRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddLinkerTableRow(ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow AddLinkerTableRow(
        ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow parentHardwareTypeRowByHardwareTypeLinkerTable,
        int BlockPosition,
        ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow parentBlockNamesRowByBlockNamesLinkerTable,
        int AddressRangeCPU,
        int AddressRangePosition,
        string AddressRangeVariable)
      {
        ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow row = (ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow) this.NewRow();
        object[] objArray = new object[6]
        {
          null,
          (object) BlockPosition,
          null,
          (object) AddressRangeCPU,
          (object) AddressRangePosition,
          (object) AddressRangeVariable
        };
        if (parentHardwareTypeRowByHardwareTypeLinkerTable != null)
          objArray[0] = parentHardwareTypeRowByHardwareTypeLinkerTable[0];
        if (parentBlockNamesRowByBlockNamesLinkerTable != null)
          objArray[2] = parentBlockNamesRowByBlockNamesLinkerTable[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow FindByLinkerTableIDBlockPosition(
        int LinkerTableID,
        int BlockPosition)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow) this.Rows.Find(new object[2]
        {
          (object) LinkerTableID,
          (object) BlockPosition
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.LinkerTableDataTable linkerTableDataTable = (ZR_ClassLibrary.Schema_Access.Schema.LinkerTableDataTable) base.Clone();
        linkerTableDataTable.InitVars();
        return (DataTable) linkerTableDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.LinkerTableDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnLinkerTableID = this.Columns["LinkerTableID"];
        this.columnBlockPosition = this.Columns["BlockPosition"];
        this.columnBlockId = this.Columns["BlockId"];
        this.columnAddressRangeCPU = this.Columns["AddressRangeCPU"];
        this.columnAddressRangePosition = this.Columns["AddressRangePosition"];
        this.columnAddressRangeVariable = this.Columns["AddressRangeVariable"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnLinkerTableID = new DataColumn("LinkerTableID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLinkerTableID);
        this.columnBlockPosition = new DataColumn("BlockPosition", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBlockPosition);
        this.columnBlockId = new DataColumn("BlockId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBlockId);
        this.columnAddressRangeCPU = new DataColumn("AddressRangeCPU", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAddressRangeCPU);
        this.columnAddressRangePosition = new DataColumn("AddressRangePosition", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAddressRangePosition);
        this.columnAddressRangeVariable = new DataColumn("AddressRangeVariable", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAddressRangeVariable);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnLinkerTableID,
          this.columnBlockPosition
        }, true));
        this.columnLinkerTableID.AllowDBNull = false;
        this.columnBlockPosition.AllowDBNull = false;
        this.columnAddressRangeVariable.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow NewLinkerTableRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.LinkerTableRowChanged == null)
          return;
        this.LinkerTableRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.LinkerTableRowChanging == null)
          return;
        this.LinkerTableRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.LinkerTableRowDeleted == null)
          return;
        this.LinkerTableRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.LinkerTableRowDeleting == null)
          return;
        this.LinkerTableRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveLinkerTableRow(ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (LinkerTableDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ManufacturerDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow>
    {
      private DataColumn columnManufacturerID;
      private DataColumn columnMName;
      private DataColumn columnName2;
      private DataColumn columnStreet;
      private DataColumn columnTown;
      private DataColumn columnPLZ;
      private DataColumn columnFon;
      private DataColumn columnFAX;
      private DataColumn columnInternet;
      private DataColumn columnemail;
      private DataColumn columnMSign;
      private DataColumn columnMBusManufacturer;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ManufacturerDataTable()
      {
        this.TableName = "Manufacturer";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ManufacturerDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ManufacturerDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ManufacturerIDColumn => this.columnManufacturerID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MNameColumn => this.columnMName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Name2Column => this.columnName2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StreetColumn => this.columnStreet;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TownColumn => this.columnTown;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PLZColumn => this.columnPLZ;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FonColumn => this.columnFon;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FAXColumn => this.columnFAX;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InternetColumn => this.columnInternet;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn emailColumn => this.columnemail;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MSignColumn => this.columnMSign;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusManufacturerColumn => this.columnMBusManufacturer;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRowChangeEventHandler ManufacturerRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRowChangeEventHandler ManufacturerRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRowChangeEventHandler ManufacturerRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRowChangeEventHandler ManufacturerRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddManufacturerRow(ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow AddManufacturerRow(
        int ManufacturerID,
        string MName,
        string Name2,
        string Street,
        string Town,
        string PLZ,
        string Fon,
        string FAX,
        string Internet,
        string email,
        string MSign,
        string MBusManufacturer,
        string Description)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow row = (ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow) this.NewRow();
        object[] objArray = new object[13]
        {
          (object) ManufacturerID,
          (object) MName,
          (object) Name2,
          (object) Street,
          (object) Town,
          (object) PLZ,
          (object) Fon,
          (object) FAX,
          (object) Internet,
          (object) email,
          (object) MSign,
          (object) MBusManufacturer,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow FindByManufacturerID(
        int ManufacturerID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow) this.Rows.Find(new object[1]
        {
          (object) ManufacturerID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ManufacturerDataTable manufacturerDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ManufacturerDataTable) base.Clone();
        manufacturerDataTable.InitVars();
        return (DataTable) manufacturerDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ManufacturerDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnManufacturerID = this.Columns["ManufacturerID"];
        this.columnMName = this.Columns["MName"];
        this.columnName2 = this.Columns["Name2"];
        this.columnStreet = this.Columns["Street"];
        this.columnTown = this.Columns["Town"];
        this.columnPLZ = this.Columns["PLZ"];
        this.columnFon = this.Columns["Fon"];
        this.columnFAX = this.Columns["FAX"];
        this.columnInternet = this.Columns["Internet"];
        this.columnemail = this.Columns["email"];
        this.columnMSign = this.Columns["MSign"];
        this.columnMBusManufacturer = this.Columns["MBusManufacturer"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnManufacturerID = new DataColumn("ManufacturerID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnManufacturerID);
        this.columnMName = new DataColumn("MName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMName);
        this.columnName2 = new DataColumn("Name2", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnName2);
        this.columnStreet = new DataColumn("Street", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStreet);
        this.columnTown = new DataColumn("Town", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTown);
        this.columnPLZ = new DataColumn("PLZ", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPLZ);
        this.columnFon = new DataColumn("Fon", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFon);
        this.columnFAX = new DataColumn("FAX", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFAX);
        this.columnInternet = new DataColumn("Internet", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInternet);
        this.columnemail = new DataColumn("email", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnemail);
        this.columnMSign = new DataColumn("MSign", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMSign);
        this.columnMBusManufacturer = new DataColumn("MBusManufacturer", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusManufacturer);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnManufacturerID
        }, true));
        this.columnManufacturerID.AllowDBNull = false;
        this.columnManufacturerID.Unique = true;
        this.columnMName.MaxLength = 50;
        this.columnName2.MaxLength = 50;
        this.columnStreet.MaxLength = 50;
        this.columnTown.MaxLength = 50;
        this.columnPLZ.MaxLength = 50;
        this.columnFon.MaxLength = 50;
        this.columnFAX.MaxLength = 50;
        this.columnInternet.MaxLength = 50;
        this.columnemail.MaxLength = 50;
        this.columnMSign.MaxLength = 50;
        this.columnMBusManufacturer.MaxLength = 50;
        this.columnDescription.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow NewManufacturerRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ManufacturerRowChanged == null)
          return;
        this.ManufacturerRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ManufacturerRowChanging == null)
          return;
        this.ManufacturerRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ManufacturerRowDeleted == null)
          return;
        this.ManufacturerRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ManufacturerRowDeleting == null)
          return;
        this.ManufacturerRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveManufacturerRow(ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ManufacturerDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MapBaseDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow>
    {
      private DataColumn columnMapID;
      private DataColumn columnSystemName;
      private DataColumn columnSystemVersion;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MapBaseDataTable()
      {
        this.TableName = "MapBase";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MapBaseDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MapBaseDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SystemNameColumn => this.columnSystemName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SystemVersionColumn => this.columnSystemVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MapBaseRowChangeEventHandler MapBaseRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MapBaseRowChangeEventHandler MapBaseRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MapBaseRowChangeEventHandler MapBaseRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MapBaseRowChangeEventHandler MapBaseRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMapBaseRow(ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow AddMapBaseRow(
        short MapID,
        string SystemName,
        string SystemVersion,
        string Description)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow row = (ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) MapID,
          (object) SystemName,
          (object) SystemVersion,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow FindByMapID(short MapID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow) this.Rows.Find(new object[1]
        {
          (object) MapID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MapBaseDataTable mapBaseDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MapBaseDataTable) base.Clone();
        mapBaseDataTable.InitVars();
        return (DataTable) mapBaseDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MapBaseDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMapID = this.Columns["MapID"];
        this.columnSystemName = this.Columns["SystemName"];
        this.columnSystemVersion = this.Columns["SystemVersion"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMapID = new DataColumn("MapID", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnSystemName = new DataColumn("SystemName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSystemName);
        this.columnSystemVersion = new DataColumn("SystemVersion", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSystemVersion);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMapID
        }, true));
        this.columnMapID.AllowDBNull = false;
        this.columnMapID.Unique = true;
        this.columnSystemName.MaxLength = 50;
        this.columnSystemVersion.MaxLength = 50;
        this.columnDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow NewMapBaseRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MapBaseRowChanged == null)
          return;
        this.MapBaseRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MapBaseRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MapBaseRowChanging == null)
          return;
        this.MapBaseRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MapBaseRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MapBaseRowDeleted == null)
          return;
        this.MapBaseRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MapBaseRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MapBaseRowDeleting == null)
          return;
        this.MapBaseRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MapBaseRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMapBaseRow(ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MapBaseDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MapDefDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MapDefRow>
    {
      private DataColumn columnMapID;
      private DataColumn columnConstName;
      private DataColumn columncValue;
      private DataColumn columnByteSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MapDefDataTable()
      {
        this.TableName = "MapDef";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MapDefDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MapDefDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConstNameColumn => this.columnConstName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn cValueColumn => this.columncValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ByteSizeColumn => this.columnByteSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MapDefRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MapDefRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MapDefRowChangeEventHandler MapDefRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MapDefRowChangeEventHandler MapDefRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MapDefRowChangeEventHandler MapDefRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MapDefRowChangeEventHandler MapDefRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMapDefRow(ZR_ClassLibrary.Schema_Access.Schema.MapDefRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MapDefRow AddMapDefRow(
        ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow parentHardwareTypeRowByHTypeSaariusMapDef,
        string ConstName,
        int cValue,
        short ByteSize)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MapDefRow row = (ZR_ClassLibrary.Schema_Access.Schema.MapDefRow) this.NewRow();
        object[] objArray = new object[4]
        {
          null,
          (object) ConstName,
          (object) cValue,
          (object) ByteSize
        };
        if (parentHardwareTypeRowByHTypeSaariusMapDef != null)
          objArray[0] = parentHardwareTypeRowByHTypeSaariusMapDef[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MapDefRow FindByMapIDConstName(
        int MapID,
        string ConstName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MapDefRow) this.Rows.Find(new object[2]
        {
          (object) MapID,
          (object) ConstName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MapDefDataTable mapDefDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MapDefDataTable) base.Clone();
        mapDefDataTable.InitVars();
        return (DataTable) mapDefDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MapDefDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMapID = this.Columns["MapID"];
        this.columnConstName = this.Columns["ConstName"];
        this.columncValue = this.Columns["cValue"];
        this.columnByteSize = this.Columns["ByteSize"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnConstName = new DataColumn("ConstName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConstName);
        this.columncValue = new DataColumn("cValue", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columncValue);
        this.columnByteSize = new DataColumn("ByteSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnByteSize);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnMapID,
          this.columnConstName
        }, true));
        this.columnMapID.AllowDBNull = false;
        this.columnConstName.AllowDBNull = false;
        this.columnConstName.MaxLength = 50;
        this.columnByteSize.DefaultValue = (object) (short) 0;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MapDefRow NewMapDefRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MapDefRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MapDefRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MapDefRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MapDefRowChanged == null)
          return;
        this.MapDefRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MapDefRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MapDefRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MapDefRowChanging == null)
          return;
        this.MapDefRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MapDefRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MapDefRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MapDefRowDeleted == null)
          return;
        this.MapDefRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MapDefRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MapDefRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MapDefRowDeleting == null)
          return;
        this.MapDefRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MapDefRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MapDefRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMapDefRow(ZR_ClassLibrary.Schema_Access.Schema.MapDefRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MapDefDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MBusCodeDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow>
    {
      private DataColumn columnFunctionNumber;
      private DataColumn columnSequenceNr;
      private DataColumn columnCodeID;
      private DataColumn columnCodeSequenceType;
      private DataColumn columnCodeSequenceInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MBusCodeDataTable()
      {
        this.TableName = "MBusCode";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MBusCodeDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MBusCodeDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionNumberColumn => this.columnFunctionNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SequenceNrColumn => this.columnSequenceNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeIDColumn => this.columnCodeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeSequenceTypeColumn => this.columnCodeSequenceType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeSequenceInfoColumn => this.columnCodeSequenceInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRowChangeEventHandler MBusCodeRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRowChangeEventHandler MBusCodeRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRowChangeEventHandler MBusCodeRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRowChangeEventHandler MBusCodeRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMBusCodeRow(ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow AddMBusCodeRow(
        ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow parentZRFunctionRowByFunctionMBusCode,
        int SequenceNr,
        int CodeID,
        string CodeSequenceType,
        string CodeSequenceInfo)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow row = (ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow) this.NewRow();
        object[] objArray = new object[5]
        {
          null,
          (object) SequenceNr,
          (object) CodeID,
          (object) CodeSequenceType,
          (object) CodeSequenceInfo
        };
        if (parentZRFunctionRowByFunctionMBusCode != null)
          objArray[0] = parentZRFunctionRowByFunctionMBusCode[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow FindByFunctionNumberSequenceNrCodeID(
        int FunctionNumber,
        int SequenceNr,
        int CodeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow) this.Rows.Find(new object[3]
        {
          (object) FunctionNumber,
          (object) SequenceNr,
          (object) CodeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MBusCodeDataTable mbusCodeDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MBusCodeDataTable) base.Clone();
        mbusCodeDataTable.InitVars();
        return (DataTable) mbusCodeDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MBusCodeDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnFunctionNumber = this.Columns["FunctionNumber"];
        this.columnSequenceNr = this.Columns["SequenceNr"];
        this.columnCodeID = this.Columns["CodeID"];
        this.columnCodeSequenceType = this.Columns["CodeSequenceType"];
        this.columnCodeSequenceInfo = this.Columns["CodeSequenceInfo"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnFunctionNumber = new DataColumn("FunctionNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionNumber);
        this.columnSequenceNr = new DataColumn("SequenceNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSequenceNr);
        this.columnCodeID = new DataColumn("CodeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeID);
        this.columnCodeSequenceType = new DataColumn("CodeSequenceType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeSequenceType);
        this.columnCodeSequenceInfo = new DataColumn("CodeSequenceInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeSequenceInfo);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnFunctionNumber,
          this.columnSequenceNr,
          this.columnCodeID
        }, true));
        this.columnFunctionNumber.AllowDBNull = false;
        this.columnSequenceNr.AllowDBNull = false;
        this.columnCodeID.AllowDBNull = false;
        this.columnCodeSequenceType.MaxLength = 50;
        this.columnCodeSequenceInfo.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow NewMBusCodeRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MBusCodeRowChanged == null)
          return;
        this.MBusCodeRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MBusCodeRowChanging == null)
          return;
        this.MBusCodeRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MBusCodeRowDeleted == null)
          return;
        this.MBusCodeRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MBusCodeRowDeleting == null)
          return;
        this.MBusCodeRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMBusCodeRow(ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MBusCodeDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MBusParameterTranslationDataTable : 
      TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow>
    {
      private DataColumn columnManufacturer;
      private DataColumn columnMedium;
      private DataColumn columnVersionMin;
      private DataColumn columnVersionMax;
      private DataColumn columnMBusZDF;
      private DataColumn columnPValueID;
      private DataColumn columnMultiplier;
      private DataColumn columnSpecialTranslation;
      private DataColumn columnExternalMedium;
      private DataColumn columnExternalMeterNumber;
      private DataColumn columnStorageTimeParam;
      private DataColumn columnStorageTimeTranslation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MBusParameterTranslationDataTable()
      {
        this.TableName = "MBusParameterTranslation";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MBusParameterTranslationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MBusParameterTranslationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ManufacturerColumn => this.columnManufacturer;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MediumColumn => this.columnMedium;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn VersionMinColumn => this.columnVersionMin;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn VersionMaxColumn => this.columnVersionMax;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusZDFColumn => this.columnMBusZDF;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PValueIDColumn => this.columnPValueID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MultiplierColumn => this.columnMultiplier;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SpecialTranslationColumn => this.columnSpecialTranslation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ExternalMediumColumn => this.columnExternalMedium;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ExternalMeterNumberColumn => this.columnExternalMeterNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StorageTimeParamColumn => this.columnStorageTimeParam;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StorageTimeTranslationColumn => this.columnStorageTimeTranslation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRowChangeEventHandler MBusParameterTranslationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRowChangeEventHandler MBusParameterTranslationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRowChangeEventHandler MBusParameterTranslationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRowChangeEventHandler MBusParameterTranslationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMBusParameterTranslationRow(ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow AddMBusParameterTranslationRow(
        string Manufacturer,
        string Medium,
        short VersionMin,
        short VersionMax,
        string MBusZDF,
        int PValueID,
        double Multiplier,
        short SpecialTranslation,
        string ExternalMedium,
        string ExternalMeterNumber,
        string StorageTimeParam,
        short StorageTimeTranslation)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow row = (ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) Manufacturer,
          (object) Medium,
          (object) VersionMin,
          (object) VersionMax,
          (object) MBusZDF,
          (object) PValueID,
          (object) Multiplier,
          (object) SpecialTranslation,
          (object) ExternalMedium,
          (object) ExternalMeterNumber,
          (object) StorageTimeParam,
          (object) StorageTimeTranslation
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow FindByManufacturerMediumVersionMinVersionMaxMBusZDFPValueID(
        string Manufacturer,
        string Medium,
        short VersionMin,
        short VersionMax,
        string MBusZDF,
        int PValueID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow) this.Rows.Find(new object[6]
        {
          (object) Manufacturer,
          (object) Medium,
          (object) VersionMin,
          (object) VersionMax,
          (object) MBusZDF,
          (object) PValueID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationDataTable translationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationDataTable) base.Clone();
        translationDataTable.InitVars();
        return (DataTable) translationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnManufacturer = this.Columns["Manufacturer"];
        this.columnMedium = this.Columns["Medium"];
        this.columnVersionMin = this.Columns["VersionMin"];
        this.columnVersionMax = this.Columns["VersionMax"];
        this.columnMBusZDF = this.Columns["MBusZDF"];
        this.columnPValueID = this.Columns["PValueID"];
        this.columnMultiplier = this.Columns["Multiplier"];
        this.columnSpecialTranslation = this.Columns["SpecialTranslation"];
        this.columnExternalMedium = this.Columns["ExternalMedium"];
        this.columnExternalMeterNumber = this.Columns["ExternalMeterNumber"];
        this.columnStorageTimeParam = this.Columns["StorageTimeParam"];
        this.columnStorageTimeTranslation = this.Columns["StorageTimeTranslation"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnManufacturer = new DataColumn("Manufacturer", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnManufacturer);
        this.columnMedium = new DataColumn("Medium", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMedium);
        this.columnVersionMin = new DataColumn("VersionMin", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVersionMin);
        this.columnVersionMax = new DataColumn("VersionMax", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVersionMax);
        this.columnMBusZDF = new DataColumn("MBusZDF", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusZDF);
        this.columnPValueID = new DataColumn("PValueID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPValueID);
        this.columnMultiplier = new DataColumn("Multiplier", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMultiplier);
        this.columnSpecialTranslation = new DataColumn("SpecialTranslation", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSpecialTranslation);
        this.columnExternalMedium = new DataColumn("ExternalMedium", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExternalMedium);
        this.columnExternalMeterNumber = new DataColumn("ExternalMeterNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExternalMeterNumber);
        this.columnStorageTimeParam = new DataColumn("StorageTimeParam", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStorageTimeParam);
        this.columnStorageTimeTranslation = new DataColumn("StorageTimeTranslation", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStorageTimeTranslation);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[6]
        {
          this.columnManufacturer,
          this.columnMedium,
          this.columnVersionMin,
          this.columnVersionMax,
          this.columnMBusZDF,
          this.columnPValueID
        }, true));
        this.columnManufacturer.AllowDBNull = false;
        this.columnManufacturer.MaxLength = 3;
        this.columnMedium.AllowDBNull = false;
        this.columnMedium.MaxLength = 50;
        this.columnVersionMin.AllowDBNull = false;
        this.columnVersionMax.AllowDBNull = false;
        this.columnMBusZDF.AllowDBNull = false;
        this.columnMBusZDF.MaxLength = 20;
        this.columnPValueID.AllowDBNull = false;
        this.columnExternalMedium.MaxLength = 50;
        this.columnExternalMeterNumber.MaxLength = 50;
        this.columnStorageTimeParam.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow NewMBusParameterTranslationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MBusParameterTranslationRowChanged == null)
          return;
        this.MBusParameterTranslationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MBusParameterTranslationRowChanging == null)
          return;
        this.MBusParameterTranslationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MBusParameterTranslationRowDeleted == null)
          return;
        this.MBusParameterTranslationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MBusParameterTranslationRowDeleting == null)
          return;
        this.MBusParameterTranslationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMBusParameterTranslationRow(ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MBusParameterTranslationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MenuDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MenuRow>
    {
      private DataColumn columnFunctionNumber;
      private DataColumn columnMenuName;
      private DataColumn columnXPos;
      private DataColumn columnYPos;
      private DataColumn columnClickEvent;
      private DataColumn columnPressEvent;
      private DataColumn columnHoldEvent;
      private DataColumn columnTimeOutEvent;
      private DataColumn columnDescription;
      private DataColumn columnInterpreterCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MenuDataTable()
      {
        this.TableName = "Menu";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MenuDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MenuDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionNumberColumn => this.columnFunctionNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MenuNameColumn => this.columnMenuName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn XPosColumn => this.columnXPos;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn YPosColumn => this.columnYPos;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ClickEventColumn => this.columnClickEvent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PressEventColumn => this.columnPressEvent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HoldEventColumn => this.columnHoldEvent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TimeOutEventColumn => this.columnTimeOutEvent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InterpreterCodeColumn => this.columnInterpreterCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MenuRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MenuRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MenuRowChangeEventHandler MenuRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MenuRowChangeEventHandler MenuRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MenuRowChangeEventHandler MenuRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MenuRowChangeEventHandler MenuRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMenuRow(ZR_ClassLibrary.Schema_Access.Schema.MenuRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MenuRow AddMenuRow(
        ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow parentZRFunctionRowByFunctionMenu,
        string MenuName,
        byte XPos,
        byte YPos,
        string ClickEvent,
        string PressEvent,
        string HoldEvent,
        string TimeOutEvent,
        string Description,
        int InterpreterCode)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MenuRow row = (ZR_ClassLibrary.Schema_Access.Schema.MenuRow) this.NewRow();
        object[] objArray = new object[10]
        {
          null,
          (object) MenuName,
          (object) XPos,
          (object) YPos,
          (object) ClickEvent,
          (object) PressEvent,
          (object) HoldEvent,
          (object) TimeOutEvent,
          (object) Description,
          (object) InterpreterCode
        };
        if (parentZRFunctionRowByFunctionMenu != null)
          objArray[0] = parentZRFunctionRowByFunctionMenu[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MenuRow FindByFunctionNumberMenuName(
        int FunctionNumber,
        string MenuName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MenuRow) this.Rows.Find(new object[2]
        {
          (object) FunctionNumber,
          (object) MenuName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MenuDataTable menuDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MenuDataTable) base.Clone();
        menuDataTable.InitVars();
        return (DataTable) menuDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MenuDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnFunctionNumber = this.Columns["FunctionNumber"];
        this.columnMenuName = this.Columns["MenuName"];
        this.columnXPos = this.Columns["XPos"];
        this.columnYPos = this.Columns["YPos"];
        this.columnClickEvent = this.Columns["ClickEvent"];
        this.columnPressEvent = this.Columns["PressEvent"];
        this.columnHoldEvent = this.Columns["HoldEvent"];
        this.columnTimeOutEvent = this.Columns["TimeOutEvent"];
        this.columnDescription = this.Columns["Description"];
        this.columnInterpreterCode = this.Columns["InterpreterCode"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnFunctionNumber = new DataColumn("FunctionNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionNumber);
        this.columnMenuName = new DataColumn("MenuName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMenuName);
        this.columnXPos = new DataColumn("XPos", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnXPos);
        this.columnYPos = new DataColumn("YPos", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnYPos);
        this.columnClickEvent = new DataColumn("ClickEvent", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClickEvent);
        this.columnPressEvent = new DataColumn("PressEvent", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPressEvent);
        this.columnHoldEvent = new DataColumn("HoldEvent", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHoldEvent);
        this.columnTimeOutEvent = new DataColumn("TimeOutEvent", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTimeOutEvent);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnInterpreterCode = new DataColumn("InterpreterCode", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInterpreterCode);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnFunctionNumber,
          this.columnMenuName
        }, true));
        this.columnFunctionNumber.AllowDBNull = false;
        this.columnMenuName.AllowDBNull = false;
        this.columnMenuName.MaxLength = 50;
        this.columnClickEvent.MaxLength = 50;
        this.columnPressEvent.MaxLength = 50;
        this.columnHoldEvent.MaxLength = 50;
        this.columnTimeOutEvent.MaxLength = 50;
        this.columnDescription.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MenuRow NewMenuRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MenuRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MenuRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MenuRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MenuRowChanged == null)
          return;
        this.MenuRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MenuRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MenuRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MenuRowChanging == null)
          return;
        this.MenuRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MenuRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MenuRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MenuRowDeleted == null)
          return;
        this.MenuRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MenuRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MenuRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MenuRowDeleting == null)
          return;
        this.MenuRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MenuRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MenuRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMenuRow(ZR_ClassLibrary.Schema_Access.Schema.MenuRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MenuDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MeterRow>
    {
      private DataColumn columnMeterID;
      private DataColumn columnMeterInfoID;
      private DataColumn columnSerialNr;
      private DataColumn columnProductionDate;
      private DataColumn columnApprovalDate;
      private DataColumn columnOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterDataTable()
      {
        this.TableName = "Meter";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterInfoIDColumn => this.columnMeterInfoID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SerialNrColumn => this.columnSerialNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ProductionDateColumn => this.columnProductionDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalDateColumn => this.columnApprovalDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn OrderNrColumn => this.columnOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterRowChangeEventHandler MeterRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterRowChangeEventHandler MeterRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterRowChangeEventHandler MeterRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterRowChangeEventHandler MeterRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterRow(ZR_ClassLibrary.Schema_Access.Schema.MeterRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterRow AddMeterRow(
        int MeterID,
        ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow parentMeterInfoRowByMeterInfoMeter,
        string SerialNr,
        DateTime ProductionDate,
        DateTime ApprovalDate,
        string OrderNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterRow row = (ZR_ClassLibrary.Schema_Access.Schema.MeterRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) MeterID,
          null,
          (object) SerialNr,
          (object) ProductionDate,
          (object) ApprovalDate,
          (object) OrderNr
        };
        if (parentMeterInfoRowByMeterInfoMeter != null)
          objArray[1] = parentMeterInfoRowByMeterInfoMeter[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterRow FindByMeterID(int MeterID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterRow) this.Rows.Find(new object[1]
        {
          (object) MeterID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterDataTable meterDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MeterDataTable) base.Clone();
        meterDataTable.InitVars();
        return (DataTable) meterDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterID = this.Columns["MeterID"];
        this.columnMeterInfoID = this.Columns["MeterInfoID"];
        this.columnSerialNr = this.Columns["SerialNr"];
        this.columnProductionDate = this.Columns["ProductionDate"];
        this.columnApprovalDate = this.Columns["ApprovalDate"];
        this.columnOrderNr = this.Columns["OrderNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnMeterInfoID = new DataColumn("MeterInfoID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoID);
        this.columnSerialNr = new DataColumn("SerialNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSerialNr);
        this.columnProductionDate = new DataColumn("ProductionDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnProductionDate);
        this.columnApprovalDate = new DataColumn("ApprovalDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalDate);
        this.columnOrderNr = new DataColumn("OrderNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOrderNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterID
        }, true));
        this.columnMeterID.AllowDBNull = false;
        this.columnMeterID.Unique = true;
        this.columnSerialNr.MaxLength = 50;
        this.columnOrderNr.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterRow NewMeterRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MeterRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MeterRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterRowChanged == null)
          return;
        this.MeterRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterRowChanging == null)
          return;
        this.MeterRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterRowDeleted == null)
          return;
        this.MeterRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterRowDeleting == null)
          return;
        this.MeterRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterRow(ZR_ClassLibrary.Schema_Access.Schema.MeterRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterDataDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow>
    {
      private DataColumn columnMeterID;
      private DataColumn columnTimePoint;
      private DataColumn columnPValueID;
      private DataColumn columnPValue;
      private DataColumn columnPValueBinary;
      private DataColumn columnSyncStatus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterDataDataTable()
      {
        this.TableName = "MeterData";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterDataDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterDataDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TimePointColumn => this.columnTimePoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PValueIDColumn => this.columnPValueID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PValueColumn => this.columnPValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PValueBinaryColumn => this.columnPValueBinary;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SyncStatusColumn => this.columnSyncStatus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterDataRowChangeEventHandler MeterDataRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterDataRowChangeEventHandler MeterDataRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterDataRowChangeEventHandler MeterDataRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterDataRowChangeEventHandler MeterDataRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterDataRow(ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow AddMeterDataRow(
        ZR_ClassLibrary.Schema_Access.Schema.MeterRow parentMeterRowByMeterMeterData,
        DateTime TimePoint,
        int PValueID,
        string PValue,
        byte[] PValueBinary,
        byte SyncStatus)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow row = (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow) this.NewRow();
        object[] objArray = new object[6]
        {
          null,
          (object) TimePoint,
          (object) PValueID,
          (object) PValue,
          (object) PValueBinary,
          (object) SyncStatus
        };
        if (parentMeterRowByMeterMeterData != null)
          objArray[0] = parentMeterRowByMeterMeterData[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow FindByMeterIDTimePointPValueID(
        int MeterID,
        DateTime TimePoint,
        int PValueID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow) this.Rows.Find(new object[3]
        {
          (object) MeterID,
          (object) TimePoint,
          (object) PValueID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterDataDataTable meterDataDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MeterDataDataTable) base.Clone();
        meterDataDataTable.InitVars();
        return (DataTable) meterDataDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterDataDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterID = this.Columns["MeterID"];
        this.columnTimePoint = this.Columns["TimePoint"];
        this.columnPValueID = this.Columns["PValueID"];
        this.columnPValue = this.Columns["PValue"];
        this.columnPValueBinary = this.Columns["PValueBinary"];
        this.columnSyncStatus = this.Columns["SyncStatus"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnTimePoint = new DataColumn("TimePoint", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTimePoint);
        this.columnPValueID = new DataColumn("PValueID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPValueID);
        this.columnPValue = new DataColumn("PValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPValue);
        this.columnPValueBinary = new DataColumn("PValueBinary", typeof (byte[]), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPValueBinary);
        this.columnSyncStatus = new DataColumn("SyncStatus", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSyncStatus);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnMeterID,
          this.columnTimePoint,
          this.columnPValueID
        }, true));
        this.columnMeterID.AllowDBNull = false;
        this.columnTimePoint.AllowDBNull = false;
        this.columnPValueID.AllowDBNull = false;
        this.columnPValue.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow NewMeterDataRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterDataRowChanged == null)
          return;
        this.MeterDataRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterDataRowChanging == null)
          return;
        this.MeterDataRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterDataRowDeleted == null)
          return;
        this.MeterDataRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterDataRowDeleting == null)
          return;
        this.MeterDataRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterDataRow(ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterDataDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterDataRequestDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow>
    {
      private DataColumn columnMeterValueRequestID;
      private DataColumn columnPValueID;
      private DataColumn columnRedCounts;
      private DataColumn columnYellowCounts;
      private DataColumn columnMinCounts;
      private DataColumn columnOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterDataRequestDataTable()
      {
        this.TableName = "MeterDataRequest";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterDataRequestDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterDataRequestDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterValueRequestIDColumn => this.columnMeterValueRequestID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PValueIDColumn => this.columnPValueID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RedCountsColumn => this.columnRedCounts;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn YellowCountsColumn => this.columnYellowCounts;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MinCountsColumn => this.columnMinCounts;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn OrderNrColumn => this.columnOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRowChangeEventHandler MeterDataRequestRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRowChangeEventHandler MeterDataRequestRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRowChangeEventHandler MeterDataRequestRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRowChangeEventHandler MeterDataRequestRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterDataRequestRow(ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow AddMeterDataRequestRow(
        int MeterValueRequestID,
        int PValueID,
        int RedCounts,
        int YellowCounts,
        int MinCounts,
        int OrderNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow row = (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) MeterValueRequestID,
          (object) PValueID,
          (object) RedCounts,
          (object) YellowCounts,
          (object) MinCounts,
          (object) OrderNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow FindByMeterValueRequestIDPValueID(
        int MeterValueRequestID,
        int PValueID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow) this.Rows.Find(new object[2]
        {
          (object) MeterValueRequestID,
          (object) PValueID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestDataTable requestDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestDataTable) base.Clone();
        requestDataTable.InitVars();
        return (DataTable) requestDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterValueRequestID = this.Columns["MeterValueRequestID"];
        this.columnPValueID = this.Columns["PValueID"];
        this.columnRedCounts = this.Columns["RedCounts"];
        this.columnYellowCounts = this.Columns["YellowCounts"];
        this.columnMinCounts = this.Columns["MinCounts"];
        this.columnOrderNr = this.Columns["OrderNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterValueRequestID = new DataColumn("MeterValueRequestID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterValueRequestID);
        this.columnPValueID = new DataColumn("PValueID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPValueID);
        this.columnRedCounts = new DataColumn("RedCounts", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRedCounts);
        this.columnYellowCounts = new DataColumn("YellowCounts", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnYellowCounts);
        this.columnMinCounts = new DataColumn("MinCounts", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMinCounts);
        this.columnOrderNr = new DataColumn("OrderNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOrderNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnMeterValueRequestID,
          this.columnPValueID
        }, true));
        this.columnMeterValueRequestID.AllowDBNull = false;
        this.columnPValueID.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow NewMeterDataRequestRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterDataRequestRowChanged == null)
          return;
        this.MeterDataRequestRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterDataRequestRowChanging == null)
          return;
        this.MeterDataRequestRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterDataRequestRowDeleted == null)
          return;
        this.MeterDataRequestRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterDataRequestRowDeleting == null)
          return;
        this.MeterDataRequestRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterDataRequestRow(ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterDataRequestDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterHardwareDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow>
    {
      private DataColumn columnMeterHardwareID;
      private DataColumn columnManufacturerID;
      private DataColumn columnProductionLocationID;
      private DataColumn columnMeterName;
      private DataColumn columnDescription;
      private DataColumn columnApproval;
      private DataColumn columnApprovalRestrict;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterHardwareDataTable()
      {
        this.TableName = "MeterHardware";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterHardwareDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterHardwareDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterHardwareIDColumn => this.columnMeterHardwareID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ManufacturerIDColumn => this.columnManufacturerID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ProductionLocationIDColumn => this.columnProductionLocationID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterNameColumn => this.columnMeterName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalColumn => this.columnApproval;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalRestrictColumn => this.columnApprovalRestrict;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRowChangeEventHandler MeterHardwareRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRowChangeEventHandler MeterHardwareRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRowChangeEventHandler MeterHardwareRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRowChangeEventHandler MeterHardwareRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterHardwareRow(ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow AddMeterHardwareRow(
        int MeterHardwareID,
        ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow parentManufacturerRowByManufacturerMeterHardware,
        int ProductionLocationID,
        string MeterName,
        string Description,
        string Approval,
        string ApprovalRestrict)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow row = (ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) MeterHardwareID,
          null,
          (object) ProductionLocationID,
          (object) MeterName,
          (object) Description,
          (object) Approval,
          (object) ApprovalRestrict
        };
        if (parentManufacturerRowByManufacturerMeterHardware != null)
          objArray[1] = parentManufacturerRowByManufacturerMeterHardware[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow FindByMeterHardwareIDManufacturerIDProductionLocationID(
        int MeterHardwareID,
        int ManufacturerID,
        int ProductionLocationID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow) this.Rows.Find(new object[3]
        {
          (object) MeterHardwareID,
          (object) ManufacturerID,
          (object) ProductionLocationID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareDataTable hardwareDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareDataTable) base.Clone();
        hardwareDataTable.InitVars();
        return (DataTable) hardwareDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterHardwareID = this.Columns["MeterHardwareID"];
        this.columnManufacturerID = this.Columns["ManufacturerID"];
        this.columnProductionLocationID = this.Columns["ProductionLocationID"];
        this.columnMeterName = this.Columns["MeterName"];
        this.columnDescription = this.Columns["Description"];
        this.columnApproval = this.Columns["Approval"];
        this.columnApprovalRestrict = this.Columns["ApprovalRestrict"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterHardwareID = new DataColumn("MeterHardwareID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterHardwareID);
        this.columnManufacturerID = new DataColumn("ManufacturerID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnManufacturerID);
        this.columnProductionLocationID = new DataColumn("ProductionLocationID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnProductionLocationID);
        this.columnMeterName = new DataColumn("MeterName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterName);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnApproval = new DataColumn("Approval", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApproval);
        this.columnApprovalRestrict = new DataColumn("ApprovalRestrict", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalRestrict);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnMeterHardwareID,
          this.columnManufacturerID,
          this.columnProductionLocationID
        }, true));
        this.columnMeterHardwareID.AllowDBNull = false;
        this.columnManufacturerID.AllowDBNull = false;
        this.columnProductionLocationID.AllowDBNull = false;
        this.columnMeterName.MaxLength = 50;
        this.columnDescription.MaxLength = 50;
        this.columnApproval.MaxLength = (int) byte.MaxValue;
        this.columnApprovalRestrict.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow NewMeterHardwareRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterHardwareRowChanged == null)
          return;
        this.MeterHardwareRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterHardwareRowChanging == null)
          return;
        this.MeterHardwareRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterHardwareRowDeleted == null)
          return;
        this.MeterHardwareRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterHardwareRowDeleting == null)
          return;
        this.MeterHardwareRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterHardwareRow(ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterHardwareDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterInfoDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow>
    {
      private DataColumn columnMeterInfoID;
      private DataColumn columnMeterHardwareID;
      private DataColumn columnMeterTypeID;
      private DataColumn columnPPSArtikelNr;
      private DataColumn columnDefaultFunctionNr;
      private DataColumn columnDescription;
      private DataColumn columnHardwareTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterInfoDataTable()
      {
        this.TableName = "MeterInfo";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterInfoDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterInfoDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterInfoIDColumn => this.columnMeterInfoID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterHardwareIDColumn => this.columnMeterHardwareID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPSArtikelNrColumn => this.columnPPSArtikelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DefaultFunctionNrColumn => this.columnDefaultFunctionNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareTypeIDColumn => this.columnHardwareTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRowChangeEventHandler MeterInfoRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRowChangeEventHandler MeterInfoRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRowChangeEventHandler MeterInfoRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRowChangeEventHandler MeterInfoRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterInfoRow(ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow AddMeterInfoRow(
        int MeterInfoID,
        int MeterHardwareID,
        ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow parentMeterTypeRowByMeterTypeMeterInfo,
        string PPSArtikelNr,
        string DefaultFunctionNr,
        string Description,
        ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow parentHardwareTypeRowByHardwareTypeMeterInfo)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow row = (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) MeterInfoID,
          (object) MeterHardwareID,
          null,
          (object) PPSArtikelNr,
          (object) DefaultFunctionNr,
          (object) Description,
          null
        };
        if (parentMeterTypeRowByMeterTypeMeterInfo != null)
          objArray[2] = parentMeterTypeRowByMeterTypeMeterInfo[0];
        if (parentHardwareTypeRowByHardwareTypeMeterInfo != null)
          objArray[6] = parentHardwareTypeRowByHardwareTypeMeterInfo[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow FindByMeterInfoID(int MeterInfoID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow) this.Rows.Find(new object[1]
        {
          (object) MeterInfoID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterInfoDataTable meterInfoDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoDataTable) base.Clone();
        meterInfoDataTable.InitVars();
        return (DataTable) meterInfoDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterInfoID = this.Columns["MeterInfoID"];
        this.columnMeterHardwareID = this.Columns["MeterHardwareID"];
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnPPSArtikelNr = this.Columns["PPSArtikelNr"];
        this.columnDefaultFunctionNr = this.Columns["DefaultFunctionNr"];
        this.columnDescription = this.Columns["Description"];
        this.columnHardwareTypeID = this.Columns["HardwareTypeID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterInfoID = new DataColumn("MeterInfoID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoID);
        this.columnMeterHardwareID = new DataColumn("MeterHardwareID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterHardwareID);
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnPPSArtikelNr = new DataColumn("PPSArtikelNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPSArtikelNr);
        this.columnDefaultFunctionNr = new DataColumn("DefaultFunctionNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDefaultFunctionNr);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnHardwareTypeID = new DataColumn("HardwareTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareTypeID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterInfoID
        }, true));
        this.columnMeterInfoID.AllowDBNull = false;
        this.columnMeterInfoID.Unique = true;
        this.columnPPSArtikelNr.MaxLength = 50;
        this.columnDefaultFunctionNr.MaxLength = 50;
        this.columnDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow NewMeterInfoRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterInfoRowChanged == null)
          return;
        this.MeterInfoRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterInfoRowChanging == null)
          return;
        this.MeterInfoRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterInfoRowDeleted == null)
          return;
        this.MeterInfoRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterInfoRowDeleting == null)
          return;
        this.MeterInfoRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterInfoRow(ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterInfoDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterPositionDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow>
    {
      private DataColumn columnMeterID;
      private DataColumn columnStreet;
      private DataColumn columnTown;
      private DataColumn columnZipCode;
      private DataColumn columnState;
      private DataColumn columnGPS_x;
      private DataColumn columnGPS_y;
      private DataColumn columnGPS_z;
      private DataColumn columnCustomerID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterPositionDataTable()
      {
        this.TableName = "MeterPosition";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterPositionDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterPositionDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StreetColumn => this.columnStreet;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TownColumn => this.columnTown;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ZipCodeColumn => this.columnZipCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StateColumn => this.columnState;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GPS_xColumn => this.columnGPS_x;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GPS_yColumn => this.columnGPS_y;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GPS_zColumn => this.columnGPS_z;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CustomerIDColumn => this.columnCustomerID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRowChangeEventHandler MeterPositionRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRowChangeEventHandler MeterPositionRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRowChangeEventHandler MeterPositionRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRowChangeEventHandler MeterPositionRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterPositionRow(ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow AddMeterPositionRow(
        int MeterID,
        string Street,
        string Town,
        string ZipCode,
        string State,
        float GPS_x,
        float GPS_y,
        float GPS_z,
        int CustomerID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow row = (ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) MeterID,
          (object) Street,
          (object) Town,
          (object) ZipCode,
          (object) State,
          (object) GPS_x,
          (object) GPS_y,
          (object) GPS_z,
          (object) CustomerID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow FindByMeterID(int MeterID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow) this.Rows.Find(new object[1]
        {
          (object) MeterID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterPositionDataTable positionDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MeterPositionDataTable) base.Clone();
        positionDataTable.InitVars();
        return (DataTable) positionDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterPositionDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterID = this.Columns["MeterID"];
        this.columnStreet = this.Columns["Street"];
        this.columnTown = this.Columns["Town"];
        this.columnZipCode = this.Columns["ZipCode"];
        this.columnState = this.Columns["State"];
        this.columnGPS_x = this.Columns["GPS_x"];
        this.columnGPS_y = this.Columns["GPS_y"];
        this.columnGPS_z = this.Columns["GPS_z"];
        this.columnCustomerID = this.Columns["CustomerID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnStreet = new DataColumn("Street", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStreet);
        this.columnTown = new DataColumn("Town", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTown);
        this.columnZipCode = new DataColumn("ZipCode", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZipCode);
        this.columnState = new DataColumn("State", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnState);
        this.columnGPS_x = new DataColumn("GPS_x", typeof (float), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGPS_x);
        this.columnGPS_y = new DataColumn("GPS_y", typeof (float), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGPS_y);
        this.columnGPS_z = new DataColumn("GPS_z", typeof (float), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGPS_z);
        this.columnCustomerID = new DataColumn("CustomerID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCustomerID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterID
        }, true));
        this.columnMeterID.AllowDBNull = false;
        this.columnMeterID.Unique = true;
        this.columnStreet.MaxLength = 250;
        this.columnTown.MaxLength = 60;
        this.columnZipCode.MaxLength = 12;
        this.columnState.MaxLength = 60;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow NewMeterPositionRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterPositionRowChanged == null)
          return;
        this.MeterPositionRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterPositionRowChanging == null)
          return;
        this.MeterPositionRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterPositionRowDeleted == null)
          return;
        this.MeterPositionRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterPositionRowDeleting == null)
          return;
        this.MeterPositionRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterPositionRow(ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterPositionDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterTypeDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow>
    {
      private DataColumn columnMeterTypeID;
      private DataColumn columnMTypeTableName;
      private DataColumn columnTypename;
      private DataColumn columnGenerateDate;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterTypeDataTable()
      {
        this.TableName = "MeterType";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterTypeDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterTypeDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MTypeTableNameColumn => this.columnMTypeTableName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TypenameColumn => this.columnTypename;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GenerateDateColumn => this.columnGenerateDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRowChangeEventHandler MeterTypeRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRowChangeEventHandler MeterTypeRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRowChangeEventHandler MeterTypeRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRowChangeEventHandler MeterTypeRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterTypeRow(ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow AddMeterTypeRow(
        int MeterTypeID,
        string MTypeTableName,
        string Typename,
        DateTime GenerateDate,
        string Description)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow row = (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) MeterTypeID,
          (object) MTypeTableName,
          (object) Typename,
          (object) GenerateDate,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow FindByMeterTypeID(int MeterTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) this.Rows.Find(new object[1]
        {
          (object) MeterTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterTypeDataTable meterTypeDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeDataTable) base.Clone();
        meterTypeDataTable.InitVars();
        return (DataTable) meterTypeDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterTypeDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnMTypeTableName = this.Columns["MTypeTableName"];
        this.columnTypename = this.Columns["Typename"];
        this.columnGenerateDate = this.Columns["GenerateDate"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnMTypeTableName = new DataColumn("MTypeTableName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMTypeTableName);
        this.columnTypename = new DataColumn("Typename", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTypename);
        this.columnGenerateDate = new DataColumn("GenerateDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGenerateDate);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterTypeID
        }, true));
        this.columnMeterTypeID.AllowDBNull = false;
        this.columnMeterTypeID.Unique = true;
        this.columnMTypeTableName.MaxLength = 50;
        this.columnTypename.MaxLength = 50;
        this.columnDescription.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow NewMeterTypeRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterTypeRowChanged == null)
          return;
        this.MeterTypeRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterTypeRowChanging == null)
          return;
        this.MeterTypeRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterTypeRowDeleted == null)
          return;
        this.MeterTypeRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterTypeRowDeleting == null)
          return;
        this.MeterTypeRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterTypeRow(ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterTypeDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MTypeKapselDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow>
    {
      private DataColumn columnMeterTypeID;
      private DataColumn columnMeterUnit;
      private DataColumn columnQn;
      private DataColumn columnQmax;
      private DataColumn columnQtrenn;
      private DataColumn columnQmin;
      private DataColumn columnImpulseValue;
      private DataColumn columnClass;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeKapselDataTable()
      {
        this.TableName = "MTypeKapsel";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeKapselDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MTypeKapselDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterUnitColumn => this.columnMeterUnit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn QnColumn => this.columnQn;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn QmaxColumn => this.columnQmax;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn QtrennColumn => this.columnQtrenn;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn QminColumn => this.columnQmin;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ImpulseValueColumn => this.columnImpulseValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ClassColumn => this.columnClass;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRowChangeEventHandler MTypeKapselRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRowChangeEventHandler MTypeKapselRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRowChangeEventHandler MTypeKapselRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRowChangeEventHandler MTypeKapselRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMTypeKapselRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow AddMTypeKapselRow(
        ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow parentMeterTypeRowByMeterTypeMTypeSaariuskapsel,
        string MeterUnit,
        double Qn,
        double Qmax,
        double Qtrenn,
        double Qmin,
        double ImpulseValue,
        string Class)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow row = (ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow) this.NewRow();
        object[] objArray = new object[8]
        {
          null,
          (object) MeterUnit,
          (object) Qn,
          (object) Qmax,
          (object) Qtrenn,
          (object) Qmin,
          (object) ImpulseValue,
          (object) Class
        };
        if (parentMeterTypeRowByMeterTypeMTypeSaariuskapsel != null)
          objArray[0] = parentMeterTypeRowByMeterTypeMTypeSaariuskapsel[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow FindByMeterTypeID(int MeterTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow) this.Rows.Find(new object[1]
        {
          (object) MeterTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselDataTable mtypeKapselDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselDataTable) base.Clone();
        mtypeKapselDataTable.InitVars();
        return (DataTable) mtypeKapselDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnMeterUnit = this.Columns["MeterUnit"];
        this.columnQn = this.Columns["Qn"];
        this.columnQmax = this.Columns["Qmax"];
        this.columnQtrenn = this.Columns["Qtrenn"];
        this.columnQmin = this.Columns["Qmin"];
        this.columnImpulseValue = this.Columns["ImpulseValue"];
        this.columnClass = this.Columns["Class"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnMeterUnit = new DataColumn("MeterUnit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterUnit);
        this.columnQn = new DataColumn("Qn", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQn);
        this.columnQmax = new DataColumn("Qmax", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQmax);
        this.columnQtrenn = new DataColumn("Qtrenn", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQtrenn);
        this.columnQmin = new DataColumn("Qmin", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQmin);
        this.columnImpulseValue = new DataColumn("ImpulseValue", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnImpulseValue);
        this.columnClass = new DataColumn("Class", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClass);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterTypeID
        }, true));
        this.columnMeterTypeID.AllowDBNull = false;
        this.columnMeterTypeID.Unique = true;
        this.columnMeterUnit.MaxLength = 50;
        this.columnClass.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow NewMTypeKapselRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MTypeKapselRowChanged == null)
          return;
        this.MTypeKapselRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MTypeKapselRowChanging == null)
          return;
        this.MTypeKapselRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MTypeKapselRowDeleted == null)
          return;
        this.MTypeKapselRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MTypeKapselRowDeleting == null)
          return;
        this.MTypeKapselRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMTypeKapselRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MTypeKapselDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MTypeMIDWaterMeterDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow>
    {
      private DataColumn columnMeterTypeID;
      private DataColumn columnMeterTypeCode;
      private DataColumn columnApprovalCode;
      private DataColumn columnRatioID;
      private DataColumn columnMIDTestingTypeID;
      private DataColumn columnMIDErrorOffsetID;
      private DataColumn columnMTDescription;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeMIDWaterMeterDataTable()
      {
        this.TableName = "MTypeMIDWaterMeter";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeMIDWaterMeterDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MTypeMIDWaterMeterDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeCodeColumn => this.columnMeterTypeCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalCodeColumn => this.columnApprovalCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RatioIDColumn => this.columnRatioID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDTestingTypeIDColumn => this.columnMIDTestingTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDErrorOffsetIDColumn => this.columnMIDErrorOffsetID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MTDescriptionColumn => this.columnMTDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRowChangeEventHandler MTypeMIDWaterMeterRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRowChangeEventHandler MTypeMIDWaterMeterRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRowChangeEventHandler MTypeMIDWaterMeterRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRowChangeEventHandler MTypeMIDWaterMeterRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMTypeMIDWaterMeterRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow AddMTypeMIDWaterMeterRow(
        int MeterTypeID,
        int MeterTypeCode,
        int ApprovalCode,
        short RatioID,
        int MIDTestingTypeID,
        int MIDErrorOffsetID,
        string MTDescription,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow row = (ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) MeterTypeID,
          (object) MeterTypeCode,
          (object) ApprovalCode,
          (object) RatioID,
          (object) MIDTestingTypeID,
          (object) MIDErrorOffsetID,
          (object) MTDescription,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow FindByMeterTypeID(
        int MeterTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow) this.Rows.Find(new object[1]
        {
          (object) MeterTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterDataTable waterMeterDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterDataTable) base.Clone();
        waterMeterDataTable.InitVars();
        return (DataTable) waterMeterDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnMeterTypeCode = this.Columns["MeterTypeCode"];
        this.columnApprovalCode = this.Columns["ApprovalCode"];
        this.columnRatioID = this.Columns["RatioID"];
        this.columnMIDTestingTypeID = this.Columns["MIDTestingTypeID"];
        this.columnMIDErrorOffsetID = this.Columns["MIDErrorOffsetID"];
        this.columnMTDescription = this.Columns["MTDescription"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnMeterTypeCode = new DataColumn("MeterTypeCode", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeCode);
        this.columnApprovalCode = new DataColumn("ApprovalCode", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalCode);
        this.columnRatioID = new DataColumn("RatioID", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRatioID);
        this.columnMIDTestingTypeID = new DataColumn("MIDTestingTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDTestingTypeID);
        this.columnMIDErrorOffsetID = new DataColumn("MIDErrorOffsetID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDErrorOffsetID);
        this.columnMTDescription = new DataColumn("MTDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMTDescription);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterTypeID
        }, true));
        this.columnMeterTypeID.AllowDBNull = false;
        this.columnMeterTypeID.Unique = true;
        this.columnMTDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow NewMTypeMIDWaterMeterRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MTypeMIDWaterMeterRowChanged == null)
          return;
        this.MTypeMIDWaterMeterRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MTypeMIDWaterMeterRowChanging == null)
          return;
        this.MTypeMIDWaterMeterRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MTypeMIDWaterMeterRowDeleted == null)
          return;
        this.MTypeMIDWaterMeterRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MTypeMIDWaterMeterRowDeleting == null)
          return;
        this.MTypeMIDWaterMeterRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMTypeMIDWaterMeterRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MTypeMIDWaterMeterDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MTypeSaariusDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow>
    {
      private DataColumn columnMeterTypeID;
      private DataColumn columnEEPData;
      private DataColumn columnAbility;
      private DataColumn columnMeterUnit;
      private DataColumn columnMediumName;
      private DataColumn columnMediumDescription;
      private DataColumn columnMediumConst;
      private DataColumn columnBaudrate;
      private DataColumn columniInput;
      private DataColumn columniOutput;
      private DataColumn columnRAM_WriteLimit;
      private DataColumn columnMBusMeterType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeSaariusDataTable()
      {
        this.TableName = "MTypeSaarius";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeSaariusDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MTypeSaariusDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EEPDataColumn => this.columnEEPData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AbilityColumn => this.columnAbility;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterUnitColumn => this.columnMeterUnit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MediumNameColumn => this.columnMediumName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MediumDescriptionColumn => this.columnMediumDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MediumConstColumn => this.columnMediumConst;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BaudrateColumn => this.columnBaudrate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn iInputColumn => this.columniInput;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn iOutputColumn => this.columniOutput;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RAM_WriteLimitColumn => this.columnRAM_WriteLimit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusMeterTypeColumn => this.columnMBusMeterType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRowChangeEventHandler MTypeSaariusRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRowChangeEventHandler MTypeSaariusRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRowChangeEventHandler MTypeSaariusRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRowChangeEventHandler MTypeSaariusRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMTypeSaariusRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow AddMTypeSaariusRow(
        ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow parentMeterTypeRowByMeterTypeMTypeSaarius,
        byte[] EEPData,
        string Ability,
        string MeterUnit,
        string MediumName,
        string MediumDescription,
        string MediumConst,
        int Baudrate,
        int iInput,
        int iOutput,
        byte RAM_WriteLimit,
        byte MBusMeterType)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow row = (ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow) this.NewRow();
        object[] objArray = new object[12]
        {
          null,
          (object) EEPData,
          (object) Ability,
          (object) MeterUnit,
          (object) MediumName,
          (object) MediumDescription,
          (object) MediumConst,
          (object) Baudrate,
          (object) iInput,
          (object) iOutput,
          (object) RAM_WriteLimit,
          (object) MBusMeterType
        };
        if (parentMeterTypeRowByMeterTypeMTypeSaarius != null)
          objArray[0] = parentMeterTypeRowByMeterTypeMTypeSaarius[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow FindByMeterTypeID(int MeterTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow) this.Rows.Find(new object[1]
        {
          (object) MeterTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusDataTable saariusDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusDataTable) base.Clone();
        saariusDataTable.InitVars();
        return (DataTable) saariusDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnEEPData = this.Columns["EEPData"];
        this.columnAbility = this.Columns["Ability"];
        this.columnMeterUnit = this.Columns["MeterUnit"];
        this.columnMediumName = this.Columns["MediumName"];
        this.columnMediumDescription = this.Columns["MediumDescription"];
        this.columnMediumConst = this.Columns["MediumConst"];
        this.columnBaudrate = this.Columns["Baudrate"];
        this.columniInput = this.Columns["iInput"];
        this.columniOutput = this.Columns["iOutput"];
        this.columnRAM_WriteLimit = this.Columns["RAM_WriteLimit"];
        this.columnMBusMeterType = this.Columns["MBusMeterType"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnEEPData = new DataColumn("EEPData", typeof (byte[]), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEEPData);
        this.columnAbility = new DataColumn("Ability", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAbility);
        this.columnMeterUnit = new DataColumn("MeterUnit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterUnit);
        this.columnMediumName = new DataColumn("MediumName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMediumName);
        this.columnMediumDescription = new DataColumn("MediumDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMediumDescription);
        this.columnMediumConst = new DataColumn("MediumConst", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMediumConst);
        this.columnBaudrate = new DataColumn("Baudrate", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBaudrate);
        this.columniInput = new DataColumn("iInput", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columniInput);
        this.columniOutput = new DataColumn("iOutput", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columniOutput);
        this.columnRAM_WriteLimit = new DataColumn("RAM_WriteLimit", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRAM_WriteLimit);
        this.columnMBusMeterType = new DataColumn("MBusMeterType", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusMeterType);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterTypeID
        }, true));
        this.columnMeterTypeID.AllowDBNull = false;
        this.columnMeterTypeID.Unique = true;
        this.columnAbility.MaxLength = 50;
        this.columnMeterUnit.MaxLength = 50;
        this.columnMediumName.MaxLength = 50;
        this.columnMediumDescription.MaxLength = 50;
        this.columnMediumConst.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow NewMTypeSaariusRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MTypeSaariusRowChanged == null)
          return;
        this.MTypeSaariusRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MTypeSaariusRowChanging == null)
          return;
        this.MTypeSaariusRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MTypeSaariusRowDeleted == null)
          return;
        this.MTypeSaariusRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MTypeSaariusRowDeleting == null)
          return;
        this.MTypeSaariusRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMTypeSaariusRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MTypeSaariusDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MTypeTempSensorDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow>
    {
      private DataColumn columnMeterTypeID;
      private DataColumn columnMeterUnit;
      private DataColumn columnSensorType;
      private DataColumn columnPN;
      private DataColumn columnTmin;
      private DataColumn columnTmax;
      private DataColumn columnDTMin;
      private DataColumn columnDTMax;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeTempSensorDataTable()
      {
        this.TableName = "MTypeTempSensor";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeTempSensorDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MTypeTempSensorDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterUnitColumn => this.columnMeterUnit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SensorTypeColumn => this.columnSensorType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PNColumn => this.columnPN;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TminColumn => this.columnTmin;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TmaxColumn => this.columnTmax;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DTMinColumn => this.columnDTMin;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DTMaxColumn => this.columnDTMax;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRowChangeEventHandler MTypeTempSensorRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRowChangeEventHandler MTypeTempSensorRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRowChangeEventHandler MTypeTempSensorRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRowChangeEventHandler MTypeTempSensorRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMTypeTempSensorRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow AddMTypeTempSensorRow(
        ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow parentMeterTypeRowByMeterTypeMTypeTempSensor,
        string MeterUnit,
        string SensorType,
        double PN,
        double Tmin,
        double Tmax,
        double DTMin,
        double DTMax)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow row = (ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow) this.NewRow();
        object[] objArray = new object[8]
        {
          null,
          (object) MeterUnit,
          (object) SensorType,
          (object) PN,
          (object) Tmin,
          (object) Tmax,
          (object) DTMin,
          (object) DTMax
        };
        if (parentMeterTypeRowByMeterTypeMTypeTempSensor != null)
          objArray[0] = parentMeterTypeRowByMeterTypeMTypeTempSensor[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow FindByMeterTypeID(
        int MeterTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow) this.Rows.Find(new object[1]
        {
          (object) MeterTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorDataTable tempSensorDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorDataTable) base.Clone();
        tempSensorDataTable.InitVars();
        return (DataTable) tempSensorDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnMeterUnit = this.Columns["MeterUnit"];
        this.columnSensorType = this.Columns["SensorType"];
        this.columnPN = this.Columns["PN"];
        this.columnTmin = this.Columns["Tmin"];
        this.columnTmax = this.Columns["Tmax"];
        this.columnDTMin = this.Columns["DTMin"];
        this.columnDTMax = this.Columns["DTMax"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnMeterUnit = new DataColumn("MeterUnit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterUnit);
        this.columnSensorType = new DataColumn("SensorType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSensorType);
        this.columnPN = new DataColumn("PN", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPN);
        this.columnTmin = new DataColumn("Tmin", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTmin);
        this.columnTmax = new DataColumn("Tmax", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTmax);
        this.columnDTMin = new DataColumn("DTMin", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDTMin);
        this.columnDTMax = new DataColumn("DTMax", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDTMax);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterTypeID
        }, true));
        this.columnMeterTypeID.AllowDBNull = false;
        this.columnMeterTypeID.Unique = true;
        this.columnMeterUnit.MaxLength = 50;
        this.columnSensorType.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow NewMTypeTempSensorRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MTypeTempSensorRowChanged == null)
          return;
        this.MTypeTempSensorRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MTypeTempSensorRowChanging == null)
          return;
        this.MTypeTempSensorRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MTypeTempSensorRowDeleted == null)
          return;
        this.MTypeTempSensorRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MTypeTempSensorRowDeleting == null)
          return;
        this.MTypeTempSensorRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMTypeTempSensorRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MTypeTempSensorDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MTypeWaterMeterDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow>
    {
      private DataColumn columnMeterTypeID;
      private DataColumn columnMeterTypeCode;
      private DataColumn columnApprovalCode;
      private DataColumn columnClassID;
      private DataColumn columnTestingTypeID;
      private DataColumn columnErrorOffsetID;
      private DataColumn columnMTDescription;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeWaterMeterDataTable()
      {
        this.TableName = "MTypeWaterMeter";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeWaterMeterDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MTypeWaterMeterDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeCodeColumn => this.columnMeterTypeCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalCodeColumn => this.columnApprovalCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ClassIDColumn => this.columnClassID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestingTypeIDColumn => this.columnTestingTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorOffsetIDColumn => this.columnErrorOffsetID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MTDescriptionColumn => this.columnMTDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRowChangeEventHandler MTypeWaterMeterRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRowChangeEventHandler MTypeWaterMeterRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRowChangeEventHandler MTypeWaterMeterRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRowChangeEventHandler MTypeWaterMeterRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMTypeWaterMeterRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow AddMTypeWaterMeterRow(
        int MeterTypeID,
        int MeterTypeCode,
        int ApprovalCode,
        int ClassID,
        int TestingTypeID,
        int ErrorOffsetID,
        string MTDescription,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow row = (ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) MeterTypeID,
          (object) MeterTypeCode,
          (object) ApprovalCode,
          (object) ClassID,
          (object) TestingTypeID,
          (object) ErrorOffsetID,
          (object) MTDescription,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow FindByMeterTypeID(
        int MeterTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow) this.Rows.Find(new object[1]
        {
          (object) MeterTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterDataTable waterMeterDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterDataTable) base.Clone();
        waterMeterDataTable.InitVars();
        return (DataTable) waterMeterDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnMeterTypeCode = this.Columns["MeterTypeCode"];
        this.columnApprovalCode = this.Columns["ApprovalCode"];
        this.columnClassID = this.Columns["ClassID"];
        this.columnTestingTypeID = this.Columns["TestingTypeID"];
        this.columnErrorOffsetID = this.Columns["ErrorOffsetID"];
        this.columnMTDescription = this.Columns["MTDescription"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnMeterTypeCode = new DataColumn("MeterTypeCode", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeCode);
        this.columnApprovalCode = new DataColumn("ApprovalCode", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalCode);
        this.columnClassID = new DataColumn("ClassID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClassID);
        this.columnTestingTypeID = new DataColumn("TestingTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestingTypeID);
        this.columnErrorOffsetID = new DataColumn("ErrorOffsetID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorOffsetID);
        this.columnMTDescription = new DataColumn("MTDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMTDescription);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterTypeID
        }, true));
        this.columnMeterTypeID.AllowDBNull = false;
        this.columnMeterTypeID.Unique = true;
        this.columnMTDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow NewMTypeWaterMeterRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MTypeWaterMeterRowChanged == null)
          return;
        this.MTypeWaterMeterRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MTypeWaterMeterRowChanging == null)
          return;
        this.MTypeWaterMeterRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MTypeWaterMeterRowDeleted == null)
          return;
        this.MTypeWaterMeterRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MTypeWaterMeterRowDeleting == null)
          return;
        this.MTypeWaterMeterRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMTypeWaterMeterRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MTypeWaterMeterDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MTypeZelsiusDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow>
    {
      private DataColumn columnMeterTypeID;
      private DataColumn columnEEPdata;
      private DataColumn columnTypeOverrideString;
      private DataColumn columnTypeCreationString;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeZelsiusDataTable()
      {
        this.TableName = "MTypeZelsius";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeZelsiusDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MTypeZelsiusDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EEPdataColumn => this.columnEEPdata;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TypeOverrideStringColumn => this.columnTypeOverrideString;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TypeCreationStringColumn => this.columnTypeCreationString;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRowChangeEventHandler MTypeZelsiusRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRowChangeEventHandler MTypeZelsiusRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRowChangeEventHandler MTypeZelsiusRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRowChangeEventHandler MTypeZelsiusRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMTypeZelsiusRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow AddMTypeZelsiusRow(
        ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow parentMeterTypeRowByMeterTypeMTypeZelsius,
        byte[] EEPdata,
        string TypeOverrideString,
        string TypeCreationString)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow row = (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow) this.NewRow();
        object[] objArray = new object[4]
        {
          null,
          (object) EEPdata,
          (object) TypeOverrideString,
          (object) TypeCreationString
        };
        if (parentMeterTypeRowByMeterTypeMTypeZelsius != null)
          objArray[0] = parentMeterTypeRowByMeterTypeMTypeZelsius[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow FindByMeterTypeID(int MeterTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow) this.Rows.Find(new object[1]
        {
          (object) MeterTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusDataTable zelsiusDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusDataTable) base.Clone();
        zelsiusDataTable.InitVars();
        return (DataTable) zelsiusDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnEEPdata = this.Columns["EEPdata"];
        this.columnTypeOverrideString = this.Columns["TypeOverrideString"];
        this.columnTypeCreationString = this.Columns["TypeCreationString"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnEEPdata = new DataColumn("EEPdata", typeof (byte[]), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEEPdata);
        this.columnTypeOverrideString = new DataColumn("TypeOverrideString", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTypeOverrideString);
        this.columnTypeCreationString = new DataColumn("TypeCreationString", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTypeCreationString);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterTypeID
        }, true));
        this.columnMeterTypeID.AllowDBNull = false;
        this.columnMeterTypeID.Unique = true;
        this.columnTypeOverrideString.MaxLength = (int) byte.MaxValue;
        this.columnTypeCreationString.MaxLength = 250;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow NewMTypeZelsiusRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MTypeZelsiusRowChanged == null)
          return;
        this.MTypeZelsiusRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MTypeZelsiusRowChanging == null)
          return;
        this.MTypeZelsiusRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MTypeZelsiusRowDeleted == null)
          return;
        this.MTypeZelsiusRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MTypeZelsiusRowDeleting == null)
          return;
        this.MTypeZelsiusRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMTypeZelsiusRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MTypeZelsiusDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MTypeZelsiusModuleDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow>
    {
      private DataColumn columnMeterTypeID;
      private DataColumn columnModuleType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeZelsiusModuleDataTable()
      {
        this.TableName = "MTypeZelsiusModule";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeZelsiusModuleDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MTypeZelsiusModuleDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ModuleTypeColumn => this.columnModuleType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRowChangeEventHandler MTypeZelsiusModuleRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRowChangeEventHandler MTypeZelsiusModuleRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRowChangeEventHandler MTypeZelsiusModuleRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRowChangeEventHandler MTypeZelsiusModuleRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMTypeZelsiusModuleRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow AddMTypeZelsiusModuleRow(
        ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow parentMeterTypeRowByMeterTypeMTypeZelsiusModule,
        string ModuleType)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow row = (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow) this.NewRow();
        object[] objArray = new object[2]
        {
          null,
          (object) ModuleType
        };
        if (parentMeterTypeRowByMeterTypeMTypeZelsiusModule != null)
          objArray[0] = parentMeterTypeRowByMeterTypeMTypeZelsiusModule[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow FindByMeterTypeID(
        int MeterTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow) this.Rows.Find(new object[1]
        {
          (object) MeterTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleDataTable zelsiusModuleDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleDataTable) base.Clone();
        zelsiusModuleDataTable.InitVars();
        return (DataTable) zelsiusModuleDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnModuleType = this.Columns["ModuleType"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnModuleType = new DataColumn("ModuleType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnModuleType);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterTypeID
        }, true));
        this.columnMeterTypeID.AllowDBNull = false;
        this.columnMeterTypeID.Unique = true;
        this.columnModuleType.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow NewMTypeZelsiusModuleRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MTypeZelsiusModuleRowChanged == null)
          return;
        this.MTypeZelsiusModuleRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MTypeZelsiusModuleRowChanging == null)
          return;
        this.MTypeZelsiusModuleRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MTypeZelsiusModuleRowDeleted == null)
          return;
        this.MTypeZelsiusModuleRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MTypeZelsiusModuleRowDeleting == null)
          return;
        this.MTypeZelsiusModuleRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMTypeZelsiusModuleRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MTypeZelsiusModuleDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class NodeListDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.NodeListRow>
    {
      private DataColumn columnNodeID;
      private DataColumn columnMeterID;
      private DataColumn columnNodeTypeID;
      private DataColumn columnNodeName;
      private DataColumn columnNodeDescription;
      private DataColumn columnNodeSettings;
      private DataColumn columnValidFrom;
      private DataColumn columnValidTo;
      private DataColumn columnNodeAdditionalInfos;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public NodeListDataTable()
      {
        this.TableName = "NodeList";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal NodeListDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected NodeListDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NodeIDColumn => this.columnNodeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NodeTypeIDColumn => this.columnNodeTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NodeNameColumn => this.columnNodeName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NodeDescriptionColumn => this.columnNodeDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NodeSettingsColumn => this.columnNodeSettings;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValidFromColumn => this.columnValidFrom;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValidToColumn => this.columnValidTo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NodeAdditionalInfosColumn => this.columnNodeAdditionalInfos;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeListRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.NodeListRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NodeListRowChangeEventHandler NodeListRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NodeListRowChangeEventHandler NodeListRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NodeListRowChangeEventHandler NodeListRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NodeListRowChangeEventHandler NodeListRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddNodeListRow(ZR_ClassLibrary.Schema_Access.Schema.NodeListRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeListRow AddNodeListRow(
        int NodeID,
        int MeterID,
        short NodeTypeID,
        string NodeName,
        string NodeDescription,
        string NodeSettings,
        DateTime ValidFrom,
        DateTime ValidTo,
        string NodeAdditionalInfos)
      {
        ZR_ClassLibrary.Schema_Access.Schema.NodeListRow row = (ZR_ClassLibrary.Schema_Access.Schema.NodeListRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) NodeID,
          (object) MeterID,
          (object) NodeTypeID,
          (object) NodeName,
          (object) NodeDescription,
          (object) NodeSettings,
          (object) ValidFrom,
          (object) ValidTo,
          (object) NodeAdditionalInfos
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeListRow FindByNodeIDMeterID(
        int NodeID,
        int MeterID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.NodeListRow) this.Rows.Find(new object[2]
        {
          (object) NodeID,
          (object) MeterID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.NodeListDataTable nodeListDataTable = (ZR_ClassLibrary.Schema_Access.Schema.NodeListDataTable) base.Clone();
        nodeListDataTable.InitVars();
        return (DataTable) nodeListDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.NodeListDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnNodeID = this.Columns["NodeID"];
        this.columnMeterID = this.Columns["MeterID"];
        this.columnNodeTypeID = this.Columns["NodeTypeID"];
        this.columnNodeName = this.Columns["NodeName"];
        this.columnNodeDescription = this.Columns["NodeDescription"];
        this.columnNodeSettings = this.Columns["NodeSettings"];
        this.columnValidFrom = this.Columns["ValidFrom"];
        this.columnValidTo = this.Columns["ValidTo"];
        this.columnNodeAdditionalInfos = this.Columns["NodeAdditionalInfos"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnNodeID = new DataColumn("NodeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNodeID);
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnNodeTypeID = new DataColumn("NodeTypeID", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNodeTypeID);
        this.columnNodeName = new DataColumn("NodeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNodeName);
        this.columnNodeDescription = new DataColumn("NodeDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNodeDescription);
        this.columnNodeSettings = new DataColumn("NodeSettings", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNodeSettings);
        this.columnValidFrom = new DataColumn("ValidFrom", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidFrom);
        this.columnValidTo = new DataColumn("ValidTo", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidTo);
        this.columnNodeAdditionalInfos = new DataColumn("NodeAdditionalInfos", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNodeAdditionalInfos);
        this.Constraints.Add((Constraint) new UniqueConstraint("NodeListKey1", new DataColumn[2]
        {
          this.columnNodeID,
          this.columnMeterID
        }, true));
        this.columnNodeID.AllowDBNull = false;
        this.columnMeterID.AllowDBNull = false;
        this.columnNodeName.MaxLength = 50;
        this.columnNodeDescription.MaxLength = 536870910;
        this.columnNodeSettings.MaxLength = 536870910;
        this.columnNodeAdditionalInfos.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeListRow NewNodeListRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.NodeListRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.NodeListRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.NodeListRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.NodeListRowChanged == null)
          return;
        this.NodeListRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NodeListRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NodeListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.NodeListRowChanging == null)
          return;
        this.NodeListRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NodeListRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NodeListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.NodeListRowDeleted == null)
          return;
        this.NodeListRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NodeListRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NodeListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.NodeListRowDeleting == null)
          return;
        this.NodeListRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NodeListRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NodeListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveNodeListRow(ZR_ClassLibrary.Schema_Access.Schema.NodeListRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (NodeListDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class NodeReferencesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow>
    {
      private DataColumn columnNodeID;
      private DataColumn columnParentID;
      private DataColumn columnLayerID;
      private DataColumn columnNodeOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public NodeReferencesDataTable()
      {
        this.TableName = "NodeReferences";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal NodeReferencesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected NodeReferencesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NodeIDColumn => this.columnNodeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParentIDColumn => this.columnParentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LayerIDColumn => this.columnLayerID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NodeOrderColumn => this.columnNodeOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRowChangeEventHandler NodeReferencesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRowChangeEventHandler NodeReferencesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRowChangeEventHandler NodeReferencesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRowChangeEventHandler NodeReferencesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddNodeReferencesRow(ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow AddNodeReferencesRow(
        int NodeID,
        int ParentID,
        int LayerID,
        int NodeOrder)
      {
        ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow row = (ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) NodeID,
          (object) ParentID,
          (object) LayerID,
          (object) NodeOrder
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow FindByNodeIDParentIDLayerID(
        int NodeID,
        int ParentID,
        int LayerID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow) this.Rows.Find(new object[3]
        {
          (object) NodeID,
          (object) ParentID,
          (object) LayerID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesDataTable referencesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesDataTable) base.Clone();
        referencesDataTable.InitVars();
        return (DataTable) referencesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnNodeID = this.Columns["NodeID"];
        this.columnParentID = this.Columns["ParentID"];
        this.columnLayerID = this.Columns["LayerID"];
        this.columnNodeOrder = this.Columns["NodeOrder"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnNodeID = new DataColumn("NodeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNodeID);
        this.columnParentID = new DataColumn("ParentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParentID);
        this.columnLayerID = new DataColumn("LayerID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLayerID);
        this.columnNodeOrder = new DataColumn("NodeOrder", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNodeOrder);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnNodeID,
          this.columnParentID,
          this.columnLayerID
        }, true));
        this.columnNodeID.AllowDBNull = false;
        this.columnParentID.AllowDBNull = false;
        this.columnLayerID.AllowDBNull = false;
        this.columnNodeOrder.DefaultValue = (object) 0;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow NewNodeReferencesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.NodeReferencesRowChanged == null)
          return;
        this.NodeReferencesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.NodeReferencesRowChanging == null)
          return;
        this.NodeReferencesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.NodeReferencesRowDeleted == null)
          return;
        this.NodeReferencesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.NodeReferencesRowDeleting == null)
          return;
        this.NodeReferencesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveNodeReferencesRow(ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (NodeReferencesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class PartlistDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.PartlistRow>
    {
      private DataColumn columnMeterID;
      private DataColumn columnIncludeMeterID;
      private DataColumn columnCreationDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PartlistDataTable()
      {
        this.TableName = "Partlist";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PartlistDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected PartlistDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn IncludeMeterIDColumn => this.columnIncludeMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CreationDateColumn => this.columnCreationDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PartlistRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.PartlistRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PartlistRowChangeEventHandler PartlistRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PartlistRowChangeEventHandler PartlistRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PartlistRowChangeEventHandler PartlistRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PartlistRowChangeEventHandler PartlistRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddPartlistRow(ZR_ClassLibrary.Schema_Access.Schema.PartlistRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PartlistRow AddPartlistRow(
        int MeterID,
        int IncludeMeterID,
        DateTime CreationDate)
      {
        ZR_ClassLibrary.Schema_Access.Schema.PartlistRow row = (ZR_ClassLibrary.Schema_Access.Schema.PartlistRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) MeterID,
          (object) IncludeMeterID,
          (object) CreationDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PartlistRow FindByMeterIDIncludeMeterIDCreationDate(
        int MeterID,
        int IncludeMeterID,
        DateTime CreationDate)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PartlistRow) this.Rows.Find(new object[3]
        {
          (object) MeterID,
          (object) IncludeMeterID,
          (object) CreationDate
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.PartlistDataTable partlistDataTable = (ZR_ClassLibrary.Schema_Access.Schema.PartlistDataTable) base.Clone();
        partlistDataTable.InitVars();
        return (DataTable) partlistDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PartlistDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterID = this.Columns["MeterID"];
        this.columnIncludeMeterID = this.Columns["IncludeMeterID"];
        this.columnCreationDate = this.Columns["CreationDate"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnIncludeMeterID = new DataColumn("IncludeMeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIncludeMeterID);
        this.columnCreationDate = new DataColumn("CreationDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCreationDate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnMeterID,
          this.columnIncludeMeterID,
          this.columnCreationDate
        }, true));
        this.columnMeterID.AllowDBNull = false;
        this.columnIncludeMeterID.AllowDBNull = false;
        this.columnCreationDate.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PartlistRow NewPartlistRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PartlistRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.PartlistRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.PartlistRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.PartlistRowChanged == null)
          return;
        this.PartlistRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PartlistRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PartlistRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.PartlistRowChanging == null)
          return;
        this.PartlistRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PartlistRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PartlistRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.PartlistRowDeleted == null)
          return;
        this.PartlistRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PartlistRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PartlistRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.PartlistRowDeleting == null)
          return;
        this.PartlistRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PartlistRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PartlistRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemovePartlistRow(ZR_ClassLibrary.Schema_Access.Schema.PartlistRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (PartlistDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class PPS_CacheDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow>
    {
      private DataColumn columnPPS_CacheElementID;
      private DataColumn columnPPS_MaterialNumber;
      private DataColumn columnPPS_MainClassID;
      private DataColumn columnPPS_ParameterID;
      private DataColumn columnPPS_ParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PPS_CacheDataTable()
      {
        this.TableName = "PPS_Cache";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PPS_CacheDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected PPS_CacheDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_CacheElementIDColumn => this.columnPPS_CacheElementID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_MaterialNumberColumn => this.columnPPS_MaterialNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_MainClassIDColumn => this.columnPPS_MainClassID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_ParameterIDColumn => this.columnPPS_ParameterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_ParameterValueColumn => this.columnPPS_ParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRowChangeEventHandler PPS_CacheRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRowChangeEventHandler PPS_CacheRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRowChangeEventHandler PPS_CacheRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRowChangeEventHandler PPS_CacheRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddPPS_CacheRow(ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow AddPPS_CacheRow(
        int PPS_CacheElementID,
        string PPS_MaterialNumber,
        int PPS_MainClassID,
        int PPS_ParameterID,
        string PPS_ParameterValue)
      {
        ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow row = (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) PPS_CacheElementID,
          (object) PPS_MaterialNumber,
          (object) PPS_MainClassID,
          (object) PPS_ParameterID,
          (object) PPS_ParameterValue
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow FindByPPS_CacheElementID(
        int PPS_CacheElementID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow) this.Rows.Find(new object[1]
        {
          (object) PPS_CacheElementID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheDataTable ppsCacheDataTable = (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheDataTable) base.Clone();
        ppsCacheDataTable.InitVars();
        return (DataTable) ppsCacheDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPPS_CacheElementID = this.Columns["PPS_CacheElementID"];
        this.columnPPS_MaterialNumber = this.Columns["PPS_MaterialNumber"];
        this.columnPPS_MainClassID = this.Columns["PPS_MainClassID"];
        this.columnPPS_ParameterID = this.Columns["PPS_ParameterID"];
        this.columnPPS_ParameterValue = this.Columns["PPS_ParameterValue"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPPS_CacheElementID = new DataColumn("PPS_CacheElementID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_CacheElementID);
        this.columnPPS_MaterialNumber = new DataColumn("PPS_MaterialNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_MaterialNumber);
        this.columnPPS_MainClassID = new DataColumn("PPS_MainClassID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_MainClassID);
        this.columnPPS_ParameterID = new DataColumn("PPS_ParameterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_ParameterID);
        this.columnPPS_ParameterValue = new DataColumn("PPS_ParameterValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_ParameterValue);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnPPS_CacheElementID
        }, true));
        this.columnPPS_CacheElementID.AllowDBNull = false;
        this.columnPPS_CacheElementID.Unique = true;
        this.columnPPS_MaterialNumber.MaxLength = 50;
        this.columnPPS_ParameterValue.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow NewPPS_CacheRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.PPS_CacheRowChanged == null)
          return;
        this.PPS_CacheRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.PPS_CacheRowChanging == null)
          return;
        this.PPS_CacheRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.PPS_CacheRowDeleted == null)
          return;
        this.PPS_CacheRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.PPS_CacheRowDeleting == null)
          return;
        this.PPS_CacheRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemovePPS_CacheRow(ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (PPS_CacheDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class PPS_CacheClassNamesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow>
    {
      private DataColumn columnPPS_MainClassID;
      private DataColumn columnPPS_ClassName;
      private DataColumn columnPPS_ClassDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PPS_CacheClassNamesDataTable()
      {
        this.TableName = "PPS_CacheClassNames";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PPS_CacheClassNamesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected PPS_CacheClassNamesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_MainClassIDColumn => this.columnPPS_MainClassID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_ClassNameColumn => this.columnPPS_ClassName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_ClassDescriptionColumn => this.columnPPS_ClassDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRowChangeEventHandler PPS_CacheClassNamesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRowChangeEventHandler PPS_CacheClassNamesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRowChangeEventHandler PPS_CacheClassNamesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRowChangeEventHandler PPS_CacheClassNamesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddPPS_CacheClassNamesRow(ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow AddPPS_CacheClassNamesRow(
        int PPS_MainClassID,
        string PPS_ClassName,
        string PPS_ClassDescription)
      {
        ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow row = (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) PPS_MainClassID,
          (object) PPS_ClassName,
          (object) PPS_ClassDescription
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow FindByPPS_MainClassID(
        int PPS_MainClassID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow) this.Rows.Find(new object[1]
        {
          (object) PPS_MainClassID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesDataTable classNamesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesDataTable) base.Clone();
        classNamesDataTable.InitVars();
        return (DataTable) classNamesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPPS_MainClassID = this.Columns["PPS_MainClassID"];
        this.columnPPS_ClassName = this.Columns["PPS_ClassName"];
        this.columnPPS_ClassDescription = this.Columns["PPS_ClassDescription"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPPS_MainClassID = new DataColumn("PPS_MainClassID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_MainClassID);
        this.columnPPS_ClassName = new DataColumn("PPS_ClassName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_ClassName);
        this.columnPPS_ClassDescription = new DataColumn("PPS_ClassDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_ClassDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnPPS_MainClassID
        }, true));
        this.columnPPS_MainClassID.AllowDBNull = false;
        this.columnPPS_MainClassID.Unique = true;
        this.columnPPS_ClassName.MaxLength = 50;
        this.columnPPS_ClassDescription.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow NewPPS_CacheClassNamesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.PPS_CacheClassNamesRowChanged == null)
          return;
        this.PPS_CacheClassNamesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.PPS_CacheClassNamesRowChanging == null)
          return;
        this.PPS_CacheClassNamesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.PPS_CacheClassNamesRowDeleted == null)
          return;
        this.PPS_CacheClassNamesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.PPS_CacheClassNamesRowDeleting == null)
          return;
        this.PPS_CacheClassNamesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemovePPS_CacheClassNamesRow(ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (PPS_CacheClassNamesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class PPS_CacheParmNamesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow>
    {
      private DataColumn columnPPS_ParameterID;
      private DataColumn columnPPS_ParameterName;
      private DataColumn columnPPS_ParameterDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PPS_CacheParmNamesDataTable()
      {
        this.TableName = "PPS_CacheParmNames";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PPS_CacheParmNamesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected PPS_CacheParmNamesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_ParameterIDColumn => this.columnPPS_ParameterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_ParameterNameColumn => this.columnPPS_ParameterName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_ParameterDescriptionColumn => this.columnPPS_ParameterDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRowChangeEventHandler PPS_CacheParmNamesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRowChangeEventHandler PPS_CacheParmNamesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRowChangeEventHandler PPS_CacheParmNamesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRowChangeEventHandler PPS_CacheParmNamesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddPPS_CacheParmNamesRow(ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow AddPPS_CacheParmNamesRow(
        int PPS_ParameterID,
        string PPS_ParameterName,
        string PPS_ParameterDescription)
      {
        ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow row = (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) PPS_ParameterID,
          (object) PPS_ParameterName,
          (object) PPS_ParameterDescription
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow FindByPPS_ParameterID(
        int PPS_ParameterID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow) this.Rows.Find(new object[1]
        {
          (object) PPS_ParameterID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesDataTable parmNamesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesDataTable) base.Clone();
        parmNamesDataTable.InitVars();
        return (DataTable) parmNamesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPPS_ParameterID = this.Columns["PPS_ParameterID"];
        this.columnPPS_ParameterName = this.Columns["PPS_ParameterName"];
        this.columnPPS_ParameterDescription = this.Columns["PPS_ParameterDescription"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPPS_ParameterID = new DataColumn("PPS_ParameterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_ParameterID);
        this.columnPPS_ParameterName = new DataColumn("PPS_ParameterName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_ParameterName);
        this.columnPPS_ParameterDescription = new DataColumn("PPS_ParameterDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_ParameterDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnPPS_ParameterID
        }, true));
        this.columnPPS_ParameterID.AllowDBNull = false;
        this.columnPPS_ParameterID.Unique = true;
        this.columnPPS_ParameterName.MaxLength = 50;
        this.columnPPS_ParameterDescription.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow NewPPS_CacheParmNamesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.PPS_CacheParmNamesRowChanged == null)
          return;
        this.PPS_CacheParmNamesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.PPS_CacheParmNamesRowChanging == null)
          return;
        this.PPS_CacheParmNamesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.PPS_CacheParmNamesRowDeleted == null)
          return;
        this.PPS_CacheParmNamesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.PPS_CacheParmNamesRowDeleting == null)
          return;
        this.PPS_CacheParmNamesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemovePPS_CacheParmNamesRow(ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (PPS_CacheParmNamesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class PPS_RW_WMZ_MapperDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow>
    {
      private DataColumn columnPPS_ArticleNr_old;
      private DataColumn columnPPS_MaterialNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PPS_RW_WMZ_MapperDataTable()
      {
        this.TableName = "PPS_RW_WMZ_Mapper";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PPS_RW_WMZ_MapperDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected PPS_RW_WMZ_MapperDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_ArticleNr_oldColumn => this.columnPPS_ArticleNr_old;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_MaterialNumberColumn => this.columnPPS_MaterialNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRowChangeEventHandler PPS_RW_WMZ_MapperRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRowChangeEventHandler PPS_RW_WMZ_MapperRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRowChangeEventHandler PPS_RW_WMZ_MapperRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRowChangeEventHandler PPS_RW_WMZ_MapperRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddPPS_RW_WMZ_MapperRow(ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow AddPPS_RW_WMZ_MapperRow(
        string PPS_ArticleNr_old,
        string PPS_MaterialNumber)
      {
        ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow row = (ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) PPS_ArticleNr_old,
          (object) PPS_MaterialNumber
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow FindByPPS_ArticleNr_oldPPS_MaterialNumber(
        string PPS_ArticleNr_old,
        string PPS_MaterialNumber)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow) this.Rows.Find(new object[2]
        {
          (object) PPS_ArticleNr_old,
          (object) PPS_MaterialNumber
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperDataTable wmzMapperDataTable = (ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperDataTable) base.Clone();
        wmzMapperDataTable.InitVars();
        return (DataTable) wmzMapperDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPPS_ArticleNr_old = this.Columns["PPS_ArticleNr_old"];
        this.columnPPS_MaterialNumber = this.Columns["PPS_MaterialNumber"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPPS_ArticleNr_old = new DataColumn("PPS_ArticleNr_old", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_ArticleNr_old);
        this.columnPPS_MaterialNumber = new DataColumn("PPS_MaterialNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_MaterialNumber);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnPPS_ArticleNr_old,
          this.columnPPS_MaterialNumber
        }, true));
        this.columnPPS_ArticleNr_old.AllowDBNull = false;
        this.columnPPS_ArticleNr_old.MaxLength = 50;
        this.columnPPS_MaterialNumber.AllowDBNull = false;
        this.columnPPS_MaterialNumber.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow NewPPS_RW_WMZ_MapperRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.PPS_RW_WMZ_MapperRowChanged == null)
          return;
        this.PPS_RW_WMZ_MapperRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.PPS_RW_WMZ_MapperRowChanging == null)
          return;
        this.PPS_RW_WMZ_MapperRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.PPS_RW_WMZ_MapperRowDeleted == null)
          return;
        this.PPS_RW_WMZ_MapperRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.PPS_RW_WMZ_MapperRowDeleting == null)
          return;
        this.PPS_RW_WMZ_MapperRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemovePPS_RW_WMZ_MapperRow(ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (PPS_RW_WMZ_MapperDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class PPS_STS_ReferenceDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow>
    {
      private DataColumn columnPPS_Group;
      private DataColumn columnPPS_Name;
      private DataColumn columnPPS_Generation;
      private DataColumn columnPPS_AttributeNo;
      private DataColumn columnPPS_EntryNo;
      private DataColumn columnPPS_FromGroup;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PPS_STS_ReferenceDataTable()
      {
        this.TableName = "PPS_STS_Reference";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PPS_STS_ReferenceDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected PPS_STS_ReferenceDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_GroupColumn => this.columnPPS_Group;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_NameColumn => this.columnPPS_Name;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_GenerationColumn => this.columnPPS_Generation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_AttributeNoColumn => this.columnPPS_AttributeNo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_EntryNoColumn => this.columnPPS_EntryNo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPS_FromGroupColumn => this.columnPPS_FromGroup;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRowChangeEventHandler PPS_STS_ReferenceRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRowChangeEventHandler PPS_STS_ReferenceRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRowChangeEventHandler PPS_STS_ReferenceRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRowChangeEventHandler PPS_STS_ReferenceRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddPPS_STS_ReferenceRow(ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow AddPPS_STS_ReferenceRow(
        string PPS_Group,
        string PPS_Name,
        string PPS_Generation,
        int PPS_AttributeNo,
        int PPS_EntryNo,
        string PPS_FromGroup)
      {
        ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow row = (ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) PPS_Group,
          (object) PPS_Name,
          (object) PPS_Generation,
          (object) PPS_AttributeNo,
          (object) PPS_EntryNo,
          (object) PPS_FromGroup
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow FindByPPS_GroupPPS_NamePPS_Generation(
        string PPS_Group,
        string PPS_Name,
        string PPS_Generation)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow) this.Rows.Find(new object[3]
        {
          (object) PPS_Group,
          (object) PPS_Name,
          (object) PPS_Generation
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceDataTable referenceDataTable = (ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceDataTable) base.Clone();
        referenceDataTable.InitVars();
        return (DataTable) referenceDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPPS_Group = this.Columns["PPS_Group"];
        this.columnPPS_Name = this.Columns["PPS_Name"];
        this.columnPPS_Generation = this.Columns["PPS_Generation"];
        this.columnPPS_AttributeNo = this.Columns["PPS_AttributeNo"];
        this.columnPPS_EntryNo = this.Columns["PPS_EntryNo"];
        this.columnPPS_FromGroup = this.Columns["PPS_FromGroup"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPPS_Group = new DataColumn("PPS_Group", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_Group);
        this.columnPPS_Name = new DataColumn("PPS_Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_Name);
        this.columnPPS_Generation = new DataColumn("PPS_Generation", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_Generation);
        this.columnPPS_AttributeNo = new DataColumn("PPS_AttributeNo", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_AttributeNo);
        this.columnPPS_EntryNo = new DataColumn("PPS_EntryNo", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_EntryNo);
        this.columnPPS_FromGroup = new DataColumn("PPS_FromGroup", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPS_FromGroup);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnPPS_Group,
          this.columnPPS_Name,
          this.columnPPS_Generation
        }, true));
        this.columnPPS_Group.AllowDBNull = false;
        this.columnPPS_Group.MaxLength = 50;
        this.columnPPS_Name.AllowDBNull = false;
        this.columnPPS_Name.MaxLength = 50;
        this.columnPPS_Generation.AllowDBNull = false;
        this.columnPPS_Generation.MaxLength = 50;
        this.columnPPS_FromGroup.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow NewPPS_STS_ReferenceRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.PPS_STS_ReferenceRowChanged == null)
          return;
        this.PPS_STS_ReferenceRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.PPS_STS_ReferenceRowChanging == null)
          return;
        this.PPS_STS_ReferenceRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.PPS_STS_ReferenceRowDeleted == null)
          return;
        this.PPS_STS_ReferenceRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.PPS_STS_ReferenceRowDeleting == null)
          return;
        this.PPS_STS_ReferenceRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemovePPS_STS_ReferenceRow(ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (PPS_STS_ReferenceDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ProgFilesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow>
    {
      private DataColumn columnMapID;
      private DataColumn columnProgFileName;
      private DataColumn columnOptions;
      private DataColumn columnHexText;
      private DataColumn columnSourceInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ProgFilesDataTable()
      {
        this.TableName = "ProgFiles";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ProgFilesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ProgFilesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ProgFileNameColumn => this.columnProgFileName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn OptionsColumn => this.columnOptions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HexTextColumn => this.columnHexText;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SourceInfoColumn => this.columnSourceInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRowChangeEventHandler ProgFilesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRowChangeEventHandler ProgFilesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRowChangeEventHandler ProgFilesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRowChangeEventHandler ProgFilesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddProgFilesRow(ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow AddProgFilesRow(
        int MapID,
        string ProgFileName,
        string Options,
        string HexText,
        string SourceInfo)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow row = (ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) MapID,
          (object) ProgFileName,
          (object) Options,
          (object) HexText,
          (object) SourceInfo
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow FindByMapID(int MapID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow) this.Rows.Find(new object[1]
        {
          (object) MapID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ProgFilesDataTable progFilesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ProgFilesDataTable) base.Clone();
        progFilesDataTable.InitVars();
        return (DataTable) progFilesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ProgFilesDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMapID = this.Columns["MapID"];
        this.columnProgFileName = this.Columns["ProgFileName"];
        this.columnOptions = this.Columns["Options"];
        this.columnHexText = this.Columns["HexText"];
        this.columnSourceInfo = this.Columns["SourceInfo"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnProgFileName = new DataColumn("ProgFileName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnProgFileName);
        this.columnOptions = new DataColumn("Options", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOptions);
        this.columnHexText = new DataColumn("HexText", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHexText);
        this.columnSourceInfo = new DataColumn("SourceInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSourceInfo);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMapID
        }, true));
        this.columnMapID.AllowDBNull = false;
        this.columnMapID.Unique = true;
        this.columnProgFileName.MaxLength = 50;
        this.columnOptions.MaxLength = (int) byte.MaxValue;
        this.columnHexText.MaxLength = 536870910;
        this.columnSourceInfo.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow NewProgFilesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ProgFilesRowChanged == null)
          return;
        this.ProgFilesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ProgFilesRowChanging == null)
          return;
        this.ProgFilesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ProgFilesRowDeleted == null)
          return;
        this.ProgFilesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ProgFilesRowDeleting == null)
          return;
        this.ProgFilesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveProgFilesRow(ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ProgFilesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class PValueIdentDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow>
    {
      private DataColumn columnPValueID;
      private DataColumn columnPValueName;
      private DataColumn columnUnit;
      private DataColumn columnDescription;
      private DataColumn columnDependID;
      private DataColumn columnCalcRoule;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PValueIdentDataTable()
      {
        this.TableName = "PValueIdent";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PValueIdentDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected PValueIdentDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PValueIDColumn => this.columnPValueID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PValueNameColumn => this.columnPValueName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UnitColumn => this.columnUnit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DependIDColumn => this.columnDependID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalcRouleColumn => this.columnCalcRoule;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRowChangeEventHandler PValueIdentRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRowChangeEventHandler PValueIdentRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRowChangeEventHandler PValueIdentRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRowChangeEventHandler PValueIdentRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddPValueIdentRow(ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow AddPValueIdentRow(
        int PValueID,
        string PValueName,
        string Unit,
        string Description,
        int DependID,
        string CalcRoule)
      {
        ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow row = (ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) PValueID,
          (object) PValueName,
          (object) Unit,
          (object) Description,
          (object) DependID,
          (object) CalcRoule
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow FindByPValueID(int PValueID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow) this.Rows.Find(new object[1]
        {
          (object) PValueID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.PValueIdentDataTable pvalueIdentDataTable = (ZR_ClassLibrary.Schema_Access.Schema.PValueIdentDataTable) base.Clone();
        pvalueIdentDataTable.InitVars();
        return (DataTable) pvalueIdentDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PValueIdentDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPValueID = this.Columns["PValueID"];
        this.columnPValueName = this.Columns["PValueName"];
        this.columnUnit = this.Columns["Unit"];
        this.columnDescription = this.Columns["Description"];
        this.columnDependID = this.Columns["DependID"];
        this.columnCalcRoule = this.Columns["CalcRoule"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPValueID = new DataColumn("PValueID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPValueID);
        this.columnPValueName = new DataColumn("PValueName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPValueName);
        this.columnUnit = new DataColumn("Unit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUnit);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnDependID = new DataColumn("DependID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDependID);
        this.columnCalcRoule = new DataColumn("CalcRoule", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalcRoule);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnPValueID
        }, true));
        this.columnPValueID.AllowDBNull = false;
        this.columnPValueID.Unique = true;
        this.columnPValueName.MaxLength = 100;
        this.columnUnit.MaxLength = 20;
        this.columnDescription.MaxLength = 536870910;
        this.columnCalcRoule.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow NewPValueIdentRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.PValueIdentRowChanged == null)
          return;
        this.PValueIdentRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.PValueIdentRowChanging == null)
          return;
        this.PValueIdentRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.PValueIdentRowDeleted == null)
          return;
        this.PValueIdentRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.PValueIdentRowDeleting == null)
          return;
        this.PValueIdentRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemovePValueIdentRow(ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (PValueIdentDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class RepairDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.RepairRow>
    {
      private DataColumn columnRepairID;
      private DataColumn columnMeterID;
      private DataColumn columnRepairErrorGroupId;
      private DataColumn columnErrorGroupText;
      private DataColumn columnRepairDescription;
      private DataColumn columnRepairOk;
      private DataColumn columnRepairDate;
      private DataColumn columnRepairMinutes;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public RepairDataTable()
      {
        this.TableName = "Repair";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal RepairDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected RepairDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RepairIDColumn => this.columnRepairID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RepairErrorGroupIdColumn => this.columnRepairErrorGroupId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorGroupTextColumn => this.columnErrorGroupText;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RepairDescriptionColumn => this.columnRepairDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RepairOkColumn => this.columnRepairOk;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RepairDateColumn => this.columnRepairDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RepairMinutesColumn => this.columnRepairMinutes;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.RepairRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.RepairRowChangeEventHandler RepairRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.RepairRowChangeEventHandler RepairRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.RepairRowChangeEventHandler RepairRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.RepairRowChangeEventHandler RepairRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddRepairRow(ZR_ClassLibrary.Schema_Access.Schema.RepairRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairRow AddRepairRow(
        int RepairID,
        ZR_ClassLibrary.Schema_Access.Schema.MeterRow parentMeterRowByMeterRepair,
        ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow parentRepairErrorGroupsRowByRepairErrorGroupsRepair,
        string ErrorGroupText,
        string RepairDescription,
        byte RepairOk,
        DateTime RepairDate,
        int RepairMinutes)
      {
        ZR_ClassLibrary.Schema_Access.Schema.RepairRow row = (ZR_ClassLibrary.Schema_Access.Schema.RepairRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) RepairID,
          null,
          null,
          (object) ErrorGroupText,
          (object) RepairDescription,
          (object) RepairOk,
          (object) RepairDate,
          (object) RepairMinutes
        };
        if (parentMeterRowByMeterRepair != null)
          objArray[1] = parentMeterRowByMeterRepair[0];
        if (parentRepairErrorGroupsRowByRepairErrorGroupsRepair != null)
          objArray[2] = parentRepairErrorGroupsRowByRepairErrorGroupsRepair[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairRow FindByRepairID(int RepairID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.RepairRow) this.Rows.Find(new object[1]
        {
          (object) RepairID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.RepairDataTable repairDataTable = (ZR_ClassLibrary.Schema_Access.Schema.RepairDataTable) base.Clone();
        repairDataTable.InitVars();
        return (DataTable) repairDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.RepairDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnRepairID = this.Columns["RepairID"];
        this.columnMeterID = this.Columns["MeterID"];
        this.columnRepairErrorGroupId = this.Columns["RepairErrorGroupId"];
        this.columnErrorGroupText = this.Columns["ErrorGroupText"];
        this.columnRepairDescription = this.Columns["RepairDescription"];
        this.columnRepairOk = this.Columns["RepairOk"];
        this.columnRepairDate = this.Columns["RepairDate"];
        this.columnRepairMinutes = this.Columns["RepairMinutes"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnRepairID = new DataColumn("RepairID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRepairID);
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnRepairErrorGroupId = new DataColumn("RepairErrorGroupId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRepairErrorGroupId);
        this.columnErrorGroupText = new DataColumn("ErrorGroupText", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorGroupText);
        this.columnRepairDescription = new DataColumn("RepairDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRepairDescription);
        this.columnRepairOk = new DataColumn("RepairOk", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRepairOk);
        this.columnRepairDate = new DataColumn("RepairDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRepairDate);
        this.columnRepairMinutes = new DataColumn("RepairMinutes", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRepairMinutes);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnRepairID
        }, true));
        this.columnRepairID.AllowDBNull = false;
        this.columnRepairID.Unique = true;
        this.columnErrorGroupText.MaxLength = 50;
        this.columnRepairDescription.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairRow NewRepairRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.RepairRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.RepairRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.RepairRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.RepairRowChanged == null)
          return;
        this.RepairRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.RepairRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.RepairRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.RepairRowChanging == null)
          return;
        this.RepairRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.RepairRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.RepairRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.RepairRowDeleted == null)
          return;
        this.RepairRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.RepairRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.RepairRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.RepairRowDeleting == null)
          return;
        this.RepairRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.RepairRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.RepairRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveRepairRow(ZR_ClassLibrary.Schema_Access.Schema.RepairRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (RepairDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class RepairErrorGroupsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow>
    {
      private DataColumn columnRepairErrorGroupId;
      private DataColumn columnMeterHardwareID;
      private DataColumn columnErrorGroupText;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public RepairErrorGroupsDataTable()
      {
        this.TableName = "RepairErrorGroups";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal RepairErrorGroupsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected RepairErrorGroupsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RepairErrorGroupIdColumn => this.columnRepairErrorGroupId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterHardwareIDColumn => this.columnMeterHardwareID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorGroupTextColumn => this.columnErrorGroupText;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRowChangeEventHandler RepairErrorGroupsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRowChangeEventHandler RepairErrorGroupsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRowChangeEventHandler RepairErrorGroupsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRowChangeEventHandler RepairErrorGroupsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddRepairErrorGroupsRow(ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow AddRepairErrorGroupsRow(
        int RepairErrorGroupId,
        int MeterHardwareID,
        string ErrorGroupText)
      {
        ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow row = (ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) RepairErrorGroupId,
          (object) MeterHardwareID,
          (object) ErrorGroupText
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow FindByRepairErrorGroupId(
        int RepairErrorGroupId)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow) this.Rows.Find(new object[1]
        {
          (object) RepairErrorGroupId
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsDataTable errorGroupsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsDataTable) base.Clone();
        errorGroupsDataTable.InitVars();
        return (DataTable) errorGroupsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnRepairErrorGroupId = this.Columns["RepairErrorGroupId"];
        this.columnMeterHardwareID = this.Columns["MeterHardwareID"];
        this.columnErrorGroupText = this.Columns["ErrorGroupText"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnRepairErrorGroupId = new DataColumn("RepairErrorGroupId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRepairErrorGroupId);
        this.columnMeterHardwareID = new DataColumn("MeterHardwareID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterHardwareID);
        this.columnErrorGroupText = new DataColumn("ErrorGroupText", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorGroupText);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnRepairErrorGroupId
        }, true));
        this.columnRepairErrorGroupId.AllowDBNull = false;
        this.columnRepairErrorGroupId.Unique = true;
        this.columnErrorGroupText.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow NewRepairErrorGroupsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.RepairErrorGroupsRowChanged == null)
          return;
        this.RepairErrorGroupsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.RepairErrorGroupsRowChanging == null)
          return;
        this.RepairErrorGroupsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.RepairErrorGroupsRowDeleted == null)
          return;
        this.RepairErrorGroupsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.RepairErrorGroupsRowDeleting == null)
          return;
        this.RepairErrorGroupsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveRepairErrorGroupsRow(ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (RepairErrorGroupsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class RuntimeCodeDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow>
    {
      private DataColumn columnFunctionNumber;
      private DataColumn columnCodeID;
      private DataColumn columnCodeSequenceType;
      private DataColumn columnCodeSequenceInfo;
      private DataColumn columnCodeSequenceName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public RuntimeCodeDataTable()
      {
        this.TableName = "RuntimeCode";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal RuntimeCodeDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected RuntimeCodeDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionNumberColumn => this.columnFunctionNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeIDColumn => this.columnCodeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeSequenceTypeColumn => this.columnCodeSequenceType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeSequenceInfoColumn => this.columnCodeSequenceInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeSequenceNameColumn => this.columnCodeSequenceName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRowChangeEventHandler RuntimeCodeRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRowChangeEventHandler RuntimeCodeRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRowChangeEventHandler RuntimeCodeRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRowChangeEventHandler RuntimeCodeRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddRuntimeCodeRow(ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow AddRuntimeCodeRow(
        ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow parentZRFunctionRowByFunctionRuntimeCodeKopf,
        int CodeID,
        string CodeSequenceType,
        string CodeSequenceInfo,
        string CodeSequenceName)
      {
        ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow row = (ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow) this.NewRow();
        object[] objArray = new object[5]
        {
          null,
          (object) CodeID,
          (object) CodeSequenceType,
          (object) CodeSequenceInfo,
          (object) CodeSequenceName
        };
        if (parentZRFunctionRowByFunctionRuntimeCodeKopf != null)
          objArray[0] = parentZRFunctionRowByFunctionRuntimeCodeKopf[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow FindByFunctionNumberCodeID(
        int FunctionNumber,
        int CodeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow) this.Rows.Find(new object[2]
        {
          (object) FunctionNumber,
          (object) CodeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeDataTable runtimeCodeDataTable = (ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeDataTable) base.Clone();
        runtimeCodeDataTable.InitVars();
        return (DataTable) runtimeCodeDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnFunctionNumber = this.Columns["FunctionNumber"];
        this.columnCodeID = this.Columns["CodeID"];
        this.columnCodeSequenceType = this.Columns["CodeSequenceType"];
        this.columnCodeSequenceInfo = this.Columns["CodeSequenceInfo"];
        this.columnCodeSequenceName = this.Columns["CodeSequenceName"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnFunctionNumber = new DataColumn("FunctionNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionNumber);
        this.columnCodeID = new DataColumn("CodeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeID);
        this.columnCodeSequenceType = new DataColumn("CodeSequenceType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeSequenceType);
        this.columnCodeSequenceInfo = new DataColumn("CodeSequenceInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeSequenceInfo);
        this.columnCodeSequenceName = new DataColumn("CodeSequenceName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeSequenceName);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnFunctionNumber,
          this.columnCodeID
        }, true));
        this.columnFunctionNumber.AllowDBNull = false;
        this.columnCodeID.AllowDBNull = false;
        this.columnCodeSequenceType.MaxLength = 50;
        this.columnCodeSequenceInfo.MaxLength = 50;
        this.columnCodeSequenceName.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow NewRuntimeCodeRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.RuntimeCodeRowChanged == null)
          return;
        this.RuntimeCodeRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.RuntimeCodeRowChanging == null)
          return;
        this.RuntimeCodeRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.RuntimeCodeRowDeleted == null)
          return;
        this.RuntimeCodeRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.RuntimeCodeRowDeleting == null)
          return;
        this.RuntimeCodeRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveRuntimeCodeRow(ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (RuntimeCodeDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TestDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TestRow>
    {
      private DataColumn columnTestID;
      private DataColumn columnTestStartDate;
      private DataColumn columnTestEndDate;
      private DataColumn columnTestTypeID;
      private DataColumn columnTestPassed;
      private DataColumn columnPersonelNr;
      private DataColumn columnDescription;
      private DataColumn columnTestOrderNr;
      private DataColumn columnVerification;
      private DataColumn columnExternalTestID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestDataTable()
      {
        this.TableName = "Test";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TestDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestIDColumn => this.columnTestID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestStartDateColumn => this.columnTestStartDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestEndDateColumn => this.columnTestEndDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestTypeIDColumn => this.columnTestTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestPassedColumn => this.columnTestPassed;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestOrderNrColumn => this.columnTestOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn VerificationColumn => this.columnVerification;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ExternalTestIDColumn => this.columnExternalTestID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TestRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestRowChangeEventHandler TestRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestRowChangeEventHandler TestRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestRowChangeEventHandler TestRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestRowChangeEventHandler TestRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTestRow(ZR_ClassLibrary.Schema_Access.Schema.TestRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestRow AddTestRow(
        int TestID,
        DateTime TestStartDate,
        DateTime TestEndDate,
        int TestTypeID,
        byte TestPassed,
        int PersonelNr,
        string Description,
        string TestOrderNr,
        byte Verification,
        string ExternalTestID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestRow row = (ZR_ClassLibrary.Schema_Access.Schema.TestRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) TestID,
          (object) TestStartDate,
          (object) TestEndDate,
          (object) TestTypeID,
          (object) TestPassed,
          (object) PersonelNr,
          (object) Description,
          (object) TestOrderNr,
          (object) Verification,
          (object) ExternalTestID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestRow FindByTestID(int TestID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestRow) this.Rows.Find(new object[1]
        {
          (object) TestID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestDataTable testDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TestDataTable) base.Clone();
        testDataTable.InitVars();
        return (DataTable) testDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTestID = this.Columns["TestID"];
        this.columnTestStartDate = this.Columns["TestStartDate"];
        this.columnTestEndDate = this.Columns["TestEndDate"];
        this.columnTestTypeID = this.Columns["TestTypeID"];
        this.columnTestPassed = this.Columns["TestPassed"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
        this.columnDescription = this.Columns["Description"];
        this.columnTestOrderNr = this.Columns["TestOrderNr"];
        this.columnVerification = this.Columns["Verification"];
        this.columnExternalTestID = this.Columns["ExternalTestID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTestID = new DataColumn("TestID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestID);
        this.columnTestStartDate = new DataColumn("TestStartDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestStartDate);
        this.columnTestEndDate = new DataColumn("TestEndDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestEndDate);
        this.columnTestTypeID = new DataColumn("TestTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestTypeID);
        this.columnTestPassed = new DataColumn("TestPassed", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestPassed);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnTestOrderNr = new DataColumn("TestOrderNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestOrderNr);
        this.columnVerification = new DataColumn("Verification", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVerification);
        this.columnExternalTestID = new DataColumn("ExternalTestID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnExternalTestID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnTestID
        }, true));
        this.columnTestID.AllowDBNull = false;
        this.columnTestID.Unique = true;
        this.columnDescription.MaxLength = 536870910;
        this.columnTestOrderNr.MaxLength = 50;
        this.columnExternalTestID.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestRow NewTestRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TestRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TestRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TestRowChanged == null)
          return;
        this.TestRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TestRowChanging == null)
          return;
        this.TestRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TestRowDeleted == null)
          return;
        this.TestRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TestRowDeleting == null)
          return;
        this.TestRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTestRow(ZR_ClassLibrary.Schema_Access.Schema.TestRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TestDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TestbenchActualValuesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow>
    {
      private DataColumn columnTestID;
      private DataColumn columnTestPointDataID;
      private DataColumn columnTestRunOrderNr;
      private DataColumn columnActualValueID;
      private DataColumn columnActualValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchActualValuesDataTable()
      {
        this.TableName = "TestbenchActualValues";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestbenchActualValuesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TestbenchActualValuesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestIDColumn => this.columnTestID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestPointDataIDColumn => this.columnTestPointDataID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestRunOrderNrColumn => this.columnTestRunOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ActualValueIDColumn => this.columnActualValueID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ActualValueColumn => this.columnActualValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRowChangeEventHandler TestbenchActualValuesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRowChangeEventHandler TestbenchActualValuesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRowChangeEventHandler TestbenchActualValuesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRowChangeEventHandler TestbenchActualValuesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTestbenchActualValuesRow(ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow AddTestbenchActualValuesRow(
        int TestID,
        int TestPointDataID,
        int TestRunOrderNr,
        int ActualValueID,
        string ActualValue)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow row = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) TestID,
          (object) TestPointDataID,
          (object) TestRunOrderNr,
          (object) ActualValueID,
          (object) ActualValue
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow FindByTestIDTestPointDataIDTestRunOrderNrActualValueID(
        int TestID,
        int TestPointDataID,
        int TestRunOrderNr,
        int ActualValueID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow) this.Rows.Find(new object[4]
        {
          (object) TestID,
          (object) TestPointDataID,
          (object) TestRunOrderNr,
          (object) ActualValueID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesDataTable actualValuesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesDataTable) base.Clone();
        actualValuesDataTable.InitVars();
        return (DataTable) actualValuesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTestID = this.Columns["TestID"];
        this.columnTestPointDataID = this.Columns["TestPointDataID"];
        this.columnTestRunOrderNr = this.Columns["TestRunOrderNr"];
        this.columnActualValueID = this.Columns["ActualValueID"];
        this.columnActualValue = this.Columns["ActualValue"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTestID = new DataColumn("TestID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestID);
        this.columnTestPointDataID = new DataColumn("TestPointDataID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestPointDataID);
        this.columnTestRunOrderNr = new DataColumn("TestRunOrderNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestRunOrderNr);
        this.columnActualValueID = new DataColumn("ActualValueID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnActualValueID);
        this.columnActualValue = new DataColumn("ActualValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnActualValue);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[4]
        {
          this.columnTestID,
          this.columnTestPointDataID,
          this.columnTestRunOrderNr,
          this.columnActualValueID
        }, true));
        this.columnTestID.AllowDBNull = false;
        this.columnTestPointDataID.AllowDBNull = false;
        this.columnTestRunOrderNr.AllowDBNull = false;
        this.columnActualValueID.AllowDBNull = false;
        this.columnActualValue.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow NewTestbenchActualValuesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TestbenchActualValuesRowChanged == null)
          return;
        this.TestbenchActualValuesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TestbenchActualValuesRowChanging == null)
          return;
        this.TestbenchActualValuesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TestbenchActualValuesRowDeleted == null)
          return;
        this.TestbenchActualValuesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TestbenchActualValuesRowDeleting == null)
          return;
        this.TestbenchActualValuesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTestbenchActualValuesRow(ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TestbenchActualValuesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TestbenchNominalValuesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow>
    {
      private DataColumn columnTestPointDataID;
      private DataColumn columnNominalValueID;
      private DataColumn columnNominalValue;
      private DataColumn columnValueDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchNominalValuesDataTable()
      {
        this.TableName = "TestbenchNominalValues";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestbenchNominalValuesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TestbenchNominalValuesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestPointDataIDColumn => this.columnTestPointDataID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NominalValueIDColumn => this.columnNominalValueID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NominalValueColumn => this.columnNominalValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueDescriptionColumn => this.columnValueDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRowChangeEventHandler TestbenchNominalValuesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRowChangeEventHandler TestbenchNominalValuesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRowChangeEventHandler TestbenchNominalValuesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRowChangeEventHandler TestbenchNominalValuesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTestbenchNominalValuesRow(ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow AddTestbenchNominalValuesRow(
        int TestPointDataID,
        int NominalValueID,
        string NominalValue,
        string ValueDescription)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow row = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) TestPointDataID,
          (object) NominalValueID,
          (object) NominalValue,
          (object) ValueDescription
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow FindByTestPointDataIDNominalValueID(
        int TestPointDataID,
        int NominalValueID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow) this.Rows.Find(new object[2]
        {
          (object) TestPointDataID,
          (object) NominalValueID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesDataTable nominalValuesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesDataTable) base.Clone();
        nominalValuesDataTable.InitVars();
        return (DataTable) nominalValuesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTestPointDataID = this.Columns["TestPointDataID"];
        this.columnNominalValueID = this.Columns["NominalValueID"];
        this.columnNominalValue = this.Columns["NominalValue"];
        this.columnValueDescription = this.Columns["ValueDescription"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTestPointDataID = new DataColumn("TestPointDataID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestPointDataID);
        this.columnNominalValueID = new DataColumn("NominalValueID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNominalValueID);
        this.columnNominalValue = new DataColumn("NominalValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNominalValue);
        this.columnValueDescription = new DataColumn("ValueDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValueDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnTestPointDataID,
          this.columnNominalValueID
        }, true));
        this.columnTestPointDataID.AllowDBNull = false;
        this.columnNominalValueID.AllowDBNull = false;
        this.columnNominalValue.MaxLength = (int) byte.MaxValue;
        this.columnValueDescription.MaxLength = 100;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow NewTestbenchNominalValuesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TestbenchNominalValuesRowChanged == null)
          return;
        this.TestbenchNominalValuesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TestbenchNominalValuesRowChanging == null)
          return;
        this.TestbenchNominalValuesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TestbenchNominalValuesRowDeleted == null)
          return;
        this.TestbenchNominalValuesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TestbenchNominalValuesRowDeleting == null)
          return;
        this.TestbenchNominalValuesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTestbenchNominalValuesRow(ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TestbenchNominalValuesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TestEquipmentDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow>
    {
      private DataColumn columnTestID;
      private DataColumn columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestEquipmentDataTable()
      {
        this.TableName = "TestEquipment";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestEquipmentDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TestEquipmentDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestIDColumn => this.columnTestID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRowChangeEventHandler TestEquipmentRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRowChangeEventHandler TestEquipmentRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRowChangeEventHandler TestEquipmentRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRowChangeEventHandler TestEquipmentRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTestEquipmentRow(ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow AddTestEquipmentRow(
        int TestID,
        int EquipmentID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow row = (ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) TestID,
          (object) EquipmentID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow FindByTestIDEquipmentID(
        int TestID,
        int EquipmentID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow) this.Rows.Find(new object[2]
        {
          (object) TestID,
          (object) EquipmentID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentDataTable equipmentDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentDataTable) base.Clone();
        equipmentDataTable.InitVars();
        return (DataTable) equipmentDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTestID = this.Columns["TestID"];
        this.columnEquipmentID = this.Columns["EquipmentID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTestID = new DataColumn("TestID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestID);
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnTestID,
          this.columnEquipmentID
        }, true));
        this.columnTestID.AllowDBNull = false;
        this.columnEquipmentID.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow NewTestEquipmentRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TestEquipmentRowChanged == null)
          return;
        this.TestEquipmentRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TestEquipmentRowChanging == null)
          return;
        this.TestEquipmentRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TestEquipmentRowDeleted == null)
          return;
        this.TestEquipmentRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TestEquipmentRowDeleting == null)
          return;
        this.TestEquipmentRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTestEquipmentRow(ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TestEquipmentDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TestPointListDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow>
    {
      private DataColumn columnTestTypeID;
      private DataColumn columnTestPointDataID;
      private DataColumn columnTestRunOrderNr;
      private DataColumn columnTestPointName;
      private DataColumn columnTestErrorOrderNr;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestPointListDataTable()
      {
        this.TableName = "TestPointList";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestPointListDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TestPointListDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestTypeIDColumn => this.columnTestTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestPointDataIDColumn => this.columnTestPointDataID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestRunOrderNrColumn => this.columnTestRunOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestPointNameColumn => this.columnTestPointName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestErrorOrderNrColumn => this.columnTestErrorOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestPointListRowChangeEventHandler TestPointListRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestPointListRowChangeEventHandler TestPointListRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestPointListRowChangeEventHandler TestPointListRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestPointListRowChangeEventHandler TestPointListRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTestPointListRow(ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow AddTestPointListRow(
        int TestTypeID,
        int TestPointDataID,
        int TestRunOrderNr,
        string TestPointName,
        int TestErrorOrderNr,
        string Description)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow row = (ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) TestTypeID,
          (object) TestPointDataID,
          (object) TestRunOrderNr,
          (object) TestPointName,
          (object) TestErrorOrderNr,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow FindByTestTypeIDTestPointDataIDTestRunOrderNr(
        int TestTypeID,
        int TestPointDataID,
        int TestRunOrderNr)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow) this.Rows.Find(new object[3]
        {
          (object) TestTypeID,
          (object) TestPointDataID,
          (object) TestRunOrderNr
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestPointListDataTable pointListDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TestPointListDataTable) base.Clone();
        pointListDataTable.InitVars();
        return (DataTable) pointListDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestPointListDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTestTypeID = this.Columns["TestTypeID"];
        this.columnTestPointDataID = this.Columns["TestPointDataID"];
        this.columnTestRunOrderNr = this.Columns["TestRunOrderNr"];
        this.columnTestPointName = this.Columns["TestPointName"];
        this.columnTestErrorOrderNr = this.Columns["TestErrorOrderNr"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTestTypeID = new DataColumn("TestTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestTypeID);
        this.columnTestPointDataID = new DataColumn("TestPointDataID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestPointDataID);
        this.columnTestRunOrderNr = new DataColumn("TestRunOrderNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestRunOrderNr);
        this.columnTestPointName = new DataColumn("TestPointName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestPointName);
        this.columnTestErrorOrderNr = new DataColumn("TestErrorOrderNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestErrorOrderNr);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnTestTypeID,
          this.columnTestPointDataID,
          this.columnTestRunOrderNr
        }, true));
        this.columnTestTypeID.AllowDBNull = false;
        this.columnTestPointDataID.AllowDBNull = false;
        this.columnTestRunOrderNr.AllowDBNull = false;
        this.columnTestPointName.MaxLength = 50;
        this.columnDescription.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow NewTestPointListRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TestPointListRowChanged == null)
          return;
        this.TestPointListRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestPointListRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TestPointListRowChanging == null)
          return;
        this.TestPointListRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestPointListRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TestPointListRowDeleted == null)
          return;
        this.TestPointListRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestPointListRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TestPointListRowDeleting == null)
          return;
        this.TestPointListRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestPointListRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTestPointListRow(ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TestPointListDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TestResistorTableDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow>
    {
      private DataColumn columnEquipmentId;
      private DataColumn columnSwitchPositionId;
      private DataColumn columnCalibrationDate;
      private DataColumn columnResistorType;
      private DataColumn columnResistorFlowValue;
      private DataColumn columnResistorReturnValue;
      private DataColumn columnEnergieFactorReturn;
      private DataColumn columnEnergieFactorFlow;
      private DataColumn columnCalibrationInterval;
      private DataColumn columnCalibrationPersonelNr;
      private DataColumn columnResistorInfo;
      private DataColumn columnNumberFlow;
      private DataColumn columnNumberReturn;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestResistorTableDataTable()
      {
        this.TableName = "TestResistorTable";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestResistorTableDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TestResistorTableDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIdColumn => this.columnEquipmentId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SwitchPositionIdColumn => this.columnSwitchPositionId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationDateColumn => this.columnCalibrationDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistorTypeColumn => this.columnResistorType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistorFlowValueColumn => this.columnResistorFlowValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistorReturnValueColumn => this.columnResistorReturnValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EnergieFactorReturnColumn => this.columnEnergieFactorReturn;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EnergieFactorFlowColumn => this.columnEnergieFactorFlow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationIntervalColumn => this.columnCalibrationInterval;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationPersonelNrColumn => this.columnCalibrationPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistorInfoColumn => this.columnResistorInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NumberFlowColumn => this.columnNumberFlow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NumberReturnColumn => this.columnNumberReturn;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRowChangeEventHandler TestResistorTableRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRowChangeEventHandler TestResistorTableRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRowChangeEventHandler TestResistorTableRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRowChangeEventHandler TestResistorTableRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTestResistorTableRow(ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow AddTestResistorTableRow(
        int EquipmentId,
        string SwitchPositionId,
        DateTime CalibrationDate,
        string ResistorType,
        double ResistorFlowValue,
        double ResistorReturnValue,
        double EnergieFactorReturn,
        double EnergieFactorFlow,
        int CalibrationInterval,
        int CalibrationPersonelNr,
        string ResistorInfo,
        byte NumberFlow,
        byte NumberReturn)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow row = (ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow) this.NewRow();
        object[] objArray = new object[13]
        {
          (object) EquipmentId,
          (object) SwitchPositionId,
          (object) CalibrationDate,
          (object) ResistorType,
          (object) ResistorFlowValue,
          (object) ResistorReturnValue,
          (object) EnergieFactorReturn,
          (object) EnergieFactorFlow,
          (object) CalibrationInterval,
          (object) CalibrationPersonelNr,
          (object) ResistorInfo,
          (object) NumberFlow,
          (object) NumberReturn
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow FindByEquipmentIdSwitchPositionIdCalibrationDate(
        int EquipmentId,
        string SwitchPositionId,
        DateTime CalibrationDate)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow) this.Rows.Find(new object[3]
        {
          (object) EquipmentId,
          (object) SwitchPositionId,
          (object) CalibrationDate
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableDataTable resistorTableDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableDataTable) base.Clone();
        resistorTableDataTable.InitVars();
        return (DataTable) resistorTableDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentId = this.Columns["EquipmentId"];
        this.columnSwitchPositionId = this.Columns["SwitchPositionId"];
        this.columnCalibrationDate = this.Columns["CalibrationDate"];
        this.columnResistorType = this.Columns["ResistorType"];
        this.columnResistorFlowValue = this.Columns["ResistorFlowValue"];
        this.columnResistorReturnValue = this.Columns["ResistorReturnValue"];
        this.columnEnergieFactorReturn = this.Columns["EnergieFactorReturn"];
        this.columnEnergieFactorFlow = this.Columns["EnergieFactorFlow"];
        this.columnCalibrationInterval = this.Columns["CalibrationInterval"];
        this.columnCalibrationPersonelNr = this.Columns["CalibrationPersonelNr"];
        this.columnResistorInfo = this.Columns["ResistorInfo"];
        this.columnNumberFlow = this.Columns["NumberFlow"];
        this.columnNumberReturn = this.Columns["NumberReturn"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentId = new DataColumn("EquipmentId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentId);
        this.columnSwitchPositionId = new DataColumn("SwitchPositionId", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSwitchPositionId);
        this.columnCalibrationDate = new DataColumn("CalibrationDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationDate);
        this.columnResistorType = new DataColumn("ResistorType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistorType);
        this.columnResistorFlowValue = new DataColumn("ResistorFlowValue", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistorFlowValue);
        this.columnResistorReturnValue = new DataColumn("ResistorReturnValue", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistorReturnValue);
        this.columnEnergieFactorReturn = new DataColumn("EnergieFactorReturn", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEnergieFactorReturn);
        this.columnEnergieFactorFlow = new DataColumn("EnergieFactorFlow", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEnergieFactorFlow);
        this.columnCalibrationInterval = new DataColumn("CalibrationInterval", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationInterval);
        this.columnCalibrationPersonelNr = new DataColumn("CalibrationPersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationPersonelNr);
        this.columnResistorInfo = new DataColumn("ResistorInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistorInfo);
        this.columnNumberFlow = new DataColumn("NumberFlow", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNumberFlow);
        this.columnNumberReturn = new DataColumn("NumberReturn", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNumberReturn);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnEquipmentId,
          this.columnSwitchPositionId,
          this.columnCalibrationDate
        }, true));
        this.columnEquipmentId.AllowDBNull = false;
        this.columnSwitchPositionId.AllowDBNull = false;
        this.columnSwitchPositionId.MaxLength = 50;
        this.columnCalibrationDate.AllowDBNull = false;
        this.columnResistorType.MaxLength = 10;
        this.columnResistorInfo.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow NewTestResistorTableRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TestResistorTableRowChanged == null)
          return;
        this.TestResistorTableRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TestResistorTableRowChanging == null)
          return;
        this.TestResistorTableRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TestResistorTableRowDeleted == null)
          return;
        this.TestResistorTableRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TestResistorTableRowDeleting == null)
          return;
        this.TestResistorTableRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTestResistorTableRow(ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TestResistorTableDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TestResultDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TestResultRow>
    {
      private DataColumn columnTestResultID;
      private DataColumn columnMeterID;
      private DataColumn columnTestID;
      private DataColumn columnTestPointDataID;
      private DataColumn columnTestRunOrderNr;
      private DataColumn columnTestValue;
      private DataColumn columnTestError;
      private DataColumn columnTestState;
      private DataColumn columnTestPlaceID;
      private DataColumn columnTestAdapterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestResultDataTable()
      {
        this.TableName = "TestResult";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestResultDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TestResultDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestResultIDColumn => this.columnTestResultID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestIDColumn => this.columnTestID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestPointDataIDColumn => this.columnTestPointDataID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestRunOrderNrColumn => this.columnTestRunOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestValueColumn => this.columnTestValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestErrorColumn => this.columnTestError;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestStateColumn => this.columnTestState;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestPlaceIDColumn => this.columnTestPlaceID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestAdapterIDColumn => this.columnTestAdapterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResultRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TestResultRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestResultRowChangeEventHandler TestResultRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestResultRowChangeEventHandler TestResultRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestResultRowChangeEventHandler TestResultRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestResultRowChangeEventHandler TestResultRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTestResultRow(ZR_ClassLibrary.Schema_Access.Schema.TestResultRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResultRow AddTestResultRow(
        int TestResultID,
        int MeterID,
        int TestID,
        int TestPointDataID,
        int TestRunOrderNr,
        double TestValue,
        double TestError,
        byte TestState,
        int TestPlaceID,
        int TestAdapterID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestResultRow row = (ZR_ClassLibrary.Schema_Access.Schema.TestResultRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) TestResultID,
          (object) MeterID,
          (object) TestID,
          (object) TestPointDataID,
          (object) TestRunOrderNr,
          (object) TestValue,
          (object) TestError,
          (object) TestState,
          (object) TestPlaceID,
          (object) TestAdapterID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResultRow FindByTestResultID(int TestResultID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestResultRow) this.Rows.Find(new object[1]
        {
          (object) TestResultID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestResultDataTable testResultDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TestResultDataTable) base.Clone();
        testResultDataTable.InitVars();
        return (DataTable) testResultDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestResultDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTestResultID = this.Columns["TestResultID"];
        this.columnMeterID = this.Columns["MeterID"];
        this.columnTestID = this.Columns["TestID"];
        this.columnTestPointDataID = this.Columns["TestPointDataID"];
        this.columnTestRunOrderNr = this.Columns["TestRunOrderNr"];
        this.columnTestValue = this.Columns["TestValue"];
        this.columnTestError = this.Columns["TestError"];
        this.columnTestState = this.Columns["TestState"];
        this.columnTestPlaceID = this.Columns["TestPlaceID"];
        this.columnTestAdapterID = this.Columns["TestAdapterID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTestResultID = new DataColumn("TestResultID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestResultID);
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnTestID = new DataColumn("TestID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestID);
        this.columnTestPointDataID = new DataColumn("TestPointDataID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestPointDataID);
        this.columnTestRunOrderNr = new DataColumn("TestRunOrderNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestRunOrderNr);
        this.columnTestValue = new DataColumn("TestValue", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestValue);
        this.columnTestError = new DataColumn("TestError", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestError);
        this.columnTestState = new DataColumn("TestState", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestState);
        this.columnTestPlaceID = new DataColumn("TestPlaceID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestPlaceID);
        this.columnTestAdapterID = new DataColumn("TestAdapterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestAdapterID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnTestResultID
        }, true));
        this.columnTestResultID.AllowDBNull = false;
        this.columnTestResultID.Unique = true;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResultRow NewTestResultRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestResultRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TestResultRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TestResultRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TestResultRowChanged == null)
          return;
        this.TestResultRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestResultRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestResultRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TestResultRowChanging == null)
          return;
        this.TestResultRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestResultRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestResultRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TestResultRowDeleted == null)
          return;
        this.TestResultRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestResultRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestResultRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TestResultRowDeleting == null)
          return;
        this.TestResultRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestResultRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestResultRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTestResultRow(ZR_ClassLibrary.Schema_Access.Schema.TestResultRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TestResultDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TestResultExtendedDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow>
    {
      private DataColumn columnTestResultID;
      private DataColumn columnResultValueID;
      private DataColumn columnResultValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestResultExtendedDataTable()
      {
        this.TableName = "TestResultExtended";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestResultExtendedDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TestResultExtendedDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestResultIDColumn => this.columnTestResultID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResultValueIDColumn => this.columnResultValueID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResultValueColumn => this.columnResultValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRowChangeEventHandler TestResultExtendedRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRowChangeEventHandler TestResultExtendedRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRowChangeEventHandler TestResultExtendedRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRowChangeEventHandler TestResultExtendedRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTestResultExtendedRow(ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow AddTestResultExtendedRow(
        int TestResultID,
        int ResultValueID,
        string ResultValue)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow row = (ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) TestResultID,
          (object) ResultValueID,
          (object) ResultValue
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow FindByTestResultIDResultValueID(
        int TestResultID,
        int ResultValueID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow) this.Rows.Find(new object[2]
        {
          (object) TestResultID,
          (object) ResultValueID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedDataTable extendedDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedDataTable) base.Clone();
        extendedDataTable.InitVars();
        return (DataTable) extendedDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTestResultID = this.Columns["TestResultID"];
        this.columnResultValueID = this.Columns["ResultValueID"];
        this.columnResultValue = this.Columns["ResultValue"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTestResultID = new DataColumn("TestResultID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestResultID);
        this.columnResultValueID = new DataColumn("ResultValueID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResultValueID);
        this.columnResultValue = new DataColumn("ResultValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResultValue);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnTestResultID,
          this.columnResultValueID
        }, true));
        this.columnTestResultID.AllowDBNull = false;
        this.columnResultValueID.AllowDBNull = false;
        this.columnResultValue.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow NewTestResultExtendedRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TestResultExtendedRowChanged == null)
          return;
        this.TestResultExtendedRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TestResultExtendedRowChanging == null)
          return;
        this.TestResultExtendedRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TestResultExtendedRowDeleted == null)
          return;
        this.TestResultExtendedRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TestResultExtendedRowDeleting == null)
          return;
        this.TestResultExtendedRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTestResultExtendedRow(ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TestResultExtendedDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TestTypeDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow>
    {
      private DataColumn columnTestTypeID;
      private DataColumn columnTestName;
      private DataColumn columnTestDescription;
      private DataColumn columnTestClass;
      private DataColumn columnTestCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestTypeDataTable()
      {
        this.TableName = "TestType";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestTypeDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TestTypeDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestTypeIDColumn => this.columnTestTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestNameColumn => this.columnTestName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestDescriptionColumn => this.columnTestDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestClassColumn => this.columnTestClass;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestCodeColumn => this.columnTestCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestTypeRowChangeEventHandler TestTypeRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestTypeRowChangeEventHandler TestTypeRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestTypeRowChangeEventHandler TestTypeRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestTypeRowChangeEventHandler TestTypeRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTestTypeRow(ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow AddTestTypeRow(
        int TestTypeID,
        string TestName,
        string TestDescription,
        string TestClass,
        int TestCode)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow row = (ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) TestTypeID,
          (object) TestName,
          (object) TestDescription,
          (object) TestClass,
          (object) TestCode
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow FindByTestTypeID(int TestTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow) this.Rows.Find(new object[1]
        {
          (object) TestTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestTypeDataTable testTypeDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TestTypeDataTable) base.Clone();
        testTypeDataTable.InitVars();
        return (DataTable) testTypeDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestTypeDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTestTypeID = this.Columns["TestTypeID"];
        this.columnTestName = this.Columns["TestName"];
        this.columnTestDescription = this.Columns["TestDescription"];
        this.columnTestClass = this.Columns["TestClass"];
        this.columnTestCode = this.Columns["TestCode"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTestTypeID = new DataColumn("TestTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestTypeID);
        this.columnTestName = new DataColumn("TestName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestName);
        this.columnTestDescription = new DataColumn("TestDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestDescription);
        this.columnTestClass = new DataColumn("TestClass", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestClass);
        this.columnTestCode = new DataColumn("TestCode", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestCode);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnTestTypeID
        }, true));
        this.columnTestTypeID.AllowDBNull = false;
        this.columnTestTypeID.Unique = true;
        this.columnTestName.MaxLength = (int) byte.MaxValue;
        this.columnTestDescription.MaxLength = 536870910;
        this.columnTestClass.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow NewTestTypeRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TestTypeRowChanged == null)
          return;
        this.TestTypeRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TestTypeRowChanging == null)
          return;
        this.TestTypeRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TestTypeRowDeleted == null)
          return;
        this.TestTypeRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TestTypeRowDeleting == null)
          return;
        this.TestTypeRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTestTypeRow(ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TestTypeDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TypeOverwriteParametersDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow>
    {
      private DataColumn columnMeterInfoID;
      private DataColumn columnPOID;
      private DataColumn columnParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TypeOverwriteParametersDataTable()
      {
        this.TableName = "TypeOverwriteParameters";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TypeOverwriteParametersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TypeOverwriteParametersDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterInfoIDColumn => this.columnMeterInfoID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn POIDColumn => this.columnPOID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterValueColumn => this.columnParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRowChangeEventHandler TypeOverwriteParametersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRowChangeEventHandler TypeOverwriteParametersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRowChangeEventHandler TypeOverwriteParametersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRowChangeEventHandler TypeOverwriteParametersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTypeOverwriteParametersRow(ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow AddTypeOverwriteParametersRow(
        ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow parentMeterInfoRowByMeterInfoTypeOverrideParameters,
        int POID,
        string ParameterValue)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow row = (ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow) this.NewRow();
        object[] objArray = new object[3]
        {
          null,
          (object) POID,
          (object) ParameterValue
        };
        if (parentMeterInfoRowByMeterInfoTypeOverrideParameters != null)
          objArray[0] = parentMeterInfoRowByMeterInfoTypeOverrideParameters[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow FindByMeterInfoIDPOID(
        int MeterInfoID,
        int POID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow) this.Rows.Find(new object[2]
        {
          (object) MeterInfoID,
          (object) POID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersDataTable parametersDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersDataTable) base.Clone();
        parametersDataTable.InitVars();
        return (DataTable) parametersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterInfoID = this.Columns["MeterInfoID"];
        this.columnPOID = this.Columns["POID"];
        this.columnParameterValue = this.Columns["ParameterValue"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterInfoID = new DataColumn("MeterInfoID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoID);
        this.columnPOID = new DataColumn("POID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPOID);
        this.columnParameterValue = new DataColumn("ParameterValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterValue);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnMeterInfoID,
          this.columnPOID
        }, true));
        this.columnMeterInfoID.AllowDBNull = false;
        this.columnPOID.AllowDBNull = false;
        this.columnParameterValue.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow NewTypeOverwriteParametersRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TypeOverwriteParametersRowChanged == null)
          return;
        this.TypeOverwriteParametersRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TypeOverwriteParametersRowChanging == null)
          return;
        this.TypeOverwriteParametersRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TypeOverwriteParametersRowDeleted == null)
          return;
        this.TypeOverwriteParametersRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TypeOverwriteParametersRowDeleting == null)
          return;
        this.TypeOverwriteParametersRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTypeOverwriteParametersRow(ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TypeOverwriteParametersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class UnitsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.UnitsRow>
    {
      private DataColumn columnfromUnit;
      private DataColumn columntoUnit;
      private DataColumn columnfactor;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public UnitsDataTable()
      {
        this.TableName = "Units";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal UnitsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected UnitsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn fromUnitColumn => this.columnfromUnit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn toUnitColumn => this.columntoUnit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn factorColumn => this.columnfactor;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.UnitsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.UnitsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.UnitsRowChangeEventHandler UnitsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.UnitsRowChangeEventHandler UnitsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.UnitsRowChangeEventHandler UnitsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.UnitsRowChangeEventHandler UnitsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddUnitsRow(ZR_ClassLibrary.Schema_Access.Schema.UnitsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.UnitsRow AddUnitsRow(
        string fromUnit,
        string toUnit,
        string factor,
        string Description)
      {
        ZR_ClassLibrary.Schema_Access.Schema.UnitsRow row = (ZR_ClassLibrary.Schema_Access.Schema.UnitsRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) fromUnit,
          (object) toUnit,
          (object) factor,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.UnitsRow FindByfromUnittoUnitfactorDescription(
        string fromUnit,
        string toUnit,
        string factor,
        string Description)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.UnitsRow) this.Rows.Find(new object[4]
        {
          (object) fromUnit,
          (object) toUnit,
          (object) factor,
          (object) Description
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.UnitsDataTable unitsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.UnitsDataTable) base.Clone();
        unitsDataTable.InitVars();
        return (DataTable) unitsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.UnitsDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnfromUnit = this.Columns["fromUnit"];
        this.columntoUnit = this.Columns["toUnit"];
        this.columnfactor = this.Columns["factor"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnfromUnit = new DataColumn("fromUnit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnfromUnit);
        this.columntoUnit = new DataColumn("toUnit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columntoUnit);
        this.columnfactor = new DataColumn("factor", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnfactor);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[4]
        {
          this.columnfromUnit,
          this.columntoUnit,
          this.columnfactor,
          this.columnDescription
        }, true));
        this.columnfromUnit.AllowDBNull = false;
        this.columnfromUnit.MaxLength = 15;
        this.columntoUnit.AllowDBNull = false;
        this.columntoUnit.MaxLength = 15;
        this.columnfactor.AllowDBNull = false;
        this.columnfactor.MaxLength = 30;
        this.columnDescription.AllowDBNull = false;
        this.columnDescription.MaxLength = 250;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.UnitsRow NewUnitsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.UnitsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.UnitsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.UnitsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.UnitsRowChanged == null)
          return;
        this.UnitsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.UnitsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.UnitsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.UnitsRowChanging == null)
          return;
        this.UnitsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.UnitsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.UnitsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.UnitsRowDeleted == null)
          return;
        this.UnitsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.UnitsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.UnitsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.UnitsRowDeleting == null)
          return;
        this.UnitsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.UnitsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.UnitsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveUnitsRow(ZR_ClassLibrary.Schema_Access.Schema.UnitsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (UnitsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WaterDensityDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow>
    {
      private DataColumn columnMeasuringID;
      private DataColumn columnMeasuringTimePoint;
      private DataColumn columnTemperature;
      private DataColumn columnDensity;
      private DataColumn columnCorrectionFactor;
      private DataColumn columnWaterSupplyLocationID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WaterDensityDataTable()
      {
        this.TableName = "WaterDensity";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WaterDensityDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WaterDensityDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeasuringIDColumn => this.columnMeasuringID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeasuringTimePointColumn => this.columnMeasuringTimePoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TemperatureColumn => this.columnTemperature;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DensityColumn => this.columnDensity;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CorrectionFactorColumn => this.columnCorrectionFactor;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WaterSupplyLocationIDColumn => this.columnWaterSupplyLocationID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRowChangeEventHandler WaterDensityRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRowChangeEventHandler WaterDensityRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRowChangeEventHandler WaterDensityRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRowChangeEventHandler WaterDensityRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWaterDensityRow(ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow AddWaterDensityRow(
        int MeasuringID,
        DateTime MeasuringTimePoint,
        double Temperature,
        double Density,
        double CorrectionFactor,
        int WaterSupplyLocationID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow row = (ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) MeasuringID,
          (object) MeasuringTimePoint,
          (object) Temperature,
          (object) Density,
          (object) CorrectionFactor,
          (object) WaterSupplyLocationID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow FindByMeasuringID(int MeasuringID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow) this.Rows.Find(new object[1]
        {
          (object) MeasuringID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WaterDensityDataTable densityDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WaterDensityDataTable) base.Clone();
        densityDataTable.InitVars();
        return (DataTable) densityDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WaterDensityDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeasuringID = this.Columns["MeasuringID"];
        this.columnMeasuringTimePoint = this.Columns["MeasuringTimePoint"];
        this.columnTemperature = this.Columns["Temperature"];
        this.columnDensity = this.Columns["Density"];
        this.columnCorrectionFactor = this.Columns["CorrectionFactor"];
        this.columnWaterSupplyLocationID = this.Columns["WaterSupplyLocationID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeasuringID = new DataColumn("MeasuringID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeasuringID);
        this.columnMeasuringTimePoint = new DataColumn("MeasuringTimePoint", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeasuringTimePoint);
        this.columnTemperature = new DataColumn("Temperature", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTemperature);
        this.columnDensity = new DataColumn("Density", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDensity);
        this.columnCorrectionFactor = new DataColumn("CorrectionFactor", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCorrectionFactor);
        this.columnWaterSupplyLocationID = new DataColumn("WaterSupplyLocationID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWaterSupplyLocationID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeasuringID
        }, true));
        this.columnMeasuringID.AllowDBNull = false;
        this.columnMeasuringID.Unique = true;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow NewWaterDensityRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WaterDensityRowChanged == null)
          return;
        this.WaterDensityRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WaterDensityRowChanging == null)
          return;
        this.WaterDensityRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WaterDensityRowDeleted == null)
          return;
        this.WaterDensityRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WaterDensityRowDeleting == null)
          return;
        this.WaterDensityRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWaterDensityRow(ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WaterDensityDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WMApprovalDataDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow>
    {
      private DataColumn columnApprovalCode;
      private DataColumn columnCounterTypeID;
      private DataColumn columnTypeNumber;
      private DataColumn columnApprovalID;
      private DataColumn columnNominalSize;
      private DataColumn columnErrorLimitQmaxPlus;
      private DataColumn columnErrorLimitQmaxMinus;
      private DataColumn columnErrorLimitQtrennPlus;
      private DataColumn columnErrorLimitQtrennMinus;
      private DataColumn columnErrorLimitQminPlus;
      private DataColumn columnErrorLimitQminMinus;
      private DataColumn columnManufacturerID;
      private DataColumn columnApprovalDataDescription;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMApprovalDataDataTable()
      {
        this.TableName = "WMApprovalData";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMApprovalDataDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WMApprovalDataDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalCodeColumn => this.columnApprovalCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CounterTypeIDColumn => this.columnCounterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TypeNumberColumn => this.columnTypeNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalIDColumn => this.columnApprovalID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NominalSizeColumn => this.columnNominalSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorLimitQmaxPlusColumn => this.columnErrorLimitQmaxPlus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorLimitQmaxMinusColumn => this.columnErrorLimitQmaxMinus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorLimitQtrennPlusColumn => this.columnErrorLimitQtrennPlus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorLimitQtrennMinusColumn => this.columnErrorLimitQtrennMinus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorLimitQminPlusColumn => this.columnErrorLimitQminPlus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorLimitQminMinusColumn => this.columnErrorLimitQminMinus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ManufacturerIDColumn => this.columnManufacturerID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalDataDescriptionColumn => this.columnApprovalDataDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRowChangeEventHandler WMApprovalDataRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRowChangeEventHandler WMApprovalDataRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRowChangeEventHandler WMApprovalDataRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRowChangeEventHandler WMApprovalDataRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWMApprovalDataRow(ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow AddWMApprovalDataRow(
        int ApprovalCode,
        int CounterTypeID,
        short TypeNumber,
        int ApprovalID,
        double NominalSize,
        double ErrorLimitQmaxPlus,
        double ErrorLimitQmaxMinus,
        double ErrorLimitQtrennPlus,
        double ErrorLimitQtrennMinus,
        double ErrorLimitQminPlus,
        double ErrorLimitQminMinus,
        int ManufacturerID,
        string ApprovalDataDescription,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow row = (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow) this.NewRow();
        object[] objArray = new object[14]
        {
          (object) ApprovalCode,
          (object) CounterTypeID,
          (object) TypeNumber,
          (object) ApprovalID,
          (object) NominalSize,
          (object) ErrorLimitQmaxPlus,
          (object) ErrorLimitQmaxMinus,
          (object) ErrorLimitQtrennPlus,
          (object) ErrorLimitQtrennMinus,
          (object) ErrorLimitQminPlus,
          (object) ErrorLimitQminMinus,
          (object) ManufacturerID,
          (object) ApprovalDataDescription,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow FindByApprovalCode(
        int ApprovalCode)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow) this.Rows.Find(new object[1]
        {
          (object) ApprovalCode
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataDataTable approvalDataDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataDataTable) base.Clone();
        approvalDataDataTable.InitVars();
        return (DataTable) approvalDataDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnApprovalCode = this.Columns["ApprovalCode"];
        this.columnCounterTypeID = this.Columns["CounterTypeID"];
        this.columnTypeNumber = this.Columns["TypeNumber"];
        this.columnApprovalID = this.Columns["ApprovalID"];
        this.columnNominalSize = this.Columns["NominalSize"];
        this.columnErrorLimitQmaxPlus = this.Columns["ErrorLimitQmaxPlus"];
        this.columnErrorLimitQmaxMinus = this.Columns["ErrorLimitQmaxMinus"];
        this.columnErrorLimitQtrennPlus = this.Columns["ErrorLimitQtrennPlus"];
        this.columnErrorLimitQtrennMinus = this.Columns["ErrorLimitQtrennMinus"];
        this.columnErrorLimitQminPlus = this.Columns["ErrorLimitQminPlus"];
        this.columnErrorLimitQminMinus = this.Columns["ErrorLimitQminMinus"];
        this.columnManufacturerID = this.Columns["ManufacturerID"];
        this.columnApprovalDataDescription = this.Columns["ApprovalDataDescription"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnApprovalCode = new DataColumn("ApprovalCode", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalCode);
        this.columnCounterTypeID = new DataColumn("CounterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCounterTypeID);
        this.columnTypeNumber = new DataColumn("TypeNumber", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTypeNumber);
        this.columnApprovalID = new DataColumn("ApprovalID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalID);
        this.columnNominalSize = new DataColumn("NominalSize", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNominalSize);
        this.columnErrorLimitQmaxPlus = new DataColumn("ErrorLimitQmaxPlus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorLimitQmaxPlus);
        this.columnErrorLimitQmaxMinus = new DataColumn("ErrorLimitQmaxMinus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorLimitQmaxMinus);
        this.columnErrorLimitQtrennPlus = new DataColumn("ErrorLimitQtrennPlus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorLimitQtrennPlus);
        this.columnErrorLimitQtrennMinus = new DataColumn("ErrorLimitQtrennMinus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorLimitQtrennMinus);
        this.columnErrorLimitQminPlus = new DataColumn("ErrorLimitQminPlus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorLimitQminPlus);
        this.columnErrorLimitQminMinus = new DataColumn("ErrorLimitQminMinus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorLimitQminMinus);
        this.columnManufacturerID = new DataColumn("ManufacturerID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnManufacturerID);
        this.columnApprovalDataDescription = new DataColumn("ApprovalDataDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalDataDescription);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnApprovalCode
        }, true));
        this.columnApprovalCode.AllowDBNull = false;
        this.columnApprovalCode.Unique = true;
        this.columnApprovalDataDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow NewWMApprovalDataRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WMApprovalDataRowChanged == null)
          return;
        this.WMApprovalDataRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WMApprovalDataRowChanging == null)
          return;
        this.WMApprovalDataRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WMApprovalDataRowDeleted == null)
          return;
        this.WMApprovalDataRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WMApprovalDataRowDeleting == null)
          return;
        this.WMApprovalDataRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWMApprovalDataRow(ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WMApprovalDataDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WMApprovalsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow>
    {
      private DataColumn columnApprovalID;
      private DataColumn columnApproval;
      private DataColumn columnMID;
      private DataColumn columnApprovalDescription;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMApprovalsDataTable()
      {
        this.TableName = "WMApprovals";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMApprovalsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WMApprovalsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalIDColumn => this.columnApprovalID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalColumn => this.columnApproval;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDColumn => this.columnMID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalDescriptionColumn => this.columnApprovalDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRowChangeEventHandler WMApprovalsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRowChangeEventHandler WMApprovalsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRowChangeEventHandler WMApprovalsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRowChangeEventHandler WMApprovalsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWMApprovalsRow(ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow AddWMApprovalsRow(
        int ApprovalID,
        string Approval,
        byte MID,
        string ApprovalDescription,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow row = (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) ApprovalID,
          (object) Approval,
          (object) MID,
          (object) ApprovalDescription,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow FindByApprovalID(int ApprovalID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow) this.Rows.Find(new object[1]
        {
          (object) ApprovalID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsDataTable approvalsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsDataTable) base.Clone();
        approvalsDataTable.InitVars();
        return (DataTable) approvalsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnApprovalID = this.Columns["ApprovalID"];
        this.columnApproval = this.Columns["Approval"];
        this.columnMID = this.Columns["MID"];
        this.columnApprovalDescription = this.Columns["ApprovalDescription"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnApprovalID = new DataColumn("ApprovalID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalID);
        this.columnApproval = new DataColumn("Approval", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApproval);
        this.columnMID = new DataColumn("MID", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMID);
        this.columnApprovalDescription = new DataColumn("ApprovalDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalDescription);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnApprovalID
        }, true));
        this.columnApprovalID.AllowDBNull = false;
        this.columnApprovalID.Unique = true;
        this.columnApproval.MaxLength = 50;
        this.columnApprovalDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow NewWMApprovalsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WMApprovalsRowChanged == null)
          return;
        this.WMApprovalsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WMApprovalsRowChanging == null)
          return;
        this.WMApprovalsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WMApprovalsRowDeleted == null)
          return;
        this.WMApprovalsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WMApprovalsRowDeleting == null)
          return;
        this.WMApprovalsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWMApprovalsRow(ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WMApprovalsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WMClassesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow>
    {
      private DataColumn columnClassID;
      private DataColumn columnClass;
      private DataColumn columnFlowFactorQmaxColdU15;
      private DataColumn columnFlowFactorQtrennColdU15;
      private DataColumn columnFlowFactorQminColdU15;
      private DataColumn columnFlowFactorQmaxWarmU15;
      private DataColumn columnFlowFactorQtrennWarmU15;
      private DataColumn columnFlowFactorQminWarmU15;
      private DataColumn columnFlowFactorQmaxColdO15;
      private DataColumn columnFlowFactorQtrennColdO15;
      private DataColumn columnFlowFactorQminColdO15;
      private DataColumn columnFlowFactorQmaxWarmO15;
      private DataColumn columnFlowFactorQtrennWarmO15;
      private DataColumn columnFlowFactorQminWarmO15;
      private DataColumn columnClassDescription;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMClassesDataTable()
      {
        this.TableName = "WMClasses";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMClassesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WMClassesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ClassIDColumn => this.columnClassID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ClassColumn => this.columnClass;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowFactorQmaxColdU15Column => this.columnFlowFactorQmaxColdU15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowFactorQtrennColdU15Column => this.columnFlowFactorQtrennColdU15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowFactorQminColdU15Column => this.columnFlowFactorQminColdU15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowFactorQmaxWarmU15Column => this.columnFlowFactorQmaxWarmU15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowFactorQtrennWarmU15Column => this.columnFlowFactorQtrennWarmU15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowFactorQminWarmU15Column => this.columnFlowFactorQminWarmU15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowFactorQmaxColdO15Column => this.columnFlowFactorQmaxColdO15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowFactorQtrennColdO15Column => this.columnFlowFactorQtrennColdO15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowFactorQminColdO15Column => this.columnFlowFactorQminColdO15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowFactorQmaxWarmO15Column => this.columnFlowFactorQmaxWarmO15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowFactorQtrennWarmO15Column => this.columnFlowFactorQtrennWarmO15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FlowFactorQminWarmO15Column => this.columnFlowFactorQminWarmO15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ClassDescriptionColumn => this.columnClassDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMClassesRowChangeEventHandler WMClassesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMClassesRowChangeEventHandler WMClassesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMClassesRowChangeEventHandler WMClassesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMClassesRowChangeEventHandler WMClassesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWMClassesRow(ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow AddWMClassesRow(
        int ClassID,
        string Class,
        double FlowFactorQmaxColdU15,
        double FlowFactorQtrennColdU15,
        double FlowFactorQminColdU15,
        double FlowFactorQmaxWarmU15,
        double FlowFactorQtrennWarmU15,
        double FlowFactorQminWarmU15,
        double FlowFactorQmaxColdO15,
        double FlowFactorQtrennColdO15,
        double FlowFactorQminColdO15,
        double FlowFactorQmaxWarmO15,
        double FlowFactorQtrennWarmO15,
        double FlowFactorQminWarmO15,
        string ClassDescription,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow row = (ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow) this.NewRow();
        object[] objArray = new object[16]
        {
          (object) ClassID,
          (object) Class,
          (object) FlowFactorQmaxColdU15,
          (object) FlowFactorQtrennColdU15,
          (object) FlowFactorQminColdU15,
          (object) FlowFactorQmaxWarmU15,
          (object) FlowFactorQtrennWarmU15,
          (object) FlowFactorQminWarmU15,
          (object) FlowFactorQmaxColdO15,
          (object) FlowFactorQtrennColdO15,
          (object) FlowFactorQminColdO15,
          (object) FlowFactorQmaxWarmO15,
          (object) FlowFactorQtrennWarmO15,
          (object) FlowFactorQminWarmO15,
          (object) ClassDescription,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow FindByClassID(int ClassID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow) this.Rows.Find(new object[1]
        {
          (object) ClassID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMClassesDataTable classesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WMClassesDataTable) base.Clone();
        classesDataTable.InitVars();
        return (DataTable) classesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMClassesDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnClassID = this.Columns["ClassID"];
        this.columnClass = this.Columns["Class"];
        this.columnFlowFactorQmaxColdU15 = this.Columns["FlowFactorQmaxColdU15"];
        this.columnFlowFactorQtrennColdU15 = this.Columns["FlowFactorQtrennColdU15"];
        this.columnFlowFactorQminColdU15 = this.Columns["FlowFactorQminColdU15"];
        this.columnFlowFactorQmaxWarmU15 = this.Columns["FlowFactorQmaxWarmU15"];
        this.columnFlowFactorQtrennWarmU15 = this.Columns["FlowFactorQtrennWarmU15"];
        this.columnFlowFactorQminWarmU15 = this.Columns["FlowFactorQminWarmU15"];
        this.columnFlowFactorQmaxColdO15 = this.Columns["FlowFactorQmaxColdO15"];
        this.columnFlowFactorQtrennColdO15 = this.Columns["FlowFactorQtrennColdO15"];
        this.columnFlowFactorQminColdO15 = this.Columns["FlowFactorQminColdO15"];
        this.columnFlowFactorQmaxWarmO15 = this.Columns["FlowFactorQmaxWarmO15"];
        this.columnFlowFactorQtrennWarmO15 = this.Columns["FlowFactorQtrennWarmO15"];
        this.columnFlowFactorQminWarmO15 = this.Columns["FlowFactorQminWarmO15"];
        this.columnClassDescription = this.Columns["ClassDescription"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnClassID = new DataColumn("ClassID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClassID);
        this.columnClass = new DataColumn("Class", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClass);
        this.columnFlowFactorQmaxColdU15 = new DataColumn("FlowFactorQmaxColdU15", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowFactorQmaxColdU15);
        this.columnFlowFactorQtrennColdU15 = new DataColumn("FlowFactorQtrennColdU15", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowFactorQtrennColdU15);
        this.columnFlowFactorQminColdU15 = new DataColumn("FlowFactorQminColdU15", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowFactorQminColdU15);
        this.columnFlowFactorQmaxWarmU15 = new DataColumn("FlowFactorQmaxWarmU15", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowFactorQmaxWarmU15);
        this.columnFlowFactorQtrennWarmU15 = new DataColumn("FlowFactorQtrennWarmU15", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowFactorQtrennWarmU15);
        this.columnFlowFactorQminWarmU15 = new DataColumn("FlowFactorQminWarmU15", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowFactorQminWarmU15);
        this.columnFlowFactorQmaxColdO15 = new DataColumn("FlowFactorQmaxColdO15", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowFactorQmaxColdO15);
        this.columnFlowFactorQtrennColdO15 = new DataColumn("FlowFactorQtrennColdO15", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowFactorQtrennColdO15);
        this.columnFlowFactorQminColdO15 = new DataColumn("FlowFactorQminColdO15", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowFactorQminColdO15);
        this.columnFlowFactorQmaxWarmO15 = new DataColumn("FlowFactorQmaxWarmO15", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowFactorQmaxWarmO15);
        this.columnFlowFactorQtrennWarmO15 = new DataColumn("FlowFactorQtrennWarmO15", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowFactorQtrennWarmO15);
        this.columnFlowFactorQminWarmO15 = new DataColumn("FlowFactorQminWarmO15", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFlowFactorQminWarmO15);
        this.columnClassDescription = new DataColumn("ClassDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClassDescription);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnClassID
        }, true));
        this.columnClassID.AllowDBNull = false;
        this.columnClassID.Unique = true;
        this.columnClass.MaxLength = 5;
        this.columnClassDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow NewWMClassesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WMClassesRowChanged == null)
          return;
        this.WMClassesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMClassesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WMClassesRowChanging == null)
          return;
        this.WMClassesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMClassesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WMClassesRowDeleted == null)
          return;
        this.WMClassesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMClassesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WMClassesRowDeleting == null)
          return;
        this.WMClassesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMClassesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWMClassesRow(ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WMClassesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WMCounterTypesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow>
    {
      private DataColumn columnCounterTypeID;
      private DataColumn columnCounterType;
      private DataColumn columnCounterWarmWater;
      private DataColumn columnCounterTypeDescription;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMCounterTypesDataTable()
      {
        this.TableName = "WMCounterTypes";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMCounterTypesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WMCounterTypesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CounterTypeIDColumn => this.columnCounterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CounterTypeColumn => this.columnCounterType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CounterWarmWaterColumn => this.columnCounterWarmWater;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CounterTypeDescriptionColumn => this.columnCounterTypeDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRowChangeEventHandler WMCounterTypesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRowChangeEventHandler WMCounterTypesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRowChangeEventHandler WMCounterTypesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRowChangeEventHandler WMCounterTypesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWMCounterTypesRow(ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow AddWMCounterTypesRow(
        int CounterTypeID,
        string CounterType,
        byte CounterWarmWater,
        string CounterTypeDescription,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow row = (ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) CounterTypeID,
          (object) CounterType,
          (object) CounterWarmWater,
          (object) CounterTypeDescription,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow FindByCounterTypeID(
        int CounterTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow) this.Rows.Find(new object[1]
        {
          (object) CounterTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesDataTable counterTypesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesDataTable) base.Clone();
        counterTypesDataTable.InitVars();
        return (DataTable) counterTypesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnCounterTypeID = this.Columns["CounterTypeID"];
        this.columnCounterType = this.Columns["CounterType"];
        this.columnCounterWarmWater = this.Columns["CounterWarmWater"];
        this.columnCounterTypeDescription = this.Columns["CounterTypeDescription"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnCounterTypeID = new DataColumn("CounterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCounterTypeID);
        this.columnCounterType = new DataColumn("CounterType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCounterType);
        this.columnCounterWarmWater = new DataColumn("CounterWarmWater", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCounterWarmWater);
        this.columnCounterTypeDescription = new DataColumn("CounterTypeDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCounterTypeDescription);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnCounterTypeID
        }, true));
        this.columnCounterTypeID.AllowDBNull = false;
        this.columnCounterTypeID.Unique = true;
        this.columnCounterType.MaxLength = 50;
        this.columnCounterTypeDescription.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow NewWMCounterTypesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WMCounterTypesRowChanged == null)
          return;
        this.WMCounterTypesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WMCounterTypesRowChanging == null)
          return;
        this.WMCounterTypesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WMCounterTypesRowDeleted == null)
          return;
        this.WMCounterTypesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WMCounterTypesRowDeleting == null)
          return;
        this.WMCounterTypesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWMCounterTypesRow(ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WMCounterTypesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WMErrorOffsetDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow>
    {
      private DataColumn columnErrorOffsetID;
      private DataColumn columnQmaxPlus;
      private DataColumn columnQmaxMinus;
      private DataColumn columnQtrennPlus;
      private DataColumn columnQtrennMinus;
      private DataColumn columnQminPlus;
      private DataColumn columnQminMinus;
      private DataColumn columnErrorOffsetDescription;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMErrorOffsetDataTable()
      {
        this.TableName = "WMErrorOffset";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMErrorOffsetDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WMErrorOffsetDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorOffsetIDColumn => this.columnErrorOffsetID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn QmaxPlusColumn => this.columnQmaxPlus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn QmaxMinusColumn => this.columnQmaxMinus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn QtrennPlusColumn => this.columnQtrennPlus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn QtrennMinusColumn => this.columnQtrennMinus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn QminPlusColumn => this.columnQminPlus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn QminMinusColumn => this.columnQminMinus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorOffsetDescriptionColumn => this.columnErrorOffsetDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRowChangeEventHandler WMErrorOffsetRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRowChangeEventHandler WMErrorOffsetRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRowChangeEventHandler WMErrorOffsetRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRowChangeEventHandler WMErrorOffsetRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWMErrorOffsetRow(ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow AddWMErrorOffsetRow(
        int ErrorOffsetID,
        double QmaxPlus,
        double QmaxMinus,
        double QtrennPlus,
        double QtrennMinus,
        double QminPlus,
        double QminMinus,
        string ErrorOffsetDescription,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow row = (ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) ErrorOffsetID,
          (object) QmaxPlus,
          (object) QmaxMinus,
          (object) QtrennPlus,
          (object) QtrennMinus,
          (object) QminPlus,
          (object) QminMinus,
          (object) ErrorOffsetDescription,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow FindByErrorOffsetID(
        int ErrorOffsetID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow) this.Rows.Find(new object[1]
        {
          (object) ErrorOffsetID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetDataTable errorOffsetDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetDataTable) base.Clone();
        errorOffsetDataTable.InitVars();
        return (DataTable) errorOffsetDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnErrorOffsetID = this.Columns["ErrorOffsetID"];
        this.columnQmaxPlus = this.Columns["QmaxPlus"];
        this.columnQmaxMinus = this.Columns["QmaxMinus"];
        this.columnQtrennPlus = this.Columns["QtrennPlus"];
        this.columnQtrennMinus = this.Columns["QtrennMinus"];
        this.columnQminPlus = this.Columns["QminPlus"];
        this.columnQminMinus = this.Columns["QminMinus"];
        this.columnErrorOffsetDescription = this.Columns["ErrorOffsetDescription"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnErrorOffsetID = new DataColumn("ErrorOffsetID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorOffsetID);
        this.columnQmaxPlus = new DataColumn("QmaxPlus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQmaxPlus);
        this.columnQmaxMinus = new DataColumn("QmaxMinus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQmaxMinus);
        this.columnQtrennPlus = new DataColumn("QtrennPlus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQtrennPlus);
        this.columnQtrennMinus = new DataColumn("QtrennMinus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQtrennMinus);
        this.columnQminPlus = new DataColumn("QminPlus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQminPlus);
        this.columnQminMinus = new DataColumn("QminMinus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQminMinus);
        this.columnErrorOffsetDescription = new DataColumn("ErrorOffsetDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorOffsetDescription);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnErrorOffsetID
        }, true));
        this.columnErrorOffsetID.AllowDBNull = false;
        this.columnErrorOffsetID.Unique = true;
        this.columnErrorOffsetDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow NewWMErrorOffsetRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WMErrorOffsetRowChanged == null)
          return;
        this.WMErrorOffsetRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WMErrorOffsetRowChanging == null)
          return;
        this.WMErrorOffsetRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WMErrorOffsetRowDeleted == null)
          return;
        this.WMErrorOffsetRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WMErrorOffsetRowDeleting == null)
          return;
        this.WMErrorOffsetRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWMErrorOffsetRow(ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WMErrorOffsetDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WMMIDApprovalDataDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow>
    {
      private DataColumn columnApprovalCode;
      private DataColumn columnCounterTypeID;
      private DataColumn columnTypeNumber;
      private DataColumn columnApprovalID;
      private DataColumn columnNominalSize;
      private DataColumn columnErrorLimitQ3Plus;
      private DataColumn columnErrorLimitQ3Minus;
      private DataColumn columnErrorLimitQ2Plus;
      private DataColumn columnErrorLimitQ2Minus;
      private DataColumn columnErrorLimitQ1Plus;
      private DataColumn columnErrorLimitQ1Minus;
      private DataColumn columnManufacturerID;
      private DataColumn columnApprovalDataDescription;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMMIDApprovalDataDataTable()
      {
        this.TableName = "WMMIDApprovalData";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMMIDApprovalDataDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WMMIDApprovalDataDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalCodeColumn => this.columnApprovalCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CounterTypeIDColumn => this.columnCounterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TypeNumberColumn => this.columnTypeNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalIDColumn => this.columnApprovalID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NominalSizeColumn => this.columnNominalSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorLimitQ3PlusColumn => this.columnErrorLimitQ3Plus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorLimitQ3MinusColumn => this.columnErrorLimitQ3Minus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorLimitQ2PlusColumn => this.columnErrorLimitQ2Plus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorLimitQ2MinusColumn => this.columnErrorLimitQ2Minus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorLimitQ1PlusColumn => this.columnErrorLimitQ1Plus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorLimitQ1MinusColumn => this.columnErrorLimitQ1Minus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ManufacturerIDColumn => this.columnManufacturerID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalDataDescriptionColumn => this.columnApprovalDataDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRowChangeEventHandler WMMIDApprovalDataRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRowChangeEventHandler WMMIDApprovalDataRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRowChangeEventHandler WMMIDApprovalDataRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRowChangeEventHandler WMMIDApprovalDataRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWMMIDApprovalDataRow(ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow AddWMMIDApprovalDataRow(
        int ApprovalCode,
        int CounterTypeID,
        byte TypeNumber,
        int ApprovalID,
        double NominalSize,
        double ErrorLimitQ3Plus,
        double ErrorLimitQ3Minus,
        double ErrorLimitQ2Plus,
        double ErrorLimitQ2Minus,
        double ErrorLimitQ1Plus,
        double ErrorLimitQ1Minus,
        int ManufacturerID,
        string ApprovalDataDescription,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow row = (ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow) this.NewRow();
        object[] objArray = new object[14]
        {
          (object) ApprovalCode,
          (object) CounterTypeID,
          (object) TypeNumber,
          (object) ApprovalID,
          (object) NominalSize,
          (object) ErrorLimitQ3Plus,
          (object) ErrorLimitQ3Minus,
          (object) ErrorLimitQ2Plus,
          (object) ErrorLimitQ2Minus,
          (object) ErrorLimitQ1Plus,
          (object) ErrorLimitQ1Minus,
          (object) ManufacturerID,
          (object) ApprovalDataDescription,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow FindByApprovalCode(
        int ApprovalCode)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow) this.Rows.Find(new object[1]
        {
          (object) ApprovalCode
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataDataTable approvalDataDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataDataTable) base.Clone();
        approvalDataDataTable.InitVars();
        return (DataTable) approvalDataDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnApprovalCode = this.Columns["ApprovalCode"];
        this.columnCounterTypeID = this.Columns["CounterTypeID"];
        this.columnTypeNumber = this.Columns["TypeNumber"];
        this.columnApprovalID = this.Columns["ApprovalID"];
        this.columnNominalSize = this.Columns["NominalSize"];
        this.columnErrorLimitQ3Plus = this.Columns["ErrorLimitQ3Plus"];
        this.columnErrorLimitQ3Minus = this.Columns["ErrorLimitQ3Minus"];
        this.columnErrorLimitQ2Plus = this.Columns["ErrorLimitQ2Plus"];
        this.columnErrorLimitQ2Minus = this.Columns["ErrorLimitQ2Minus"];
        this.columnErrorLimitQ1Plus = this.Columns["ErrorLimitQ1Plus"];
        this.columnErrorLimitQ1Minus = this.Columns["ErrorLimitQ1Minus"];
        this.columnManufacturerID = this.Columns["ManufacturerID"];
        this.columnApprovalDataDescription = this.Columns["ApprovalDataDescription"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnApprovalCode = new DataColumn("ApprovalCode", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalCode);
        this.columnCounterTypeID = new DataColumn("CounterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCounterTypeID);
        this.columnTypeNumber = new DataColumn("TypeNumber", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTypeNumber);
        this.columnApprovalID = new DataColumn("ApprovalID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalID);
        this.columnNominalSize = new DataColumn("NominalSize", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNominalSize);
        this.columnErrorLimitQ3Plus = new DataColumn("ErrorLimitQ3Plus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorLimitQ3Plus);
        this.columnErrorLimitQ3Minus = new DataColumn("ErrorLimitQ3Minus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorLimitQ3Minus);
        this.columnErrorLimitQ2Plus = new DataColumn("ErrorLimitQ2Plus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorLimitQ2Plus);
        this.columnErrorLimitQ2Minus = new DataColumn("ErrorLimitQ2Minus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorLimitQ2Minus);
        this.columnErrorLimitQ1Plus = new DataColumn("ErrorLimitQ1Plus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorLimitQ1Plus);
        this.columnErrorLimitQ1Minus = new DataColumn("ErrorLimitQ1Minus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorLimitQ1Minus);
        this.columnManufacturerID = new DataColumn("ManufacturerID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnManufacturerID);
        this.columnApprovalDataDescription = new DataColumn("ApprovalDataDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalDataDescription);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnApprovalCode
        }, true));
        this.columnApprovalCode.AllowDBNull = false;
        this.columnApprovalCode.Unique = true;
        this.columnApprovalDataDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow NewWMMIDApprovalDataRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WMMIDApprovalDataRowChanged == null)
          return;
        this.WMMIDApprovalDataRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WMMIDApprovalDataRowChanging == null)
          return;
        this.WMMIDApprovalDataRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WMMIDApprovalDataRowDeleted == null)
          return;
        this.WMMIDApprovalDataRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WMMIDApprovalDataRowDeleting == null)
          return;
        this.WMMIDApprovalDataRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWMMIDApprovalDataRow(ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WMMIDApprovalDataDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WMMIDErrorOffsetDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow>
    {
      private DataColumn columnMIDErrorOffsetID;
      private DataColumn columnQ3Plus;
      private DataColumn columnQ3Minus;
      private DataColumn columnQ2Plus;
      private DataColumn columnQ2Minus;
      private DataColumn columnQ1Plus;
      private DataColumn columnQ1Minus;
      private DataColumn columnErrorOffsetDescription;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMMIDErrorOffsetDataTable()
      {
        this.TableName = "WMMIDErrorOffset";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMMIDErrorOffsetDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WMMIDErrorOffsetDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDErrorOffsetIDColumn => this.columnMIDErrorOffsetID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Q3PlusColumn => this.columnQ3Plus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Q3MinusColumn => this.columnQ3Minus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Q2PlusColumn => this.columnQ2Plus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Q2MinusColumn => this.columnQ2Minus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Q1PlusColumn => this.columnQ1Plus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Q1MinusColumn => this.columnQ1Minus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorOffsetDescriptionColumn => this.columnErrorOffsetDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRowChangeEventHandler WMMIDErrorOffsetRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRowChangeEventHandler WMMIDErrorOffsetRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRowChangeEventHandler WMMIDErrorOffsetRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRowChangeEventHandler WMMIDErrorOffsetRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWMMIDErrorOffsetRow(ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow AddWMMIDErrorOffsetRow(
        int MIDErrorOffsetID,
        double Q3Plus,
        double Q3Minus,
        double Q2Plus,
        double Q2Minus,
        double Q1Plus,
        double Q1Minus,
        string ErrorOffsetDescription,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow row = (ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) MIDErrorOffsetID,
          (object) Q3Plus,
          (object) Q3Minus,
          (object) Q2Plus,
          (object) Q2Minus,
          (object) Q1Plus,
          (object) Q1Minus,
          (object) ErrorOffsetDescription,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow FindByMIDErrorOffsetID(
        int MIDErrorOffsetID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow) this.Rows.Find(new object[1]
        {
          (object) MIDErrorOffsetID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetDataTable errorOffsetDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetDataTable) base.Clone();
        errorOffsetDataTable.InitVars();
        return (DataTable) errorOffsetDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMIDErrorOffsetID = this.Columns["MIDErrorOffsetID"];
        this.columnQ3Plus = this.Columns["Q3Plus"];
        this.columnQ3Minus = this.Columns["Q3Minus"];
        this.columnQ2Plus = this.Columns["Q2Plus"];
        this.columnQ2Minus = this.Columns["Q2Minus"];
        this.columnQ1Plus = this.Columns["Q1Plus"];
        this.columnQ1Minus = this.Columns["Q1Minus"];
        this.columnErrorOffsetDescription = this.Columns["ErrorOffsetDescription"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMIDErrorOffsetID = new DataColumn("MIDErrorOffsetID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDErrorOffsetID);
        this.columnQ3Plus = new DataColumn("Q3Plus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQ3Plus);
        this.columnQ3Minus = new DataColumn("Q3Minus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQ3Minus);
        this.columnQ2Plus = new DataColumn("Q2Plus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQ2Plus);
        this.columnQ2Minus = new DataColumn("Q2Minus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQ2Minus);
        this.columnQ1Plus = new DataColumn("Q1Plus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQ1Plus);
        this.columnQ1Minus = new DataColumn("Q1Minus", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQ1Minus);
        this.columnErrorOffsetDescription = new DataColumn("ErrorOffsetDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorOffsetDescription);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMIDErrorOffsetID
        }, true));
        this.columnMIDErrorOffsetID.AllowDBNull = false;
        this.columnMIDErrorOffsetID.Unique = true;
        this.columnErrorOffsetDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow NewWMMIDErrorOffsetRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WMMIDErrorOffsetRowChanged == null)
          return;
        this.WMMIDErrorOffsetRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WMMIDErrorOffsetRowChanging == null)
          return;
        this.WMMIDErrorOffsetRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WMMIDErrorOffsetRowDeleted == null)
          return;
        this.WMMIDErrorOffsetRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WMMIDErrorOffsetRowDeleting == null)
          return;
        this.WMMIDErrorOffsetRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWMMIDErrorOffsetRow(ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WMMIDErrorOffsetDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WMMIDTestingTypesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow>
    {
      private DataColumn columnMIDTestingTypeID;
      private DataColumn columnMIDTestingType;
      private DataColumn columnMIDFactorQ1Min;
      private DataColumn columnMIDFactorQ1Max;
      private DataColumn columnMIDFactorQ2Min;
      private DataColumn columnMIDFactorQ2Max;
      private DataColumn columnMIDFactorQ3Min;
      private DataColumn columnMIDFactorQ3Max;
      private DataColumn columnMIDTempMin;
      private DataColumn columnMIDTempMax;
      private DataColumn columnMIDTestingTypeDescription;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMMIDTestingTypesDataTable()
      {
        this.TableName = "WMMIDTestingTypes";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMMIDTestingTypesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WMMIDTestingTypesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDTestingTypeIDColumn => this.columnMIDTestingTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDTestingTypeColumn => this.columnMIDTestingType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDFactorQ1MinColumn => this.columnMIDFactorQ1Min;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDFactorQ1MaxColumn => this.columnMIDFactorQ1Max;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDFactorQ2MinColumn => this.columnMIDFactorQ2Min;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDFactorQ2MaxColumn => this.columnMIDFactorQ2Max;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDFactorQ3MinColumn => this.columnMIDFactorQ3Min;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDFactorQ3MaxColumn => this.columnMIDFactorQ3Max;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDTempMinColumn => this.columnMIDTempMin;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDTempMaxColumn => this.columnMIDTempMax;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MIDTestingTypeDescriptionColumn => this.columnMIDTestingTypeDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRowChangeEventHandler WMMIDTestingTypesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRowChangeEventHandler WMMIDTestingTypesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRowChangeEventHandler WMMIDTestingTypesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRowChangeEventHandler WMMIDTestingTypesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWMMIDTestingTypesRow(ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow AddWMMIDTestingTypesRow(
        int MIDTestingTypeID,
        string MIDTestingType,
        double MIDFactorQ1Min,
        double MIDFactorQ1Max,
        double MIDFactorQ2Min,
        double MIDFactorQ2Max,
        double MIDFactorQ3Min,
        double MIDFactorQ3Max,
        double MIDTempMin,
        double MIDTempMax,
        string MIDTestingTypeDescription,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow row = (ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) MIDTestingTypeID,
          (object) MIDTestingType,
          (object) MIDFactorQ1Min,
          (object) MIDFactorQ1Max,
          (object) MIDFactorQ2Min,
          (object) MIDFactorQ2Max,
          (object) MIDFactorQ3Min,
          (object) MIDFactorQ3Max,
          (object) MIDTempMin,
          (object) MIDTempMax,
          (object) MIDTestingTypeDescription,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow FindByMIDTestingTypeID(
        int MIDTestingTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow) this.Rows.Find(new object[1]
        {
          (object) MIDTestingTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesDataTable testingTypesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesDataTable) base.Clone();
        testingTypesDataTable.InitVars();
        return (DataTable) testingTypesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMIDTestingTypeID = this.Columns["MIDTestingTypeID"];
        this.columnMIDTestingType = this.Columns["MIDTestingType"];
        this.columnMIDFactorQ1Min = this.Columns["MIDFactorQ1Min"];
        this.columnMIDFactorQ1Max = this.Columns["MIDFactorQ1Max"];
        this.columnMIDFactorQ2Min = this.Columns["MIDFactorQ2Min"];
        this.columnMIDFactorQ2Max = this.Columns["MIDFactorQ2Max"];
        this.columnMIDFactorQ3Min = this.Columns["MIDFactorQ3Min"];
        this.columnMIDFactorQ3Max = this.Columns["MIDFactorQ3Max"];
        this.columnMIDTempMin = this.Columns["MIDTempMin"];
        this.columnMIDTempMax = this.Columns["MIDTempMax"];
        this.columnMIDTestingTypeDescription = this.Columns["MIDTestingTypeDescription"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMIDTestingTypeID = new DataColumn("MIDTestingTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDTestingTypeID);
        this.columnMIDTestingType = new DataColumn("MIDTestingType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDTestingType);
        this.columnMIDFactorQ1Min = new DataColumn("MIDFactorQ1Min", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDFactorQ1Min);
        this.columnMIDFactorQ1Max = new DataColumn("MIDFactorQ1Max", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDFactorQ1Max);
        this.columnMIDFactorQ2Min = new DataColumn("MIDFactorQ2Min", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDFactorQ2Min);
        this.columnMIDFactorQ2Max = new DataColumn("MIDFactorQ2Max", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDFactorQ2Max);
        this.columnMIDFactorQ3Min = new DataColumn("MIDFactorQ3Min", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDFactorQ3Min);
        this.columnMIDFactorQ3Max = new DataColumn("MIDFactorQ3Max", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDFactorQ3Max);
        this.columnMIDTempMin = new DataColumn("MIDTempMin", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDTempMin);
        this.columnMIDTempMax = new DataColumn("MIDTempMax", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDTempMax);
        this.columnMIDTestingTypeDescription = new DataColumn("MIDTestingTypeDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMIDTestingTypeDescription);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMIDTestingTypeID
        }, true));
        this.columnMIDTestingTypeID.AllowDBNull = false;
        this.columnMIDTestingTypeID.Unique = true;
        this.columnMIDTestingType.MaxLength = 50;
        this.columnMIDTestingTypeDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow NewWMMIDTestingTypesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WMMIDTestingTypesRowChanged == null)
          return;
        this.WMMIDTestingTypesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WMMIDTestingTypesRowChanging == null)
          return;
        this.WMMIDTestingTypesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WMMIDTestingTypesRowDeleted == null)
          return;
        this.WMMIDTestingTypesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WMMIDTestingTypesRowDeleting == null)
          return;
        this.WMMIDTestingTypesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWMMIDTestingTypesRow(ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WMMIDTestingTypesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WMOrdersDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow>
    {
      private DataColumn columnWmOrderNr;
      private DataColumn columnWmNumberOfMeters;
      private DataColumn columnWmKindOfMeters;
      private DataColumn columnWmAccountTime;
      private DataColumn columnWmFinishTime;
      private DataColumn columnWmOkTestedMeters;
      private DataColumn columnWmTestedMeters;
      private DataColumn columnWmApprovalCode;
      private DataColumn columnWmMID;
      private DataColumn columnWmOverallLength;
      private DataColumn columnWmConnectingThread;
      private DataColumn columnWmKindOfNumber;
      private DataColumn columnWmToken;
      private DataColumn columnWmENumberLength;
      private DataColumn columnWmStartNumber;
      private DataColumn columnWmEndNumber;
      private DataColumn columnWmNumberAllocation;
      private DataColumn columnWmCustomerOrderNumber;
      private DataColumn columnWmCustomerNumber;
      private DataColumn columnWmComplete;
      private DataColumn columnWmAddPersonalNumber;
      private DataColumn columnWmManualCompletePersonalNumber;
      private DataColumn columnWmMountingDirection;
      private DataColumn columnWmOnlyMaxTestpoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMOrdersDataTable()
      {
        this.TableName = "WMOrders";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMOrdersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WMOrdersDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmOrderNrColumn => this.columnWmOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmNumberOfMetersColumn => this.columnWmNumberOfMeters;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmKindOfMetersColumn => this.columnWmKindOfMeters;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmAccountTimeColumn => this.columnWmAccountTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmFinishTimeColumn => this.columnWmFinishTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmOkTestedMetersColumn => this.columnWmOkTestedMeters;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmTestedMetersColumn => this.columnWmTestedMeters;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmApprovalCodeColumn => this.columnWmApprovalCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmMIDColumn => this.columnWmMID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmOverallLengthColumn => this.columnWmOverallLength;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmConnectingThreadColumn => this.columnWmConnectingThread;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmKindOfNumberColumn => this.columnWmKindOfNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmTokenColumn => this.columnWmToken;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmENumberLengthColumn => this.columnWmENumberLength;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmStartNumberColumn => this.columnWmStartNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmEndNumberColumn => this.columnWmEndNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmNumberAllocationColumn => this.columnWmNumberAllocation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmCustomerOrderNumberColumn => this.columnWmCustomerOrderNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmCustomerNumberColumn => this.columnWmCustomerNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmCompleteColumn => this.columnWmComplete;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmAddPersonalNumberColumn => this.columnWmAddPersonalNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmManualCompletePersonalNumberColumn
      {
        get => this.columnWmManualCompletePersonalNumber;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmMountingDirectionColumn => this.columnWmMountingDirection;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WmOnlyMaxTestpointColumn => this.columnWmOnlyMaxTestpoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRowChangeEventHandler WMOrdersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRowChangeEventHandler WMOrdersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRowChangeEventHandler WMOrdersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRowChangeEventHandler WMOrdersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWMOrdersRow(ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow AddWMOrdersRow(
        string WmOrderNr,
        int WmNumberOfMeters,
        byte WmKindOfMeters,
        DateTime WmAccountTime,
        DateTime WmFinishTime,
        int WmOkTestedMeters,
        int WmTestedMeters,
        int WmApprovalCode,
        byte WmMID,
        double WmOverallLength,
        string WmConnectingThread,
        byte WmKindOfNumber,
        string WmToken,
        int WmENumberLength,
        string WmStartNumber,
        string WmEndNumber,
        byte WmNumberAllocation,
        int WmCustomerOrderNumber,
        string WmCustomerNumber,
        byte WmComplete,
        int WmAddPersonalNumber,
        int WmManualCompletePersonalNumber,
        string WmMountingDirection,
        byte WmOnlyMaxTestpoint)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow row = (ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow) this.NewRow();
        object[] objArray = new object[24]
        {
          (object) WmOrderNr,
          (object) WmNumberOfMeters,
          (object) WmKindOfMeters,
          (object) WmAccountTime,
          (object) WmFinishTime,
          (object) WmOkTestedMeters,
          (object) WmTestedMeters,
          (object) WmApprovalCode,
          (object) WmMID,
          (object) WmOverallLength,
          (object) WmConnectingThread,
          (object) WmKindOfNumber,
          (object) WmToken,
          (object) WmENumberLength,
          (object) WmStartNumber,
          (object) WmEndNumber,
          (object) WmNumberAllocation,
          (object) WmCustomerOrderNumber,
          (object) WmCustomerNumber,
          (object) WmComplete,
          (object) WmAddPersonalNumber,
          (object) WmManualCompletePersonalNumber,
          (object) WmMountingDirection,
          (object) WmOnlyMaxTestpoint
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow FindByWmOrderNr(string WmOrderNr)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow) this.Rows.Find(new object[1]
        {
          (object) WmOrderNr
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMOrdersDataTable wmOrdersDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WMOrdersDataTable) base.Clone();
        wmOrdersDataTable.InitVars();
        return (DataTable) wmOrdersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMOrdersDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnWmOrderNr = this.Columns["WmOrderNr"];
        this.columnWmNumberOfMeters = this.Columns["WmNumberOfMeters"];
        this.columnWmKindOfMeters = this.Columns["WmKindOfMeters"];
        this.columnWmAccountTime = this.Columns["WmAccountTime"];
        this.columnWmFinishTime = this.Columns["WmFinishTime"];
        this.columnWmOkTestedMeters = this.Columns["WmOkTestedMeters"];
        this.columnWmTestedMeters = this.Columns["WmTestedMeters"];
        this.columnWmApprovalCode = this.Columns["WmApprovalCode"];
        this.columnWmMID = this.Columns["WmMID"];
        this.columnWmOverallLength = this.Columns["WmOverallLength"];
        this.columnWmConnectingThread = this.Columns["WmConnectingThread"];
        this.columnWmKindOfNumber = this.Columns["WmKindOfNumber"];
        this.columnWmToken = this.Columns["WmToken"];
        this.columnWmENumberLength = this.Columns["WmENumberLength"];
        this.columnWmStartNumber = this.Columns["WmStartNumber"];
        this.columnWmEndNumber = this.Columns["WmEndNumber"];
        this.columnWmNumberAllocation = this.Columns["WmNumberAllocation"];
        this.columnWmCustomerOrderNumber = this.Columns["WmCustomerOrderNumber"];
        this.columnWmCustomerNumber = this.Columns["WmCustomerNumber"];
        this.columnWmComplete = this.Columns["WmComplete"];
        this.columnWmAddPersonalNumber = this.Columns["WmAddPersonalNumber"];
        this.columnWmManualCompletePersonalNumber = this.Columns["WmManualCompletePersonalNumber"];
        this.columnWmMountingDirection = this.Columns["WmMountingDirection"];
        this.columnWmOnlyMaxTestpoint = this.Columns["WmOnlyMaxTestpoint"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnWmOrderNr = new DataColumn("WmOrderNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmOrderNr);
        this.columnWmNumberOfMeters = new DataColumn("WmNumberOfMeters", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmNumberOfMeters);
        this.columnWmKindOfMeters = new DataColumn("WmKindOfMeters", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmKindOfMeters);
        this.columnWmAccountTime = new DataColumn("WmAccountTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmAccountTime);
        this.columnWmFinishTime = new DataColumn("WmFinishTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmFinishTime);
        this.columnWmOkTestedMeters = new DataColumn("WmOkTestedMeters", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmOkTestedMeters);
        this.columnWmTestedMeters = new DataColumn("WmTestedMeters", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmTestedMeters);
        this.columnWmApprovalCode = new DataColumn("WmApprovalCode", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmApprovalCode);
        this.columnWmMID = new DataColumn("WmMID", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmMID);
        this.columnWmOverallLength = new DataColumn("WmOverallLength", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmOverallLength);
        this.columnWmConnectingThread = new DataColumn("WmConnectingThread", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmConnectingThread);
        this.columnWmKindOfNumber = new DataColumn("WmKindOfNumber", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmKindOfNumber);
        this.columnWmToken = new DataColumn("WmToken", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmToken);
        this.columnWmENumberLength = new DataColumn("WmENumberLength", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmENumberLength);
        this.columnWmStartNumber = new DataColumn("WmStartNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmStartNumber);
        this.columnWmEndNumber = new DataColumn("WmEndNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmEndNumber);
        this.columnWmNumberAllocation = new DataColumn("WmNumberAllocation", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmNumberAllocation);
        this.columnWmCustomerOrderNumber = new DataColumn("WmCustomerOrderNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmCustomerOrderNumber);
        this.columnWmCustomerNumber = new DataColumn("WmCustomerNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmCustomerNumber);
        this.columnWmComplete = new DataColumn("WmComplete", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmComplete);
        this.columnWmAddPersonalNumber = new DataColumn("WmAddPersonalNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmAddPersonalNumber);
        this.columnWmManualCompletePersonalNumber = new DataColumn("WmManualCompletePersonalNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmManualCompletePersonalNumber);
        this.columnWmMountingDirection = new DataColumn("WmMountingDirection", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmMountingDirection);
        this.columnWmOnlyMaxTestpoint = new DataColumn("WmOnlyMaxTestpoint", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWmOnlyMaxTestpoint);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnWmOrderNr
        }, true));
        this.columnWmOrderNr.AllowDBNull = false;
        this.columnWmOrderNr.Unique = true;
        this.columnWmOrderNr.MaxLength = 50;
        this.columnWmConnectingThread.MaxLength = 50;
        this.columnWmToken.MaxLength = 50;
        this.columnWmStartNumber.MaxLength = 50;
        this.columnWmEndNumber.MaxLength = 50;
        this.columnWmCustomerNumber.MaxLength = (int) byte.MaxValue;
        this.columnWmMountingDirection.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow NewWMOrdersRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WMOrdersRowChanged == null)
          return;
        this.WMOrdersRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WMOrdersRowChanging == null)
          return;
        this.WMOrdersRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WMOrdersRowDeleted == null)
          return;
        this.WMOrdersRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WMOrdersRowDeleting == null)
          return;
        this.WMOrdersRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWMOrdersRow(ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WMOrdersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WMRatiosDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow>
    {
      private DataColumn columnRatioID;
      private DataColumn columnRatio;
      private DataColumn columnRatioDescription;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMRatiosDataTable()
      {
        this.TableName = "WMRatios";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMRatiosDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WMRatiosDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RatioIDColumn => this.columnRatioID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RatioColumn => this.columnRatio;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RatioDescriptionColumn => this.columnRatioDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRowChangeEventHandler WMRatiosRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRowChangeEventHandler WMRatiosRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRowChangeEventHandler WMRatiosRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRowChangeEventHandler WMRatiosRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWMRatiosRow(ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow AddWMRatiosRow(
        int RatioID,
        double Ratio,
        string RatioDescription,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow row = (ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) RatioID,
          (object) Ratio,
          (object) RatioDescription,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow FindByRatioID(int RatioID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow) this.Rows.Find(new object[1]
        {
          (object) RatioID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMRatiosDataTable wmRatiosDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WMRatiosDataTable) base.Clone();
        wmRatiosDataTable.InitVars();
        return (DataTable) wmRatiosDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMRatiosDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnRatioID = this.Columns["RatioID"];
        this.columnRatio = this.Columns["Ratio"];
        this.columnRatioDescription = this.Columns["RatioDescription"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnRatioID = new DataColumn("RatioID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRatioID);
        this.columnRatio = new DataColumn("Ratio", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRatio);
        this.columnRatioDescription = new DataColumn("RatioDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRatioDescription);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnRatioID
        }, true));
        this.columnRatioID.AllowDBNull = false;
        this.columnRatioID.Unique = true;
        this.columnRatioDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow NewWMRatiosRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WMRatiosRowChanged == null)
          return;
        this.WMRatiosRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WMRatiosRowChanging == null)
          return;
        this.WMRatiosRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WMRatiosRowDeleted == null)
          return;
        this.WMRatiosRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WMRatiosRowDeleting == null)
          return;
        this.WMRatiosRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWMRatiosRow(ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WMRatiosDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WMTestingTypesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow>
    {
      private DataColumn columnTestingTypeID;
      private DataColumn columnTestingType;
      private DataColumn columnFactorQmaxMin;
      private DataColumn columnFactorQmaxMax;
      private DataColumn columnFactorQtrennMin;
      private DataColumn columnFactorQtrennMax;
      private DataColumn columnFactorQMinMin;
      private DataColumn columnFactorQMinMax;
      private DataColumn columnTempMin;
      private DataColumn columnTempMax;
      private DataColumn columnTestingTypeDescription;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMTestingTypesDataTable()
      {
        this.TableName = "WMTestingTypes";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMTestingTypesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WMTestingTypesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestingTypeIDColumn => this.columnTestingTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestingTypeColumn => this.columnTestingType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FactorQmaxMinColumn => this.columnFactorQmaxMin;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FactorQmaxMaxColumn => this.columnFactorQmaxMax;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FactorQtrennMinColumn => this.columnFactorQtrennMin;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FactorQtrennMaxColumn => this.columnFactorQtrennMax;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FactorQMinMinColumn => this.columnFactorQMinMin;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FactorQMinMaxColumn => this.columnFactorQMinMax;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TempMinColumn => this.columnTempMin;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TempMaxColumn => this.columnTempMax;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestingTypeDescriptionColumn => this.columnTestingTypeDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRowChangeEventHandler WMTestingTypesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRowChangeEventHandler WMTestingTypesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRowChangeEventHandler WMTestingTypesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRowChangeEventHandler WMTestingTypesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWMTestingTypesRow(ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow AddWMTestingTypesRow(
        int TestingTypeID,
        string TestingType,
        double FactorQmaxMin,
        double FactorQmaxMax,
        double FactorQtrennMin,
        double FactorQtrennMax,
        double FactorQMinMin,
        double FactorQMinMax,
        double TempMin,
        double TempMax,
        string TestingTypeDescription,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow row = (ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) TestingTypeID,
          (object) TestingType,
          (object) FactorQmaxMin,
          (object) FactorQmaxMax,
          (object) FactorQtrennMin,
          (object) FactorQtrennMax,
          (object) FactorQMinMin,
          (object) FactorQMinMax,
          (object) TempMin,
          (object) TempMax,
          (object) TestingTypeDescription,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow FindByTestingTypeID(
        int TestingTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow) this.Rows.Find(new object[1]
        {
          (object) TestingTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesDataTable testingTypesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesDataTable) base.Clone();
        testingTypesDataTable.InitVars();
        return (DataTable) testingTypesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTestingTypeID = this.Columns["TestingTypeID"];
        this.columnTestingType = this.Columns["TestingType"];
        this.columnFactorQmaxMin = this.Columns["FactorQmaxMin"];
        this.columnFactorQmaxMax = this.Columns["FactorQmaxMax"];
        this.columnFactorQtrennMin = this.Columns["FactorQtrennMin"];
        this.columnFactorQtrennMax = this.Columns["FactorQtrennMax"];
        this.columnFactorQMinMin = this.Columns["FactorQMinMin"];
        this.columnFactorQMinMax = this.Columns["FactorQMinMax"];
        this.columnTempMin = this.Columns["TempMin"];
        this.columnTempMax = this.Columns["TempMax"];
        this.columnTestingTypeDescription = this.Columns["TestingTypeDescription"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTestingTypeID = new DataColumn("TestingTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestingTypeID);
        this.columnTestingType = new DataColumn("TestingType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestingType);
        this.columnFactorQmaxMin = new DataColumn("FactorQmaxMin", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFactorQmaxMin);
        this.columnFactorQmaxMax = new DataColumn("FactorQmaxMax", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFactorQmaxMax);
        this.columnFactorQtrennMin = new DataColumn("FactorQtrennMin", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFactorQtrennMin);
        this.columnFactorQtrennMax = new DataColumn("FactorQtrennMax", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFactorQtrennMax);
        this.columnFactorQMinMin = new DataColumn("FactorQMinMin", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFactorQMinMin);
        this.columnFactorQMinMax = new DataColumn("FactorQMinMax", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFactorQMinMax);
        this.columnTempMin = new DataColumn("TempMin", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempMin);
        this.columnTempMax = new DataColumn("TempMax", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempMax);
        this.columnTestingTypeDescription = new DataColumn("TestingTypeDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestingTypeDescription);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnTestingTypeID
        }, true));
        this.columnTestingTypeID.AllowDBNull = false;
        this.columnTestingTypeID.Unique = true;
        this.columnTestingType.MaxLength = 50;
        this.columnTestingTypeDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow NewWMTestingTypesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WMTestingTypesRowChanged == null)
          return;
        this.WMTestingTypesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WMTestingTypesRowChanging == null)
          return;
        this.WMTestingTypesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WMTestingTypesRowDeleted == null)
          return;
        this.WMTestingTypesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WMTestingTypesRowDeleting == null)
          return;
        this.WMTestingTypesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWMTestingTypesRow(ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WMTestingTypesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ZRFunctionDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow>
    {
      private DataColumn columnFunctionNumber;
      private DataColumn columnFunctionName;
      private DataColumn columnFunctionGroup;
      private DataColumn columnFullName;
      private DataColumn columnMeterUnit;
      private DataColumn columnFirmwareVersionMin;
      private DataColumn columnFirmwareVersionMax;
      private DataColumn columnFunctionType;
      private DataColumn columnFunctionShortInfo;
      private DataColumn columnFunctionDescription;
      private DataColumn columnFunctionVersion;
      private DataColumn columnAccessRight;
      private DataColumn columnUserGroup;
      private DataColumn columnSymbolname;
      private DataColumn columnLoggerType;
      private DataColumn columnHardwareResource;
      private DataColumn columnAccessRights;
      private DataColumn columnSoftwareResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZRFunctionDataTable()
      {
        this.TableName = "ZRFunction";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ZRFunctionDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ZRFunctionDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionNumberColumn => this.columnFunctionNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionNameColumn => this.columnFunctionName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionGroupColumn => this.columnFunctionGroup;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FullNameColumn => this.columnFullName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterUnitColumn => this.columnMeterUnit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FirmwareVersionMinColumn => this.columnFirmwareVersionMin;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FirmwareVersionMaxColumn => this.columnFirmwareVersionMax;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionTypeColumn => this.columnFunctionType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionShortInfoColumn => this.columnFunctionShortInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionDescriptionColumn => this.columnFunctionDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionVersionColumn => this.columnFunctionVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AccessRightColumn => this.columnAccessRight;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserGroupColumn => this.columnUserGroup;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SymbolnameColumn => this.columnSymbolname;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LoggerTypeColumn => this.columnLoggerType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareResourceColumn => this.columnHardwareResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AccessRightsColumn => this.columnAccessRights;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SoftwareResourceColumn => this.columnSoftwareResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRowChangeEventHandler ZRFunctionRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRowChangeEventHandler ZRFunctionRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRowChangeEventHandler ZRFunctionRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRowChangeEventHandler ZRFunctionRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddZRFunctionRow(ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow AddZRFunctionRow(
        int FunctionNumber,
        string FunctionName,
        string FunctionGroup,
        string FullName,
        string MeterUnit,
        int FirmwareVersionMin,
        int FirmwareVersionMax,
        int FunctionType,
        string FunctionShortInfo,
        string FunctionDescription,
        int FunctionVersion,
        int AccessRight,
        int UserGroup,
        string Symbolname,
        int LoggerType,
        string HardwareResource,
        string AccessRights,
        string SoftwareResource)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow row = (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) this.NewRow();
        object[] objArray = new object[18]
        {
          (object) FunctionNumber,
          (object) FunctionName,
          (object) FunctionGroup,
          (object) FullName,
          (object) MeterUnit,
          (object) FirmwareVersionMin,
          (object) FirmwareVersionMax,
          (object) FunctionType,
          (object) FunctionShortInfo,
          (object) FunctionDescription,
          (object) FunctionVersion,
          (object) AccessRight,
          (object) UserGroup,
          (object) Symbolname,
          (object) LoggerType,
          (object) HardwareResource,
          (object) AccessRights,
          (object) SoftwareResource
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow FindByFunctionNumber(
        int FunctionNumber)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) this.Rows.Find(new object[1]
        {
          (object) FunctionNumber
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionDataTable functionDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionDataTable) base.Clone();
        functionDataTable.InitVars();
        return (DataTable) functionDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnFunctionNumber = this.Columns["FunctionNumber"];
        this.columnFunctionName = this.Columns["FunctionName"];
        this.columnFunctionGroup = this.Columns["FunctionGroup"];
        this.columnFullName = this.Columns["FullName"];
        this.columnMeterUnit = this.Columns["MeterUnit"];
        this.columnFirmwareVersionMin = this.Columns["FirmwareVersionMin"];
        this.columnFirmwareVersionMax = this.Columns["FirmwareVersionMax"];
        this.columnFunctionType = this.Columns["FunctionType"];
        this.columnFunctionShortInfo = this.Columns["FunctionShortInfo"];
        this.columnFunctionDescription = this.Columns["FunctionDescription"];
        this.columnFunctionVersion = this.Columns["FunctionVersion"];
        this.columnAccessRight = this.Columns["AccessRight"];
        this.columnUserGroup = this.Columns["UserGroup"];
        this.columnSymbolname = this.Columns["Symbolname"];
        this.columnLoggerType = this.Columns["LoggerType"];
        this.columnHardwareResource = this.Columns["HardwareResource"];
        this.columnAccessRights = this.Columns["AccessRights"];
        this.columnSoftwareResource = this.Columns["SoftwareResource"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnFunctionNumber = new DataColumn("FunctionNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionNumber);
        this.columnFunctionName = new DataColumn("FunctionName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionName);
        this.columnFunctionGroup = new DataColumn("FunctionGroup", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionGroup);
        this.columnFullName = new DataColumn("FullName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFullName);
        this.columnMeterUnit = new DataColumn("MeterUnit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterUnit);
        this.columnFirmwareVersionMin = new DataColumn("FirmwareVersionMin", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareVersionMin);
        this.columnFirmwareVersionMax = new DataColumn("FirmwareVersionMax", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareVersionMax);
        this.columnFunctionType = new DataColumn("FunctionType", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionType);
        this.columnFunctionShortInfo = new DataColumn("FunctionShortInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionShortInfo);
        this.columnFunctionDescription = new DataColumn("FunctionDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionDescription);
        this.columnFunctionVersion = new DataColumn("FunctionVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionVersion);
        this.columnAccessRight = new DataColumn("AccessRight", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAccessRight);
        this.columnUserGroup = new DataColumn("UserGroup", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserGroup);
        this.columnSymbolname = new DataColumn("Symbolname", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSymbolname);
        this.columnLoggerType = new DataColumn("LoggerType", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLoggerType);
        this.columnHardwareResource = new DataColumn("HardwareResource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareResource);
        this.columnAccessRights = new DataColumn("AccessRights", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAccessRights);
        this.columnSoftwareResource = new DataColumn("SoftwareResource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSoftwareResource);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnFunctionNumber
        }, true));
        this.columnFunctionNumber.AllowDBNull = false;
        this.columnFunctionNumber.Unique = true;
        this.columnFunctionName.MaxLength = 50;
        this.columnFunctionGroup.MaxLength = 100;
        this.columnFullName.MaxLength = 50;
        this.columnMeterUnit.MaxLength = 50;
        this.columnFunctionShortInfo.MaxLength = (int) byte.MaxValue;
        this.columnFunctionDescription.MaxLength = 536870910;
        this.columnSymbolname.MaxLength = 50;
        this.columnHardwareResource.MaxLength = 100;
        this.columnAccessRights.MaxLength = 50;
        this.columnSoftwareResource.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow NewZRFunctionRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ZRFunctionRowChanged == null)
          return;
        this.ZRFunctionRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ZRFunctionRowChanging == null)
          return;
        this.ZRFunctionRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ZRFunctionRowDeleted == null)
          return;
        this.ZRFunctionRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ZRFunctionRowDeleting == null)
          return;
        this.ZRFunctionRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveZRFunctionRow(ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ZRFunctionDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ZRGlobalIDDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow>
    {
      private DataColumn columnZRTableName;
      private DataColumn columnZRFieldName;
      private DataColumn columnZRNextNr;
      private DataColumn columnZRFirstNr;
      private DataColumn columnZRLastNr;
      private DataColumn columnDatabaseLocationName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZRGlobalIDDataTable()
      {
        this.TableName = "ZRGlobalID";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ZRGlobalIDDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ZRGlobalIDDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ZRTableNameColumn => this.columnZRTableName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ZRFieldNameColumn => this.columnZRFieldName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ZRNextNrColumn => this.columnZRNextNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ZRFirstNrColumn => this.columnZRFirstNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ZRLastNrColumn => this.columnZRLastNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DatabaseLocationNameColumn => this.columnDatabaseLocationName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRowChangeEventHandler ZRGlobalIDRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRowChangeEventHandler ZRGlobalIDRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRowChangeEventHandler ZRGlobalIDRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRowChangeEventHandler ZRGlobalIDRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddZRGlobalIDRow(ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow AddZRGlobalIDRow(
        string ZRTableName,
        string ZRFieldName,
        int ZRNextNr,
        int ZRFirstNr,
        int ZRLastNr,
        string DatabaseLocationName)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow row = (ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) ZRTableName,
          (object) ZRFieldName,
          (object) ZRNextNr,
          (object) ZRFirstNr,
          (object) ZRLastNr,
          (object) DatabaseLocationName
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow FindByDatabaseLocationNameZRTableName(
        string DatabaseLocationName,
        string ZRTableName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow) this.Rows.Find(new object[2]
        {
          (object) DatabaseLocationName,
          (object) ZRTableName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDDataTable globalIdDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDDataTable) base.Clone();
        globalIdDataTable.InitVars();
        return (DataTable) globalIdDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnZRTableName = this.Columns["ZRTableName"];
        this.columnZRFieldName = this.Columns["ZRFieldName"];
        this.columnZRNextNr = this.Columns["ZRNextNr"];
        this.columnZRFirstNr = this.Columns["ZRFirstNr"];
        this.columnZRLastNr = this.Columns["ZRLastNr"];
        this.columnDatabaseLocationName = this.Columns["DatabaseLocationName"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnZRTableName = new DataColumn("ZRTableName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZRTableName);
        this.columnZRFieldName = new DataColumn("ZRFieldName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZRFieldName);
        this.columnZRNextNr = new DataColumn("ZRNextNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZRNextNr);
        this.columnZRFirstNr = new DataColumn("ZRFirstNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZRFirstNr);
        this.columnZRLastNr = new DataColumn("ZRLastNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZRLastNr);
        this.columnDatabaseLocationName = new DataColumn("DatabaseLocationName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDatabaseLocationName);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnDatabaseLocationName,
          this.columnZRTableName
        }, true));
        this.columnZRTableName.AllowDBNull = false;
        this.columnZRTableName.MaxLength = 50;
        this.columnZRFieldName.MaxLength = 50;
        this.columnDatabaseLocationName.AllowDBNull = false;
        this.columnDatabaseLocationName.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow NewZRGlobalIDRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ZRGlobalIDRowChanged == null)
          return;
        this.ZRGlobalIDRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ZRGlobalIDRowChanging == null)
          return;
        this.ZRGlobalIDRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ZRGlobalIDRowDeleted == null)
          return;
        this.ZRGlobalIDRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ZRGlobalIDRowDeleting == null)
          return;
        this.ZRGlobalIDRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveZRGlobalIDRow(ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ZRGlobalIDDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ZrOrderDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow>
    {
      private DataColumn columnOrderNr;
      private DataColumn columnEquipmentID;
      private DataColumn columnStartNr;
      private DataColumn columnEndNr;
      private DataColumn columnAktNr;
      private DataColumn columnPPSArtikelNr;
      private DataColumn columnTypeName;
      private DataColumn columnOrderInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZrOrderDataTable()
      {
        this.TableName = "ZrOrder";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ZrOrderDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ZrOrderDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn OrderNrColumn => this.columnOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StartNrColumn => this.columnStartNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EndNrColumn => this.columnEndNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AktNrColumn => this.columnAktNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPSArtikelNrColumn => this.columnPPSArtikelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TypeNameColumn => this.columnTypeName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn OrderInfoColumn => this.columnOrderInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRowChangeEventHandler ZrOrderRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRowChangeEventHandler ZrOrderRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRowChangeEventHandler ZrOrderRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRowChangeEventHandler ZrOrderRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddZrOrderRow(ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow AddZrOrderRow(
        string OrderNr,
        int EquipmentID,
        int StartNr,
        int EndNr,
        int AktNr,
        string PPSArtikelNr,
        string TypeName,
        string OrderInfo)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow row = (ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) OrderNr,
          (object) EquipmentID,
          (object) StartNr,
          (object) EndNr,
          (object) AktNr,
          (object) PPSArtikelNr,
          (object) TypeName,
          (object) OrderInfo
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow FindByOrderNrEquipmentID(
        string OrderNr,
        int EquipmentID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow) this.Rows.Find(new object[2]
        {
          (object) OrderNr,
          (object) EquipmentID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ZrOrderDataTable zrOrderDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ZrOrderDataTable) base.Clone();
        zrOrderDataTable.InitVars();
        return (DataTable) zrOrderDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZrOrderDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnOrderNr = this.Columns["OrderNr"];
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnStartNr = this.Columns["StartNr"];
        this.columnEndNr = this.Columns["EndNr"];
        this.columnAktNr = this.Columns["AktNr"];
        this.columnPPSArtikelNr = this.Columns["PPSArtikelNr"];
        this.columnTypeName = this.Columns["TypeName"];
        this.columnOrderInfo = this.Columns["OrderInfo"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnOrderNr = new DataColumn("OrderNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOrderNr);
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnStartNr = new DataColumn("StartNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStartNr);
        this.columnEndNr = new DataColumn("EndNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEndNr);
        this.columnAktNr = new DataColumn("AktNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAktNr);
        this.columnPPSArtikelNr = new DataColumn("PPSArtikelNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPSArtikelNr);
        this.columnTypeName = new DataColumn("TypeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTypeName);
        this.columnOrderInfo = new DataColumn("OrderInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOrderInfo);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnOrderNr,
          this.columnEquipmentID
        }, true));
        this.columnOrderNr.AllowDBNull = false;
        this.columnOrderNr.MaxLength = 50;
        this.columnEquipmentID.AllowDBNull = false;
        this.columnPPSArtikelNr.MaxLength = 50;
        this.columnTypeName.MaxLength = 50;
        this.columnOrderInfo.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow NewZrOrderRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ZrOrderRowChanged == null)
          return;
        this.ZrOrderRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ZrOrderRowChanging == null)
          return;
        this.ZrOrderRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ZrOrderRowDeleted == null)
          return;
        this.ZrOrderRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ZrOrderRowDeleting == null)
          return;
        this.ZrOrderRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveZrOrderRow(ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ZrOrderDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ZRParameterDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow>
    {
      private DataColumn columnFunctionNumber;
      private DataColumn columnParameterName;
      private DataColumn columnNameTranslated;
      private DataColumn columnParameterInfo;
      private DataColumn columnParameterSize;
      private DataColumn columnParameterType;
      private DataColumn columnDefaultValueHigh;
      private DataColumn columnDefaultValueLow;
      private DataColumn columnMinValueHigh;
      private DataColumn columnMinValueLow;
      private DataColumn columnMaxValueHigh;
      private DataColumn columnMaxValueLow;
      private DataColumn columnMemoryType;
      private DataColumn columnAccessrights;
      private DataColumn columnUnit;
      private DataColumn columnFileName;
      private DataColumn columnByteArray;
      private DataColumn columnMBusDifVifValue;
      private DataColumn columnMBusShortProt;
      private DataColumn columnMBusLongProt;
      private DataColumn columnMBusParamLen;
      private DataColumn columnMBusParamConvert;
      private DataColumn columnMBusEnable;
      private DataColumn columnLoggerID;
      private DataColumn columnStructureNr;
      private DataColumn columnStructureIndex;
      private DataColumn columnconfiginfo;
      private DataColumn columnMeterResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZRParameterDataTable()
      {
        this.TableName = "ZRParameter";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ZRParameterDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ZRParameterDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionNumberColumn => this.columnFunctionNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterNameColumn => this.columnParameterName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NameTranslatedColumn => this.columnNameTranslated;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterInfoColumn => this.columnParameterInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterSizeColumn => this.columnParameterSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterTypeColumn => this.columnParameterType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DefaultValueHighColumn => this.columnDefaultValueHigh;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DefaultValueLowColumn => this.columnDefaultValueLow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MinValueHighColumn => this.columnMinValueHigh;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MinValueLowColumn => this.columnMinValueLow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MaxValueHighColumn => this.columnMaxValueHigh;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MaxValueLowColumn => this.columnMaxValueLow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MemoryTypeColumn => this.columnMemoryType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AccessrightsColumn => this.columnAccessrights;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UnitColumn => this.columnUnit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FileNameColumn => this.columnFileName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ByteArrayColumn => this.columnByteArray;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusDifVifValueColumn => this.columnMBusDifVifValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusShortProtColumn => this.columnMBusShortProt;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusLongProtColumn => this.columnMBusLongProt;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusParamLenColumn => this.columnMBusParamLen;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusParamConvertColumn => this.columnMBusParamConvert;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusEnableColumn => this.columnMBusEnable;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LoggerIDColumn => this.columnLoggerID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StructureNrColumn => this.columnStructureNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StructureIndexColumn => this.columnStructureIndex;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn configinfoColumn => this.columnconfiginfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterResourceColumn => this.columnMeterResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRowChangeEventHandler ZRParameterRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRowChangeEventHandler ZRParameterRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRowChangeEventHandler ZRParameterRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRowChangeEventHandler ZRParameterRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddZRParameterRow(ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow AddZRParameterRow(
        ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow parentZRFunctionRowByFunctionParameter,
        string ParameterName,
        string NameTranslated,
        string ParameterInfo,
        int ParameterSize,
        byte ParameterType,
        int DefaultValueHigh,
        int DefaultValueLow,
        int MinValueHigh,
        int MinValueLow,
        int MaxValueHigh,
        int MaxValueLow,
        short MemoryType,
        string Accessrights,
        string Unit,
        string FileName,
        byte[] ByteArray,
        string MBusDifVifValue,
        byte MBusShortProt,
        byte MBusLongProt,
        byte MBusParamLen,
        string MBusParamConvert,
        byte MBusEnable,
        int LoggerID,
        short StructureNr,
        short StructureIndex,
        string configinfo,
        string MeterResource)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow row = (ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow) this.NewRow();
        object[] objArray = new object[28]
        {
          null,
          (object) ParameterName,
          (object) NameTranslated,
          (object) ParameterInfo,
          (object) ParameterSize,
          (object) ParameterType,
          (object) DefaultValueHigh,
          (object) DefaultValueLow,
          (object) MinValueHigh,
          (object) MinValueLow,
          (object) MaxValueHigh,
          (object) MaxValueLow,
          (object) MemoryType,
          (object) Accessrights,
          (object) Unit,
          (object) FileName,
          (object) ByteArray,
          (object) MBusDifVifValue,
          (object) MBusShortProt,
          (object) MBusLongProt,
          (object) MBusParamLen,
          (object) MBusParamConvert,
          (object) MBusEnable,
          (object) LoggerID,
          (object) StructureNr,
          (object) StructureIndex,
          (object) configinfo,
          (object) MeterResource
        };
        if (parentZRFunctionRowByFunctionParameter != null)
          objArray[0] = parentZRFunctionRowByFunctionParameter[0];
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow FindByFunctionNumberParameterName(
        int FunctionNumber,
        string ParameterName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow) this.Rows.Find(new object[2]
        {
          (object) FunctionNumber,
          (object) ParameterName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ZRParameterDataTable parameterDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ZRParameterDataTable) base.Clone();
        parameterDataTable.InitVars();
        return (DataTable) parameterDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRParameterDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnFunctionNumber = this.Columns["FunctionNumber"];
        this.columnParameterName = this.Columns["ParameterName"];
        this.columnNameTranslated = this.Columns["NameTranslated"];
        this.columnParameterInfo = this.Columns["ParameterInfo"];
        this.columnParameterSize = this.Columns["ParameterSize"];
        this.columnParameterType = this.Columns["ParameterType"];
        this.columnDefaultValueHigh = this.Columns["DefaultValueHigh"];
        this.columnDefaultValueLow = this.Columns["DefaultValueLow"];
        this.columnMinValueHigh = this.Columns["MinValueHigh"];
        this.columnMinValueLow = this.Columns["MinValueLow"];
        this.columnMaxValueHigh = this.Columns["MaxValueHigh"];
        this.columnMaxValueLow = this.Columns["MaxValueLow"];
        this.columnMemoryType = this.Columns["MemoryType"];
        this.columnAccessrights = this.Columns["Accessrights"];
        this.columnUnit = this.Columns["Unit"];
        this.columnFileName = this.Columns["FileName"];
        this.columnByteArray = this.Columns["ByteArray"];
        this.columnMBusDifVifValue = this.Columns["MBusDifVifValue"];
        this.columnMBusShortProt = this.Columns["MBusShortProt"];
        this.columnMBusLongProt = this.Columns["MBusLongProt"];
        this.columnMBusParamLen = this.Columns["MBusParamLen"];
        this.columnMBusParamConvert = this.Columns["MBusParamConvert"];
        this.columnMBusEnable = this.Columns["MBusEnable"];
        this.columnLoggerID = this.Columns["LoggerID"];
        this.columnStructureNr = this.Columns["StructureNr"];
        this.columnStructureIndex = this.Columns["StructureIndex"];
        this.columnconfiginfo = this.Columns["configinfo"];
        this.columnMeterResource = this.Columns["MeterResource"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnFunctionNumber = new DataColumn("FunctionNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionNumber);
        this.columnParameterName = new DataColumn("ParameterName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterName);
        this.columnNameTranslated = new DataColumn("NameTranslated", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNameTranslated);
        this.columnParameterInfo = new DataColumn("ParameterInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterInfo);
        this.columnParameterSize = new DataColumn("ParameterSize", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterSize);
        this.columnParameterType = new DataColumn("ParameterType", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterType);
        this.columnDefaultValueHigh = new DataColumn("DefaultValueHigh", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDefaultValueHigh);
        this.columnDefaultValueLow = new DataColumn("DefaultValueLow", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDefaultValueLow);
        this.columnMinValueHigh = new DataColumn("MinValueHigh", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMinValueHigh);
        this.columnMinValueLow = new DataColumn("MinValueLow", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMinValueLow);
        this.columnMaxValueHigh = new DataColumn("MaxValueHigh", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMaxValueHigh);
        this.columnMaxValueLow = new DataColumn("MaxValueLow", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMaxValueLow);
        this.columnMemoryType = new DataColumn("MemoryType", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMemoryType);
        this.columnAccessrights = new DataColumn("Accessrights", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAccessrights);
        this.columnUnit = new DataColumn("Unit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUnit);
        this.columnFileName = new DataColumn("FileName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFileName);
        this.columnByteArray = new DataColumn("ByteArray", typeof (byte[]), (string) null, MappingType.Element);
        this.Columns.Add(this.columnByteArray);
        this.columnMBusDifVifValue = new DataColumn("MBusDifVifValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusDifVifValue);
        this.columnMBusShortProt = new DataColumn("MBusShortProt", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusShortProt);
        this.columnMBusLongProt = new DataColumn("MBusLongProt", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusLongProt);
        this.columnMBusParamLen = new DataColumn("MBusParamLen", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusParamLen);
        this.columnMBusParamConvert = new DataColumn("MBusParamConvert", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusParamConvert);
        this.columnMBusEnable = new DataColumn("MBusEnable", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusEnable);
        this.columnLoggerID = new DataColumn("LoggerID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLoggerID);
        this.columnStructureNr = new DataColumn("StructureNr", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStructureNr);
        this.columnStructureIndex = new DataColumn("StructureIndex", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStructureIndex);
        this.columnconfiginfo = new DataColumn("configinfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnconfiginfo);
        this.columnMeterResource = new DataColumn("MeterResource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterResource);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnFunctionNumber,
          this.columnParameterName
        }, true));
        this.columnFunctionNumber.AllowDBNull = false;
        this.columnParameterName.AllowDBNull = false;
        this.columnParameterName.MaxLength = 50;
        this.columnNameTranslated.MaxLength = 50;
        this.columnParameterInfo.MaxLength = 536870910;
        this.columnAccessrights.MaxLength = 100;
        this.columnUnit.MaxLength = 50;
        this.columnFileName.MaxLength = (int) byte.MaxValue;
        this.columnMBusDifVifValue.MaxLength = 120;
        this.columnMBusParamConvert.MaxLength = 250;
        this.columnconfiginfo.MaxLength = 250;
        this.columnMeterResource.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow NewZRParameterRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ZRParameterRowChanged == null)
          return;
        this.ZRParameterRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ZRParameterRowChanging == null)
          return;
        this.ZRParameterRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ZRParameterRowDeleted == null)
          return;
        this.ZRParameterRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ZRParameterRowDeleting == null)
          return;
        this.ZRParameterRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveZRParameterRow(ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ZRParameterDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ZRTableNamesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow>
    {
      private DataColumn columnTableName;
      private DataColumn columnTableID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZRTableNamesDataTable()
      {
        this.TableName = "ZRTableNames";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ZRTableNamesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ZRTableNamesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TableNameColumn => this.columnTableName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TableIDColumn => this.columnTableID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRowChangeEventHandler ZRTableNamesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRowChangeEventHandler ZRTableNamesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRowChangeEventHandler ZRTableNamesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRowChangeEventHandler ZRTableNamesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddZRTableNamesRow(ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow AddZRTableNamesRow(
        string TableName,
        short TableID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow row = (ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) TableName,
          (object) TableID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow FindByTableNameTableID(
        string TableName,
        short TableID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow) this.Rows.Find(new object[2]
        {
          (object) TableName,
          (object) TableID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesDataTable tableNamesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesDataTable) base.Clone();
        tableNamesDataTable.InitVars();
        return (DataTable) tableNamesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTableName = this.Columns["TableName"];
        this.columnTableID = this.Columns["TableID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTableName = new DataColumn("TableName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTableName);
        this.columnTableID = new DataColumn("TableID", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTableID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnTableName,
          this.columnTableID
        }, true));
        this.columnTableName.AllowDBNull = false;
        this.columnTableName.MaxLength = 50;
        this.columnTableID.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow NewZRTableNamesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ZRTableNamesRowChanged == null)
          return;
        this.ZRTableNamesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ZRTableNamesRowChanging == null)
          return;
        this.ZRTableNamesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ZRTableNamesRowDeleted == null)
          return;
        this.ZRTableNamesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ZRTableNamesRowDeleting == null)
          return;
        this.ZRTableNamesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveZRTableNamesRow(ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ZRTableNamesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class NodeLayersDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow>
    {
      private DataColumn columnLayerID;
      private DataColumn columnName;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public NodeLayersDataTable()
      {
        this.TableName = "NodeLayers";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal NodeLayersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected NodeLayersDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LayerIDColumn => this.columnLayerID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NameColumn => this.columnName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRowChangeEventHandler NodeLayersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRowChangeEventHandler NodeLayersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRowChangeEventHandler NodeLayersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRowChangeEventHandler NodeLayersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddNodeLayersRow(ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow AddNodeLayersRow(
        int LayerID,
        string Name,
        string Description)
      {
        ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow row = (ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) LayerID,
          (object) Name,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow FindByLayerID(int LayerID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow) this.Rows.Find(new object[1]
        {
          (object) LayerID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.NodeLayersDataTable nodeLayersDataTable = (ZR_ClassLibrary.Schema_Access.Schema.NodeLayersDataTable) base.Clone();
        nodeLayersDataTable.InitVars();
        return (DataTable) nodeLayersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.NodeLayersDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnLayerID = this.Columns["LayerID"];
        this.columnName = this.Columns["Name"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnLayerID = new DataColumn("LayerID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLayerID);
        this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnName);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnLayerID
        }, true));
        this.columnLayerID.AllowDBNull = false;
        this.columnLayerID.Unique = true;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow NewNodeLayersRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.NodeLayersRowChanged == null)
          return;
        this.NodeLayersRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.NodeLayersRowChanging == null)
          return;
        this.NodeLayersRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.NodeLayersRowDeleted == null)
          return;
        this.NodeLayersRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.NodeLayersRowDeleting == null)
          return;
        this.NodeLayersRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveNodeLayersRow(ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (NodeLayersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ExternalUserTableDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow>
    {
      private DataColumn columnEquipmentID;
      private DataColumn columnTesterName;
      private DataColumn columnUserPersonalNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ExternalUserTableDataTable()
      {
        this.TableName = "ExternalUserTable";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ExternalUserTableDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ExternalUserTableDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TesterNameColumn => this.columnTesterName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserPersonalNumberColumn => this.columnUserPersonalNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRowChangeEventHandler ExternalUserTableRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRowChangeEventHandler ExternalUserTableRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRowChangeEventHandler ExternalUserTableRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRowChangeEventHandler ExternalUserTableRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddExternalUserTableRow(ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow AddExternalUserTableRow(
        int EquipmentID,
        string TesterName,
        int UserPersonalNumber)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow row = (ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) EquipmentID,
          (object) TesterName,
          (object) UserPersonalNumber
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow FindByEquipmentIDTesterName(
        int EquipmentID,
        string TesterName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow) this.Rows.Find(new object[2]
        {
          (object) EquipmentID,
          (object) TesterName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableDataTable userTableDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableDataTable) base.Clone();
        userTableDataTable.InitVars();
        return (DataTable) userTableDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnTesterName = this.Columns["TesterName"];
        this.columnUserPersonalNumber = this.Columns["UserPersonalNumber"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnTesterName = new DataColumn("TesterName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTesterName);
        this.columnUserPersonalNumber = new DataColumn("UserPersonalNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserPersonalNumber);
        this.Constraints.Add((Constraint) new UniqueConstraint("ExternalUserTableKey1", new DataColumn[2]
        {
          this.columnEquipmentID,
          this.columnTesterName
        }, true));
        this.columnEquipmentID.AllowDBNull = false;
        this.columnTesterName.AllowDBNull = false;
        this.columnTesterName.MaxLength = 50;
        this.columnUserPersonalNumber.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow NewExternalUserTableRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ExternalUserTableRowChanged == null)
          return;
        this.ExternalUserTableRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ExternalUserTableRowChanging == null)
          return;
        this.ExternalUserTableRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ExternalUserTableRowDeleted == null)
          return;
        this.ExternalUserTableRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ExternalUserTableRowDeleting == null)
          return;
        this.ExternalUserTableRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveExternalUserTableRow(ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ExternalUserTableDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DocumentGroupsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow>
    {
      private DataColumn columnDocumentGroupID;
      private DataColumn columnDocumentGroupName;
      private DataColumn columnDocumentGroupDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DocumentGroupsDataTable()
      {
        this.TableName = "DocumentGroups";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DocumentGroupsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected DocumentGroupsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DocumentGroupIDColumn => this.columnDocumentGroupID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DocumentGroupNameColumn => this.columnDocumentGroupName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DocumentGroupDescriptionColumn => this.columnDocumentGroupDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRowChangeEventHandler DocumentGroupsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRowChangeEventHandler DocumentGroupsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRowChangeEventHandler DocumentGroupsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRowChangeEventHandler DocumentGroupsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddDocumentGroupsRow(ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow AddDocumentGroupsRow(
        int DocumentGroupID,
        string DocumentGroupName,
        string DocumentGroupDescription)
      {
        ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow row = (ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) DocumentGroupID,
          (object) DocumentGroupName,
          (object) DocumentGroupDescription
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow FindByDocumentGroupID(
        int DocumentGroupID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow) this.Rows.Find(new object[1]
        {
          (object) DocumentGroupID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsDataTable documentGroupsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsDataTable) base.Clone();
        documentGroupsDataTable.InitVars();
        return (DataTable) documentGroupsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnDocumentGroupID = this.Columns["DocumentGroupID"];
        this.columnDocumentGroupName = this.Columns["DocumentGroupName"];
        this.columnDocumentGroupDescription = this.Columns["DocumentGroupDescription"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnDocumentGroupID = new DataColumn("DocumentGroupID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDocumentGroupID);
        this.columnDocumentGroupName = new DataColumn("DocumentGroupName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDocumentGroupName);
        this.columnDocumentGroupDescription = new DataColumn("DocumentGroupDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDocumentGroupDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnDocumentGroupID
        }, true));
        this.columnDocumentGroupID.AllowDBNull = false;
        this.columnDocumentGroupID.Unique = true;
        this.columnDocumentGroupName.MaxLength = (int) byte.MaxValue;
        this.columnDocumentGroupDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow NewDocumentGroupsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DocumentGroupsRowChanged == null)
          return;
        this.DocumentGroupsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DocumentGroupsRowChanging == null)
          return;
        this.DocumentGroupsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DocumentGroupsRowDeleted == null)
          return;
        this.DocumentGroupsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DocumentGroupsRowDeleting == null)
          return;
        this.DocumentGroupsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveDocumentGroupsRow(ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DocumentGroupsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DocumentsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow>
    {
      private DataColumn columnDocumentID;
      private DataColumn columnDocumentName;
      private DataColumn columnDocumentGroupID;
      private DataColumn columnDocumentDescription;
      private DataColumn columnDocument;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DocumentsDataTable()
      {
        this.TableName = "Documents";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DocumentsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected DocumentsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DocumentIDColumn => this.columnDocumentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DocumentNameColumn => this.columnDocumentName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DocumentGroupIDColumn => this.columnDocumentGroupID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DocumentDescriptionColumn => this.columnDocumentDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DocumentColumn => this.columnDocument;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DocumentsRowChangeEventHandler DocumentsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DocumentsRowChangeEventHandler DocumentsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DocumentsRowChangeEventHandler DocumentsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DocumentsRowChangeEventHandler DocumentsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddDocumentsRow(ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow AddDocumentsRow(
        int DocumentID,
        string DocumentName,
        int DocumentGroupID,
        string DocumentDescription,
        string Document)
      {
        ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow row = (ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) DocumentID,
          (object) DocumentName,
          (object) DocumentGroupID,
          (object) DocumentDescription,
          (object) Document
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow FindByDocumentID(int DocumentID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow) this.Rows.Find(new object[1]
        {
          (object) DocumentID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.DocumentsDataTable documentsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.DocumentsDataTable) base.Clone();
        documentsDataTable.InitVars();
        return (DataTable) documentsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DocumentsDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnDocumentID = this.Columns["DocumentID"];
        this.columnDocumentName = this.Columns["DocumentName"];
        this.columnDocumentGroupID = this.Columns["DocumentGroupID"];
        this.columnDocumentDescription = this.Columns["DocumentDescription"];
        this.columnDocument = this.Columns["Document"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnDocumentID = new DataColumn("DocumentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDocumentID);
        this.columnDocumentName = new DataColumn("DocumentName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDocumentName);
        this.columnDocumentGroupID = new DataColumn("DocumentGroupID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDocumentGroupID);
        this.columnDocumentDescription = new DataColumn("DocumentDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDocumentDescription);
        this.columnDocument = new DataColumn("Document", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDocument);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnDocumentID
        }, true));
        this.columnDocumentID.AllowDBNull = false;
        this.columnDocumentID.Unique = true;
        this.columnDocumentName.MaxLength = (int) byte.MaxValue;
        this.columnDocumentDescription.MaxLength = (int) byte.MaxValue;
        this.columnDocument.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow NewDocumentsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DocumentsRowChanged == null)
          return;
        this.DocumentsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DocumentsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DocumentsRowChanging == null)
          return;
        this.DocumentsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DocumentsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DocumentsRowDeleted == null)
          return;
        this.DocumentsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DocumentsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DocumentsRowDeleting == null)
          return;
        this.DocumentsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DocumentsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveDocumentsRow(ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DocumentsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ErrorDescriptionDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow>
    {
      private DataColumn columnErrorNumber;
      private DataColumn columnErrorClass;
      private DataColumn columnDescription;
      private DataColumn columnDocumentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ErrorDescriptionDataTable()
      {
        this.TableName = "ErrorDescription";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ErrorDescriptionDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ErrorDescriptionDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorNumberColumn => this.columnErrorNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorClassColumn => this.columnErrorClass;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DocumentIDColumn => this.columnDocumentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRowChangeEventHandler ErrorDescriptionRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRowChangeEventHandler ErrorDescriptionRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRowChangeEventHandler ErrorDescriptionRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRowChangeEventHandler ErrorDescriptionRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddErrorDescriptionRow(ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow AddErrorDescriptionRow(
        int ErrorNumber,
        int ErrorClass,
        string Description,
        int DocumentID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow row = (ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) ErrorNumber,
          (object) ErrorClass,
          (object) Description,
          (object) DocumentID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow FindByErrorNumber(
        int ErrorNumber)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow) this.Rows.Find(new object[1]
        {
          (object) ErrorNumber
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionDataTable descriptionDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionDataTable) base.Clone();
        descriptionDataTable.InitVars();
        return (DataTable) descriptionDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnErrorNumber = this.Columns["ErrorNumber"];
        this.columnErrorClass = this.Columns["ErrorClass"];
        this.columnDescription = this.Columns["Description"];
        this.columnDocumentID = this.Columns["DocumentID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnErrorNumber = new DataColumn("ErrorNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorNumber);
        this.columnErrorClass = new DataColumn("ErrorClass", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorClass);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnDocumentID = new DataColumn("DocumentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDocumentID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnErrorNumber
        }, true));
        this.columnErrorNumber.AllowDBNull = false;
        this.columnErrorNumber.Unique = true;
        this.columnDescription.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow NewErrorDescriptionRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ErrorDescriptionRowChanged == null)
          return;
        this.ErrorDescriptionRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ErrorDescriptionRowChanging == null)
          return;
        this.ErrorDescriptionRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ErrorDescriptionRowDeleted == null)
          return;
        this.ErrorDescriptionRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ErrorDescriptionRowDeleting == null)
          return;
        this.ErrorDescriptionRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveErrorDescriptionRow(ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ErrorDescriptionDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MultidataCacheDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow>
    {
      private DataColumn columnALTARTNR;
      private DataColumn columnMNR;
      private DataColumn columnKTXT;
      private DataColumn columnGRP;
      private DataColumn columnKM01;
      private DataColumn columnATTRIB01;
      private DataColumn columnATTRIB02;
      private DataColumn columnATTRIB03;
      private DataColumn columnATTRIB04;
      private DataColumn columnATTRIB05;
      private DataColumn columnATTRIB06;
      private DataColumn columnATTRIB07;
      private DataColumn columnATTRIB08;
      private DataColumn columnATTRIB09;
      private DataColumn columnATTRIB10;
      private DataColumn columnATTRIB11;
      private DataColumn columnATTRIB12;
      private DataColumn columnATTRIB13;
      private DataColumn columnATTRIB14;
      private DataColumn columnATTRIB15;
      private DataColumn columnATTRIB16;
      private DataColumn columnATTRIB17;
      private DataColumn columnATTRIB18;
      private DataColumn columnATTRIB19;
      private DataColumn columnATTRIB20;
      private DataColumn columnUSItemText2;
      private DataColumn columnADDNAME2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MultidataCacheDataTable()
      {
        this.TableName = "MultidataCache";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MultidataCacheDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MultidataCacheDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ALTARTNRColumn => this.columnALTARTNR;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MNRColumn => this.columnMNR;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn KTXTColumn => this.columnKTXT;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GRPColumn => this.columnGRP;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn KM01Column => this.columnKM01;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB01Column => this.columnATTRIB01;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB02Column => this.columnATTRIB02;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB03Column => this.columnATTRIB03;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB04Column => this.columnATTRIB04;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB05Column => this.columnATTRIB05;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB06Column => this.columnATTRIB06;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB07Column => this.columnATTRIB07;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB08Column => this.columnATTRIB08;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB09Column => this.columnATTRIB09;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB10Column => this.columnATTRIB10;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB11Column => this.columnATTRIB11;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB12Column => this.columnATTRIB12;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB13Column => this.columnATTRIB13;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB14Column => this.columnATTRIB14;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB15Column => this.columnATTRIB15;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB16Column => this.columnATTRIB16;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB17Column => this.columnATTRIB17;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB18Column => this.columnATTRIB18;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB19Column => this.columnATTRIB19;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ATTRIB20Column => this.columnATTRIB20;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn USItemText2Column => this.columnUSItemText2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ADDNAME2Column => this.columnADDNAME2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRowChangeEventHandler MultidataCacheRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRowChangeEventHandler MultidataCacheRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRowChangeEventHandler MultidataCacheRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRowChangeEventHandler MultidataCacheRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMultidataCacheRow(ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow AddMultidataCacheRow(
        string ALTARTNR,
        string MNR,
        string KTXT,
        string GRP,
        byte KM01,
        string ATTRIB01,
        string ATTRIB02,
        string ATTRIB03,
        string ATTRIB04,
        string ATTRIB05,
        string ATTRIB06,
        string ATTRIB07,
        string ATTRIB08,
        string ATTRIB09,
        string ATTRIB10,
        string ATTRIB11,
        string ATTRIB12,
        string ATTRIB13,
        string ATTRIB14,
        string ATTRIB15,
        string ATTRIB16,
        string ATTRIB17,
        string ATTRIB18,
        string ATTRIB19,
        string ATTRIB20,
        string USItemText2,
        string ADDNAME2)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow row = (ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow) this.NewRow();
        object[] objArray = new object[27]
        {
          (object) ALTARTNR,
          (object) MNR,
          (object) KTXT,
          (object) GRP,
          (object) KM01,
          (object) ATTRIB01,
          (object) ATTRIB02,
          (object) ATTRIB03,
          (object) ATTRIB04,
          (object) ATTRIB05,
          (object) ATTRIB06,
          (object) ATTRIB07,
          (object) ATTRIB08,
          (object) ATTRIB09,
          (object) ATTRIB10,
          (object) ATTRIB11,
          (object) ATTRIB12,
          (object) ATTRIB13,
          (object) ATTRIB14,
          (object) ATTRIB15,
          (object) ATTRIB16,
          (object) ATTRIB17,
          (object) ATTRIB18,
          (object) ATTRIB19,
          (object) ATTRIB20,
          (object) USItemText2,
          (object) ADDNAME2
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow FindByALTARTNR(string ALTARTNR)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow) this.Rows.Find(new object[1]
        {
          (object) ALTARTNR
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheDataTable multidataCacheDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheDataTable) base.Clone();
        multidataCacheDataTable.InitVars();
        return (DataTable) multidataCacheDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnALTARTNR = this.Columns["ALTARTNR"];
        this.columnMNR = this.Columns["MNR"];
        this.columnKTXT = this.Columns["KTXT"];
        this.columnGRP = this.Columns["GRP"];
        this.columnKM01 = this.Columns["KM01"];
        this.columnATTRIB01 = this.Columns["ATTRIB01"];
        this.columnATTRIB02 = this.Columns["ATTRIB02"];
        this.columnATTRIB03 = this.Columns["ATTRIB03"];
        this.columnATTRIB04 = this.Columns["ATTRIB04"];
        this.columnATTRIB05 = this.Columns["ATTRIB05"];
        this.columnATTRIB06 = this.Columns["ATTRIB06"];
        this.columnATTRIB07 = this.Columns["ATTRIB07"];
        this.columnATTRIB08 = this.Columns["ATTRIB08"];
        this.columnATTRIB09 = this.Columns["ATTRIB09"];
        this.columnATTRIB10 = this.Columns["ATTRIB10"];
        this.columnATTRIB11 = this.Columns["ATTRIB11"];
        this.columnATTRIB12 = this.Columns["ATTRIB12"];
        this.columnATTRIB13 = this.Columns["ATTRIB13"];
        this.columnATTRIB14 = this.Columns["ATTRIB14"];
        this.columnATTRIB15 = this.Columns["ATTRIB15"];
        this.columnATTRIB16 = this.Columns["ATTRIB16"];
        this.columnATTRIB17 = this.Columns["ATTRIB17"];
        this.columnATTRIB18 = this.Columns["ATTRIB18"];
        this.columnATTRIB19 = this.Columns["ATTRIB19"];
        this.columnATTRIB20 = this.Columns["ATTRIB20"];
        this.columnUSItemText2 = this.Columns["USItemText2"];
        this.columnADDNAME2 = this.Columns["ADDNAME2"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnALTARTNR = new DataColumn("ALTARTNR", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnALTARTNR);
        this.columnMNR = new DataColumn("MNR", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMNR);
        this.columnKTXT = new DataColumn("KTXT", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKTXT);
        this.columnGRP = new DataColumn("GRP", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGRP);
        this.columnKM01 = new DataColumn("KM01", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKM01);
        this.columnATTRIB01 = new DataColumn("ATTRIB01", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB01);
        this.columnATTRIB02 = new DataColumn("ATTRIB02", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB02);
        this.columnATTRIB03 = new DataColumn("ATTRIB03", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB03);
        this.columnATTRIB04 = new DataColumn("ATTRIB04", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB04);
        this.columnATTRIB05 = new DataColumn("ATTRIB05", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB05);
        this.columnATTRIB06 = new DataColumn("ATTRIB06", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB06);
        this.columnATTRIB07 = new DataColumn("ATTRIB07", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB07);
        this.columnATTRIB08 = new DataColumn("ATTRIB08", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB08);
        this.columnATTRIB09 = new DataColumn("ATTRIB09", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB09);
        this.columnATTRIB10 = new DataColumn("ATTRIB10", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB10);
        this.columnATTRIB11 = new DataColumn("ATTRIB11", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB11);
        this.columnATTRIB12 = new DataColumn("ATTRIB12", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB12);
        this.columnATTRIB13 = new DataColumn("ATTRIB13", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB13);
        this.columnATTRIB14 = new DataColumn("ATTRIB14", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB14);
        this.columnATTRIB15 = new DataColumn("ATTRIB15", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB15);
        this.columnATTRIB16 = new DataColumn("ATTRIB16", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB16);
        this.columnATTRIB17 = new DataColumn("ATTRIB17", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB17);
        this.columnATTRIB18 = new DataColumn("ATTRIB18", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB18);
        this.columnATTRIB19 = new DataColumn("ATTRIB19", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB19);
        this.columnATTRIB20 = new DataColumn("ATTRIB20", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnATTRIB20);
        this.columnUSItemText2 = new DataColumn("USItemText2", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUSItemText2);
        this.columnADDNAME2 = new DataColumn("ADDNAME2", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnADDNAME2);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnALTARTNR
        }, true));
        this.columnALTARTNR.AllowDBNull = false;
        this.columnALTARTNR.Unique = true;
        this.columnALTARTNR.MaxLength = 8;
        this.columnMNR.MaxLength = 20;
        this.columnKTXT.MaxLength = 50;
        this.columnGRP.MaxLength = 20;
        this.columnATTRIB01.MaxLength = 20;
        this.columnATTRIB02.MaxLength = 20;
        this.columnATTRIB03.MaxLength = 20;
        this.columnATTRIB04.MaxLength = 20;
        this.columnATTRIB05.MaxLength = 20;
        this.columnATTRIB06.MaxLength = 20;
        this.columnATTRIB07.MaxLength = 20;
        this.columnATTRIB08.MaxLength = 20;
        this.columnATTRIB09.MaxLength = 20;
        this.columnATTRIB10.MaxLength = 20;
        this.columnATTRIB11.MaxLength = 20;
        this.columnATTRIB12.MaxLength = 20;
        this.columnATTRIB13.MaxLength = 20;
        this.columnATTRIB14.MaxLength = 20;
        this.columnATTRIB15.MaxLength = 20;
        this.columnATTRIB16.MaxLength = 20;
        this.columnATTRIB17.MaxLength = 20;
        this.columnATTRIB18.MaxLength = 20;
        this.columnATTRIB19.MaxLength = 20;
        this.columnATTRIB20.MaxLength = 20;
        this.columnUSItemText2.MaxLength = (int) byte.MaxValue;
        this.columnADDNAME2.MaxLength = 20;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow NewMultidataCacheRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MultidataCacheRowChanged == null)
          return;
        this.MultidataCacheRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MultidataCacheRowChanging == null)
          return;
        this.MultidataCacheRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MultidataCacheRowDeleted == null)
          return;
        this.MultidataCacheRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MultidataCacheRowDeleting == null)
          return;
        this.MultidataCacheRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMultidataCacheRow(ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MultidataCacheDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class WaveFlowDeviceModelsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow>
    {
      private DataColumn columnWaveFlowDeviceModel;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WaveFlowDeviceModelsDataTable()
      {
        this.TableName = "WaveFlowDeviceModels";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WaveFlowDeviceModelsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected WaveFlowDeviceModelsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WaveFlowDeviceModelColumn => this.columnWaveFlowDeviceModel;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRowChangeEventHandler WaveFlowDeviceModelsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRowChangeEventHandler WaveFlowDeviceModelsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRowChangeEventHandler WaveFlowDeviceModelsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRowChangeEventHandler WaveFlowDeviceModelsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddWaveFlowDeviceModelsRow(ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow AddWaveFlowDeviceModelsRow(
        string WaveFlowDeviceModel)
      {
        ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow row = (ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow) this.NewRow();
        object[] objArray = new object[1]
        {
          (object) WaveFlowDeviceModel
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow FindByWaveFlowDeviceModel(
        string WaveFlowDeviceModel)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow) this.Rows.Find(new object[1]
        {
          (object) WaveFlowDeviceModel
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsDataTable deviceModelsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsDataTable) base.Clone();
        deviceModelsDataTable.InitVars();
        return (DataTable) deviceModelsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnWaveFlowDeviceModel = this.Columns["WaveFlowDeviceModel"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnWaveFlowDeviceModel = new DataColumn("WaveFlowDeviceModel", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWaveFlowDeviceModel);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnWaveFlowDeviceModel
        }, true));
        this.columnWaveFlowDeviceModel.AllowDBNull = false;
        this.columnWaveFlowDeviceModel.Unique = true;
        this.columnWaveFlowDeviceModel.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow NewWaveFlowDeviceModelsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.WaveFlowDeviceModelsRowChanged == null)
          return;
        this.WaveFlowDeviceModelsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.WaveFlowDeviceModelsRowChanging == null)
          return;
        this.WaveFlowDeviceModelsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.WaveFlowDeviceModelsRowDeleted == null)
          return;
        this.WaveFlowDeviceModelsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.WaveFlowDeviceModelsRowDeleting == null)
          return;
        this.WaveFlowDeviceModelsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveWaveFlowDeviceModelsRow(ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (WaveFlowDeviceModelsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MinolDeviceDataReadDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow>
    {
      private DataColumn columnMapID;
      private DataColumn columnRangeName;
      private DataColumn columnIndex;
      private DataColumn columnName;
      private DataColumn columnType;
      private DataColumn columnLength;
      private DataColumn columnAddress;
      private DataColumn columnBit;
      private DataColumn columnBitMask;
      private DataColumn columnParent;
      private DataColumn columnDescription;
      private DataColumn columnInfo;
      private DataColumn columnInfoBit0;
      private DataColumn columnInfoBit1;
      private DataColumn columnDateStamp;
      private DataColumn columnDateReference;
      private DataColumn columnRD_Data;
      private DataColumn columnRD_Value;
      private DataColumn columnWR_Data;
      private DataColumn columnWR_Value;
      private DataColumn columnRD_Factor;
      private DataColumn columnRD_Divisor;
      private DataColumn columnRD_Format;
      private DataColumn columnRD_Unit;
      private DataColumn columnRD_Type;
      private DataColumn columnRD_Data_Default;
      private DataColumn columnRD_Value_Default;
      private DataColumn columnWR_Data_Default;
      private DataColumn columnWR_Value_Default;
      private DataColumn columnChecked;
      private DataColumn columnCheckedTmp;
      private DataColumn columnCheckedSnd;
      private DataColumn columnVisible_RD;
      private DataColumn columnVisible_RD_All;
      private DataColumn columnVisible_RD_User;
      private DataColumn columnVisible_WR;
      private DataColumn columnVisible_WR_All;
      private DataColumn columnVisible_WR_User;
      private DataColumn columnUseK;
      private DataColumn columnUseMulDiv;
      private DataColumn columnParamType;
      private DataColumn columnValueIdent;
      private DataColumn columnOverrideID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinolDeviceDataReadDataTable()
      {
        this.TableName = "MinolDeviceDataRead";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinolDeviceDataReadDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MinolDeviceDataReadDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RangeNameColumn => this.columnRangeName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn IndexColumn => this.columnIndex;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NameColumn => this.columnName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TypeColumn => this.columnType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LengthColumn => this.columnLength;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AddressColumn => this.columnAddress;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BitColumn => this.columnBit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BitMaskColumn => this.columnBitMask;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParentColumn => this.columnParent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InfoColumn => this.columnInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InfoBit0Column => this.columnInfoBit0;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InfoBit1Column => this.columnInfoBit1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DateStampColumn => this.columnDateStamp;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DateReferenceColumn => this.columnDateReference;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_DataColumn => this.columnRD_Data;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_ValueColumn => this.columnRD_Value;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WR_DataColumn => this.columnWR_Data;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WR_ValueColumn => this.columnWR_Value;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_FactorColumn => this.columnRD_Factor;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_DivisorColumn => this.columnRD_Divisor;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_FormatColumn => this.columnRD_Format;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_UnitColumn => this.columnRD_Unit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_TypeColumn => this.columnRD_Type;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_Data_DefaultColumn => this.columnRD_Data_Default;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_Value_DefaultColumn => this.columnRD_Value_Default;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WR_Data_DefaultColumn => this.columnWR_Data_Default;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WR_Value_DefaultColumn => this.columnWR_Value_Default;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CheckedColumn => this.columnChecked;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CheckedTmpColumn => this.columnCheckedTmp;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CheckedSndColumn => this.columnCheckedSnd;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Visible_RDColumn => this.columnVisible_RD;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Visible_RD_AllColumn => this.columnVisible_RD_All;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Visible_RD_UserColumn => this.columnVisible_RD_User;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Visible_WRColumn => this.columnVisible_WR;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Visible_WR_AllColumn => this.columnVisible_WR_All;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Visible_WR_UserColumn => this.columnVisible_WR_User;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UseKColumn => this.columnUseK;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UseMulDivColumn => this.columnUseMulDiv;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParamTypeColumn => this.columnParamType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueIdentColumn => this.columnValueIdent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn OverrideIDColumn => this.columnOverrideID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRowChangeEventHandler MinolDeviceDataReadRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRowChangeEventHandler MinolDeviceDataReadRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRowChangeEventHandler MinolDeviceDataReadRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRowChangeEventHandler MinolDeviceDataReadRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMinolDeviceDataReadRow(ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow AddMinolDeviceDataReadRow(
        int MapID,
        string RangeName,
        int Index,
        string Name,
        string Type,
        short Length,
        int Address,
        byte Bit,
        int BitMask,
        string Parent,
        string Description,
        string Info,
        string InfoBit0,
        string InfoBit1,
        string DateStamp,
        string DateReference,
        string RD_Data,
        string RD_Value,
        string WR_Data,
        string WR_Value,
        int RD_Factor,
        int RD_Divisor,
        string RD_Format,
        string RD_Unit,
        string RD_Type,
        string RD_Data_Default,
        string RD_Value_Default,
        string WR_Data_Default,
        string WR_Value_Default,
        bool Checked,
        bool CheckedTmp,
        bool CheckedSnd,
        bool Visible_RD,
        bool Visible_RD_All,
        bool Visible_RD_User,
        bool Visible_WR,
        bool Visible_WR_All,
        bool Visible_WR_User,
        bool UseK,
        bool UseMulDiv,
        string ParamType,
        long ValueIdent,
        int OverrideID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow row = (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow) this.NewRow();
        object[] objArray = new object[43]
        {
          (object) MapID,
          (object) RangeName,
          (object) Index,
          (object) Name,
          (object) Type,
          (object) Length,
          (object) Address,
          (object) Bit,
          (object) BitMask,
          (object) Parent,
          (object) Description,
          (object) Info,
          (object) InfoBit0,
          (object) InfoBit1,
          (object) DateStamp,
          (object) DateReference,
          (object) RD_Data,
          (object) RD_Value,
          (object) WR_Data,
          (object) WR_Value,
          (object) RD_Factor,
          (object) RD_Divisor,
          (object) RD_Format,
          (object) RD_Unit,
          (object) RD_Type,
          (object) RD_Data_Default,
          (object) RD_Value_Default,
          (object) WR_Data_Default,
          (object) WR_Value_Default,
          (object) Checked,
          (object) CheckedTmp,
          (object) CheckedSnd,
          (object) Visible_RD,
          (object) Visible_RD_All,
          (object) Visible_RD_User,
          (object) Visible_WR,
          (object) Visible_WR_All,
          (object) Visible_WR_User,
          (object) UseK,
          (object) UseMulDiv,
          (object) ParamType,
          (object) ValueIdent,
          (object) OverrideID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadDataTable dataReadDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadDataTable) base.Clone();
        dataReadDataTable.InitVars();
        return (DataTable) dataReadDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMapID = this.Columns["MapID"];
        this.columnRangeName = this.Columns["RangeName"];
        this.columnIndex = this.Columns["Index"];
        this.columnName = this.Columns["Name"];
        this.columnType = this.Columns["Type"];
        this.columnLength = this.Columns["Length"];
        this.columnAddress = this.Columns["Address"];
        this.columnBit = this.Columns["Bit"];
        this.columnBitMask = this.Columns["BitMask"];
        this.columnParent = this.Columns["Parent"];
        this.columnDescription = this.Columns["Description"];
        this.columnInfo = this.Columns["Info"];
        this.columnInfoBit0 = this.Columns["InfoBit0"];
        this.columnInfoBit1 = this.Columns["InfoBit1"];
        this.columnDateStamp = this.Columns["DateStamp"];
        this.columnDateReference = this.Columns["DateReference"];
        this.columnRD_Data = this.Columns["RD_Data"];
        this.columnRD_Value = this.Columns["RD_Value"];
        this.columnWR_Data = this.Columns["WR_Data"];
        this.columnWR_Value = this.Columns["WR_Value"];
        this.columnRD_Factor = this.Columns["RD_Factor"];
        this.columnRD_Divisor = this.Columns["RD_Divisor"];
        this.columnRD_Format = this.Columns["RD_Format"];
        this.columnRD_Unit = this.Columns["RD_Unit"];
        this.columnRD_Type = this.Columns["RD_Type"];
        this.columnRD_Data_Default = this.Columns["RD_Data_Default"];
        this.columnRD_Value_Default = this.Columns["RD_Value_Default"];
        this.columnWR_Data_Default = this.Columns["WR_Data_Default"];
        this.columnWR_Value_Default = this.Columns["WR_Value_Default"];
        this.columnChecked = this.Columns["Checked"];
        this.columnCheckedTmp = this.Columns["CheckedTmp"];
        this.columnCheckedSnd = this.Columns["CheckedSnd"];
        this.columnVisible_RD = this.Columns["Visible_RD"];
        this.columnVisible_RD_All = this.Columns["Visible_RD_All"];
        this.columnVisible_RD_User = this.Columns["Visible_RD_User"];
        this.columnVisible_WR = this.Columns["Visible_WR"];
        this.columnVisible_WR_All = this.Columns["Visible_WR_All"];
        this.columnVisible_WR_User = this.Columns["Visible_WR_User"];
        this.columnUseK = this.Columns["UseK"];
        this.columnUseMulDiv = this.Columns["UseMulDiv"];
        this.columnParamType = this.Columns["ParamType"];
        this.columnValueIdent = this.Columns["ValueIdent"];
        this.columnOverrideID = this.Columns["OverrideID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnRangeName = new DataColumn("RangeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRangeName);
        this.columnIndex = new DataColumn("Index", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIndex);
        this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnName);
        this.columnType = new DataColumn("Type", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnType);
        this.columnLength = new DataColumn("Length", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLength);
        this.columnAddress = new DataColumn("Address", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAddress);
        this.columnBit = new DataColumn("Bit", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBit);
        this.columnBitMask = new DataColumn("BitMask", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBitMask);
        this.columnParent = new DataColumn("Parent", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParent);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnInfo = new DataColumn("Info", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInfo);
        this.columnInfoBit0 = new DataColumn("InfoBit0", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInfoBit0);
        this.columnInfoBit1 = new DataColumn("InfoBit1", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInfoBit1);
        this.columnDateStamp = new DataColumn("DateStamp", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDateStamp);
        this.columnDateReference = new DataColumn("DateReference", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDateReference);
        this.columnRD_Data = new DataColumn("RD_Data", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Data);
        this.columnRD_Value = new DataColumn("RD_Value", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Value);
        this.columnWR_Data = new DataColumn("WR_Data", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWR_Data);
        this.columnWR_Value = new DataColumn("WR_Value", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWR_Value);
        this.columnRD_Factor = new DataColumn("RD_Factor", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Factor);
        this.columnRD_Divisor = new DataColumn("RD_Divisor", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Divisor);
        this.columnRD_Format = new DataColumn("RD_Format", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Format);
        this.columnRD_Unit = new DataColumn("RD_Unit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Unit);
        this.columnRD_Type = new DataColumn("RD_Type", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Type);
        this.columnRD_Data_Default = new DataColumn("RD_Data_Default", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Data_Default);
        this.columnRD_Value_Default = new DataColumn("RD_Value_Default", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Value_Default);
        this.columnWR_Data_Default = new DataColumn("WR_Data_Default", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWR_Data_Default);
        this.columnWR_Value_Default = new DataColumn("WR_Value_Default", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWR_Value_Default);
        this.columnChecked = new DataColumn("Checked", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChecked);
        this.columnCheckedTmp = new DataColumn("CheckedTmp", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckedTmp);
        this.columnCheckedSnd = new DataColumn("CheckedSnd", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckedSnd);
        this.columnVisible_RD = new DataColumn("Visible_RD", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVisible_RD);
        this.columnVisible_RD_All = new DataColumn("Visible_RD_All", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVisible_RD_All);
        this.columnVisible_RD_User = new DataColumn("Visible_RD_User", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVisible_RD_User);
        this.columnVisible_WR = new DataColumn("Visible_WR", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVisible_WR);
        this.columnVisible_WR_All = new DataColumn("Visible_WR_All", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVisible_WR_All);
        this.columnVisible_WR_User = new DataColumn("Visible_WR_User", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVisible_WR_User);
        this.columnUseK = new DataColumn("UseK", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUseK);
        this.columnUseMulDiv = new DataColumn("UseMulDiv", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUseMulDiv);
        this.columnParamType = new DataColumn("ParamType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParamType);
        this.columnValueIdent = new DataColumn("ValueIdent", typeof (long), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValueIdent);
        this.columnOverrideID = new DataColumn("OverrideID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOverrideID);
        this.columnRangeName.MaxLength = 50;
        this.columnIndex.AllowDBNull = false;
        this.columnName.MaxLength = 64;
        this.columnType.MaxLength = 16;
        this.columnParent.MaxLength = 64;
        this.columnDescription.MaxLength = (int) byte.MaxValue;
        this.columnInfo.MaxLength = 536870910;
        this.columnInfoBit0.MaxLength = 128;
        this.columnInfoBit1.MaxLength = 128;
        this.columnDateStamp.MaxLength = 32;
        this.columnDateReference.MaxLength = 32;
        this.columnRD_Data.MaxLength = 64;
        this.columnRD_Value.MaxLength = 64;
        this.columnWR_Data.MaxLength = 64;
        this.columnWR_Value.MaxLength = 64;
        this.columnRD_Format.MaxLength = 64;
        this.columnRD_Unit.MaxLength = 16;
        this.columnRD_Type.MaxLength = 64;
        this.columnRD_Data_Default.MaxLength = 64;
        this.columnRD_Value_Default.MaxLength = 64;
        this.columnWR_Data_Default.MaxLength = 64;
        this.columnWR_Value_Default.MaxLength = 64;
        this.columnParamType.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow NewMinolDeviceDataReadRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MinolDeviceDataReadRowChanged == null)
          return;
        this.MinolDeviceDataReadRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MinolDeviceDataReadRowChanging == null)
          return;
        this.MinolDeviceDataReadRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MinolDeviceDataReadRowDeleted == null)
          return;
        this.MinolDeviceDataReadRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MinolDeviceDataReadRowDeleting == null)
          return;
        this.MinolDeviceDataReadRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMinolDeviceDataReadRow(ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MinolDeviceDataReadDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MinolDeviceDataDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow>
    {
      private DataColumn columnMapID;
      private DataColumn columnRangeName;
      private DataColumn columnIndex;
      private DataColumn columnName;
      private DataColumn columnType;
      private DataColumn columnLength;
      private DataColumn columnAddress;
      private DataColumn columnBit;
      private DataColumn columnBitMask;
      private DataColumn columnParent;
      private DataColumn columnDescription;
      private DataColumn columnInfo;
      private DataColumn columnInfoBit0;
      private DataColumn columnInfoBit1;
      private DataColumn columnDateStamp;
      private DataColumn columnDateReference;
      private DataColumn columnRD_Data;
      private DataColumn columnRD_Value;
      private DataColumn columnWR_Data;
      private DataColumn columnWR_Value;
      private DataColumn columnRD_Factor;
      private DataColumn columnRD_Divisor;
      private DataColumn columnRD_Format;
      private DataColumn columnRD_Unit;
      private DataColumn columnRD_Type;
      private DataColumn columnRD_Data_Default;
      private DataColumn columnRD_Value_Default;
      private DataColumn columnWR_Data_Default;
      private DataColumn columnWR_Value_Default;
      private DataColumn columnChecked;
      private DataColumn columnCheckedTmp;
      private DataColumn columnCheckedSnd;
      private DataColumn columnVisible_RD;
      private DataColumn columnVisible_RD_All;
      private DataColumn columnVisible_RD_User;
      private DataColumn columnVisible_WR;
      private DataColumn columnVisible_WR_All;
      private DataColumn columnVisible_WR_User;
      private DataColumn columnUseK;
      private DataColumn columnUseMulDiv;
      private DataColumn columnParamType;
      private DataColumn columnValueIdent;
      private DataColumn columnOverrideID;
      private DataColumn columnSignature;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinolDeviceDataDataTable()
      {
        this.TableName = "MinolDeviceData";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinolDeviceDataDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MinolDeviceDataDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RangeNameColumn => this.columnRangeName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn IndexColumn => this.columnIndex;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NameColumn => this.columnName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TypeColumn => this.columnType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LengthColumn => this.columnLength;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AddressColumn => this.columnAddress;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BitColumn => this.columnBit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BitMaskColumn => this.columnBitMask;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParentColumn => this.columnParent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InfoColumn => this.columnInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InfoBit0Column => this.columnInfoBit0;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InfoBit1Column => this.columnInfoBit1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DateStampColumn => this.columnDateStamp;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DateReferenceColumn => this.columnDateReference;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_DataColumn => this.columnRD_Data;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_ValueColumn => this.columnRD_Value;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WR_DataColumn => this.columnWR_Data;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WR_ValueColumn => this.columnWR_Value;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_FactorColumn => this.columnRD_Factor;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_DivisorColumn => this.columnRD_Divisor;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_FormatColumn => this.columnRD_Format;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_UnitColumn => this.columnRD_Unit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_TypeColumn => this.columnRD_Type;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_Data_DefaultColumn => this.columnRD_Data_Default;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RD_Value_DefaultColumn => this.columnRD_Value_Default;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WR_Data_DefaultColumn => this.columnWR_Data_Default;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn WR_Value_DefaultColumn => this.columnWR_Value_Default;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CheckedColumn => this.columnChecked;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CheckedTmpColumn => this.columnCheckedTmp;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CheckedSndColumn => this.columnCheckedSnd;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Visible_RDColumn => this.columnVisible_RD;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Visible_RD_AllColumn => this.columnVisible_RD_All;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Visible_RD_UserColumn => this.columnVisible_RD_User;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Visible_WRColumn => this.columnVisible_WR;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Visible_WR_AllColumn => this.columnVisible_WR_All;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Visible_WR_UserColumn => this.columnVisible_WR_User;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UseKColumn => this.columnUseK;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UseMulDivColumn => this.columnUseMulDiv;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParamTypeColumn => this.columnParamType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueIdentColumn => this.columnValueIdent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn OverrideIDColumn => this.columnOverrideID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SignatureColumn => this.columnSignature;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRowChangeEventHandler MinolDeviceDataRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRowChangeEventHandler MinolDeviceDataRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRowChangeEventHandler MinolDeviceDataRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRowChangeEventHandler MinolDeviceDataRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMinolDeviceDataRow(ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow AddMinolDeviceDataRow(
        int MapID,
        string RangeName,
        int Index,
        string Name,
        string Type,
        short Length,
        int Address,
        byte Bit,
        int BitMask,
        string Parent,
        string Description,
        string Info,
        string InfoBit0,
        string InfoBit1,
        string DateStamp,
        string DateReference,
        string RD_Data,
        string RD_Value,
        string WR_Data,
        string WR_Value,
        int RD_Factor,
        int RD_Divisor,
        string RD_Format,
        string RD_Unit,
        string RD_Type,
        string RD_Data_Default,
        string RD_Value_Default,
        string WR_Data_Default,
        string WR_Value_Default,
        bool Checked,
        bool CheckedTmp,
        bool CheckedSnd,
        bool Visible_RD,
        bool Visible_RD_All,
        bool Visible_RD_User,
        bool Visible_WR,
        bool Visible_WR_All,
        bool Visible_WR_User,
        bool UseK,
        bool UseMulDiv,
        string ParamType,
        int ValueIdent,
        int OverrideID,
        int Signature)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow row = (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow) this.NewRow();
        object[] objArray = new object[44]
        {
          (object) MapID,
          (object) RangeName,
          (object) Index,
          (object) Name,
          (object) Type,
          (object) Length,
          (object) Address,
          (object) Bit,
          (object) BitMask,
          (object) Parent,
          (object) Description,
          (object) Info,
          (object) InfoBit0,
          (object) InfoBit1,
          (object) DateStamp,
          (object) DateReference,
          (object) RD_Data,
          (object) RD_Value,
          (object) WR_Data,
          (object) WR_Value,
          (object) RD_Factor,
          (object) RD_Divisor,
          (object) RD_Format,
          (object) RD_Unit,
          (object) RD_Type,
          (object) RD_Data_Default,
          (object) RD_Value_Default,
          (object) WR_Data_Default,
          (object) WR_Value_Default,
          (object) Checked,
          (object) CheckedTmp,
          (object) CheckedSnd,
          (object) Visible_RD,
          (object) Visible_RD_All,
          (object) Visible_RD_User,
          (object) Visible_WR,
          (object) Visible_WR_All,
          (object) Visible_WR_User,
          (object) UseK,
          (object) UseMulDiv,
          (object) ParamType,
          (object) ValueIdent,
          (object) OverrideID,
          (object) Signature
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow FindByMapIDRangeNameIndex(
        int MapID,
        string RangeName,
        int Index)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow) this.Rows.Find(new object[3]
        {
          (object) MapID,
          (object) RangeName,
          (object) Index
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataDataTable deviceDataDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataDataTable) base.Clone();
        deviceDataDataTable.InitVars();
        return (DataTable) deviceDataDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMapID = this.Columns["MapID"];
        this.columnRangeName = this.Columns["RangeName"];
        this.columnIndex = this.Columns["Index"];
        this.columnName = this.Columns["Name"];
        this.columnType = this.Columns["Type"];
        this.columnLength = this.Columns["Length"];
        this.columnAddress = this.Columns["Address"];
        this.columnBit = this.Columns["Bit"];
        this.columnBitMask = this.Columns["BitMask"];
        this.columnParent = this.Columns["Parent"];
        this.columnDescription = this.Columns["Description"];
        this.columnInfo = this.Columns["Info"];
        this.columnInfoBit0 = this.Columns["InfoBit0"];
        this.columnInfoBit1 = this.Columns["InfoBit1"];
        this.columnDateStamp = this.Columns["DateStamp"];
        this.columnDateReference = this.Columns["DateReference"];
        this.columnRD_Data = this.Columns["RD_Data"];
        this.columnRD_Value = this.Columns["RD_Value"];
        this.columnWR_Data = this.Columns["WR_Data"];
        this.columnWR_Value = this.Columns["WR_Value"];
        this.columnRD_Factor = this.Columns["RD_Factor"];
        this.columnRD_Divisor = this.Columns["RD_Divisor"];
        this.columnRD_Format = this.Columns["RD_Format"];
        this.columnRD_Unit = this.Columns["RD_Unit"];
        this.columnRD_Type = this.Columns["RD_Type"];
        this.columnRD_Data_Default = this.Columns["RD_Data_Default"];
        this.columnRD_Value_Default = this.Columns["RD_Value_Default"];
        this.columnWR_Data_Default = this.Columns["WR_Data_Default"];
        this.columnWR_Value_Default = this.Columns["WR_Value_Default"];
        this.columnChecked = this.Columns["Checked"];
        this.columnCheckedTmp = this.Columns["CheckedTmp"];
        this.columnCheckedSnd = this.Columns["CheckedSnd"];
        this.columnVisible_RD = this.Columns["Visible_RD"];
        this.columnVisible_RD_All = this.Columns["Visible_RD_All"];
        this.columnVisible_RD_User = this.Columns["Visible_RD_User"];
        this.columnVisible_WR = this.Columns["Visible_WR"];
        this.columnVisible_WR_All = this.Columns["Visible_WR_All"];
        this.columnVisible_WR_User = this.Columns["Visible_WR_User"];
        this.columnUseK = this.Columns["UseK"];
        this.columnUseMulDiv = this.Columns["UseMulDiv"];
        this.columnParamType = this.Columns["ParamType"];
        this.columnValueIdent = this.Columns["ValueIdent"];
        this.columnOverrideID = this.Columns["OverrideID"];
        this.columnSignature = this.Columns["Signature"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnRangeName = new DataColumn("RangeName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRangeName);
        this.columnIndex = new DataColumn("Index", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIndex);
        this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnName);
        this.columnType = new DataColumn("Type", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnType);
        this.columnLength = new DataColumn("Length", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLength);
        this.columnAddress = new DataColumn("Address", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAddress);
        this.columnBit = new DataColumn("Bit", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBit);
        this.columnBitMask = new DataColumn("BitMask", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBitMask);
        this.columnParent = new DataColumn("Parent", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParent);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnInfo = new DataColumn("Info", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInfo);
        this.columnInfoBit0 = new DataColumn("InfoBit0", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInfoBit0);
        this.columnInfoBit1 = new DataColumn("InfoBit1", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInfoBit1);
        this.columnDateStamp = new DataColumn("DateStamp", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDateStamp);
        this.columnDateReference = new DataColumn("DateReference", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDateReference);
        this.columnRD_Data = new DataColumn("RD_Data", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Data);
        this.columnRD_Value = new DataColumn("RD_Value", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Value);
        this.columnWR_Data = new DataColumn("WR_Data", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWR_Data);
        this.columnWR_Value = new DataColumn("WR_Value", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWR_Value);
        this.columnRD_Factor = new DataColumn("RD_Factor", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Factor);
        this.columnRD_Divisor = new DataColumn("RD_Divisor", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Divisor);
        this.columnRD_Format = new DataColumn("RD_Format", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Format);
        this.columnRD_Unit = new DataColumn("RD_Unit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Unit);
        this.columnRD_Type = new DataColumn("RD_Type", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Type);
        this.columnRD_Data_Default = new DataColumn("RD_Data_Default", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Data_Default);
        this.columnRD_Value_Default = new DataColumn("RD_Value_Default", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRD_Value_Default);
        this.columnWR_Data_Default = new DataColumn("WR_Data_Default", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWR_Data_Default);
        this.columnWR_Value_Default = new DataColumn("WR_Value_Default", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnWR_Value_Default);
        this.columnChecked = new DataColumn("Checked", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChecked);
        this.columnCheckedTmp = new DataColumn("CheckedTmp", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckedTmp);
        this.columnCheckedSnd = new DataColumn("CheckedSnd", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckedSnd);
        this.columnVisible_RD = new DataColumn("Visible_RD", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVisible_RD);
        this.columnVisible_RD_All = new DataColumn("Visible_RD_All", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVisible_RD_All);
        this.columnVisible_RD_User = new DataColumn("Visible_RD_User", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVisible_RD_User);
        this.columnVisible_WR = new DataColumn("Visible_WR", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVisible_WR);
        this.columnVisible_WR_All = new DataColumn("Visible_WR_All", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVisible_WR_All);
        this.columnVisible_WR_User = new DataColumn("Visible_WR_User", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVisible_WR_User);
        this.columnUseK = new DataColumn("UseK", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUseK);
        this.columnUseMulDiv = new DataColumn("UseMulDiv", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUseMulDiv);
        this.columnParamType = new DataColumn("ParamType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParamType);
        this.columnValueIdent = new DataColumn("ValueIdent", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValueIdent);
        this.columnOverrideID = new DataColumn("OverrideID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOverrideID);
        this.columnSignature = new DataColumn("Signature", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSignature);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnMapID,
          this.columnRangeName,
          this.columnIndex
        }, true));
        this.columnMapID.AllowDBNull = false;
        this.columnRangeName.AllowDBNull = false;
        this.columnRangeName.MaxLength = 50;
        this.columnIndex.AllowDBNull = false;
        this.columnName.MaxLength = 64;
        this.columnType.MaxLength = 16;
        this.columnParent.MaxLength = 64;
        this.columnDescription.MaxLength = (int) byte.MaxValue;
        this.columnInfo.MaxLength = 536870910;
        this.columnInfoBit0.MaxLength = 128;
        this.columnInfoBit1.MaxLength = 128;
        this.columnDateStamp.MaxLength = 32;
        this.columnDateReference.MaxLength = 32;
        this.columnRD_Data.MaxLength = 64;
        this.columnRD_Value.MaxLength = 64;
        this.columnWR_Data.MaxLength = 64;
        this.columnWR_Value.MaxLength = 64;
        this.columnRD_Format.MaxLength = 64;
        this.columnRD_Unit.MaxLength = 16;
        this.columnRD_Type.MaxLength = 64;
        this.columnRD_Data_Default.MaxLength = 64;
        this.columnRD_Value_Default.MaxLength = 64;
        this.columnWR_Data_Default.MaxLength = 64;
        this.columnWR_Value_Default.MaxLength = 64;
        this.columnParamType.MaxLength = 10;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow NewMinolDeviceDataRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MinolDeviceDataRowChanged == null)
          return;
        this.MinolDeviceDataRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MinolDeviceDataRowChanging == null)
          return;
        this.MinolDeviceDataRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MinolDeviceDataRowDeleted == null)
          return;
        this.MinolDeviceDataRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MinolDeviceDataRowDeleting == null)
          return;
        this.MinolDeviceDataRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMinolDeviceDataRow(ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MinolDeviceDataDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AutoboxCardConfigurationDataTable : 
      TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow>
    {
      private DataColumn columnEquipmentID;
      private DataColumn columnCardNumber;
      private DataColumn columnResisitorPosition;
      private DataColumn columnResistorNumber;
      private DataColumn columnResistorType;
      private DataColumn columnNominalTemperature;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public AutoboxCardConfigurationDataTable()
      {
        this.TableName = "AutoboxCardConfiguration";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal AutoboxCardConfigurationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected AutoboxCardConfigurationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CardNumberColumn => this.columnCardNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResisitorPositionColumn => this.columnResisitorPosition;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistorNumberColumn => this.columnResistorNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistorTypeColumn => this.columnResistorType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NominalTemperatureColumn => this.columnNominalTemperature;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRowChangeEventHandler AutoboxCardConfigurationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRowChangeEventHandler AutoboxCardConfigurationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRowChangeEventHandler AutoboxCardConfigurationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRowChangeEventHandler AutoboxCardConfigurationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddAutoboxCardConfigurationRow(ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow AddAutoboxCardConfigurationRow(
        int EquipmentID,
        byte CardNumber,
        string ResisitorPosition,
        byte ResistorNumber,
        string ResistorType,
        double NominalTemperature)
      {
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow row = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) EquipmentID,
          (object) CardNumber,
          (object) ResisitorPosition,
          (object) ResistorNumber,
          (object) ResistorType,
          (object) NominalTemperature
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow FindByEquipmentIDCardNumberResisitorPositionResistorNumber(
        int EquipmentID,
        byte CardNumber,
        string ResisitorPosition,
        byte ResistorNumber)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow) this.Rows.Find(new object[4]
        {
          (object) EquipmentID,
          (object) CardNumber,
          (object) ResisitorPosition,
          (object) ResistorNumber
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationDataTable configurationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationDataTable) base.Clone();
        configurationDataTable.InitVars();
        return (DataTable) configurationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnCardNumber = this.Columns["CardNumber"];
        this.columnResisitorPosition = this.Columns["ResisitorPosition"];
        this.columnResistorNumber = this.Columns["ResistorNumber"];
        this.columnResistorType = this.Columns["ResistorType"];
        this.columnNominalTemperature = this.Columns["NominalTemperature"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnCardNumber = new DataColumn("CardNumber", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNumber);
        this.columnResisitorPosition = new DataColumn("ResisitorPosition", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResisitorPosition);
        this.columnResistorNumber = new DataColumn("ResistorNumber", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistorNumber);
        this.columnResistorType = new DataColumn("ResistorType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistorType);
        this.columnNominalTemperature = new DataColumn("NominalTemperature", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNominalTemperature);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[4]
        {
          this.columnEquipmentID,
          this.columnCardNumber,
          this.columnResisitorPosition,
          this.columnResistorNumber
        }, true));
        this.columnEquipmentID.AllowDBNull = false;
        this.columnCardNumber.AllowDBNull = false;
        this.columnResisitorPosition.AllowDBNull = false;
        this.columnResisitorPosition.MaxLength = 50;
        this.columnResistorNumber.AllowDBNull = false;
        this.columnResistorType.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow NewAutoboxCardConfigurationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AutoboxCardConfigurationRowChanged == null)
          return;
        this.AutoboxCardConfigurationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AutoboxCardConfigurationRowChanging == null)
          return;
        this.AutoboxCardConfigurationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AutoboxCardConfigurationRowDeleted == null)
          return;
        this.AutoboxCardConfigurationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AutoboxCardConfigurationRowDeleting == null)
          return;
        this.AutoboxCardConfigurationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveAutoboxCardConfigurationRow(ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AutoboxCardConfigurationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AutoboxResistorCalibrationDataDataTable : 
      TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow>
    {
      private DataColumn columnCalibrationID;
      private DataColumn columnEquipmentID;
      private DataColumn columnCardNumber;
      private DataColumn columnResistorNumber;
      private DataColumn columnResistorPosition;
      private DataColumn columnResistorValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public AutoboxResistorCalibrationDataDataTable()
      {
        this.TableName = "AutoboxResistorCalibrationData";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal AutoboxResistorCalibrationDataDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected AutoboxResistorCalibrationDataDataTable(
        SerializationInfo info,
        StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationIDColumn => this.columnCalibrationID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CardNumberColumn => this.columnCardNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistorNumberColumn => this.columnResistorNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistorPositionColumn => this.columnResistorPosition;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistorValueColumn => this.columnResistorValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRowChangeEventHandler AutoboxResistorCalibrationDataRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRowChangeEventHandler AutoboxResistorCalibrationDataRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRowChangeEventHandler AutoboxResistorCalibrationDataRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRowChangeEventHandler AutoboxResistorCalibrationDataRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddAutoboxResistorCalibrationDataRow(ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow AddAutoboxResistorCalibrationDataRow(
        int CalibrationID,
        int EquipmentID,
        byte CardNumber,
        byte ResistorNumber,
        string ResistorPosition,
        double ResistorValue)
      {
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow row = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) CalibrationID,
          (object) EquipmentID,
          (object) CardNumber,
          (object) ResistorNumber,
          (object) ResistorPosition,
          (object) ResistorValue
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow FindByCalibrationIDEquipmentIDCardNumberResistorNumberResistorPosition(
        int CalibrationID,
        int EquipmentID,
        byte CardNumber,
        byte ResistorNumber,
        string ResistorPosition)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow) this.Rows.Find(new object[5]
        {
          (object) CalibrationID,
          (object) EquipmentID,
          (object) CardNumber,
          (object) ResistorNumber,
          (object) ResistorPosition
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataDataTable calibrationDataDataTable = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataDataTable) base.Clone();
        calibrationDataDataTable.InitVars();
        return (DataTable) calibrationDataDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnCalibrationID = this.Columns["CalibrationID"];
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnCardNumber = this.Columns["CardNumber"];
        this.columnResistorNumber = this.Columns["ResistorNumber"];
        this.columnResistorPosition = this.Columns["ResistorPosition"];
        this.columnResistorValue = this.Columns["ResistorValue"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnCalibrationID = new DataColumn("CalibrationID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationID);
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnCardNumber = new DataColumn("CardNumber", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNumber);
        this.columnResistorNumber = new DataColumn("ResistorNumber", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistorNumber);
        this.columnResistorPosition = new DataColumn("ResistorPosition", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistorPosition);
        this.columnResistorValue = new DataColumn("ResistorValue", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistorValue);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[5]
        {
          this.columnCalibrationID,
          this.columnEquipmentID,
          this.columnCardNumber,
          this.columnResistorNumber,
          this.columnResistorPosition
        }, true));
        this.columnCalibrationID.AllowDBNull = false;
        this.columnEquipmentID.AllowDBNull = false;
        this.columnCardNumber.AllowDBNull = false;
        this.columnResistorNumber.AllowDBNull = false;
        this.columnResistorPosition.AllowDBNull = false;
        this.columnResistorPosition.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow NewAutoboxResistorCalibrationDataRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AutoboxResistorCalibrationDataRowChanged == null)
          return;
        this.AutoboxResistorCalibrationDataRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AutoboxResistorCalibrationDataRowChanging == null)
          return;
        this.AutoboxResistorCalibrationDataRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AutoboxResistorCalibrationDataRowDeleted == null)
          return;
        this.AutoboxResistorCalibrationDataRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AutoboxResistorCalibrationDataRowDeleting == null)
          return;
        this.AutoboxResistorCalibrationDataRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveAutoboxResistorCalibrationDataRow(
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AutoboxResistorCalibrationDataDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AutoboxConfigurationDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow>
    {
      private DataColumn columnEquipmentID;
      private DataColumn columnCardNumber;
      private DataColumn columnCardName;
      private DataColumn columnInterfaceID;
      private DataColumn columnInterfaceType;
      private DataColumn columnInterfacePort;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public AutoboxConfigurationDataTable()
      {
        this.TableName = "AutoboxConfiguration";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal AutoboxConfigurationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected AutoboxConfigurationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CardNumberColumn => this.columnCardNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CardNameColumn => this.columnCardName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InterfaceIDColumn => this.columnInterfaceID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InterfaceTypeColumn => this.columnInterfaceType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InterfacePortColumn => this.columnInterfacePort;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRowChangeEventHandler AutoboxConfigurationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRowChangeEventHandler AutoboxConfigurationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRowChangeEventHandler AutoboxConfigurationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRowChangeEventHandler AutoboxConfigurationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddAutoboxConfigurationRow(ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow AddAutoboxConfigurationRow(
        int EquipmentID,
        byte CardNumber,
        string CardName,
        string InterfaceID,
        string InterfaceType,
        byte InterfacePort)
      {
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow row = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) EquipmentID,
          (object) CardNumber,
          (object) CardName,
          (object) InterfaceID,
          (object) InterfaceType,
          (object) InterfacePort
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow FindByEquipmentIDCardNumber(
        int EquipmentID,
        byte CardNumber)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow) this.Rows.Find(new object[2]
        {
          (object) EquipmentID,
          (object) CardNumber
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationDataTable configurationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationDataTable) base.Clone();
        configurationDataTable.InitVars();
        return (DataTable) configurationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnCardNumber = this.Columns["CardNumber"];
        this.columnCardName = this.Columns["CardName"];
        this.columnInterfaceID = this.Columns["InterfaceID"];
        this.columnInterfaceType = this.Columns["InterfaceType"];
        this.columnInterfacePort = this.Columns["InterfacePort"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnCardNumber = new DataColumn("CardNumber", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNumber);
        this.columnCardName = new DataColumn("CardName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardName);
        this.columnInterfaceID = new DataColumn("InterfaceID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInterfaceID);
        this.columnInterfaceType = new DataColumn("InterfaceType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInterfaceType);
        this.columnInterfacePort = new DataColumn("InterfacePort", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInterfacePort);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnEquipmentID,
          this.columnCardNumber
        }, true));
        this.columnEquipmentID.AllowDBNull = false;
        this.columnCardNumber.AllowDBNull = false;
        this.columnCardName.MaxLength = 50;
        this.columnInterfaceID.MaxLength = 50;
        this.columnInterfaceType.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow NewAutoboxConfigurationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AutoboxConfigurationRowChanged == null)
          return;
        this.AutoboxConfigurationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AutoboxConfigurationRowChanging == null)
          return;
        this.AutoboxConfigurationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AutoboxConfigurationRowDeleted == null)
          return;
        this.AutoboxConfigurationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AutoboxConfigurationRowDeleting == null)
          return;
        this.AutoboxConfigurationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveAutoboxConfigurationRow(ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AutoboxConfigurationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class AutoboxResistorPairsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow>
    {
      private DataColumn columnEquipmentID;
      private DataColumn columnCardNumber;
      private DataColumn columnResistorNumberFlow;
      private DataColumn columnResistorNumberReturn;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public AutoboxResistorPairsDataTable()
      {
        this.TableName = "AutoboxResistorPairs";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal AutoboxResistorPairsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected AutoboxResistorPairsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CardNumberColumn => this.columnCardNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistorNumberFlowColumn => this.columnResistorNumberFlow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResistorNumberReturnColumn => this.columnResistorNumberReturn;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRowChangeEventHandler AutoboxResistorPairsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRowChangeEventHandler AutoboxResistorPairsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRowChangeEventHandler AutoboxResistorPairsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRowChangeEventHandler AutoboxResistorPairsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddAutoboxResistorPairsRow(ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow AddAutoboxResistorPairsRow(
        int EquipmentID,
        byte CardNumber,
        byte ResistorNumberFlow,
        byte ResistorNumberReturn)
      {
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow row = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) EquipmentID,
          (object) CardNumber,
          (object) ResistorNumberFlow,
          (object) ResistorNumberReturn
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow FindByEquipmentIDCardNumberResistorNumberFlowResistorNumberReturn(
        int EquipmentID,
        byte CardNumber,
        byte ResistorNumberFlow,
        byte ResistorNumberReturn)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow) this.Rows.Find(new object[4]
        {
          (object) EquipmentID,
          (object) CardNumber,
          (object) ResistorNumberFlow,
          (object) ResistorNumberReturn
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsDataTable resistorPairsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsDataTable) base.Clone();
        resistorPairsDataTable.InitVars();
        return (DataTable) resistorPairsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnCardNumber = this.Columns["CardNumber"];
        this.columnResistorNumberFlow = this.Columns["ResistorNumberFlow"];
        this.columnResistorNumberReturn = this.Columns["ResistorNumberReturn"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnCardNumber = new DataColumn("CardNumber", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardNumber);
        this.columnResistorNumberFlow = new DataColumn("ResistorNumberFlow", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistorNumberFlow);
        this.columnResistorNumberReturn = new DataColumn("ResistorNumberReturn", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResistorNumberReturn);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[4]
        {
          this.columnEquipmentID,
          this.columnCardNumber,
          this.columnResistorNumberFlow,
          this.columnResistorNumberReturn
        }, true));
        this.columnEquipmentID.AllowDBNull = false;
        this.columnCardNumber.AllowDBNull = false;
        this.columnResistorNumberFlow.AllowDBNull = false;
        this.columnResistorNumberReturn.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow NewAutoboxResistorPairsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.AutoboxResistorPairsRowChanged == null)
          return;
        this.AutoboxResistorPairsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.AutoboxResistorPairsRowChanging == null)
          return;
        this.AutoboxResistorPairsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.AutoboxResistorPairsRowDeleted == null)
          return;
        this.AutoboxResistorPairsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.AutoboxResistorPairsRowDeleting == null)
          return;
        this.AutoboxResistorPairsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveAutoboxResistorPairsRow(ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (AutoboxResistorPairsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class EnergyFactorsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow>
    {
      private DataColumn columnTempFlow;
      private DataColumn columnTempReturn;
      private DataColumn columnFactorFlowPosition;
      private DataColumn columnFactorReturnPosition;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EnergyFactorsDataTable()
      {
        this.TableName = "EnergyFactors";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EnergyFactorsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected EnergyFactorsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TempFlowColumn => this.columnTempFlow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TempReturnColumn => this.columnTempReturn;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FactorFlowPositionColumn => this.columnFactorFlowPosition;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FactorReturnPositionColumn => this.columnFactorReturnPosition;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRowChangeEventHandler EnergyFactorsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRowChangeEventHandler EnergyFactorsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRowChangeEventHandler EnergyFactorsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRowChangeEventHandler EnergyFactorsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddEnergyFactorsRow(ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow AddEnergyFactorsRow(
        double TempFlow,
        double TempReturn,
        double FactorFlowPosition,
        double FactorReturnPosition)
      {
        ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow row = (ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) TempFlow,
          (object) TempReturn,
          (object) FactorFlowPosition,
          (object) FactorReturnPosition
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow FindByTempFlowTempReturn(
        double TempFlow,
        double TempReturn)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow) this.Rows.Find(new object[2]
        {
          (object) TempFlow,
          (object) TempReturn
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsDataTable factorsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsDataTable) base.Clone();
        factorsDataTable.InitVars();
        return (DataTable) factorsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTempFlow = this.Columns["TempFlow"];
        this.columnTempReturn = this.Columns["TempReturn"];
        this.columnFactorFlowPosition = this.Columns["FactorFlowPosition"];
        this.columnFactorReturnPosition = this.Columns["FactorReturnPosition"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTempFlow = new DataColumn("TempFlow", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempFlow);
        this.columnTempReturn = new DataColumn("TempReturn", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempReturn);
        this.columnFactorFlowPosition = new DataColumn("FactorFlowPosition", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFactorFlowPosition);
        this.columnFactorReturnPosition = new DataColumn("FactorReturnPosition", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFactorReturnPosition);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnTempFlow,
          this.columnTempReturn
        }, true));
        this.columnTempFlow.AllowDBNull = false;
        this.columnTempReturn.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow NewEnergyFactorsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.EnergyFactorsRowChanged == null)
          return;
        this.EnergyFactorsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.EnergyFactorsRowChanging == null)
          return;
        this.EnergyFactorsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.EnergyFactorsRowDeleted == null)
          return;
        this.EnergyFactorsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.EnergyFactorsRowDeleting == null)
          return;
        this.EnergyFactorsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveEnergyFactorsRow(ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (EnergyFactorsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterInfoPropertiesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow>
    {
      private DataColumn columnMeterInfoId;
      private DataColumn columnPropertyField1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterInfoPropertiesDataTable()
      {
        this.TableName = "MeterInfoProperties";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterInfoPropertiesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterInfoPropertiesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterInfoIdColumn => this.columnMeterInfoId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PropertyField1Column => this.columnPropertyField1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRowChangeEventHandler MeterInfoPropertiesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRowChangeEventHandler MeterInfoPropertiesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRowChangeEventHandler MeterInfoPropertiesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRowChangeEventHandler MeterInfoPropertiesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterInfoPropertiesRow(ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow AddMeterInfoPropertiesRow(
        int MeterInfoId,
        string PropertyField1)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow row = (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) MeterInfoId,
          (object) PropertyField1
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow FindByMeterInfoId(
        int MeterInfoId)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow) this.Rows.Find(new object[1]
        {
          (object) MeterInfoId
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesDataTable propertiesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesDataTable) base.Clone();
        propertiesDataTable.InitVars();
        return (DataTable) propertiesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterInfoId = this.Columns["MeterInfoId"];
        this.columnPropertyField1 = this.Columns["PropertyField1"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterInfoId = new DataColumn("MeterInfoId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoId);
        this.columnPropertyField1 = new DataColumn("PropertyField1", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPropertyField1);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterInfoId
        }, true));
        this.columnMeterInfoId.AllowDBNull = false;
        this.columnMeterInfoId.Unique = true;
        this.columnPropertyField1.MaxLength = 250;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow NewMeterInfoPropertiesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterInfoPropertiesRowChanged == null)
          return;
        this.MeterInfoPropertiesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterInfoPropertiesRowChanging == null)
          return;
        this.MeterInfoPropertiesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterInfoPropertiesRowDeleted == null)
          return;
        this.MeterInfoPropertiesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterInfoPropertiesRowDeleting == null)
          return;
        this.MeterInfoPropertiesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterInfoPropertiesRow(ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterInfoPropertiesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class EquipmentCalibrationDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow>
    {
      private DataColumn columnCalibrationID;
      private DataColumn columnEquipmentID;
      private DataColumn columnPersonelNumber;
      private DataColumn columnCalibrationDate;
      private DataColumn columnIsBasisEntry;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EquipmentCalibrationDataTable()
      {
        this.TableName = "EquipmentCalibration";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EquipmentCalibrationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected EquipmentCalibrationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationIDColumn => this.columnCalibrationID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNumberColumn => this.columnPersonelNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationDateColumn => this.columnCalibrationDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn IsBasisEntryColumn => this.columnIsBasisEntry;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRowChangeEventHandler EquipmentCalibrationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRowChangeEventHandler EquipmentCalibrationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRowChangeEventHandler EquipmentCalibrationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRowChangeEventHandler EquipmentCalibrationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddEquipmentCalibrationRow(ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow AddEquipmentCalibrationRow(
        int CalibrationID,
        int EquipmentID,
        int PersonelNumber,
        DateTime CalibrationDate,
        byte IsBasisEntry)
      {
        ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow row = (ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) CalibrationID,
          (object) EquipmentID,
          (object) PersonelNumber,
          (object) CalibrationDate,
          (object) IsBasisEntry
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow FindByCalibrationID(
        int CalibrationID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow) this.Rows.Find(new object[1]
        {
          (object) CalibrationID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationDataTable calibrationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationDataTable) base.Clone();
        calibrationDataTable.InitVars();
        return (DataTable) calibrationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnCalibrationID = this.Columns["CalibrationID"];
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnPersonelNumber = this.Columns["PersonelNumber"];
        this.columnCalibrationDate = this.Columns["CalibrationDate"];
        this.columnIsBasisEntry = this.Columns["IsBasisEntry"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnCalibrationID = new DataColumn("CalibrationID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationID);
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnPersonelNumber = new DataColumn("PersonelNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNumber);
        this.columnCalibrationDate = new DataColumn("CalibrationDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationDate);
        this.columnIsBasisEntry = new DataColumn("IsBasisEntry", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIsBasisEntry);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnCalibrationID
        }, true));
        this.columnCalibrationID.AllowDBNull = false;
        this.columnCalibrationID.Unique = true;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow NewEquipmentCalibrationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.EquipmentCalibrationRowChanged == null)
          return;
        this.EquipmentCalibrationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.EquipmentCalibrationRowChanging == null)
          return;
        this.EquipmentCalibrationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.EquipmentCalibrationRowDeleted == null)
          return;
        this.EquipmentCalibrationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.EquipmentCalibrationRowDeleting == null)
          return;
        this.EquipmentCalibrationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveEquipmentCalibrationRow(ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (EquipmentCalibrationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TranslationRulesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow>
    {
      private DataColumn columnManufacturer;
      private DataColumn columnMedium;
      private DataColumn columnVersionMin;
      private DataColumn columnVersionMax;
      private DataColumn columnMBusZDF;
      private DataColumn columnValueIdent;
      private DataColumn columnRuleOrder;
      private DataColumn columnMultiplier;
      private DataColumn columnSpecialTranslation;
      private DataColumn columnSubDeviceAttributeIdentifier;
      private DataColumn columnSubDeviceIndex;
      private DataColumn columnStorageTimeParam;
      private DataColumn columnStorageTimeTranslation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TranslationRulesDataTable()
      {
        this.TableName = "TranslationRules";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TranslationRulesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TranslationRulesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ManufacturerColumn => this.columnManufacturer;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MediumColumn => this.columnMedium;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn VersionMinColumn => this.columnVersionMin;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn VersionMaxColumn => this.columnVersionMax;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusZDFColumn => this.columnMBusZDF;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueIdentColumn => this.columnValueIdent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RuleOrderColumn => this.columnRuleOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MultiplierColumn => this.columnMultiplier;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SpecialTranslationColumn => this.columnSpecialTranslation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SubDeviceAttributeIdentifierColumn
      {
        get => this.columnSubDeviceAttributeIdentifier;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SubDeviceIndexColumn => this.columnSubDeviceIndex;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StorageTimeParamColumn => this.columnStorageTimeParam;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StorageTimeTranslationColumn => this.columnStorageTimeTranslation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRowChangeEventHandler TranslationRulesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRowChangeEventHandler TranslationRulesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRowChangeEventHandler TranslationRulesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRowChangeEventHandler TranslationRulesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTranslationRulesRow(ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow AddTranslationRulesRow(
        string Manufacturer,
        string Medium,
        short VersionMin,
        short VersionMax,
        string MBusZDF,
        string ValueIdent,
        short RuleOrder,
        double Multiplier,
        short SpecialTranslation,
        string SubDeviceAttributeIdentifier,
        int SubDeviceIndex,
        string StorageTimeParam,
        short StorageTimeTranslation)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow row = (ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow) this.NewRow();
        object[] objArray = new object[13]
        {
          (object) Manufacturer,
          (object) Medium,
          (object) VersionMin,
          (object) VersionMax,
          (object) MBusZDF,
          (object) ValueIdent,
          (object) RuleOrder,
          (object) Multiplier,
          (object) SpecialTranslation,
          (object) SubDeviceAttributeIdentifier,
          (object) SubDeviceIndex,
          (object) StorageTimeParam,
          (object) StorageTimeTranslation
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow FindByRuleOrderValueIdentMBusZDFVersionMaxVersionMinMediumManufacturer(
        short RuleOrder,
        string ValueIdent,
        string MBusZDF,
        short VersionMax,
        short VersionMin,
        string Medium,
        string Manufacturer)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow) this.Rows.Find(new object[7]
        {
          (object) RuleOrder,
          (object) ValueIdent,
          (object) MBusZDF,
          (object) VersionMax,
          (object) VersionMin,
          (object) Medium,
          (object) Manufacturer
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesDataTable translationRulesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesDataTable) base.Clone();
        translationRulesDataTable.InitVars();
        return (DataTable) translationRulesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnManufacturer = this.Columns["Manufacturer"];
        this.columnMedium = this.Columns["Medium"];
        this.columnVersionMin = this.Columns["VersionMin"];
        this.columnVersionMax = this.Columns["VersionMax"];
        this.columnMBusZDF = this.Columns["MBusZDF"];
        this.columnValueIdent = this.Columns["ValueIdent"];
        this.columnRuleOrder = this.Columns["RuleOrder"];
        this.columnMultiplier = this.Columns["Multiplier"];
        this.columnSpecialTranslation = this.Columns["SpecialTranslation"];
        this.columnSubDeviceAttributeIdentifier = this.Columns["SubDeviceAttributeIdentifier"];
        this.columnSubDeviceIndex = this.Columns["SubDeviceIndex"];
        this.columnStorageTimeParam = this.Columns["StorageTimeParam"];
        this.columnStorageTimeTranslation = this.Columns["StorageTimeTranslation"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnManufacturer = new DataColumn("Manufacturer", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnManufacturer);
        this.columnMedium = new DataColumn("Medium", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMedium);
        this.columnVersionMin = new DataColumn("VersionMin", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVersionMin);
        this.columnVersionMax = new DataColumn("VersionMax", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVersionMax);
        this.columnMBusZDF = new DataColumn("MBusZDF", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusZDF);
        this.columnValueIdent = new DataColumn("ValueIdent", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValueIdent);
        this.columnRuleOrder = new DataColumn("RuleOrder", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRuleOrder);
        this.columnMultiplier = new DataColumn("Multiplier", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMultiplier);
        this.columnSpecialTranslation = new DataColumn("SpecialTranslation", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSpecialTranslation);
        this.columnSubDeviceAttributeIdentifier = new DataColumn("SubDeviceAttributeIdentifier", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSubDeviceAttributeIdentifier);
        this.columnSubDeviceIndex = new DataColumn("SubDeviceIndex", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSubDeviceIndex);
        this.columnStorageTimeParam = new DataColumn("StorageTimeParam", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStorageTimeParam);
        this.columnStorageTimeTranslation = new DataColumn("StorageTimeTranslation", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStorageTimeTranslation);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[7]
        {
          this.columnRuleOrder,
          this.columnValueIdent,
          this.columnMBusZDF,
          this.columnVersionMax,
          this.columnVersionMin,
          this.columnMedium,
          this.columnManufacturer
        }, true));
        this.columnManufacturer.AllowDBNull = false;
        this.columnManufacturer.MaxLength = 7;
        this.columnMedium.AllowDBNull = false;
        this.columnMedium.MaxLength = 50;
        this.columnVersionMin.AllowDBNull = false;
        this.columnVersionMax.AllowDBNull = false;
        this.columnMBusZDF.AllowDBNull = false;
        this.columnMBusZDF.MaxLength = 20;
        this.columnValueIdent.AllowDBNull = false;
        this.columnValueIdent.MaxLength = 50;
        this.columnRuleOrder.AllowDBNull = false;
        this.columnSubDeviceAttributeIdentifier.MaxLength = 50;
        this.columnStorageTimeParam.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow NewTranslationRulesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TranslationRulesRowChanged == null)
          return;
        this.TranslationRulesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TranslationRulesRowChanging == null)
          return;
        this.TranslationRulesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TranslationRulesRowDeleted == null)
          return;
        this.TranslationRulesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TranslationRulesRowDeleting == null)
          return;
        this.TranslationRulesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTranslationRulesRow(ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TranslationRulesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterValuesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow>
    {
      private DataColumn columnMeterId;
      private DataColumn columnValueIdentIndex;
      private DataColumn columnTimePoint;
      private DataColumn columnValue;
      private DataColumn columnPhysicalQuantity;
      private DataColumn columnMeterType;
      private DataColumn columnCalculation;
      private DataColumn columnCalculationStart;
      private DataColumn columnStorageInterval;
      private DataColumn columnCreation;
      private DataColumn columnNodeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterValuesDataTable()
      {
        this.TableName = "MeterValues";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterValuesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterValuesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIdColumn => this.columnMeterId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueIdentIndexColumn => this.columnValueIdentIndex;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TimePointColumn => this.columnTimePoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueColumn => this.columnValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PhysicalQuantityColumn => this.columnPhysicalQuantity;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeColumn => this.columnMeterType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalculationColumn => this.columnCalculation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalculationStartColumn => this.columnCalculationStart;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StorageIntervalColumn => this.columnStorageInterval;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CreationColumn => this.columnCreation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NodeIDColumn => this.columnNodeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRowChangeEventHandler MeterValuesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRowChangeEventHandler MeterValuesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRowChangeEventHandler MeterValuesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRowChangeEventHandler MeterValuesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterValuesRow(ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow AddMeterValuesRow(
        int MeterId,
        byte ValueIdentIndex,
        DateTime TimePoint,
        double Value,
        byte PhysicalQuantity,
        byte MeterType,
        byte Calculation,
        byte CalculationStart,
        byte StorageInterval,
        byte Creation,
        int NodeID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow row = (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow) this.NewRow();
        object[] objArray = new object[11]
        {
          (object) MeterId,
          (object) ValueIdentIndex,
          (object) TimePoint,
          (object) Value,
          (object) PhysicalQuantity,
          (object) MeterType,
          (object) Calculation,
          (object) CalculationStart,
          (object) StorageInterval,
          (object) Creation,
          (object) NodeID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow FindByMeterIdValueIdentIndexTimePointPhysicalQuantityMeterTypeCalculationCalculationStartStorageIntervalCreationNodeID(
        int MeterId,
        byte ValueIdentIndex,
        DateTime TimePoint,
        byte PhysicalQuantity,
        byte MeterType,
        byte Calculation,
        byte CalculationStart,
        byte StorageInterval,
        byte Creation,
        int NodeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow) this.Rows.Find(new object[10]
        {
          (object) MeterId,
          (object) ValueIdentIndex,
          (object) TimePoint,
          (object) PhysicalQuantity,
          (object) MeterType,
          (object) Calculation,
          (object) CalculationStart,
          (object) StorageInterval,
          (object) Creation,
          (object) NodeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterValuesDataTable meterValuesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesDataTable) base.Clone();
        meterValuesDataTable.InitVars();
        return (DataTable) meterValuesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterId = this.Columns["MeterId"];
        this.columnValueIdentIndex = this.Columns["ValueIdentIndex"];
        this.columnTimePoint = this.Columns["TimePoint"];
        this.columnValue = this.Columns["Value"];
        this.columnPhysicalQuantity = this.Columns["PhysicalQuantity"];
        this.columnMeterType = this.Columns["MeterType"];
        this.columnCalculation = this.Columns["Calculation"];
        this.columnCalculationStart = this.Columns["CalculationStart"];
        this.columnStorageInterval = this.Columns["StorageInterval"];
        this.columnCreation = this.Columns["Creation"];
        this.columnNodeID = this.Columns["NodeID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterId = new DataColumn("MeterId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterId);
        this.columnValueIdentIndex = new DataColumn("ValueIdentIndex", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValueIdentIndex);
        this.columnTimePoint = new DataColumn("TimePoint", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTimePoint);
        this.columnValue = new DataColumn("Value", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValue);
        this.columnPhysicalQuantity = new DataColumn("PhysicalQuantity", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPhysicalQuantity);
        this.columnMeterType = new DataColumn("MeterType", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterType);
        this.columnCalculation = new DataColumn("Calculation", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalculation);
        this.columnCalculationStart = new DataColumn("CalculationStart", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalculationStart);
        this.columnStorageInterval = new DataColumn("StorageInterval", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStorageInterval);
        this.columnCreation = new DataColumn("Creation", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCreation);
        this.columnNodeID = new DataColumn("NodeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNodeID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[10]
        {
          this.columnMeterId,
          this.columnValueIdentIndex,
          this.columnTimePoint,
          this.columnPhysicalQuantity,
          this.columnMeterType,
          this.columnCalculation,
          this.columnCalculationStart,
          this.columnStorageInterval,
          this.columnCreation,
          this.columnNodeID
        }, true));
        this.columnMeterId.AllowDBNull = false;
        this.columnValueIdentIndex.AllowDBNull = false;
        this.columnTimePoint.AllowDBNull = false;
        this.columnValue.AllowDBNull = false;
        this.columnPhysicalQuantity.AllowDBNull = false;
        this.columnMeterType.AllowDBNull = false;
        this.columnCalculation.AllowDBNull = false;
        this.columnCalculationStart.AllowDBNull = false;
        this.columnStorageInterval.AllowDBNull = false;
        this.columnCreation.AllowDBNull = false;
        this.columnNodeID.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow NewMeterValuesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterValuesRowChanged == null)
          return;
        this.MeterValuesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterValuesRowChanging == null)
          return;
        this.MeterValuesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterValuesRowDeleted == null)
          return;
        this.MeterValuesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterValuesRowDeleting == null)
          return;
        this.MeterValuesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterValuesRow(ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterValuesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterValuesAndSerialDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow>
    {
      private DataColumn columnMeterId;
      private DataColumn columnValueIdent;
      private DataColumn columnValueIdentIndex;
      private DataColumn columnTimePoint;
      private DataColumn columnValue;
      private DataColumn columnPhysicalQuantity;
      private DataColumn columnMeterType;
      private DataColumn columnCalculation;
      private DataColumn columnCalculationStart;
      private DataColumn columnStorageInterval;
      private DataColumn columnCreation;
      private DataColumn columnSerialNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterValuesAndSerialDataTable()
      {
        this.TableName = "MeterValuesAndSerial";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterValuesAndSerialDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterValuesAndSerialDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIdColumn => this.columnMeterId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueIdentColumn => this.columnValueIdent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueIdentIndexColumn => this.columnValueIdentIndex;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TimePointColumn => this.columnTimePoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueColumn => this.columnValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PhysicalQuantityColumn => this.columnPhysicalQuantity;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeColumn => this.columnMeterType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalculationColumn => this.columnCalculation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalculationStartColumn => this.columnCalculationStart;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StorageIntervalColumn => this.columnStorageInterval;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CreationColumn => this.columnCreation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SerialNrColumn => this.columnSerialNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRowChangeEventHandler MeterValuesAndSerialRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRowChangeEventHandler MeterValuesAndSerialRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRowChangeEventHandler MeterValuesAndSerialRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRowChangeEventHandler MeterValuesAndSerialRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterValuesAndSerialRow(ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow AddMeterValuesAndSerialRow(
        int MeterId,
        long ValueIdent,
        byte ValueIdentIndex,
        DateTime TimePoint,
        double Value,
        byte PhysicalQuantity,
        byte MeterType,
        byte Calculation,
        byte CalculationStart,
        byte StorageInterval,
        byte Creation,
        string SerialNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow row = (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) MeterId,
          (object) ValueIdent,
          (object) ValueIdentIndex,
          (object) TimePoint,
          (object) Value,
          (object) PhysicalQuantity,
          (object) MeterType,
          (object) Calculation,
          (object) CalculationStart,
          (object) StorageInterval,
          (object) Creation,
          (object) SerialNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow FindByMeterIdValueIdentValueIdentIndexTimePoint(
        int MeterId,
        long ValueIdent,
        byte ValueIdentIndex,
        DateTime TimePoint)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow) this.Rows.Find(new object[4]
        {
          (object) MeterId,
          (object) ValueIdent,
          (object) ValueIdentIndex,
          (object) TimePoint
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialDataTable andSerialDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialDataTable) base.Clone();
        andSerialDataTable.InitVars();
        return (DataTable) andSerialDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterId = this.Columns["MeterId"];
        this.columnValueIdent = this.Columns["ValueIdent"];
        this.columnValueIdentIndex = this.Columns["ValueIdentIndex"];
        this.columnTimePoint = this.Columns["TimePoint"];
        this.columnValue = this.Columns["Value"];
        this.columnPhysicalQuantity = this.Columns["PhysicalQuantity"];
        this.columnMeterType = this.Columns["MeterType"];
        this.columnCalculation = this.Columns["Calculation"];
        this.columnCalculationStart = this.Columns["CalculationStart"];
        this.columnStorageInterval = this.Columns["StorageInterval"];
        this.columnCreation = this.Columns["Creation"];
        this.columnSerialNr = this.Columns["SerialNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterId = new DataColumn("MeterId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterId);
        this.columnValueIdent = new DataColumn("ValueIdent", typeof (long), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValueIdent);
        this.columnValueIdentIndex = new DataColumn("ValueIdentIndex", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValueIdentIndex);
        this.columnTimePoint = new DataColumn("TimePoint", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTimePoint);
        this.columnValue = new DataColumn("Value", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValue);
        this.columnPhysicalQuantity = new DataColumn("PhysicalQuantity", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPhysicalQuantity);
        this.columnMeterType = new DataColumn("MeterType", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterType);
        this.columnCalculation = new DataColumn("Calculation", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalculation);
        this.columnCalculationStart = new DataColumn("CalculationStart", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalculationStart);
        this.columnStorageInterval = new DataColumn("StorageInterval", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStorageInterval);
        this.columnCreation = new DataColumn("Creation", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCreation);
        this.columnSerialNr = new DataColumn("SerialNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSerialNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[4]
        {
          this.columnMeterId,
          this.columnValueIdent,
          this.columnValueIdentIndex,
          this.columnTimePoint
        }, true));
        this.columnMeterId.AllowDBNull = false;
        this.columnValueIdent.AllowDBNull = false;
        this.columnValueIdentIndex.AllowDBNull = false;
        this.columnTimePoint.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow NewMeterValuesAndSerialRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterValuesAndSerialRowChanged == null)
          return;
        this.MeterValuesAndSerialRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterValuesAndSerialRowChanging == null)
          return;
        this.MeterValuesAndSerialRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterValuesAndSerialRowDeleted == null)
          return;
        this.MeterValuesAndSerialRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterValuesAndSerialRowDeleting == null)
          return;
        this.MeterValuesAndSerialRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterValuesAndSerialRow(ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterValuesAndSerialDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class OnlineTranslationDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow>
    {
      private DataColumn columnTextKey;
      private DataColumn columnTextDE;
      private DataColumn columnTextEN;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public OnlineTranslationDataTable()
      {
        this.TableName = "OnlineTranslation";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal OnlineTranslationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected OnlineTranslationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TextKeyColumn => this.columnTextKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TextDEColumn => this.columnTextDE;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TextENColumn => this.columnTextEN;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRowChangeEventHandler OnlineTranslationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRowChangeEventHandler OnlineTranslationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRowChangeEventHandler OnlineTranslationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRowChangeEventHandler OnlineTranslationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddOnlineTranslationRow(ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow AddOnlineTranslationRow(
        string TextKey,
        string TextDE,
        string TextEN)
      {
        ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow row = (ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) TextKey,
          (object) TextDE,
          (object) TextEN
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow FindByTextKey(string TextKey)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow) this.Rows.Find(new object[1]
        {
          (object) TextKey
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationDataTable translationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationDataTable) base.Clone();
        translationDataTable.InitVars();
        return (DataTable) translationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTextKey = this.Columns["TextKey"];
        this.columnTextDE = this.Columns["TextDE"];
        this.columnTextEN = this.Columns["TextEN"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTextKey = new DataColumn("TextKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTextKey);
        this.columnTextDE = new DataColumn("TextDE", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTextDE);
        this.columnTextEN = new DataColumn("TextEN", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTextEN);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnTextKey
        }, true));
        this.columnTextKey.AllowDBNull = false;
        this.columnTextKey.Unique = true;
        this.columnTextKey.MaxLength = 100;
        this.columnTextDE.MaxLength = 536870910;
        this.columnTextEN.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow NewOnlineTranslationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.OnlineTranslationRowChanged == null)
          return;
        this.OnlineTranslationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.OnlineTranslationRowChanging == null)
          return;
        this.OnlineTranslationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.OnlineTranslationRowDeleted == null)
          return;
        this.OnlineTranslationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.OnlineTranslationRowDeleting == null)
          return;
        this.OnlineTranslationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveOnlineTranslationRow(ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (OnlineTranslationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class S3_FunctionParameterDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow>
    {
      private DataColumn columnFunctionNumber;
      private DataColumn columnParameterOrder;
      private DataColumn columnParameterName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public S3_FunctionParameterDataTable()
      {
        this.TableName = "S3_FunctionParameter";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal S3_FunctionParameterDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected S3_FunctionParameterDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionNumberColumn => this.columnFunctionNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterOrderColumn => this.columnParameterOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterNameColumn => this.columnParameterName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRowChangeEventHandler S3_FunctionParameterRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRowChangeEventHandler S3_FunctionParameterRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRowChangeEventHandler S3_FunctionParameterRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRowChangeEventHandler S3_FunctionParameterRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddS3_FunctionParameterRow(ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow AddS3_FunctionParameterRow(
        short FunctionNumber,
        short ParameterOrder,
        string ParameterName)
      {
        ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow row = (ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) FunctionNumber,
          (object) ParameterOrder,
          (object) ParameterName
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow FindByFunctionNumberParameterOrder(
        short FunctionNumber,
        short ParameterOrder)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow) this.Rows.Find(new object[2]
        {
          (object) FunctionNumber,
          (object) ParameterOrder
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterDataTable parameterDataTable = (ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterDataTable) base.Clone();
        parameterDataTable.InitVars();
        return (DataTable) parameterDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnFunctionNumber = this.Columns["FunctionNumber"];
        this.columnParameterOrder = this.Columns["ParameterOrder"];
        this.columnParameterName = this.Columns["ParameterName"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnFunctionNumber = new DataColumn("FunctionNumber", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionNumber);
        this.columnParameterOrder = new DataColumn("ParameterOrder", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterOrder);
        this.columnParameterName = new DataColumn("ParameterName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterName);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnFunctionNumber,
          this.columnParameterOrder
        }, true));
        this.columnFunctionNumber.AllowDBNull = false;
        this.columnParameterOrder.AllowDBNull = false;
        this.columnParameterName.MaxLength = 100;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow NewS3_FunctionParameterRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.S3_FunctionParameterRowChanged == null)
          return;
        this.S3_FunctionParameterRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.S3_FunctionParameterRowChanging == null)
          return;
        this.S3_FunctionParameterRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.S3_FunctionParameterRowDeleted == null)
          return;
        this.S3_FunctionParameterRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.S3_FunctionParameterRowDeleting == null)
          return;
        this.S3_FunctionParameterRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveS3_FunctionParameterRow(ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (S3_FunctionParameterDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MTypeVMT_ElectronicDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow>
    {
      private DataColumn columnMeterTypeId;
      private DataColumn columnDeviceMemory;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeVMT_ElectronicDataTable()
      {
        this.TableName = "MTypeVMT_Electronic";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeVMT_ElectronicDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MTypeVMT_ElectronicDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIdColumn => this.columnMeterTypeId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DeviceMemoryColumn => this.columnDeviceMemory;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRowChangeEventHandler MTypeVMT_ElectronicRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRowChangeEventHandler MTypeVMT_ElectronicRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRowChangeEventHandler MTypeVMT_ElectronicRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRowChangeEventHandler MTypeVMT_ElectronicRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMTypeVMT_ElectronicRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow AddMTypeVMT_ElectronicRow(
        int MeterTypeId,
        byte[] DeviceMemory)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow row = (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) MeterTypeId,
          (object) DeviceMemory
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow FindByMeterTypeId(
        int MeterTypeId)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow) this.Rows.Find(new object[1]
        {
          (object) MeterTypeId
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicDataTable electronicDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicDataTable) base.Clone();
        electronicDataTable.InitVars();
        return (DataTable) electronicDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterTypeId = this.Columns["MeterTypeId"];
        this.columnDeviceMemory = this.Columns["DeviceMemory"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterTypeId = new DataColumn("MeterTypeId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeId);
        this.columnDeviceMemory = new DataColumn("DeviceMemory", typeof (byte[]), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeviceMemory);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterTypeId
        }, true));
        this.columnMeterTypeId.AllowDBNull = false;
        this.columnMeterTypeId.Unique = true;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow NewMTypeVMT_ElectronicRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MTypeVMT_ElectronicRowChanged == null)
          return;
        this.MTypeVMT_ElectronicRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MTypeVMT_ElectronicRowChanging == null)
          return;
        this.MTypeVMT_ElectronicRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MTypeVMT_ElectronicRowDeleted == null)
          return;
        this.MTypeVMT_ElectronicRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MTypeVMT_ElectronicRowDeleting == null)
          return;
        this.MTypeVMT_ElectronicRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMTypeVMT_ElectronicRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MTypeVMT_ElectronicDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MTypeVMT_HydraulicDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow>
    {
      private DataColumn columnMeterTypeId;
      private DataColumn columnImpulseValue;
      private DataColumn columnTestImpulseValue;
      private DataColumn columnQn;
      private DataColumn columnErrorCurveOffset;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeVMT_HydraulicDataTable()
      {
        this.TableName = "MTypeVMT_Hydraulic";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeVMT_HydraulicDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MTypeVMT_HydraulicDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIdColumn => this.columnMeterTypeId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ImpulseValueColumn => this.columnImpulseValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestImpulseValueColumn => this.columnTestImpulseValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn QnColumn => this.columnQn;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ErrorCurveOffsetColumn => this.columnErrorCurveOffset;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRowChangeEventHandler MTypeVMT_HydraulicRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRowChangeEventHandler MTypeVMT_HydraulicRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRowChangeEventHandler MTypeVMT_HydraulicRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRowChangeEventHandler MTypeVMT_HydraulicRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMTypeVMT_HydraulicRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow AddMTypeVMT_HydraulicRow(
        int MeterTypeId,
        double ImpulseValue,
        double TestImpulseValue,
        double Qn,
        double ErrorCurveOffset)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow row = (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) MeterTypeId,
          (object) ImpulseValue,
          (object) TestImpulseValue,
          (object) Qn,
          (object) ErrorCurveOffset
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow FindByMeterTypeId(
        int MeterTypeId)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow) this.Rows.Find(new object[1]
        {
          (object) MeterTypeId
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicDataTable hydraulicDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicDataTable) base.Clone();
        hydraulicDataTable.InitVars();
        return (DataTable) hydraulicDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterTypeId = this.Columns["MeterTypeId"];
        this.columnImpulseValue = this.Columns["ImpulseValue"];
        this.columnTestImpulseValue = this.Columns["TestImpulseValue"];
        this.columnQn = this.Columns["Qn"];
        this.columnErrorCurveOffset = this.Columns["ErrorCurveOffset"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterTypeId = new DataColumn("MeterTypeId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeId);
        this.columnImpulseValue = new DataColumn("ImpulseValue", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnImpulseValue);
        this.columnTestImpulseValue = new DataColumn("TestImpulseValue", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestImpulseValue);
        this.columnQn = new DataColumn("Qn", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQn);
        this.columnErrorCurveOffset = new DataColumn("ErrorCurveOffset", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnErrorCurveOffset);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterTypeId
        }, true));
        this.columnMeterTypeId.AllowDBNull = false;
        this.columnMeterTypeId.Unique = true;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow NewMTypeVMT_HydraulicRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MTypeVMT_HydraulicRowChanged == null)
          return;
        this.MTypeVMT_HydraulicRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MTypeVMT_HydraulicRowChanging == null)
          return;
        this.MTypeVMT_HydraulicRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MTypeVMT_HydraulicRowDeleted == null)
          return;
        this.MTypeVMT_HydraulicRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MTypeVMT_HydraulicRowDeleting == null)
          return;
        this.MTypeVMT_HydraulicRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMTypeVMT_HydraulicRow(ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MTypeVMT_HydraulicDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DataQsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.DataQsRow>
    {
      private DataColumn columnPPSArtikelNr;
      private DataColumn columnCheckDate;
      private DataColumn columnMeterInfoID;
      private DataColumn columnMeterID;
      private DataColumn columnSerialNr;
      private DataColumn columnBasetypeID;
      private DataColumn columnHardwareTypeID;
      private DataColumn columnFirmwareVersion;
      private DataColumn columnQsComment;
      private DataColumn columnCheckState;
      private DataColumn columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataQsDataTable()
      {
        this.TableName = "DataQs";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DataQsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected DataQsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPSArtikelNrColumn => this.columnPPSArtikelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CheckDateColumn => this.columnCheckDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterInfoIDColumn => this.columnMeterInfoID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SerialNrColumn => this.columnSerialNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BasetypeIDColumn => this.columnBasetypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareTypeIDColumn => this.columnHardwareTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FirmwareVersionColumn => this.columnFirmwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn QsCommentColumn => this.columnQsComment;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CheckStateColumn => this.columnCheckState;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonelNrColumn => this.columnPersonelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataQsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.DataQsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DataQsRowChangeEventHandler DataQsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DataQsRowChangeEventHandler DataQsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DataQsRowChangeEventHandler DataQsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.DataQsRowChangeEventHandler DataQsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddDataQsRow(ZR_ClassLibrary.Schema_Access.Schema.DataQsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataQsRow AddDataQsRow(
        string PPSArtikelNr,
        DateTime CheckDate,
        int MeterInfoID,
        int MeterID,
        string SerialNr,
        int BasetypeID,
        int HardwareTypeID,
        string FirmwareVersion,
        string QsComment,
        byte CheckState,
        int PersonelNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.DataQsRow row = (ZR_ClassLibrary.Schema_Access.Schema.DataQsRow) this.NewRow();
        object[] objArray = new object[11]
        {
          (object) PPSArtikelNr,
          (object) CheckDate,
          (object) MeterInfoID,
          (object) MeterID,
          (object) SerialNr,
          (object) BasetypeID,
          (object) HardwareTypeID,
          (object) FirmwareVersion,
          (object) QsComment,
          (object) CheckState,
          (object) PersonelNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataQsRow FindByCheckDateMeterInfoID(
        DateTime CheckDate,
        int MeterInfoID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DataQsRow) this.Rows.Find(new object[2]
        {
          (object) CheckDate,
          (object) MeterInfoID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.DataQsDataTable dataQsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.DataQsDataTable) base.Clone();
        dataQsDataTable.InitVars();
        return (DataTable) dataQsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.DataQsDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPPSArtikelNr = this.Columns["PPSArtikelNr"];
        this.columnCheckDate = this.Columns["CheckDate"];
        this.columnMeterInfoID = this.Columns["MeterInfoID"];
        this.columnMeterID = this.Columns["MeterID"];
        this.columnSerialNr = this.Columns["SerialNr"];
        this.columnBasetypeID = this.Columns["BasetypeID"];
        this.columnHardwareTypeID = this.Columns["HardwareTypeID"];
        this.columnFirmwareVersion = this.Columns["FirmwareVersion"];
        this.columnQsComment = this.Columns["QsComment"];
        this.columnCheckState = this.Columns["CheckState"];
        this.columnPersonelNr = this.Columns["PersonelNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPPSArtikelNr = new DataColumn("PPSArtikelNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPSArtikelNr);
        this.columnCheckDate = new DataColumn("CheckDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckDate);
        this.columnMeterInfoID = new DataColumn("MeterInfoID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoID);
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnSerialNr = new DataColumn("SerialNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSerialNr);
        this.columnBasetypeID = new DataColumn("BasetypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBasetypeID);
        this.columnHardwareTypeID = new DataColumn("HardwareTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareTypeID);
        this.columnFirmwareVersion = new DataColumn("FirmwareVersion", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareVersion);
        this.columnQsComment = new DataColumn("QsComment", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnQsComment);
        this.columnCheckState = new DataColumn("CheckState", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCheckState);
        this.columnPersonelNr = new DataColumn("PersonelNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonelNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnCheckDate,
          this.columnMeterInfoID
        }, true));
        this.columnPPSArtikelNr.MaxLength = 50;
        this.columnCheckDate.AllowDBNull = false;
        this.columnMeterInfoID.AllowDBNull = false;
        this.columnSerialNr.MaxLength = 50;
        this.columnFirmwareVersion.MaxLength = 50;
        this.columnQsComment.MaxLength = 1000;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataQsRow NewDataQsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.DataQsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.DataQsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.DataQsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DataQsRowChanged == null)
          return;
        this.DataQsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DataQsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DataQsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DataQsRowChanging == null)
          return;
        this.DataQsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DataQsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DataQsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DataQsRowDeleted == null)
          return;
        this.DataQsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DataQsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DataQsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DataQsRowDeleting == null)
          return;
        this.DataQsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.DataQsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.DataQsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveDataQsRow(ZR_ClassLibrary.Schema_Access.Schema.DataQsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DataQsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class S3_ParameterDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow>
    {
      private DataColumn columnParameterName;
      private DataColumn columnDefaultValue;
      private DataColumn columnMinValue;
      private DataColumn columnMaxValue;
      private DataColumn columnVariableType;
      private DataColumn columnLocation;
      private DataColumn columnDefaultDivVif;
      private DataColumn columnMBusParameterLen;
      private DataColumn columnMBusParameterConvert;
      private DataColumn columnIsResource;
      private DataColumn columnNeedResource;
      private DataColumn columnParameterUnit;
      private DataColumn columnParameterStorageType;
      private DataColumn columnParameterUnitFactor;
      private DataColumn columnParameterInfo;
      private DataColumn columnIsDynamicRamValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public S3_ParameterDataTable()
      {
        this.TableName = "S3_Parameter";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal S3_ParameterDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected S3_ParameterDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterNameColumn => this.columnParameterName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DefaultValueColumn => this.columnDefaultValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MinValueColumn => this.columnMinValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MaxValueColumn => this.columnMaxValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn VariableTypeColumn => this.columnVariableType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LocationColumn => this.columnLocation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DefaultDivVifColumn => this.columnDefaultDivVif;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusParameterLenColumn => this.columnMBusParameterLen;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MBusParameterConvertColumn => this.columnMBusParameterConvert;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn IsResourceColumn => this.columnIsResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NeedResourceColumn => this.columnNeedResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterUnitColumn => this.columnParameterUnit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterStorageTypeColumn => this.columnParameterStorageType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterUnitFactorColumn => this.columnParameterUnitFactor;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterInfoColumn => this.columnParameterInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn IsDynamicRamValueColumn => this.columnIsDynamicRamValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRowChangeEventHandler S3_ParameterRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRowChangeEventHandler S3_ParameterRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRowChangeEventHandler S3_ParameterRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRowChangeEventHandler S3_ParameterRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddS3_ParameterRow(ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow AddS3_ParameterRow(
        string ParameterName,
        double DefaultValue,
        double MinValue,
        double MaxValue,
        byte VariableType,
        string Location,
        string DefaultDivVif,
        short MBusParameterLen,
        string MBusParameterConvert,
        string IsResource,
        string NeedResource,
        string ParameterUnit,
        string ParameterStorageType,
        double ParameterUnitFactor,
        string ParameterInfo,
        bool IsDynamicRamValue)
      {
        ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow row = (ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow) this.NewRow();
        object[] objArray = new object[16]
        {
          (object) ParameterName,
          (object) DefaultValue,
          (object) MinValue,
          (object) MaxValue,
          (object) VariableType,
          (object) Location,
          (object) DefaultDivVif,
          (object) MBusParameterLen,
          (object) MBusParameterConvert,
          (object) IsResource,
          (object) NeedResource,
          (object) ParameterUnit,
          (object) ParameterStorageType,
          (object) ParameterUnitFactor,
          (object) ParameterInfo,
          (object) IsDynamicRamValue
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow FindByParameterName(
        string ParameterName)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow) this.Rows.Find(new object[1]
        {
          (object) ParameterName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterDataTable parameterDataTable = (ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterDataTable) base.Clone();
        parameterDataTable.InitVars();
        return (DataTable) parameterDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnParameterName = this.Columns["ParameterName"];
        this.columnDefaultValue = this.Columns["DefaultValue"];
        this.columnMinValue = this.Columns["MinValue"];
        this.columnMaxValue = this.Columns["MaxValue"];
        this.columnVariableType = this.Columns["VariableType"];
        this.columnLocation = this.Columns["Location"];
        this.columnDefaultDivVif = this.Columns["DefaultDivVif"];
        this.columnMBusParameterLen = this.Columns["MBusParameterLen"];
        this.columnMBusParameterConvert = this.Columns["MBusParameterConvert"];
        this.columnIsResource = this.Columns["IsResource"];
        this.columnNeedResource = this.Columns["NeedResource"];
        this.columnParameterUnit = this.Columns["ParameterUnit"];
        this.columnParameterStorageType = this.Columns["ParameterStorageType"];
        this.columnParameterUnitFactor = this.Columns["ParameterUnitFactor"];
        this.columnParameterInfo = this.Columns["ParameterInfo"];
        this.columnIsDynamicRamValue = this.Columns["IsDynamicRamValue"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnParameterName = new DataColumn("ParameterName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterName);
        this.columnDefaultValue = new DataColumn("DefaultValue", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDefaultValue);
        this.columnMinValue = new DataColumn("MinValue", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMinValue);
        this.columnMaxValue = new DataColumn("MaxValue", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMaxValue);
        this.columnVariableType = new DataColumn("VariableType", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnVariableType);
        this.columnLocation = new DataColumn("Location", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLocation);
        this.columnDefaultDivVif = new DataColumn("DefaultDivVif", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDefaultDivVif);
        this.columnMBusParameterLen = new DataColumn("MBusParameterLen", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusParameterLen);
        this.columnMBusParameterConvert = new DataColumn("MBusParameterConvert", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMBusParameterConvert);
        this.columnIsResource = new DataColumn("IsResource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIsResource);
        this.columnNeedResource = new DataColumn("NeedResource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNeedResource);
        this.columnParameterUnit = new DataColumn("ParameterUnit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterUnit);
        this.columnParameterStorageType = new DataColumn("ParameterStorageType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterStorageType);
        this.columnParameterUnitFactor = new DataColumn("ParameterUnitFactor", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterUnitFactor);
        this.columnParameterInfo = new DataColumn("ParameterInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterInfo);
        this.columnIsDynamicRamValue = new DataColumn("IsDynamicRamValue", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIsDynamicRamValue);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnParameterName
        }, true));
        this.columnParameterName.AllowDBNull = false;
        this.columnParameterName.Unique = true;
        this.columnParameterName.MaxLength = 100;
        this.columnLocation.MaxLength = 50;
        this.columnDefaultDivVif.MaxLength = 50;
        this.columnMBusParameterConvert.MaxLength = 50;
        this.columnIsResource.MaxLength = 50;
        this.columnNeedResource.Caption = "IsResource";
        this.columnNeedResource.MaxLength = 50;
        this.columnParameterUnit.MaxLength = 20;
        this.columnParameterStorageType.MaxLength = 20;
        this.columnParameterInfo.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow NewS3_ParameterRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.S3_ParameterRowChanged == null)
          return;
        this.S3_ParameterRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.S3_ParameterRowChanging == null)
          return;
        this.S3_ParameterRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.S3_ParameterRowDeleted == null)
          return;
        this.S3_ParameterRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.S3_ParameterRowDeleting == null)
          return;
        this.S3_ParameterRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveS3_ParameterRow(ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (S3_ParameterDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class SerialPortConfigurationDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow>
    {
      private DataColumn columnEquipmentID;
      private DataColumn columnPortGroup;
      private DataColumn columnPortPlace;
      private DataColumn columnPortIdentification;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SerialPortConfigurationDataTable()
      {
        this.TableName = "SerialPortConfiguration";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SerialPortConfigurationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected SerialPortConfigurationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PortGroupColumn => this.columnPortGroup;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PortPlaceColumn => this.columnPortPlace;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PortIdentificationColumn => this.columnPortIdentification;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRowChangeEventHandler SerialPortConfigurationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRowChangeEventHandler SerialPortConfigurationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRowChangeEventHandler SerialPortConfigurationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRowChangeEventHandler SerialPortConfigurationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddSerialPortConfigurationRow(ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow AddSerialPortConfigurationRow(
        int EquipmentID,
        int PortGroup,
        int PortPlace,
        string PortIdentification)
      {
        ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow row = (ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) EquipmentID,
          (object) PortGroup,
          (object) PortPlace,
          (object) PortIdentification
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow FindByEquipmentIDPortPlacePortGroup(
        int EquipmentID,
        int PortPlace,
        int PortGroup)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow) this.Rows.Find(new object[3]
        {
          (object) EquipmentID,
          (object) PortPlace,
          (object) PortGroup
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationDataTable configurationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationDataTable) base.Clone();
        configurationDataTable.InitVars();
        return (DataTable) configurationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnPortGroup = this.Columns["PortGroup"];
        this.columnPortPlace = this.Columns["PortPlace"];
        this.columnPortIdentification = this.Columns["PortIdentification"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnPortGroup = new DataColumn("PortGroup", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPortGroup);
        this.columnPortPlace = new DataColumn("PortPlace", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPortPlace);
        this.columnPortIdentification = new DataColumn("PortIdentification", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPortIdentification);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnEquipmentID,
          this.columnPortPlace,
          this.columnPortGroup
        }, true));
        this.columnEquipmentID.AllowDBNull = false;
        this.columnEquipmentID.DefaultValue = (object) 0;
        this.columnPortGroup.AllowDBNull = false;
        this.columnPortGroup.DefaultValue = (object) 0;
        this.columnPortPlace.AllowDBNull = false;
        this.columnPortPlace.DefaultValue = (object) 0;
        this.columnPortIdentification.AllowDBNull = false;
        this.columnPortIdentification.DefaultValue = (object) "";
        this.columnPortIdentification.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow NewSerialPortConfigurationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.SerialPortConfigurationRowChanged == null)
          return;
        this.SerialPortConfigurationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.SerialPortConfigurationRowChanging == null)
          return;
        this.SerialPortConfigurationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.SerialPortConfigurationRowDeleted == null)
          return;
        this.SerialPortConfigurationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.SerialPortConfigurationRowDeleting == null)
          return;
        this.SerialPortConfigurationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveSerialPortConfigurationRow(ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (SerialPortConfigurationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class FilterDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.FilterRow>
    {
      private DataColumn columnFilterId;
      private DataColumn columnName;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public FilterDataTable()
      {
        this.TableName = "Filter";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal FilterDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected FilterDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FilterIdColumn => this.columnFilterId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NameColumn => this.columnName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FilterRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.FilterRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FilterRowChangeEventHandler FilterRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FilterRowChangeEventHandler FilterRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FilterRowChangeEventHandler FilterRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FilterRowChangeEventHandler FilterRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddFilterRow(ZR_ClassLibrary.Schema_Access.Schema.FilterRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FilterRow AddFilterRow(
        int FilterId,
        string Name,
        string Description)
      {
        ZR_ClassLibrary.Schema_Access.Schema.FilterRow row = (ZR_ClassLibrary.Schema_Access.Schema.FilterRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) FilterId,
          (object) Name,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FilterRow FindByFilterId(int FilterId)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.FilterRow) this.Rows.Find(new object[1]
        {
          (object) FilterId
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.FilterDataTable filterDataTable = (ZR_ClassLibrary.Schema_Access.Schema.FilterDataTable) base.Clone();
        filterDataTable.InitVars();
        return (DataTable) filterDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.FilterDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnFilterId = this.Columns["FilterId"];
        this.columnName = this.Columns["Name"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnFilterId = new DataColumn("FilterId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFilterId);
        this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnName);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnFilterId
        }, true));
        this.columnFilterId.AllowDBNull = false;
        this.columnFilterId.Unique = true;
        this.columnName.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FilterRow NewFilterRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.FilterRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.FilterRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.FilterRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.FilterRowChanged == null)
          return;
        this.FilterRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FilterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FilterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.FilterRowChanging == null)
          return;
        this.FilterRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FilterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FilterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.FilterRowDeleted == null)
          return;
        this.FilterRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FilterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FilterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.FilterRowDeleting == null)
          return;
        this.FilterRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FilterRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FilterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveFilterRow(ZR_ClassLibrary.Schema_Access.Schema.FilterRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (FilterDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class FilterValueDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow>
    {
      private DataColumn columnFilterId;
      private DataColumn columnValueIdent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public FilterValueDataTable()
      {
        this.TableName = "FilterValue";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal FilterValueDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected FilterValueDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FilterIdColumn => this.columnFilterId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueIdentColumn => this.columnValueIdent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FilterValueRowChangeEventHandler FilterValueRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FilterValueRowChangeEventHandler FilterValueRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FilterValueRowChangeEventHandler FilterValueRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.FilterValueRowChangeEventHandler FilterValueRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddFilterValueRow(ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow AddFilterValueRow(
        int FilterId,
        string ValueIdent)
      {
        ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow row = (ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) FilterId,
          (object) ValueIdent
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow FindByFilterIdValueIdent(
        int FilterId,
        string ValueIdent)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow) this.Rows.Find(new object[2]
        {
          (object) FilterId,
          (object) ValueIdent
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.FilterValueDataTable filterValueDataTable = (ZR_ClassLibrary.Schema_Access.Schema.FilterValueDataTable) base.Clone();
        filterValueDataTable.InitVars();
        return (DataTable) filterValueDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.FilterValueDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnFilterId = this.Columns["FilterId"];
        this.columnValueIdent = this.Columns["ValueIdent"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnFilterId = new DataColumn("FilterId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFilterId);
        this.columnValueIdent = new DataColumn("ValueIdent", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValueIdent);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnFilterId,
          this.columnValueIdent
        }, true));
        this.columnFilterId.AllowDBNull = false;
        this.columnValueIdent.AllowDBNull = false;
        this.columnValueIdent.MaxLength = 19;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow NewFilterValueRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.FilterValueRowChanged == null)
          return;
        this.FilterValueRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FilterValueRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.FilterValueRowChanging == null)
          return;
        this.FilterValueRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FilterValueRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.FilterValueRowDeleted == null)
          return;
        this.FilterValueRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FilterValueRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.FilterValueRowDeleting == null)
          return;
        this.FilterValueRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.FilterValueRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveFilterValueRow(ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (FilterValueDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class PostTranslationMappingDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow>
    {
      private DataColumn columnRuleID;
      private DataColumn columnPValueIDSource;
      private DataColumn columnPValueIDDestination;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PostTranslationMappingDataTable()
      {
        this.TableName = "PostTranslationMapping";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PostTranslationMappingDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected PostTranslationMappingDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RuleIDColumn => this.columnRuleID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PValueIDSourceColumn => this.columnPValueIDSource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PValueIDDestinationColumn => this.columnPValueIDDestination;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRowChangeEventHandler PostTranslationMappingRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRowChangeEventHandler PostTranslationMappingRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRowChangeEventHandler PostTranslationMappingRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRowChangeEventHandler PostTranslationMappingRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddPostTranslationMappingRow(ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow AddPostTranslationMappingRow(
        int RuleID,
        int PValueIDSource,
        int PValueIDDestination)
      {
        ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow row = (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) RuleID,
          (object) PValueIDSource,
          (object) PValueIDDestination
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow FindByRuleIDPValueIDSource(
        int RuleID,
        int PValueIDSource)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow) this.Rows.Find(new object[2]
        {
          (object) RuleID,
          (object) PValueIDSource
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingDataTable mappingDataTable = (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingDataTable) base.Clone();
        mappingDataTable.InitVars();
        return (DataTable) mappingDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnRuleID = this.Columns["RuleID"];
        this.columnPValueIDSource = this.Columns["PValueIDSource"];
        this.columnPValueIDDestination = this.Columns["PValueIDDestination"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnRuleID = new DataColumn("RuleID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRuleID);
        this.columnPValueIDSource = new DataColumn("PValueIDSource", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPValueIDSource);
        this.columnPValueIDDestination = new DataColumn("PValueIDDestination", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPValueIDDestination);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnRuleID,
          this.columnPValueIDSource
        }, true));
        this.columnRuleID.AllowDBNull = false;
        this.columnPValueIDSource.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow NewPostTranslationMappingRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.PostTranslationMappingRowChanged == null)
          return;
        this.PostTranslationMappingRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.PostTranslationMappingRowChanging == null)
          return;
        this.PostTranslationMappingRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.PostTranslationMappingRowDeleted == null)
          return;
        this.PostTranslationMappingRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.PostTranslationMappingRowDeleting == null)
          return;
        this.PostTranslationMappingRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemovePostTranslationMappingRow(ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (PostTranslationMappingDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class PostTranslationRulesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow>
    {
      private DataColumn columnRuleID;
      private DataColumn columnRuleName;
      private DataColumn columnRuleDescription;
      private DataColumn columnRuleExportKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PostTranslationRulesDataTable()
      {
        this.TableName = "PostTranslationRules";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PostTranslationRulesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected PostTranslationRulesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RuleIDColumn => this.columnRuleID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RuleNameColumn => this.columnRuleName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RuleDescriptionColumn => this.columnRuleDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RuleExportKeyColumn => this.columnRuleExportKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRowChangeEventHandler PostTranslationRulesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRowChangeEventHandler PostTranslationRulesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRowChangeEventHandler PostTranslationRulesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRowChangeEventHandler PostTranslationRulesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddPostTranslationRulesRow(ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow AddPostTranslationRulesRow(
        int RuleID,
        string RuleName,
        string RuleDescription,
        string RuleExportKey)
      {
        ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow row = (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) RuleID,
          (object) RuleName,
          (object) RuleDescription,
          (object) RuleExportKey
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow FindByRuleID(int RuleID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow) this.Rows.Find(new object[1]
        {
          (object) RuleID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesDataTable translationRulesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesDataTable) base.Clone();
        translationRulesDataTable.InitVars();
        return (DataTable) translationRulesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnRuleID = this.Columns["RuleID"];
        this.columnRuleName = this.Columns["RuleName"];
        this.columnRuleDescription = this.Columns["RuleDescription"];
        this.columnRuleExportKey = this.Columns["RuleExportKey"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnRuleID = new DataColumn("RuleID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRuleID);
        this.columnRuleName = new DataColumn("RuleName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRuleName);
        this.columnRuleDescription = new DataColumn("RuleDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRuleDescription);
        this.columnRuleExportKey = new DataColumn("RuleExportKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRuleExportKey);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnRuleID
        }, true));
        this.columnRuleID.AllowDBNull = false;
        this.columnRuleID.Unique = true;
        this.columnRuleName.MaxLength = 100;
        this.columnRuleDescription.MaxLength = 536870910;
        this.columnRuleExportKey.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow NewPostTranslationRulesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.PostTranslationRulesRowChanged == null)
          return;
        this.PostTranslationRulesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.PostTranslationRulesRowChanging == null)
          return;
        this.PostTranslationRulesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.PostTranslationRulesRowDeleted == null)
          return;
        this.PostTranslationRulesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.PostTranslationRulesRowDeleting == null)
          return;
        this.PostTranslationRulesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemovePostTranslationRulesRow(ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (PostTranslationRulesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class PTSensorParametersDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow>
    {
      private DataColumn columnCalibrationID;
      private DataColumn columnEquipmentID;
      private DataColumn columnR0;
      private DataColumn columnAlpha;
      private DataColumn columnBeta;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PTSensorParametersDataTable()
      {
        this.TableName = "PTSensorParameters";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PTSensorParametersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected PTSensorParametersDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationIDColumn => this.columnCalibrationID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn R0Column => this.columnR0;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AlphaColumn => this.columnAlpha;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BetaColumn => this.columnBeta;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRowChangeEventHandler PTSensorParametersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRowChangeEventHandler PTSensorParametersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRowChangeEventHandler PTSensorParametersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRowChangeEventHandler PTSensorParametersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddPTSensorParametersRow(ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow AddPTSensorParametersRow(
        int CalibrationID,
        int EquipmentID,
        double R0,
        double Alpha,
        double Beta)
      {
        ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow row = (ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) CalibrationID,
          (object) EquipmentID,
          (object) R0,
          (object) Alpha,
          (object) Beta
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow FindByCalibrationID(
        int CalibrationID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow) this.Rows.Find(new object[1]
        {
          (object) CalibrationID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersDataTable parametersDataTable = (ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersDataTable) base.Clone();
        parametersDataTable.InitVars();
        return (DataTable) parametersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnCalibrationID = this.Columns["CalibrationID"];
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnR0 = this.Columns["R0"];
        this.columnAlpha = this.Columns["Alpha"];
        this.columnBeta = this.Columns["Beta"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnCalibrationID = new DataColumn("CalibrationID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationID);
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnR0 = new DataColumn("R0", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnR0);
        this.columnAlpha = new DataColumn("Alpha", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAlpha);
        this.columnBeta = new DataColumn("Beta", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBeta);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnCalibrationID
        }, true));
        this.columnCalibrationID.AllowDBNull = false;
        this.columnCalibrationID.Unique = true;
        this.columnEquipmentID.AllowDBNull = false;
        this.columnR0.AllowDBNull = false;
        this.columnAlpha.AllowDBNull = false;
        this.columnBeta.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow NewPTSensorParametersRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.PTSensorParametersRowChanged == null)
          return;
        this.PTSensorParametersRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.PTSensorParametersRowChanging == null)
          return;
        this.PTSensorParametersRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.PTSensorParametersRowDeleted == null)
          return;
        this.PTSensorParametersRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.PTSensorParametersRowDeleting == null)
          return;
        this.PTSensorParametersRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemovePTSensorParametersRow(ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (PTSensorParametersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class SensorObservationDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow>
    {
      private DataColumn columnEquipmentIDTestbench;
      private DataColumn columnCalibrationID;
      private DataColumn columnBathNumber;
      private DataColumn columnEquipmentIDSensor;
      private DataColumn columnEquipmentIDRef;
      private DataColumn columnSensorTemperature;
      private DataColumn columnRefTemperature;
      private DataColumn columnDeltaT;
      private DataColumn columnIsSwitchedOff;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SensorObservationDataTable()
      {
        this.TableName = "SensorObservation";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SensorObservationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected SensorObservationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDTestbenchColumn => this.columnEquipmentIDTestbench;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationIDColumn => this.columnCalibrationID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BathNumberColumn => this.columnBathNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDSensorColumn => this.columnEquipmentIDSensor;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDRefColumn => this.columnEquipmentIDRef;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SensorTemperatureColumn => this.columnSensorTemperature;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RefTemperatureColumn => this.columnRefTemperature;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DeltaTColumn => this.columnDeltaT;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn IsSwitchedOffColumn => this.columnIsSwitchedOff;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRowChangeEventHandler SensorObservationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRowChangeEventHandler SensorObservationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRowChangeEventHandler SensorObservationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRowChangeEventHandler SensorObservationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddSensorObservationRow(ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow AddSensorObservationRow(
        int EquipmentIDTestbench,
        int CalibrationID,
        int BathNumber,
        int EquipmentIDSensor,
        int EquipmentIDRef,
        double SensorTemperature,
        double RefTemperature,
        double DeltaT,
        byte IsSwitchedOff)
      {
        ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow row = (ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) EquipmentIDTestbench,
          (object) CalibrationID,
          (object) BathNumber,
          (object) EquipmentIDSensor,
          (object) EquipmentIDRef,
          (object) SensorTemperature,
          (object) RefTemperature,
          (object) DeltaT,
          (object) IsSwitchedOff
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow FindByEquipmentIDTestbenchCalibrationIDBathNumber(
        int EquipmentIDTestbench,
        int CalibrationID,
        int BathNumber)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow) this.Rows.Find(new object[3]
        {
          (object) EquipmentIDTestbench,
          (object) CalibrationID,
          (object) BathNumber
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.SensorObservationDataTable observationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.SensorObservationDataTable) base.Clone();
        observationDataTable.InitVars();
        return (DataTable) observationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SensorObservationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentIDTestbench = this.Columns["EquipmentIDTestbench"];
        this.columnCalibrationID = this.Columns["CalibrationID"];
        this.columnBathNumber = this.Columns["BathNumber"];
        this.columnEquipmentIDSensor = this.Columns["EquipmentIDSensor"];
        this.columnEquipmentIDRef = this.Columns["EquipmentIDRef"];
        this.columnSensorTemperature = this.Columns["SensorTemperature"];
        this.columnRefTemperature = this.Columns["RefTemperature"];
        this.columnDeltaT = this.Columns["DeltaT"];
        this.columnIsSwitchedOff = this.Columns["IsSwitchedOff"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentIDTestbench = new DataColumn("EquipmentIDTestbench", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentIDTestbench);
        this.columnCalibrationID = new DataColumn("CalibrationID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationID);
        this.columnBathNumber = new DataColumn("BathNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBathNumber);
        this.columnEquipmentIDSensor = new DataColumn("EquipmentIDSensor", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentIDSensor);
        this.columnEquipmentIDRef = new DataColumn("EquipmentIDRef", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentIDRef);
        this.columnSensorTemperature = new DataColumn("SensorTemperature", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSensorTemperature);
        this.columnRefTemperature = new DataColumn("RefTemperature", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRefTemperature);
        this.columnDeltaT = new DataColumn("DeltaT", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeltaT);
        this.columnIsSwitchedOff = new DataColumn("IsSwitchedOff", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIsSwitchedOff);
        this.Constraints.Add((Constraint) new UniqueConstraint("SensorObservationKey1", new DataColumn[3]
        {
          this.columnEquipmentIDTestbench,
          this.columnCalibrationID,
          this.columnBathNumber
        }, true));
        this.columnEquipmentIDTestbench.AllowDBNull = false;
        this.columnCalibrationID.AllowDBNull = false;
        this.columnBathNumber.AllowDBNull = false;
        this.columnEquipmentIDSensor.AllowDBNull = false;
        this.columnEquipmentIDRef.AllowDBNull = false;
        this.columnSensorTemperature.AllowDBNull = false;
        this.columnRefTemperature.AllowDBNull = false;
        this.columnDeltaT.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow NewSensorObservationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.SensorObservationRowChanged == null)
          return;
        this.SensorObservationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.SensorObservationRowChanging == null)
          return;
        this.SensorObservationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.SensorObservationRowDeleted == null)
          return;
        this.SensorObservationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.SensorObservationRowDeleting == null)
          return;
        this.SensorObservationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveSensorObservationRow(ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (SensorObservationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TestbenchNominalValuesHistoryDataTable : 
      TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow>
    {
      private DataColumn columnModificationDate;
      private DataColumn columnTestPointDataID;
      private DataColumn columnNominalValueID;
      private DataColumn columnNominalValue;
      private DataColumn columnValueDescription;
      private DataColumn columnModificationReason;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchNominalValuesHistoryDataTable()
      {
        this.TableName = "TestbenchNominalValuesHistory";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestbenchNominalValuesHistoryDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TestbenchNominalValuesHistoryDataTable(
        SerializationInfo info,
        StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ModificationDateColumn => this.columnModificationDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestPointDataIDColumn => this.columnTestPointDataID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NominalValueIDColumn => this.columnNominalValueID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NominalValueColumn => this.columnNominalValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueDescriptionColumn => this.columnValueDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ModificationReasonColumn => this.columnModificationReason;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRowChangeEventHandler TestbenchNominalValuesHistoryRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRowChangeEventHandler TestbenchNominalValuesHistoryRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRowChangeEventHandler TestbenchNominalValuesHistoryRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRowChangeEventHandler TestbenchNominalValuesHistoryRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTestbenchNominalValuesHistoryRow(ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow AddTestbenchNominalValuesHistoryRow(
        DateTime ModificationDate,
        int TestPointDataID,
        int NominalValueID,
        string NominalValue,
        string ValueDescription,
        string ModificationReason)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow row = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) ModificationDate,
          (object) TestPointDataID,
          (object) NominalValueID,
          (object) NominalValue,
          (object) ValueDescription,
          (object) ModificationReason
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow FindByModificationDateNominalValueIDTestPointDataID(
        DateTime ModificationDate,
        int NominalValueID,
        int TestPointDataID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow) this.Rows.Find(new object[3]
        {
          (object) ModificationDate,
          (object) NominalValueID,
          (object) TestPointDataID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryDataTable historyDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryDataTable) base.Clone();
        historyDataTable.InitVars();
        return (DataTable) historyDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnModificationDate = this.Columns["ModificationDate"];
        this.columnTestPointDataID = this.Columns["TestPointDataID"];
        this.columnNominalValueID = this.Columns["NominalValueID"];
        this.columnNominalValue = this.Columns["NominalValue"];
        this.columnValueDescription = this.Columns["ValueDescription"];
        this.columnModificationReason = this.Columns["ModificationReason"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnModificationDate = new DataColumn("ModificationDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnModificationDate);
        this.columnTestPointDataID = new DataColumn("TestPointDataID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestPointDataID);
        this.columnNominalValueID = new DataColumn("NominalValueID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNominalValueID);
        this.columnNominalValue = new DataColumn("NominalValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNominalValue);
        this.columnValueDescription = new DataColumn("ValueDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValueDescription);
        this.columnModificationReason = new DataColumn("ModificationReason", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnModificationReason);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnModificationDate,
          this.columnNominalValueID,
          this.columnTestPointDataID
        }, true));
        this.columnModificationDate.AllowDBNull = false;
        this.columnTestPointDataID.AllowDBNull = false;
        this.columnNominalValueID.AllowDBNull = false;
        this.columnNominalValue.MaxLength = (int) byte.MaxValue;
        this.columnValueDescription.MaxLength = 100;
        this.columnModificationReason.MaxLength = 100;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow NewTestbenchNominalValuesHistoryRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TestbenchNominalValuesHistoryRowChanged == null)
          return;
        this.TestbenchNominalValuesHistoryRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TestbenchNominalValuesHistoryRowChanging == null)
          return;
        this.TestbenchNominalValuesHistoryRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TestbenchNominalValuesHistoryRowDeleted == null)
          return;
        this.TestbenchNominalValuesHistoryRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TestbenchNominalValuesHistoryRowDeleting == null)
          return;
        this.TestbenchNominalValuesHistoryRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTestbenchNominalValuesHistoryRow(ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TestbenchNominalValuesHistoryDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ZRFunctionCompiledDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow>
    {
      private DataColumn columnFunctionNumber;
      private DataColumn columnRecordOrder;
      private DataColumn columnRecordType;
      private DataColumn columnName;
      private DataColumn columnOffset;
      private DataColumn columnCodes;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZRFunctionCompiledDataTable()
      {
        this.TableName = "ZRFunctionCompiled";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ZRFunctionCompiledDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ZRFunctionCompiledDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionNumberColumn => this.columnFunctionNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RecordOrderColumn => this.columnRecordOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RecordTypeColumn => this.columnRecordType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NameColumn => this.columnName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn OffsetColumn => this.columnOffset;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodesColumn => this.columnCodes;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRowChangeEventHandler ZRFunctionCompiledRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRowChangeEventHandler ZRFunctionCompiledRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRowChangeEventHandler ZRFunctionCompiledRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRowChangeEventHandler ZRFunctionCompiledRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddZRFunctionCompiledRow(ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow AddZRFunctionCompiledRow(
        int FunctionNumber,
        short RecordOrder,
        short RecordType,
        string Name,
        int Offset,
        byte[] Codes)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow row = (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) FunctionNumber,
          (object) RecordOrder,
          (object) RecordType,
          (object) Name,
          (object) Offset,
          (object) Codes
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow FindByFunctionNumberRecordOrder(
        int FunctionNumber,
        short RecordOrder)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow) this.Rows.Find(new object[2]
        {
          (object) FunctionNumber,
          (object) RecordOrder
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledDataTable compiledDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledDataTable) base.Clone();
        compiledDataTable.InitVars();
        return (DataTable) compiledDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnFunctionNumber = this.Columns["FunctionNumber"];
        this.columnRecordOrder = this.Columns["RecordOrder"];
        this.columnRecordType = this.Columns["RecordType"];
        this.columnName = this.Columns["Name"];
        this.columnOffset = this.Columns["Offset"];
        this.columnCodes = this.Columns["Codes"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnFunctionNumber = new DataColumn("FunctionNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionNumber);
        this.columnRecordOrder = new DataColumn("RecordOrder", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordOrder);
        this.columnRecordType = new DataColumn("RecordType", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordType);
        this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnName);
        this.columnOffset = new DataColumn("Offset", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOffset);
        this.columnCodes = new DataColumn("Codes", typeof (byte[]), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodes);
        this.Constraints.Add((Constraint) new UniqueConstraint("ZRFunctionCompiledKey1", new DataColumn[2]
        {
          this.columnFunctionNumber,
          this.columnRecordOrder
        }, true));
        this.columnFunctionNumber.AllowDBNull = false;
        this.columnRecordOrder.AllowDBNull = false;
        this.columnName.MaxLength = 100;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow NewZRFunctionCompiledRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ZRFunctionCompiledRowChanged == null)
          return;
        this.ZRFunctionCompiledRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ZRFunctionCompiledRowChanging == null)
          return;
        this.ZRFunctionCompiledRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ZRFunctionCompiledRowDeleted == null)
          return;
        this.ZRFunctionCompiledRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ZRFunctionCompiledRowDeleting == null)
          return;
        this.ZRFunctionCompiledRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveZRFunctionCompiledRow(ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ZRFunctionCompiledDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class EquipmentPartlistCreationDataTable : 
      TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow>
    {
      private DataColumn columnPartlistID;
      private DataColumn columnCreationDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EquipmentPartlistCreationDataTable()
      {
        this.TableName = "EquipmentPartlistCreation";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EquipmentPartlistCreationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected EquipmentPartlistCreationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PartlistIDColumn => this.columnPartlistID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CreationDateColumn => this.columnCreationDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRowChangeEventHandler EquipmentPartlistCreationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRowChangeEventHandler EquipmentPartlistCreationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRowChangeEventHandler EquipmentPartlistCreationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRowChangeEventHandler EquipmentPartlistCreationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddEquipmentPartlistCreationRow(ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow AddEquipmentPartlistCreationRow(
        int PartlistID,
        DateTime CreationDate)
      {
        ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow row = (ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) PartlistID,
          (object) CreationDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow FindByPartlistID(
        int PartlistID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow) this.Rows.Find(new object[1]
        {
          (object) PartlistID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationDataTable creationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationDataTable) base.Clone();
        creationDataTable.InitVars();
        return (DataTable) creationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPartlistID = this.Columns["PartlistID"];
        this.columnCreationDate = this.Columns["CreationDate"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPartlistID = new DataColumn("PartlistID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPartlistID);
        this.columnCreationDate = new DataColumn("CreationDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCreationDate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnPartlistID
        }, true));
        this.columnPartlistID.AllowDBNull = false;
        this.columnPartlistID.Unique = true;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow NewEquipmentPartlistCreationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.EquipmentPartlistCreationRowChanged == null)
          return;
        this.EquipmentPartlistCreationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.EquipmentPartlistCreationRowChanging == null)
          return;
        this.EquipmentPartlistCreationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.EquipmentPartlistCreationRowDeleted == null)
          return;
        this.EquipmentPartlistCreationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.EquipmentPartlistCreationRowDeleting == null)
          return;
        this.EquipmentPartlistCreationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveEquipmentPartlistCreationRow(ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (EquipmentPartlistCreationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class PTSensorCalibrationDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow>
    {
      private DataColumn columnEquipmentIDSensor;
      private DataColumn columnEquipmentIDCard;
      private DataColumn columnCardChannel;
      private DataColumn columnCalibrationID;
      private DataColumn columnT1;
      private DataColumn columnR1;
      private DataColumn columnT2;
      private DataColumn columnR2;
      private DataColumn columnT3;
      private DataColumn columnR3;
      private DataColumn columnTDevice1;
      private DataColumn columnTRef1;
      private DataColumn columnTDevice2;
      private DataColumn columnTRef2;
      private DataColumn columnR0;
      private DataColumn columnAlpha;
      private DataColumn columnBeta;
      private DataColumn columnTempOffset;
      private DataColumn columnTempGradient;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PTSensorCalibrationDataTable()
      {
        this.TableName = "PTSensorCalibration";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PTSensorCalibrationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected PTSensorCalibrationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDSensorColumn => this.columnEquipmentIDSensor;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDCardColumn => this.columnEquipmentIDCard;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CardChannelColumn => this.columnCardChannel;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationIDColumn => this.columnCalibrationID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn T1Column => this.columnT1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn R1Column => this.columnR1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn T2Column => this.columnT2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn R2Column => this.columnR2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn T3Column => this.columnT3;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn R3Column => this.columnR3;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TDevice1Column => this.columnTDevice1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TRef1Column => this.columnTRef1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TDevice2Column => this.columnTDevice2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TRef2Column => this.columnTRef2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn R0Column => this.columnR0;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AlphaColumn => this.columnAlpha;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BetaColumn => this.columnBeta;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TempOffsetColumn => this.columnTempOffset;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TempGradientColumn => this.columnTempGradient;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRowChangeEventHandler PTSensorCalibrationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRowChangeEventHandler PTSensorCalibrationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRowChangeEventHandler PTSensorCalibrationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRowChangeEventHandler PTSensorCalibrationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddPTSensorCalibrationRow(ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow AddPTSensorCalibrationRow(
        int EquipmentIDSensor,
        int EquipmentIDCard,
        int CardChannel,
        int CalibrationID,
        double T1,
        double R1,
        double T2,
        double R2,
        double T3,
        double R3,
        double TDevice1,
        double TRef1,
        double TDevice2,
        double TRef2,
        double R0,
        double Alpha,
        double Beta,
        double TempOffset,
        double TempGradient)
      {
        ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow row = (ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow) this.NewRow();
        object[] objArray = new object[19]
        {
          (object) EquipmentIDSensor,
          (object) EquipmentIDCard,
          (object) CardChannel,
          (object) CalibrationID,
          (object) T1,
          (object) R1,
          (object) T2,
          (object) R2,
          (object) T3,
          (object) R3,
          (object) TDevice1,
          (object) TRef1,
          (object) TDevice2,
          (object) TRef2,
          (object) R0,
          (object) Alpha,
          (object) Beta,
          (object) TempOffset,
          (object) TempGradient
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow FindByEquipmentIDSensorCalibrationIDCardChannelEquipmentIDCard(
        int EquipmentIDSensor,
        int CalibrationID,
        int CardChannel,
        int EquipmentIDCard)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow) this.Rows.Find(new object[4]
        {
          (object) EquipmentIDSensor,
          (object) CalibrationID,
          (object) CardChannel,
          (object) EquipmentIDCard
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationDataTable calibrationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationDataTable) base.Clone();
        calibrationDataTable.InitVars();
        return (DataTable) calibrationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentIDSensor = this.Columns["EquipmentIDSensor"];
        this.columnEquipmentIDCard = this.Columns["EquipmentIDCard"];
        this.columnCardChannel = this.Columns["CardChannel"];
        this.columnCalibrationID = this.Columns["CalibrationID"];
        this.columnT1 = this.Columns["T1"];
        this.columnR1 = this.Columns["R1"];
        this.columnT2 = this.Columns["T2"];
        this.columnR2 = this.Columns["R2"];
        this.columnT3 = this.Columns["T3"];
        this.columnR3 = this.Columns["R3"];
        this.columnTDevice1 = this.Columns["TDevice1"];
        this.columnTRef1 = this.Columns["TRef1"];
        this.columnTDevice2 = this.Columns["TDevice2"];
        this.columnTRef2 = this.Columns["TRef2"];
        this.columnR0 = this.Columns["R0"];
        this.columnAlpha = this.Columns["Alpha"];
        this.columnBeta = this.Columns["Beta"];
        this.columnTempOffset = this.Columns["TempOffset"];
        this.columnTempGradient = this.Columns["TempGradient"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentIDSensor = new DataColumn("EquipmentIDSensor", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentIDSensor);
        this.columnEquipmentIDCard = new DataColumn("EquipmentIDCard", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentIDCard);
        this.columnCardChannel = new DataColumn("CardChannel", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCardChannel);
        this.columnCalibrationID = new DataColumn("CalibrationID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationID);
        this.columnT1 = new DataColumn("T1", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnT1);
        this.columnR1 = new DataColumn("R1", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnR1);
        this.columnT2 = new DataColumn("T2", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnT2);
        this.columnR2 = new DataColumn("R2", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnR2);
        this.columnT3 = new DataColumn("T3", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnT3);
        this.columnR3 = new DataColumn("R3", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnR3);
        this.columnTDevice1 = new DataColumn("TDevice1", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTDevice1);
        this.columnTRef1 = new DataColumn("TRef1", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTRef1);
        this.columnTDevice2 = new DataColumn("TDevice2", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTDevice2);
        this.columnTRef2 = new DataColumn("TRef2", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTRef2);
        this.columnR0 = new DataColumn("R0", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnR0);
        this.columnAlpha = new DataColumn("Alpha", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAlpha);
        this.columnBeta = new DataColumn("Beta", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBeta);
        this.columnTempOffset = new DataColumn("TempOffset", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempOffset);
        this.columnTempGradient = new DataColumn("TempGradient", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTempGradient);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[4]
        {
          this.columnEquipmentIDSensor,
          this.columnCalibrationID,
          this.columnCardChannel,
          this.columnEquipmentIDCard
        }, true));
        this.columnEquipmentIDSensor.AllowDBNull = false;
        this.columnEquipmentIDCard.AllowDBNull = false;
        this.columnCardChannel.AllowDBNull = false;
        this.columnCalibrationID.AllowDBNull = false;
        this.columnT1.AllowDBNull = false;
        this.columnR1.AllowDBNull = false;
        this.columnT2.AllowDBNull = false;
        this.columnR2.AllowDBNull = false;
        this.columnT3.AllowDBNull = false;
        this.columnR3.AllowDBNull = false;
        this.columnTDevice1.AllowDBNull = false;
        this.columnTRef1.AllowDBNull = false;
        this.columnTDevice2.AllowDBNull = false;
        this.columnTRef2.AllowDBNull = false;
        this.columnR0.AllowDBNull = false;
        this.columnAlpha.AllowDBNull = false;
        this.columnBeta.AllowDBNull = false;
        this.columnTempOffset.AllowDBNull = false;
        this.columnTempGradient.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow NewPTSensorCalibrationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.PTSensorCalibrationRowChanged == null)
          return;
        this.PTSensorCalibrationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.PTSensorCalibrationRowChanging == null)
          return;
        this.PTSensorCalibrationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.PTSensorCalibrationRowDeleted == null)
          return;
        this.PTSensorCalibrationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.PTSensorCalibrationRowDeleting == null)
          return;
        this.PTSensorCalibrationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemovePTSensorCalibrationRow(ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (PTSensorCalibrationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class EtalonCalibrationDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow>
    {
      private DataColumn columnEquipmentID;
      private DataColumn columnCalibrationID;
      private DataColumn columnCalibrationValueID;
      private DataColumn columnCalibrationValue;
      private DataColumn columnCalibrationValueDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EtalonCalibrationDataTable()
      {
        this.TableName = "EtalonCalibration";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EtalonCalibrationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected EtalonCalibrationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationIDColumn => this.columnCalibrationID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationValueIDColumn => this.columnCalibrationValueID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationValueColumn => this.columnCalibrationValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalibrationValueDescriptionColumn => this.columnCalibrationValueDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRowChangeEventHandler EtalonCalibrationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRowChangeEventHandler EtalonCalibrationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRowChangeEventHandler EtalonCalibrationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRowChangeEventHandler EtalonCalibrationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddEtalonCalibrationRow(ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow AddEtalonCalibrationRow(
        int EquipmentID,
        int CalibrationID,
        int CalibrationValueID,
        string CalibrationValue,
        string CalibrationValueDescription)
      {
        ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow row = (ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) EquipmentID,
          (object) CalibrationID,
          (object) CalibrationValueID,
          (object) CalibrationValue,
          (object) CalibrationValueDescription
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow FindByEquipmentIDCalibrationValueIDCalibrationID(
        int EquipmentID,
        int CalibrationValueID,
        int CalibrationID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow) this.Rows.Find(new object[3]
        {
          (object) EquipmentID,
          (object) CalibrationValueID,
          (object) CalibrationID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationDataTable calibrationDataTable = (ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationDataTable) base.Clone();
        calibrationDataTable.InitVars();
        return (DataTable) calibrationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnCalibrationID = this.Columns["CalibrationID"];
        this.columnCalibrationValueID = this.Columns["CalibrationValueID"];
        this.columnCalibrationValue = this.Columns["CalibrationValue"];
        this.columnCalibrationValueDescription = this.Columns["CalibrationValueDescription"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnCalibrationID = new DataColumn("CalibrationID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationID);
        this.columnCalibrationValueID = new DataColumn("CalibrationValueID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationValueID);
        this.columnCalibrationValue = new DataColumn("CalibrationValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationValue);
        this.columnCalibrationValueDescription = new DataColumn("CalibrationValueDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalibrationValueDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnEquipmentID,
          this.columnCalibrationValueID,
          this.columnCalibrationID
        }, true));
        this.columnEquipmentID.AllowDBNull = false;
        this.columnCalibrationID.AllowDBNull = false;
        this.columnCalibrationValueID.AllowDBNull = false;
        this.columnCalibrationValue.MaxLength = (int) byte.MaxValue;
        this.columnCalibrationValueDescription.MaxLength = 100;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow NewEtalonCalibrationRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.EtalonCalibrationRowChanged == null)
          return;
        this.EtalonCalibrationRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.EtalonCalibrationRowChanging == null)
          return;
        this.EtalonCalibrationRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.EtalonCalibrationRowDeleted == null)
          return;
        this.EtalonCalibrationRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.EtalonCalibrationRowDeleting == null)
          return;
        this.EtalonCalibrationRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveEtalonCalibrationRow(ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (EtalonCalibrationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class UserPermissionsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow>
    {
      private DataColumn columnPermissionId;
      private DataColumn columnUserId;
      private DataColumn columnPermissionName;
      private DataColumn columnPermissionValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public UserPermissionsDataTable()
      {
        this.TableName = "UserPermissions";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal UserPermissionsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected UserPermissionsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PermissionIdColumn => this.columnPermissionId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserIdColumn => this.columnUserId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PermissionNameColumn => this.columnPermissionName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PermissionValueColumn => this.columnPermissionValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRowChangeEventHandler UserPermissionsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRowChangeEventHandler UserPermissionsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRowChangeEventHandler UserPermissionsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRowChangeEventHandler UserPermissionsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddUserPermissionsRow(ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow AddUserPermissionsRow(
        int PermissionId,
        int UserId,
        string PermissionName,
        bool PermissionValue)
      {
        ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow row = (ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) PermissionId,
          (object) UserId,
          (object) PermissionName,
          (object) PermissionValue
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsDataTable permissionsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsDataTable) base.Clone();
        permissionsDataTable.InitVars();
        return (DataTable) permissionsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPermissionId = this.Columns["PermissionId"];
        this.columnUserId = this.Columns["UserId"];
        this.columnPermissionName = this.Columns["PermissionName"];
        this.columnPermissionValue = this.Columns["PermissionValue"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPermissionId = new DataColumn("PermissionId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPermissionId);
        this.columnUserId = new DataColumn("UserId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserId);
        this.columnPermissionName = new DataColumn("PermissionName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPermissionName);
        this.columnPermissionValue = new DataColumn("PermissionValue", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPermissionValue);
        this.Constraints.Add((Constraint) new UniqueConstraint("UserPermissionsPK1", new DataColumn[1]
        {
          this.columnPermissionId
        }, false));
        this.columnPermissionId.AllowDBNull = false;
        this.columnPermissionId.Unique = true;
        this.columnUserId.AllowDBNull = false;
        this.columnPermissionName.MaxLength = 100;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow NewUserPermissionsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.UserPermissionsRowChanged == null)
          return;
        this.UserPermissionsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.UserPermissionsRowChanging == null)
          return;
        this.UserPermissionsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.UserPermissionsRowDeleted == null)
          return;
        this.UserPermissionsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.UserPermissionsRowDeleting == null)
          return;
        this.UserPermissionsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveUserPermissionsRow(ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (UserPermissionsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MinomatListDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow>
    {
      private DataColumn columnGsmID;
      private DataColumn columnMinolID;
      private DataColumn columnChallengeKey;
      private DataColumn columnSessionKey;
      private DataColumn columnChallengeKeyOld;
      private DataColumn columnSessionKeyOld;
      private DataColumn columnConnectionDate;
      private DataColumn columnConnectionLog;
      private DataColumn columnGsmIDEncoded;
      private DataColumn columnChallengeKeyEncoded;
      private DataColumn columnGsmIDEncodedOld;
      private DataColumn columnChallengeKeyEncodedOld;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinomatListDataTable()
      {
        this.TableName = "MinomatList";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinomatListDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MinomatListDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GsmIDColumn => this.columnGsmID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MinolIDColumn => this.columnMinolID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChallengeKeyColumn => this.columnChallengeKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SessionKeyColumn => this.columnSessionKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChallengeKeyOldColumn => this.columnChallengeKeyOld;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SessionKeyOldColumn => this.columnSessionKeyOld;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionDateColumn => this.columnConnectionDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionLogColumn => this.columnConnectionLog;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GsmIDEncodedColumn => this.columnGsmIDEncoded;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChallengeKeyEncodedColumn => this.columnChallengeKeyEncoded;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GsmIDEncodedOldColumn => this.columnGsmIDEncodedOld;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChallengeKeyEncodedOldColumn => this.columnChallengeKeyEncodedOld;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinomatListRowChangeEventHandler MinomatListRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinomatListRowChangeEventHandler MinomatListRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinomatListRowChangeEventHandler MinomatListRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinomatListRowChangeEventHandler MinomatListRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMinomatListRow(ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow AddMinomatListRow(
        string GsmID,
        string MinolID,
        string ChallengeKey,
        string SessionKey,
        string ChallengeKeyOld,
        string SessionKeyOld,
        string ConnectionDate,
        string ConnectionLog,
        string GsmIDEncoded,
        string ChallengeKeyEncoded,
        string GsmIDEncodedOld,
        string ChallengeKeyEncodedOld)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow row = (ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) GsmID,
          (object) MinolID,
          (object) ChallengeKey,
          (object) SessionKey,
          (object) ChallengeKeyOld,
          (object) SessionKeyOld,
          (object) ConnectionDate,
          (object) ConnectionLog,
          (object) GsmIDEncoded,
          (object) ChallengeKeyEncoded,
          (object) GsmIDEncodedOld,
          (object) ChallengeKeyEncodedOld
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow FindByGsmID(string GsmID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow) this.Rows.Find(new object[1]
        {
          (object) GsmID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MinomatListDataTable minomatListDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MinomatListDataTable) base.Clone();
        minomatListDataTable.InitVars();
        return (DataTable) minomatListDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinomatListDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnGsmID = this.Columns["GsmID"];
        this.columnMinolID = this.Columns["MinolID"];
        this.columnChallengeKey = this.Columns["ChallengeKey"];
        this.columnSessionKey = this.Columns["SessionKey"];
        this.columnChallengeKeyOld = this.Columns["ChallengeKeyOld"];
        this.columnSessionKeyOld = this.Columns["SessionKeyOld"];
        this.columnConnectionDate = this.Columns["ConnectionDate"];
        this.columnConnectionLog = this.Columns["ConnectionLog"];
        this.columnGsmIDEncoded = this.Columns["GsmIDEncoded"];
        this.columnChallengeKeyEncoded = this.Columns["ChallengeKeyEncoded"];
        this.columnGsmIDEncodedOld = this.Columns["GsmIDEncodedOld"];
        this.columnChallengeKeyEncodedOld = this.Columns["ChallengeKeyEncodedOld"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnGsmID = new DataColumn("GsmID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGsmID);
        this.columnMinolID = new DataColumn("MinolID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMinolID);
        this.columnChallengeKey = new DataColumn("ChallengeKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChallengeKey);
        this.columnSessionKey = new DataColumn("SessionKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSessionKey);
        this.columnChallengeKeyOld = new DataColumn("ChallengeKeyOld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChallengeKeyOld);
        this.columnSessionKeyOld = new DataColumn("SessionKeyOld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSessionKeyOld);
        this.columnConnectionDate = new DataColumn("ConnectionDate", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionDate);
        this.columnConnectionLog = new DataColumn("ConnectionLog", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionLog);
        this.columnGsmIDEncoded = new DataColumn("GsmIDEncoded", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGsmIDEncoded);
        this.columnChallengeKeyEncoded = new DataColumn("ChallengeKeyEncoded", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChallengeKeyEncoded);
        this.columnGsmIDEncodedOld = new DataColumn("GsmIDEncodedOld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGsmIDEncodedOld);
        this.columnChallengeKeyEncodedOld = new DataColumn("ChallengeKeyEncodedOld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChallengeKeyEncodedOld);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnGsmID
        }, true));
        this.columnGsmID.AllowDBNull = false;
        this.columnGsmID.Unique = true;
        this.columnGsmID.MaxLength = 8;
        this.columnMinolID.MaxLength = 8;
        this.columnChallengeKey.MaxLength = 8;
        this.columnSessionKey.MaxLength = 16;
        this.columnChallengeKeyOld.MaxLength = 8;
        this.columnSessionKeyOld.MaxLength = 16;
        this.columnConnectionDate.MaxLength = 14;
        this.columnConnectionLog.MaxLength = 150;
        this.columnGsmIDEncoded.MaxLength = 8;
        this.columnChallengeKeyEncoded.MaxLength = 8;
        this.columnGsmIDEncodedOld.MaxLength = 8;
        this.columnChallengeKeyEncodedOld.MaxLength = 8;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow NewMinomatListRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MinomatListRowChanged == null)
          return;
        this.MinomatListRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinomatListRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MinomatListRowChanging == null)
          return;
        this.MinomatListRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinomatListRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MinomatListRowDeleted == null)
          return;
        this.MinomatListRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinomatListRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MinomatListRowDeleting == null)
          return;
        this.MinomatListRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinomatListRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMinomatListRow(ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MinomatListDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class InstallationChangeLogDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow>
    {
      private DataColumn columnInstallationId;
      private DataColumn columnChangeTime;
      private DataColumn columnSoftwareVersion;
      private DataColumn columnLicenseName;
      private DataColumn columnLicenseCustomer;
      private DataColumn columnLicenseGeneratorID;
      private DataColumn columnLicenseGenerationTime;
      private DataColumn columnBasicState;
      private DataColumn columnState1;
      private DataColumn columnState2;
      private DataColumn columnChangeInfo;
      private DataColumn columnMainEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public InstallationChangeLogDataTable()
      {
        this.TableName = "InstallationChangeLog";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal InstallationChangeLogDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected InstallationChangeLogDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InstallationIdColumn => this.columnInstallationId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangeTimeColumn => this.columnChangeTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SoftwareVersionColumn => this.columnSoftwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LicenseNameColumn => this.columnLicenseName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LicenseCustomerColumn => this.columnLicenseCustomer;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LicenseGeneratorIDColumn => this.columnLicenseGeneratorID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LicenseGenerationTimeColumn => this.columnLicenseGenerationTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BasicStateColumn => this.columnBasicState;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn State1Column => this.columnState1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn State2Column => this.columnState2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangeInfoColumn => this.columnChangeInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MainEquipmentIDColumn => this.columnMainEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRowChangeEventHandler InstallationChangeLogRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRowChangeEventHandler InstallationChangeLogRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRowChangeEventHandler InstallationChangeLogRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRowChangeEventHandler InstallationChangeLogRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddInstallationChangeLogRow(ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow AddInstallationChangeLogRow(
        int InstallationId,
        DateTime ChangeTime,
        string SoftwareVersion,
        string LicenseName,
        string LicenseCustomer,
        int LicenseGeneratorID,
        DateTime LicenseGenerationTime,
        string BasicState,
        string State1,
        string State2,
        string ChangeInfo,
        int MainEquipmentID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow row = (ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) InstallationId,
          (object) ChangeTime,
          (object) SoftwareVersion,
          (object) LicenseName,
          (object) LicenseCustomer,
          (object) LicenseGeneratorID,
          (object) LicenseGenerationTime,
          (object) BasicState,
          (object) State1,
          (object) State2,
          (object) ChangeInfo,
          (object) MainEquipmentID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow FindByInstallationIdChangeTime(
        int InstallationId,
        DateTime ChangeTime)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow) this.Rows.Find(new object[2]
        {
          (object) InstallationId,
          (object) ChangeTime
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogDataTable changeLogDataTable = (ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogDataTable) base.Clone();
        changeLogDataTable.InitVars();
        return (DataTable) changeLogDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnInstallationId = this.Columns["InstallationId"];
        this.columnChangeTime = this.Columns["ChangeTime"];
        this.columnSoftwareVersion = this.Columns["SoftwareVersion"];
        this.columnLicenseName = this.Columns["LicenseName"];
        this.columnLicenseCustomer = this.Columns["LicenseCustomer"];
        this.columnLicenseGeneratorID = this.Columns["LicenseGeneratorID"];
        this.columnLicenseGenerationTime = this.Columns["LicenseGenerationTime"];
        this.columnBasicState = this.Columns["BasicState"];
        this.columnState1 = this.Columns["State1"];
        this.columnState2 = this.Columns["State2"];
        this.columnChangeInfo = this.Columns["ChangeInfo"];
        this.columnMainEquipmentID = this.Columns["MainEquipmentID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnInstallationId = new DataColumn("InstallationId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInstallationId);
        this.columnChangeTime = new DataColumn("ChangeTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeTime);
        this.columnSoftwareVersion = new DataColumn("SoftwareVersion", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSoftwareVersion);
        this.columnLicenseName = new DataColumn("LicenseName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLicenseName);
        this.columnLicenseCustomer = new DataColumn("LicenseCustomer", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLicenseCustomer);
        this.columnLicenseGeneratorID = new DataColumn("LicenseGeneratorID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLicenseGeneratorID);
        this.columnLicenseGenerationTime = new DataColumn("LicenseGenerationTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLicenseGenerationTime);
        this.columnBasicState = new DataColumn("BasicState", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBasicState);
        this.columnState1 = new DataColumn("State1", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnState1);
        this.columnState2 = new DataColumn("State2", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnState2);
        this.columnChangeInfo = new DataColumn("ChangeInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeInfo);
        this.columnMainEquipmentID = new DataColumn("MainEquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMainEquipmentID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnInstallationId,
          this.columnChangeTime
        }, true));
        this.columnInstallationId.AllowDBNull = false;
        this.columnChangeTime.AllowDBNull = false;
        this.columnSoftwareVersion.MaxLength = 50;
        this.columnLicenseName.MaxLength = (int) byte.MaxValue;
        this.columnLicenseCustomer.MaxLength = (int) byte.MaxValue;
        this.columnBasicState.MaxLength = 50;
        this.columnState1.MaxLength = 50;
        this.columnState2.MaxLength = 50;
        this.columnChangeInfo.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow NewInstallationChangeLogRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.InstallationChangeLogRowChanged == null)
          return;
        this.InstallationChangeLogRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.InstallationChangeLogRowChanging == null)
          return;
        this.InstallationChangeLogRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.InstallationChangeLogRowDeleted == null)
          return;
        this.InstallationChangeLogRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.InstallationChangeLogRowDeleting == null)
          return;
        this.InstallationChangeLogRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveInstallationChangeLogRow(ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (InstallationChangeLogDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class InstallationsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow>
    {
      private DataColumn columnInstallationId;
      private DataColumn columnPcName;
      private DataColumn columnInstallationPath;
      private DataColumn columnInstallataionName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public InstallationsDataTable()
      {
        this.TableName = "Installations";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal InstallationsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected InstallationsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InstallationIdColumn => this.columnInstallationId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PcNameColumn => this.columnPcName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InstallationPathColumn => this.columnInstallationPath;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InstallataionNameColumn => this.columnInstallataionName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.InstallationsRowChangeEventHandler InstallationsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.InstallationsRowChangeEventHandler InstallationsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.InstallationsRowChangeEventHandler InstallationsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.InstallationsRowChangeEventHandler InstallationsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddInstallationsRow(ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow AddInstallationsRow(
        int InstallationId,
        string PcName,
        string InstallationPath,
        string InstallataionName)
      {
        ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow row = (ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) InstallationId,
          (object) PcName,
          (object) InstallationPath,
          (object) InstallataionName
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow FindByInstallationId(
        int InstallationId)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow) this.Rows.Find(new object[1]
        {
          (object) InstallationId
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.InstallationsDataTable installationsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.InstallationsDataTable) base.Clone();
        installationsDataTable.InitVars();
        return (DataTable) installationsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.InstallationsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnInstallationId = this.Columns["InstallationId"];
        this.columnPcName = this.Columns["PcName"];
        this.columnInstallationPath = this.Columns["InstallationPath"];
        this.columnInstallataionName = this.Columns["InstallataionName"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnInstallationId = new DataColumn("InstallationId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInstallationId);
        this.columnPcName = new DataColumn("PcName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPcName);
        this.columnInstallationPath = new DataColumn("InstallationPath", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInstallationPath);
        this.columnInstallataionName = new DataColumn("InstallataionName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInstallataionName);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnInstallationId
        }, true));
        this.columnInstallationId.AllowDBNull = false;
        this.columnInstallationId.Unique = true;
        this.columnPcName.MaxLength = 100;
        this.columnInstallationPath.MaxLength = 536870910;
        this.columnInstallataionName.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow NewInstallationsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.InstallationsRowChanged == null)
          return;
        this.InstallationsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.InstallationsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.InstallationsRowChanging == null)
          return;
        this.InstallationsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.InstallationsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.InstallationsRowDeleted == null)
          return;
        this.InstallationsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.InstallationsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.InstallationsRowDeleting == null)
          return;
        this.InstallationsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.InstallationsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveInstallationsRow(ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (InstallationsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class InstallationUsersDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow>
    {
      private DataColumn columnInstallationId;
      private DataColumn columnChangeTime;
      private DataColumn columnUserId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public InstallationUsersDataTable()
      {
        this.TableName = "InstallationUsers";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal InstallationUsersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected InstallationUsersDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InstallationIdColumn => this.columnInstallationId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangeTimeColumn => this.columnChangeTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserIdColumn => this.columnUserId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRowChangeEventHandler InstallationUsersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRowChangeEventHandler InstallationUsersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRowChangeEventHandler InstallationUsersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRowChangeEventHandler InstallationUsersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddInstallationUsersRow(ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow AddInstallationUsersRow(
        int InstallationId,
        DateTime ChangeTime,
        int UserId)
      {
        ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow row = (ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) InstallationId,
          (object) ChangeTime,
          (object) UserId
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow FindByInstallationIdChangeTime(
        int InstallationId,
        DateTime ChangeTime)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow) this.Rows.Find(new object[2]
        {
          (object) InstallationId,
          (object) ChangeTime
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersDataTable installationUsersDataTable = (ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersDataTable) base.Clone();
        installationUsersDataTable.InitVars();
        return (DataTable) installationUsersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnInstallationId = this.Columns["InstallationId"];
        this.columnChangeTime = this.Columns["ChangeTime"];
        this.columnUserId = this.Columns["UserId"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnInstallationId = new DataColumn("InstallationId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInstallationId);
        this.columnChangeTime = new DataColumn("ChangeTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeTime);
        this.columnUserId = new DataColumn("UserId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserId);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnInstallationId,
          this.columnChangeTime
        }, true));
        this.columnInstallationId.AllowDBNull = false;
        this.columnChangeTime.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow NewInstallationUsersRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.InstallationUsersRowChanged == null)
          return;
        this.InstallationUsersRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.InstallationUsersRowChanging == null)
          return;
        this.InstallationUsersRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.InstallationUsersRowDeleted == null)
          return;
        this.InstallationUsersRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.InstallationUsersRowDeleting == null)
          return;
        this.InstallationUsersRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveInstallationUsersRow(ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (InstallationUsersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ChangeableParametersDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow>
    {
      private DataColumn columnParameterID;
      private DataColumn columnName;
      private DataColumn columnParameterType;
      private DataColumn columnMinValue;
      private DataColumn columnMaxValue;
      private DataColumn columnValueList;
      private DataColumn columnParameterEnvironment;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ChangeableParametersDataTable()
      {
        this.TableName = "ChangeableParameters";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ChangeableParametersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ChangeableParametersDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterIDColumn => this.columnParameterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NameColumn => this.columnName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterTypeColumn => this.columnParameterType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MinValueColumn => this.columnMinValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MaxValueColumn => this.columnMaxValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueListColumn => this.columnValueList;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterEnvironmentColumn => this.columnParameterEnvironment;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRowChangeEventHandler ChangeableParametersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRowChangeEventHandler ChangeableParametersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRowChangeEventHandler ChangeableParametersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRowChangeEventHandler ChangeableParametersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddChangeableParametersRow(ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow AddChangeableParametersRow(
        int ParameterID,
        string Name,
        string ParameterType,
        string MinValue,
        string MaxValue,
        string ValueList,
        string ParameterEnvironment)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow row = (ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) ParameterID,
          (object) Name,
          (object) ParameterType,
          (object) MinValue,
          (object) MaxValue,
          (object) ValueList,
          (object) ParameterEnvironment
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow FindByParameterID(
        int ParameterID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow) this.Rows.Find(new object[1]
        {
          (object) ParameterID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersDataTable parametersDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersDataTable) base.Clone();
        parametersDataTable.InitVars();
        return (DataTable) parametersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnParameterID = this.Columns["ParameterID"];
        this.columnName = this.Columns["Name"];
        this.columnParameterType = this.Columns["ParameterType"];
        this.columnMinValue = this.Columns["MinValue"];
        this.columnMaxValue = this.Columns["MaxValue"];
        this.columnValueList = this.Columns["ValueList"];
        this.columnParameterEnvironment = this.Columns["ParameterEnvironment"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnParameterID = new DataColumn("ParameterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterID);
        this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnName);
        this.columnParameterType = new DataColumn("ParameterType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterType);
        this.columnMinValue = new DataColumn("MinValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMinValue);
        this.columnMaxValue = new DataColumn("MaxValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMaxValue);
        this.columnValueList = new DataColumn("ValueList", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValueList);
        this.columnParameterEnvironment = new DataColumn("ParameterEnvironment", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterEnvironment);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnParameterID
        }, true));
        this.columnParameterID.AllowDBNull = false;
        this.columnParameterID.Unique = true;
        this.columnName.MaxLength = 50;
        this.columnParameterType.MaxLength = 50;
        this.columnMinValue.MaxLength = 50;
        this.columnMaxValue.MaxLength = 50;
        this.columnValueList.MaxLength = 536870910;
        this.columnParameterEnvironment.MaxLength = 20;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow NewChangeableParametersRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ChangeableParametersRowChanged == null)
          return;
        this.ChangeableParametersRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ChangeableParametersRowChanging == null)
          return;
        this.ChangeableParametersRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ChangeableParametersRowDeleted == null)
          return;
        this.ChangeableParametersRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ChangeableParametersRowDeleting == null)
          return;
        this.ChangeableParametersRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveChangeableParametersRow(ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ChangeableParametersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class GmmImagesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow>
    {
      private DataColumn columnImageID;
      private DataColumn columnImageGroup;
      private DataColumn columnName;
      private DataColumn columnImageData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public GmmImagesDataTable()
      {
        this.TableName = "GmmImages";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal GmmImagesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected GmmImagesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ImageIDColumn => this.columnImageID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ImageGroupColumn => this.columnImageGroup;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NameColumn => this.columnName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ImageDataColumn => this.columnImageData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRowChangeEventHandler GmmImagesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRowChangeEventHandler GmmImagesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRowChangeEventHandler GmmImagesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRowChangeEventHandler GmmImagesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddGmmImagesRow(ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow AddGmmImagesRow(
        int ImageID,
        short ImageGroup,
        string Name,
        byte[] ImageData)
      {
        ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow row = (ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) ImageID,
          (object) ImageGroup,
          (object) Name,
          (object) ImageData
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow FindByImageID(int ImageID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow) this.Rows.Find(new object[1]
        {
          (object) ImageID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.GmmImagesDataTable gmmImagesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.GmmImagesDataTable) base.Clone();
        gmmImagesDataTable.InitVars();
        return (DataTable) gmmImagesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.GmmImagesDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnImageID = this.Columns["ImageID"];
        this.columnImageGroup = this.Columns["ImageGroup"];
        this.columnName = this.Columns["Name"];
        this.columnImageData = this.Columns["ImageData"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnImageID = new DataColumn("ImageID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnImageID);
        this.columnImageGroup = new DataColumn("ImageGroup", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnImageGroup);
        this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnName);
        this.columnImageData = new DataColumn("ImageData", typeof (byte[]), (string) null, MappingType.Element);
        this.Columns.Add(this.columnImageData);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnImageID
        }, true));
        this.columnImageID.AllowDBNull = false;
        this.columnImageID.Unique = true;
        this.columnName.MaxLength = 250;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow NewGmmImagesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GmmImagesRowChanged == null)
          return;
        this.GmmImagesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GmmImagesRowChanging == null)
          return;
        this.GmmImagesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GmmImagesRowDeleted == null)
          return;
        this.GmmImagesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GmmImagesRowDeleting == null)
          return;
        this.GmmImagesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveGmmImagesRow(ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GmmImagesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ConnectionSettingsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow>
    {
      private DataColumn columnConnectionSettingsID;
      private DataColumn columnParameterID;
      private DataColumn columnParameterValue;
      private DataColumn columnParameterUsing;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ConnectionSettingsDataTable()
      {
        this.TableName = "ConnectionSettings";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ConnectionSettingsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ConnectionSettingsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionSettingsIDColumn => this.columnConnectionSettingsID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterIDColumn => this.columnParameterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterValueColumn => this.columnParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterUsingColumn => this.columnParameterUsing;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRowChangeEventHandler ConnectionSettingsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRowChangeEventHandler ConnectionSettingsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRowChangeEventHandler ConnectionSettingsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRowChangeEventHandler ConnectionSettingsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddConnectionSettingsRow(ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow AddConnectionSettingsRow(
        int ConnectionSettingsID,
        int ParameterID,
        string ParameterValue,
        string ParameterUsing)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow row = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) ConnectionSettingsID,
          (object) ParameterID,
          (object) ParameterValue,
          (object) ParameterUsing
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow FindByConnectionSettingsIDParameterID(
        int ConnectionSettingsID,
        int ParameterID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow) this.Rows.Find(new object[2]
        {
          (object) ConnectionSettingsID,
          (object) ParameterID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsDataTable settingsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsDataTable) base.Clone();
        settingsDataTable.InitVars();
        return (DataTable) settingsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnConnectionSettingsID = this.Columns["ConnectionSettingsID"];
        this.columnParameterID = this.Columns["ParameterID"];
        this.columnParameterValue = this.Columns["ParameterValue"];
        this.columnParameterUsing = this.Columns["ParameterUsing"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnConnectionSettingsID = new DataColumn("ConnectionSettingsID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionSettingsID);
        this.columnParameterID = new DataColumn("ParameterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterID);
        this.columnParameterValue = new DataColumn("ParameterValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterValue);
        this.columnParameterUsing = new DataColumn("ParameterUsing", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterUsing);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnConnectionSettingsID,
          this.columnParameterID
        }, true));
        this.columnConnectionSettingsID.AllowDBNull = false;
        this.columnParameterID.AllowDBNull = false;
        this.columnParameterValue.MaxLength = 250;
        this.columnParameterUsing.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow NewConnectionSettingsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ConnectionSettingsRowChanged == null)
          return;
        this.ConnectionSettingsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ConnectionSettingsRowChanging == null)
          return;
        this.ConnectionSettingsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ConnectionSettingsRowDeleted == null)
          return;
        this.ConnectionSettingsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ConnectionSettingsRowDeleting == null)
          return;
        this.ConnectionSettingsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveConnectionSettingsRow(ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ConnectionSettingsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ConnectionItemsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow>
    {
      private DataColumn columnConnectionItemID;
      private DataColumn columnItemGroupID;
      private DataColumn columnItemType;
      private DataColumn columnItemOrder;
      private DataColumn columnImageID;
      private DataColumn columnPermissionKey;
      private DataColumn columnName;
      private DataColumn columnDescription;
      private DataColumn columnTypeClassification;
      private DataColumn columnManufacturer;
      private DataColumn columnMedium;
      private DataColumn columnGeneration;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ConnectionItemsDataTable()
      {
        this.TableName = "ConnectionItems";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ConnectionItemsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ConnectionItemsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionItemIDColumn => this.columnConnectionItemID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ItemGroupIDColumn => this.columnItemGroupID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ItemTypeColumn => this.columnItemType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ItemOrderColumn => this.columnItemOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ImageIDColumn => this.columnImageID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PermissionKeyColumn => this.columnPermissionKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NameColumn => this.columnName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TypeClassificationColumn => this.columnTypeClassification;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ManufacturerColumn => this.columnManufacturer;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MediumColumn => this.columnMedium;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GenerationColumn => this.columnGeneration;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRowChangeEventHandler ConnectionItemsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRowChangeEventHandler ConnectionItemsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRowChangeEventHandler ConnectionItemsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRowChangeEventHandler ConnectionItemsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddConnectionItemsRow(ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow AddConnectionItemsRow(
        int ConnectionItemID,
        int ItemGroupID,
        string ItemType,
        int ItemOrder,
        int ImageID,
        string PermissionKey,
        string Name,
        string Description,
        string TypeClassification,
        string Manufacturer,
        string Medium,
        string Generation)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow row = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) ConnectionItemID,
          (object) ItemGroupID,
          (object) ItemType,
          (object) ItemOrder,
          (object) ImageID,
          (object) PermissionKey,
          (object) Name,
          (object) Description,
          (object) TypeClassification,
          (object) Manufacturer,
          (object) Medium,
          (object) Generation
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow FindByConnectionItemID(
        int ConnectionItemID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow) this.Rows.Find(new object[1]
        {
          (object) ConnectionItemID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsDataTable connectionItemsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsDataTable) base.Clone();
        connectionItemsDataTable.InitVars();
        return (DataTable) connectionItemsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnConnectionItemID = this.Columns["ConnectionItemID"];
        this.columnItemGroupID = this.Columns["ItemGroupID"];
        this.columnItemType = this.Columns["ItemType"];
        this.columnItemOrder = this.Columns["ItemOrder"];
        this.columnImageID = this.Columns["ImageID"];
        this.columnPermissionKey = this.Columns["PermissionKey"];
        this.columnName = this.Columns["Name"];
        this.columnDescription = this.Columns["Description"];
        this.columnTypeClassification = this.Columns["TypeClassification"];
        this.columnManufacturer = this.Columns["Manufacturer"];
        this.columnMedium = this.Columns["Medium"];
        this.columnGeneration = this.Columns["Generation"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnConnectionItemID = new DataColumn("ConnectionItemID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionItemID);
        this.columnItemGroupID = new DataColumn("ItemGroupID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnItemGroupID);
        this.columnItemType = new DataColumn("ItemType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnItemType);
        this.columnItemOrder = new DataColumn("ItemOrder", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnItemOrder);
        this.columnImageID = new DataColumn("ImageID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnImageID);
        this.columnPermissionKey = new DataColumn("PermissionKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPermissionKey);
        this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnName);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnTypeClassification = new DataColumn("TypeClassification", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTypeClassification);
        this.columnManufacturer = new DataColumn("Manufacturer", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnManufacturer);
        this.columnMedium = new DataColumn("Medium", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMedium);
        this.columnGeneration = new DataColumn("Generation", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGeneration);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnConnectionItemID
        }, true));
        this.columnConnectionItemID.AllowDBNull = false;
        this.columnConnectionItemID.Unique = true;
        this.columnItemType.MaxLength = 20;
        this.columnPermissionKey.MaxLength = 50;
        this.columnName.MaxLength = 50;
        this.columnDescription.MaxLength = 536870910;
        this.columnTypeClassification.MaxLength = 50;
        this.columnManufacturer.MaxLength = 50;
        this.columnMedium.MaxLength = 100;
        this.columnGeneration.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow NewConnectionItemsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ConnectionItemsRowChanged == null)
          return;
        this.ConnectionItemsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ConnectionItemsRowChanging == null)
          return;
        this.ConnectionItemsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ConnectionItemsRowDeleted == null)
          return;
        this.ConnectionItemsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ConnectionItemsRowDeleting == null)
          return;
        this.ConnectionItemsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveConnectionItemsRow(ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ConnectionItemsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ConnectionProfilesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow>
    {
      private DataColumn columnConnectionProfileID;
      private DataColumn columnEquipmentModelID;
      private DataColumn columnDeviceModelID;
      private DataColumn columnProfileTypeID;
      private DataColumn columnConnectionSettingsID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ConnectionProfilesDataTable()
      {
        this.TableName = "ConnectionProfiles";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ConnectionProfilesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ConnectionProfilesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionProfileIDColumn => this.columnConnectionProfileID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentModelIDColumn => this.columnEquipmentModelID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DeviceModelIDColumn => this.columnDeviceModelID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ProfileTypeIDColumn => this.columnProfileTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionSettingsIDColumn => this.columnConnectionSettingsID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRowChangeEventHandler ConnectionProfilesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRowChangeEventHandler ConnectionProfilesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRowChangeEventHandler ConnectionProfilesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRowChangeEventHandler ConnectionProfilesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddConnectionProfilesRow(ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow AddConnectionProfilesRow(
        int ConnectionProfileID,
        int EquipmentModelID,
        int DeviceModelID,
        int ProfileTypeID,
        int ConnectionSettingsID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow row = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) ConnectionProfileID,
          (object) EquipmentModelID,
          (object) DeviceModelID,
          (object) ProfileTypeID,
          (object) ConnectionSettingsID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow FindByConnectionProfileID(
        int ConnectionProfileID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow) this.Rows.Find(new object[1]
        {
          (object) ConnectionProfileID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesDataTable profilesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesDataTable) base.Clone();
        profilesDataTable.InitVars();
        return (DataTable) profilesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnConnectionProfileID = this.Columns["ConnectionProfileID"];
        this.columnEquipmentModelID = this.Columns["EquipmentModelID"];
        this.columnDeviceModelID = this.Columns["DeviceModelID"];
        this.columnProfileTypeID = this.Columns["ProfileTypeID"];
        this.columnConnectionSettingsID = this.Columns["ConnectionSettingsID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnConnectionProfileID = new DataColumn("ConnectionProfileID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionProfileID);
        this.columnEquipmentModelID = new DataColumn("EquipmentModelID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentModelID);
        this.columnDeviceModelID = new DataColumn("DeviceModelID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeviceModelID);
        this.columnProfileTypeID = new DataColumn("ProfileTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnProfileTypeID);
        this.columnConnectionSettingsID = new DataColumn("ConnectionSettingsID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionSettingsID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnConnectionProfileID
        }, true));
        this.columnConnectionProfileID.AllowDBNull = false;
        this.columnConnectionProfileID.Unique = true;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow NewConnectionProfilesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ConnectionProfilesRowChanged == null)
          return;
        this.ConnectionProfilesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ConnectionProfilesRowChanging == null)
          return;
        this.ConnectionProfilesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ConnectionProfilesRowDeleted == null)
          return;
        this.ConnectionProfilesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ConnectionProfilesRowDeleting == null)
          return;
        this.ConnectionProfilesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveConnectionProfilesRow(ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ConnectionProfilesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ServiceTaskResultDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow>
    {
      private DataColumn columnTimePoint;
      private DataColumn columnSerialNumber;
      private DataColumn columnJobID;
      private DataColumn columnMeterID;
      private DataColumn columnMethodName;
      private DataColumn columnResultType;
      private DataColumn columnResultObject;
      private DataColumn columnRawData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ServiceTaskResultDataTable()
      {
        this.TableName = "ServiceTaskResult";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ServiceTaskResultDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ServiceTaskResultDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TimePointColumn => this.columnTimePoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SerialNumberColumn => this.columnSerialNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn JobIDColumn => this.columnJobID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MethodNameColumn => this.columnMethodName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResultTypeColumn => this.columnResultType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResultObjectColumn => this.columnResultObject;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RawDataColumn => this.columnRawData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRowChangeEventHandler ServiceTaskResultRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRowChangeEventHandler ServiceTaskResultRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRowChangeEventHandler ServiceTaskResultRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRowChangeEventHandler ServiceTaskResultRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddServiceTaskResultRow(ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow AddServiceTaskResultRow(
        DateTime TimePoint,
        string SerialNumber,
        string JobID,
        string MeterID,
        string MethodName,
        string ResultType,
        string ResultObject,
        string RawData)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow row = (ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) TimePoint,
          (object) SerialNumber,
          (object) JobID,
          (object) MeterID,
          (object) MethodName,
          (object) ResultType,
          (object) ResultObject,
          (object) RawData
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultDataTable taskResultDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultDataTable) base.Clone();
        taskResultDataTable.InitVars();
        return (DataTable) taskResultDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTimePoint = this.Columns["TimePoint"];
        this.columnSerialNumber = this.Columns["SerialNumber"];
        this.columnJobID = this.Columns["JobID"];
        this.columnMeterID = this.Columns["MeterID"];
        this.columnMethodName = this.Columns["MethodName"];
        this.columnResultType = this.Columns["ResultType"];
        this.columnResultObject = this.Columns["ResultObject"];
        this.columnRawData = this.Columns["RawData"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTimePoint = new DataColumn("TimePoint", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTimePoint);
        this.columnSerialNumber = new DataColumn("SerialNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSerialNumber);
        this.columnJobID = new DataColumn("JobID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnJobID);
        this.columnMeterID = new DataColumn("MeterID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnMethodName = new DataColumn("MethodName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMethodName);
        this.columnResultType = new DataColumn("ResultType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResultType);
        this.columnResultObject = new DataColumn("ResultObject", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResultObject);
        this.columnRawData = new DataColumn("RawData", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRawData);
        this.columnTimePoint.AllowDBNull = false;
        this.columnTimePoint.DateTimeMode = DataSetDateTime.Unspecified;
        this.columnSerialNumber.AllowDBNull = false;
        this.columnSerialNumber.MaxLength = 100;
        this.columnJobID.MaxLength = 36;
        this.columnMeterID.MaxLength = 36;
        this.columnMethodName.AllowDBNull = false;
        this.columnMethodName.MaxLength = (int) byte.MaxValue;
        this.columnResultType.AllowDBNull = false;
        this.columnResultType.MaxLength = (int) byte.MaxValue;
        this.columnResultObject.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow NewServiceTaskResultRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ServiceTaskResultRowChanged == null)
          return;
        this.ServiceTaskResultRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ServiceTaskResultRowChanging == null)
          return;
        this.ServiceTaskResultRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ServiceTaskResultRowDeleted == null)
          return;
        this.ServiceTaskResultRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ServiceTaskResultRowDeleting == null)
          return;
        this.ServiceTaskResultRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveServiceTaskResultRow(ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ServiceTaskResultDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterMSSDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow>
    {
      private DataColumn columnMeterID;
      private DataColumn columnSerialNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterMSSDataTable()
      {
        this.TableName = "MeterMSS";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterMSSDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterMSSDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SerialNumberColumn => this.columnSerialNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRowChangeEventHandler MeterMSSRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRowChangeEventHandler MeterMSSRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRowChangeEventHandler MeterMSSRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRowChangeEventHandler MeterMSSRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterMSSRow(ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow AddMeterMSSRow(
        string MeterID,
        string SerialNumber)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow row = (ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) MeterID,
          (object) SerialNumber
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow FindByMeterIDSerialNumber(
        string MeterID,
        string SerialNumber)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow) this.Rows.Find(new object[2]
        {
          (object) MeterID,
          (object) SerialNumber
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterMSSDataTable meterMssDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MeterMSSDataTable) base.Clone();
        meterMssDataTable.InitVars();
        return (DataTable) meterMssDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterMSSDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterID = this.Columns["MeterID"];
        this.columnSerialNumber = this.Columns["SerialNumber"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterID = new DataColumn("MeterID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnSerialNumber = new DataColumn("SerialNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSerialNumber);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnMeterID,
          this.columnSerialNumber
        }, true));
        this.columnMeterID.AllowDBNull = false;
        this.columnMeterID.MaxLength = 36;
        this.columnSerialNumber.AllowDBNull = false;
        this.columnSerialNumber.MaxLength = 100;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow NewMeterMSSRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterMSSRowChanged == null)
          return;
        this.MeterMSSRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterMSSRowChanging == null)
          return;
        this.MeterMSSRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterMSSRowDeleted == null)
          return;
        this.MeterMSSRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterMSSRowDeleting == null)
          return;
        this.MeterMSSRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterMSSRow(ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterMSSDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MinomatConnectionLogsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow>
    {
      private DataColumn columnConnectionID;
      private DataColumn columnTimePoint;
      private DataColumn columnClientIP;
      private DataColumn columnGsmID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinomatConnectionLogsDataTable()
      {
        this.TableName = "MinomatConnectionLogs";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinomatConnectionLogsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MinomatConnectionLogsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionIDColumn => this.columnConnectionID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TimePointColumn => this.columnTimePoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ClientIPColumn => this.columnClientIP;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GsmIDColumn => this.columnGsmID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRowChangeEventHandler MinomatConnectionLogsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRowChangeEventHandler MinomatConnectionLogsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRowChangeEventHandler MinomatConnectionLogsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRowChangeEventHandler MinomatConnectionLogsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMinomatConnectionLogsRow(ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow AddMinomatConnectionLogsRow(
        string ConnectionID,
        string TimePoint,
        string ClientIP,
        string GsmID)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow row = (ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) ConnectionID,
          (object) TimePoint,
          (object) ClientIP,
          (object) GsmID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow FindByConnectionID(
        string ConnectionID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow) this.Rows.Find(new object[1]
        {
          (object) ConnectionID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsDataTable connectionLogsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsDataTable) base.Clone();
        connectionLogsDataTable.InitVars();
        return (DataTable) connectionLogsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnConnectionID = this.Columns["ConnectionID"];
        this.columnTimePoint = this.Columns["TimePoint"];
        this.columnClientIP = this.Columns["ClientIP"];
        this.columnGsmID = this.Columns["GsmID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnConnectionID = new DataColumn("ConnectionID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionID);
        this.columnTimePoint = new DataColumn("TimePoint", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTimePoint);
        this.columnClientIP = new DataColumn("ClientIP", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientIP);
        this.columnGsmID = new DataColumn("GsmID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGsmID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnConnectionID
        }, true));
        this.columnConnectionID.AllowDBNull = false;
        this.columnConnectionID.Unique = true;
        this.columnConnectionID.MaxLength = 36;
        this.columnTimePoint.MaxLength = 14;
        this.columnClientIP.MaxLength = 46;
        this.columnGsmID.MaxLength = 8;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow NewMinomatConnectionLogsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MinomatConnectionLogsRowChanged == null)
          return;
        this.MinomatConnectionLogsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MinomatConnectionLogsRowChanging == null)
          return;
        this.MinomatConnectionLogsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MinomatConnectionLogsRowDeleted == null)
          return;
        this.MinomatConnectionLogsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MinomatConnectionLogsRowDeleting == null)
          return;
        this.MinomatConnectionLogsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMinomatConnectionLogsRow(ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MinomatConnectionLogsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MinomatDataLogsDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow>
    {
      private DataColumn columnMinomatDataLogID;
      private DataColumn columnConnectionID;
      private DataColumn columnTimePoint;
      private DataColumn columnRawData;
      private DataColumn columnChallengeKey;
      private DataColumn columnSessionKey;
      private DataColumn columnIsIncoming;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinomatDataLogsDataTable()
      {
        this.TableName = "MinomatDataLogs";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinomatDataLogsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MinomatDataLogsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MinomatDataLogIDColumn => this.columnMinomatDataLogID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionIDColumn => this.columnConnectionID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TimePointColumn => this.columnTimePoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RawDataColumn => this.columnRawData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChallengeKeyColumn => this.columnChallengeKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SessionKeyColumn => this.columnSessionKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn IsIncomingColumn => this.columnIsIncoming;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRowChangeEventHandler MinomatDataLogsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRowChangeEventHandler MinomatDataLogsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRowChangeEventHandler MinomatDataLogsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRowChangeEventHandler MinomatDataLogsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMinomatDataLogsRow(ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow AddMinomatDataLogsRow(
        string MinomatDataLogID,
        string ConnectionID,
        string TimePoint,
        string RawData,
        string ChallengeKey,
        string SessionKey,
        bool IsIncoming)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow row = (ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) MinomatDataLogID,
          (object) ConnectionID,
          (object) TimePoint,
          (object) RawData,
          (object) ChallengeKey,
          (object) SessionKey,
          (object) IsIncoming
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsDataTable dataLogsDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsDataTable) base.Clone();
        dataLogsDataTable.InitVars();
        return (DataTable) dataLogsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMinomatDataLogID = this.Columns["MinomatDataLogID"];
        this.columnConnectionID = this.Columns["ConnectionID"];
        this.columnTimePoint = this.Columns["TimePoint"];
        this.columnRawData = this.Columns["RawData"];
        this.columnChallengeKey = this.Columns["ChallengeKey"];
        this.columnSessionKey = this.Columns["SessionKey"];
        this.columnIsIncoming = this.Columns["IsIncoming"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMinomatDataLogID = new DataColumn("MinomatDataLogID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMinomatDataLogID);
        this.columnConnectionID = new DataColumn("ConnectionID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionID);
        this.columnTimePoint = new DataColumn("TimePoint", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTimePoint);
        this.columnRawData = new DataColumn("RawData", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRawData);
        this.columnChallengeKey = new DataColumn("ChallengeKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChallengeKey);
        this.columnSessionKey = new DataColumn("SessionKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSessionKey);
        this.columnIsIncoming = new DataColumn("IsIncoming", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIsIncoming);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint11", new DataColumn[1]
        {
          this.columnMinomatDataLogID
        }, false));
        this.columnMinomatDataLogID.AllowDBNull = false;
        this.columnMinomatDataLogID.Unique = true;
        this.columnConnectionID.AllowDBNull = false;
        this.columnConnectionID.MaxLength = 36;
        this.columnTimePoint.AllowDBNull = false;
        this.columnTimePoint.MaxLength = 14;
        this.columnChallengeKey.MaxLength = 8;
        this.columnSessionKey.MaxLength = 16;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow NewMinomatDataLogsRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MinomatDataLogsRowChanged == null)
          return;
        this.MinomatDataLogsRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MinomatDataLogsRowChanging == null)
          return;
        this.MinomatDataLogsRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MinomatDataLogsRowDeleted == null)
          return;
        this.MinomatDataLogsRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MinomatDataLogsRowDeleting == null)
          return;
        this.MinomatDataLogsRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMinomatDataLogsRow(ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MinomatDataLogsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterChangesDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow>
    {
      private DataColumn columnChangeID;
      private DataColumn columnMeterID;
      private DataColumn columnChangeDate;
      private DataColumn columnMeterInfoID;
      private DataColumn columnSerialNr;
      private DataColumn columnProductionDate;
      private DataColumn columnApprovalDate;
      private DataColumn columnOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterChangesDataTable()
      {
        this.TableName = "MeterChanges";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterChangesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterChangesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangeIDColumn => this.columnChangeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangeDateColumn => this.columnChangeDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterInfoIDColumn => this.columnMeterInfoID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SerialNrColumn => this.columnSerialNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ProductionDateColumn => this.columnProductionDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalDateColumn => this.columnApprovalDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn OrderNrColumn => this.columnOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRowChangeEventHandler MeterChangesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRowChangeEventHandler MeterChangesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRowChangeEventHandler MeterChangesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRowChangeEventHandler MeterChangesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterChangesRow(ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow AddMeterChangesRow(
        int ChangeID,
        int MeterID,
        DateTime ChangeDate,
        int MeterInfoID,
        string SerialNr,
        DateTime ProductionDate,
        DateTime ApprovalDate,
        string OrderNr)
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow row = (ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) ChangeID,
          (object) MeterID,
          (object) ChangeDate,
          (object) MeterInfoID,
          (object) SerialNr,
          (object) ProductionDate,
          (object) ApprovalDate,
          (object) OrderNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow FindByChangeID(int ChangeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow) this.Rows.Find(new object[1]
        {
          (object) ChangeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.MeterChangesDataTable changesDataTable = (ZR_ClassLibrary.Schema_Access.Schema.MeterChangesDataTable) base.Clone();
        changesDataTable.InitVars();
        return (DataTable) changesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.MeterChangesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnChangeID = this.Columns["ChangeID"];
        this.columnMeterID = this.Columns["MeterID"];
        this.columnChangeDate = this.Columns["ChangeDate"];
        this.columnMeterInfoID = this.Columns["MeterInfoID"];
        this.columnSerialNr = this.Columns["SerialNr"];
        this.columnProductionDate = this.Columns["ProductionDate"];
        this.columnApprovalDate = this.Columns["ApprovalDate"];
        this.columnOrderNr = this.Columns["OrderNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnChangeID = new DataColumn("ChangeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeID);
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnChangeDate = new DataColumn("ChangeDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeDate);
        this.columnMeterInfoID = new DataColumn("MeterInfoID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoID);
        this.columnSerialNr = new DataColumn("SerialNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSerialNr);
        this.columnProductionDate = new DataColumn("ProductionDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnProductionDate);
        this.columnApprovalDate = new DataColumn("ApprovalDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalDate);
        this.columnOrderNr = new DataColumn("OrderNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOrderNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnChangeID
        }, true));
        this.columnChangeID.AllowDBNull = false;
        this.columnChangeID.Unique = true;
        this.columnSerialNr.MaxLength = 50;
        this.columnOrderNr.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow NewMeterChangesRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterChangesRowChanged == null)
          return;
        this.MeterChangesRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterChangesRowChanging == null)
          return;
        this.MeterChangesRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterChangesRowDeleted == null)
          return;
        this.MeterChangesRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterChangesRowDeleting == null)
          return;
        this.MeterChangesRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterChangesRow(ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterChangesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TransducerPalletDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow>
    {
      private DataColumn columnPalletID;
      private DataColumn columnPalletNumber;
      private DataColumn columnPalletTypeID;
      private DataColumn columnPalletCreationDate;
      private DataColumn columnCreatorID;
      private DataColumn columnLastModificationDate;
      private DataColumn columnThroughputs;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TransducerPalletDataTable()
      {
        this.TableName = "TransducerPallet";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TransducerPalletDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TransducerPalletDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PalletIDColumn => this.columnPalletID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PalletNumberColumn => this.columnPalletNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PalletTypeIDColumn => this.columnPalletTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PalletCreationDateColumn => this.columnPalletCreationDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CreatorIDColumn => this.columnCreatorID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LastModificationDateColumn => this.columnLastModificationDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ThroughputsColumn => this.columnThroughputs;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRowChangeEventHandler TransducerPalletRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRowChangeEventHandler TransducerPalletRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRowChangeEventHandler TransducerPalletRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRowChangeEventHandler TransducerPalletRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTransducerPalletRow(ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow AddTransducerPalletRow(
        int PalletID,
        string PalletNumber,
        int PalletTypeID,
        DateTime PalletCreationDate,
        int CreatorID,
        DateTime LastModificationDate,
        int Throughputs)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow row = (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) PalletID,
          (object) PalletNumber,
          (object) PalletTypeID,
          (object) PalletCreationDate,
          (object) CreatorID,
          (object) LastModificationDate,
          (object) Throughputs
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow FindByPalletID(int PalletID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow) this.Rows.Find(new object[1]
        {
          (object) PalletID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletDataTable transducerPalletDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletDataTable) base.Clone();
        transducerPalletDataTable.InitVars();
        return (DataTable) transducerPalletDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPalletID = this.Columns["PalletID"];
        this.columnPalletNumber = this.Columns["PalletNumber"];
        this.columnPalletTypeID = this.Columns["PalletTypeID"];
        this.columnPalletCreationDate = this.Columns["PalletCreationDate"];
        this.columnCreatorID = this.Columns["CreatorID"];
        this.columnLastModificationDate = this.Columns["LastModificationDate"];
        this.columnThroughputs = this.Columns["Throughputs"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPalletID = new DataColumn("PalletID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPalletID);
        this.columnPalletNumber = new DataColumn("PalletNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPalletNumber);
        this.columnPalletTypeID = new DataColumn("PalletTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPalletTypeID);
        this.columnPalletCreationDate = new DataColumn("PalletCreationDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPalletCreationDate);
        this.columnCreatorID = new DataColumn("CreatorID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCreatorID);
        this.columnLastModificationDate = new DataColumn("LastModificationDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastModificationDate);
        this.columnThroughputs = new DataColumn("Throughputs", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnThroughputs);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint2", new DataColumn[1]
        {
          this.columnPalletID
        }, true));
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint3", new DataColumn[1]
        {
          this.columnPalletNumber
        }, false));
        this.columnPalletID.AllowDBNull = false;
        this.columnPalletID.Unique = true;
        this.columnPalletNumber.AllowDBNull = false;
        this.columnPalletNumber.Unique = true;
        this.columnPalletNumber.MaxLength = 50;
        this.columnPalletTypeID.AllowDBNull = false;
        this.columnPalletCreationDate.AllowDBNull = false;
        this.columnCreatorID.AllowDBNull = false;
        this.columnLastModificationDate.AllowDBNull = false;
        this.columnThroughputs.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow NewTransducerPalletRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TransducerPalletRowChanged == null)
          return;
        this.TransducerPalletRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TransducerPalletRowChanging == null)
          return;
        this.TransducerPalletRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TransducerPalletRowDeleted == null)
          return;
        this.TransducerPalletRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TransducerPalletRowDeleting == null)
          return;
        this.TransducerPalletRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTransducerPalletRow(ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TransducerPalletDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TransducerPalletStateDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow>
    {
      private DataColumn columnPalletID;
      private DataColumn columnMeterID;
      private DataColumn columnPalletPlace;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TransducerPalletStateDataTable()
      {
        this.TableName = "TransducerPalletState";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TransducerPalletStateDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TransducerPalletStateDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PalletIDColumn => this.columnPalletID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PalletPlaceColumn => this.columnPalletPlace;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRowChangeEventHandler TransducerPalletStateRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRowChangeEventHandler TransducerPalletStateRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRowChangeEventHandler TransducerPalletStateRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRowChangeEventHandler TransducerPalletStateRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTransducerPalletStateRow(ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow AddTransducerPalletStateRow(
        int PalletID,
        int MeterID,
        int PalletPlace)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow row = (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) PalletID,
          (object) MeterID,
          (object) PalletPlace
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow FindByPalletIDMeterID(
        int PalletID,
        int MeterID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow) this.Rows.Find(new object[2]
        {
          (object) PalletID,
          (object) MeterID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateDataTable palletStateDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateDataTable) base.Clone();
        palletStateDataTable.InitVars();
        return (DataTable) palletStateDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPalletID = this.Columns["PalletID"];
        this.columnMeterID = this.Columns["MeterID"];
        this.columnPalletPlace = this.Columns["PalletPlace"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPalletID = new DataColumn("PalletID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPalletID);
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnPalletPlace = new DataColumn("PalletPlace", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPalletPlace);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnPalletID,
          this.columnMeterID
        }, true));
        this.columnPalletID.AllowDBNull = false;
        this.columnMeterID.AllowDBNull = false;
        this.columnPalletPlace.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow NewTransducerPalletStateRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TransducerPalletStateRowChanged == null)
          return;
        this.TransducerPalletStateRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TransducerPalletStateRowChanging == null)
          return;
        this.TransducerPalletStateRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TransducerPalletStateRowDeleted == null)
          return;
        this.TransducerPalletStateRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TransducerPalletStateRowDeleting == null)
          return;
        this.TransducerPalletStateRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTransducerPalletStateRow(ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TransducerPalletStateDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TransducerPalletTypeDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow>
    {
      private DataColumn columnPalletTypeID;
      private DataColumn columnPalletDescription;
      private DataColumn columnPalletColumns;
      private DataColumn columnPalletRows;
      private DataColumn columnUnusablePlaces;
      private DataColumn columnTransducerType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TransducerPalletTypeDataTable()
      {
        this.TableName = "TransducerPalletType";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TransducerPalletTypeDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected TransducerPalletTypeDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PalletTypeIDColumn => this.columnPalletTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PalletDescriptionColumn => this.columnPalletDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PalletColumnsColumn => this.columnPalletColumns;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PalletRowsColumn => this.columnPalletRows;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UnusablePlacesColumn => this.columnUnusablePlaces;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TransducerTypeColumn => this.columnTransducerType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRowChangeEventHandler TransducerPalletTypeRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRowChangeEventHandler TransducerPalletTypeRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRowChangeEventHandler TransducerPalletTypeRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRowChangeEventHandler TransducerPalletTypeRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddTransducerPalletTypeRow(ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow AddTransducerPalletTypeRow(
        int PalletTypeID,
        string PalletDescription,
        byte PalletColumns,
        byte PalletRows,
        string UnusablePlaces,
        int TransducerType)
      {
        ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow row = (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) PalletTypeID,
          (object) PalletDescription,
          (object) PalletColumns,
          (object) PalletRows,
          (object) UnusablePlaces,
          (object) TransducerType
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow FindByPalletTypeID(
        int PalletTypeID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow) this.Rows.Find(new object[1]
        {
          (object) PalletTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeDataTable palletTypeDataTable = (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeDataTable) base.Clone();
        palletTypeDataTable.InitVars();
        return (DataTable) palletTypeDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPalletTypeID = this.Columns["PalletTypeID"];
        this.columnPalletDescription = this.Columns["PalletDescription"];
        this.columnPalletColumns = this.Columns["PalletColumns"];
        this.columnPalletRows = this.Columns["PalletRows"];
        this.columnUnusablePlaces = this.Columns["UnusablePlaces"];
        this.columnTransducerType = this.Columns["TransducerType"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPalletTypeID = new DataColumn("PalletTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPalletTypeID);
        this.columnPalletDescription = new DataColumn("PalletDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPalletDescription);
        this.columnPalletColumns = new DataColumn("PalletColumns", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPalletColumns);
        this.columnPalletRows = new DataColumn("PalletRows", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPalletRows);
        this.columnUnusablePlaces = new DataColumn("UnusablePlaces", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUnusablePlaces);
        this.columnTransducerType = new DataColumn("TransducerType", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTransducerType);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnPalletTypeID
        }, true));
        this.columnPalletTypeID.AllowDBNull = false;
        this.columnPalletTypeID.Unique = true;
        this.columnPalletDescription.AllowDBNull = false;
        this.columnPalletDescription.MaxLength = 50;
        this.columnPalletColumns.AllowDBNull = false;
        this.columnPalletRows.AllowDBNull = false;
        this.columnUnusablePlaces.MaxLength = (int) byte.MaxValue;
        this.columnTransducerType.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow NewTransducerPalletTypeRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.TransducerPalletTypeRowChanged == null)
          return;
        this.TransducerPalletTypeRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.TransducerPalletTypeRowChanging == null)
          return;
        this.TransducerPalletTypeRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.TransducerPalletTypeRowDeleted == null)
          return;
        this.TransducerPalletTypeRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.TransducerPalletTypeRowDeleting == null)
          return;
        this.TransducerPalletTypeRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveTransducerPalletTypeRow(ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (TransducerPalletTypeDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ConnectionItemParametersDataTable : 
      TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow>
    {
      private DataColumn columnConnectionItemID;
      private DataColumn columnConnectionItemParameter;
      private DataColumn columnParameterOrder;
      private DataColumn columnParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ConnectionItemParametersDataTable()
      {
        this.TableName = "ConnectionItemParameters";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ConnectionItemParametersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ConnectionItemParametersDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionItemIDColumn => this.columnConnectionItemID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionItemParameterColumn => this.columnConnectionItemParameter;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterOrderColumn => this.columnParameterOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterValueColumn => this.columnParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRowChangeEventHandler ConnectionItemParametersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRowChangeEventHandler ConnectionItemParametersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRowChangeEventHandler ConnectionItemParametersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRowChangeEventHandler ConnectionItemParametersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddConnectionItemParametersRow(ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow AddConnectionItemParametersRow(
        int ConnectionItemID,
        int ConnectionItemParameter,
        int ParameterOrder,
        string ParameterValue)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow row = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) ConnectionItemID,
          (object) ConnectionItemParameter,
          (object) ParameterOrder,
          (object) ParameterValue
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow FindByConnectionItemIDConnectionItemParameterParameterOrder(
        int ConnectionItemID,
        int ConnectionItemParameter,
        int ParameterOrder)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow) this.Rows.Find(new object[3]
        {
          (object) ConnectionItemID,
          (object) ConnectionItemParameter,
          (object) ParameterOrder
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersDataTable parametersDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersDataTable) base.Clone();
        parametersDataTable.InitVars();
        return (DataTable) parametersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnConnectionItemID = this.Columns["ConnectionItemID"];
        this.columnConnectionItemParameter = this.Columns["ConnectionItemParameter"];
        this.columnParameterOrder = this.Columns["ParameterOrder"];
        this.columnParameterValue = this.Columns["ParameterValue"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnConnectionItemID = new DataColumn("ConnectionItemID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionItemID);
        this.columnConnectionItemParameter = new DataColumn("ConnectionItemParameter", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionItemParameter);
        this.columnParameterOrder = new DataColumn("ParameterOrder", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterOrder);
        this.columnParameterValue = new DataColumn("ParameterValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterValue);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnConnectionItemID,
          this.columnConnectionItemParameter,
          this.columnParameterOrder
        }, true));
        this.columnConnectionItemID.AllowDBNull = false;
        this.columnConnectionItemParameter.AllowDBNull = false;
        this.columnParameterOrder.AllowDBNull = false;
        this.columnParameterValue.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow NewConnectionItemParametersRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ConnectionItemParametersRowChanged == null)
          return;
        this.ConnectionItemParametersRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ConnectionItemParametersRowChanging == null)
          return;
        this.ConnectionItemParametersRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ConnectionItemParametersRowDeleted == null)
          return;
        this.ConnectionItemParametersRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ConnectionItemParametersRowDeleting == null)
          return;
        this.ConnectionItemParametersRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveConnectionItemParametersRow(ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ConnectionItemParametersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ConnectionProfileParametersDataTable : 
      TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow>
    {
      private DataColumn columnConnectionProfileID;
      private DataColumn columnConnectionProfileParameter;
      private DataColumn columnParameterOrder;
      private DataColumn columnParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ConnectionProfileParametersDataTable()
      {
        this.TableName = "ConnectionProfileParameters";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ConnectionProfileParametersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ConnectionProfileParametersDataTable(
        SerializationInfo info,
        StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionProfileIDColumn => this.columnConnectionProfileID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionProfileParameterColumn => this.columnConnectionProfileParameter;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterOrderColumn => this.columnParameterOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterValueColumn => this.columnParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRowChangeEventHandler ConnectionProfileParametersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRowChangeEventHandler ConnectionProfileParametersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRowChangeEventHandler ConnectionProfileParametersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRowChangeEventHandler ConnectionProfileParametersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddConnectionProfileParametersRow(ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow AddConnectionProfileParametersRow(
        int ConnectionProfileID,
        int ConnectionProfileParameter,
        int ParameterOrder,
        string ParameterValue)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow row = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) ConnectionProfileID,
          (object) ConnectionProfileParameter,
          (object) ParameterOrder,
          (object) ParameterValue
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow FindByConnectionProfileIDConnectionProfileParameterParameterOrder(
        int ConnectionProfileID,
        int ConnectionProfileParameter,
        int ParameterOrder)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow) this.Rows.Find(new object[3]
        {
          (object) ConnectionProfileID,
          (object) ConnectionProfileParameter,
          (object) ParameterOrder
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersDataTable parametersDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersDataTable) base.Clone();
        parametersDataTable.InitVars();
        return (DataTable) parametersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnConnectionProfileID = this.Columns["ConnectionProfileID"];
        this.columnConnectionProfileParameter = this.Columns["ConnectionProfileParameter"];
        this.columnParameterOrder = this.Columns["ParameterOrder"];
        this.columnParameterValue = this.Columns["ParameterValue"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnConnectionProfileID = new DataColumn("ConnectionProfileID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionProfileID);
        this.columnConnectionProfileParameter = new DataColumn("ConnectionProfileParameter", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionProfileParameter);
        this.columnParameterOrder = new DataColumn("ParameterOrder", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterOrder);
        this.columnParameterValue = new DataColumn("ParameterValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterValue);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnConnectionProfileID,
          this.columnConnectionProfileParameter,
          this.columnParameterOrder
        }, true));
        this.columnConnectionProfileID.AllowDBNull = false;
        this.columnConnectionProfileParameter.AllowDBNull = false;
        this.columnParameterOrder.AllowDBNull = false;
        this.columnParameterValue.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow NewConnectionProfileParametersRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ConnectionProfileParametersRowChanged == null)
          return;
        this.ConnectionProfileParametersRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ConnectionProfileParametersRowChanging == null)
          return;
        this.ConnectionProfileParametersRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ConnectionProfileParametersRowDeleted == null)
          return;
        this.ConnectionProfileParametersRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ConnectionProfileParametersRowDeleting == null)
          return;
        this.ConnectionProfileParametersRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveConnectionProfileParametersRow(ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ConnectionProfileParametersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ConnectionProfileFiltersDataTable : 
      TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow>
    {
      private DataColumn columnConnectionFilterID;
      private DataColumn columnFilterGroupNumber;
      private DataColumn columnConnectionProfileParameter;
      private DataColumn columnParameterOrder;
      private DataColumn columnGroupFunction;
      private DataColumn columnParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ConnectionProfileFiltersDataTable()
      {
        this.TableName = "ConnectionProfileFilters";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ConnectionProfileFiltersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ConnectionProfileFiltersDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionFilterIDColumn => this.columnConnectionFilterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FilterGroupNumberColumn => this.columnFilterGroupNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionProfileParameterColumn => this.columnConnectionProfileParameter;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterOrderColumn => this.columnParameterOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GroupFunctionColumn => this.columnGroupFunction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterValueColumn => this.columnParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRowChangeEventHandler ConnectionProfileFiltersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRowChangeEventHandler ConnectionProfileFiltersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRowChangeEventHandler ConnectionProfileFiltersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRowChangeEventHandler ConnectionProfileFiltersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddConnectionProfileFiltersRow(ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow AddConnectionProfileFiltersRow(
        int ConnectionFilterID,
        int FilterGroupNumber,
        int ConnectionProfileParameter,
        int ParameterOrder,
        int GroupFunction,
        string ParameterValue)
      {
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow row = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) ConnectionFilterID,
          (object) FilterGroupNumber,
          (object) ConnectionProfileParameter,
          (object) ParameterOrder,
          (object) GroupFunction,
          (object) ParameterValue
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow FindByConnectionFilterIDFilterGroupNumberConnectionProfileParameterParameterOrder(
        int ConnectionFilterID,
        int FilterGroupNumber,
        int ConnectionProfileParameter,
        int ParameterOrder)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow) this.Rows.Find(new object[4]
        {
          (object) ConnectionFilterID,
          (object) FilterGroupNumber,
          (object) ConnectionProfileParameter,
          (object) ParameterOrder
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersDataTable filtersDataTable = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersDataTable) base.Clone();
        filtersDataTable.InitVars();
        return (DataTable) filtersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnConnectionFilterID = this.Columns["ConnectionFilterID"];
        this.columnFilterGroupNumber = this.Columns["FilterGroupNumber"];
        this.columnConnectionProfileParameter = this.Columns["ConnectionProfileParameter"];
        this.columnParameterOrder = this.Columns["ParameterOrder"];
        this.columnGroupFunction = this.Columns["GroupFunction"];
        this.columnParameterValue = this.Columns["ParameterValue"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnConnectionFilterID = new DataColumn("ConnectionFilterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionFilterID);
        this.columnFilterGroupNumber = new DataColumn("FilterGroupNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFilterGroupNumber);
        this.columnConnectionProfileParameter = new DataColumn("ConnectionProfileParameter", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionProfileParameter);
        this.columnParameterOrder = new DataColumn("ParameterOrder", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterOrder);
        this.columnGroupFunction = new DataColumn("GroupFunction", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGroupFunction);
        this.columnParameterValue = new DataColumn("ParameterValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterValue);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[4]
        {
          this.columnConnectionFilterID,
          this.columnFilterGroupNumber,
          this.columnConnectionProfileParameter,
          this.columnParameterOrder
        }, true));
        this.columnConnectionFilterID.AllowDBNull = false;
        this.columnFilterGroupNumber.AllowDBNull = false;
        this.columnConnectionProfileParameter.AllowDBNull = false;
        this.columnParameterOrder.AllowDBNull = false;
        this.columnGroupFunction.AllowDBNull = false;
        this.columnParameterValue.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow NewConnectionProfileFiltersRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ConnectionProfileFiltersRowChanged == null)
          return;
        this.ConnectionProfileFiltersRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ConnectionProfileFiltersRowChanging == null)
          return;
        this.ConnectionProfileFiltersRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ConnectionProfileFiltersRowDeleted == null)
          return;
        this.ConnectionProfileFiltersRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ConnectionProfileFiltersRowDeleting == null)
          return;
        this.ConnectionProfileFiltersRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveConnectionProfileFiltersRow(ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ConnectionProfileFiltersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class NotificationRecordDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow>
    {
      private DataColumn columnID;
      private DataColumn columnEquipmentID;
      private DataColumn columnBasicState;
      private DataColumn columnSMSState;
      private DataColumn columnEmailState;
      private DataColumn columnDateTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public NotificationRecordDataTable()
      {
        this.TableName = "NotificationRecord";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal NotificationRecordDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected NotificationRecordDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn IDColumn => this.columnID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentIDColumn => this.columnEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BasicStateColumn => this.columnBasicState;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SMSStateColumn => this.columnSMSState;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EmailStateColumn => this.columnEmailState;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DateTimeColumn => this.columnDateTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRowChangeEventHandler NotificationRecordRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRowChangeEventHandler NotificationRecordRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRowChangeEventHandler NotificationRecordRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRowChangeEventHandler NotificationRecordRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddNotificationRecordRow(ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow AddNotificationRecordRow(
        int ID,
        int EquipmentID,
        string BasicState,
        bool SMSState,
        bool EmailState,
        DateTime DateTime)
      {
        ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow row = (ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) ID,
          (object) EquipmentID,
          (object) BasicState,
          (object) SMSState,
          (object) EmailState,
          (object) DateTime
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordDataTable notificationRecordDataTable = (ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordDataTable) base.Clone();
        notificationRecordDataTable.InitVars();
        return (DataTable) notificationRecordDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnID = this.Columns["ID"];
        this.columnEquipmentID = this.Columns["EquipmentID"];
        this.columnBasicState = this.Columns["BasicState"];
        this.columnSMSState = this.Columns["SMSState"];
        this.columnEmailState = this.Columns["EmailState"];
        this.columnDateTime = this.Columns["DateTime"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnID = new DataColumn("ID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnID);
        this.columnEquipmentID = new DataColumn("EquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentID);
        this.columnBasicState = new DataColumn("BasicState", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBasicState);
        this.columnSMSState = new DataColumn("SMSState", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSMSState);
        this.columnEmailState = new DataColumn("EmailState", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEmailState);
        this.columnDateTime = new DataColumn("DateTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDateTime);
        this.Constraints.Add((Constraint) new UniqueConstraint("NotificationRecordKey1", new DataColumn[1]
        {
          this.columnID
        }, false));
        this.columnID.Unique = true;
        this.columnEquipmentID.AllowDBNull = false;
        this.columnBasicState.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow NewNotificationRecordRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.NotificationRecordRowChanged == null)
          return;
        this.NotificationRecordRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.NotificationRecordRowChanging == null)
          return;
        this.NotificationRecordRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.NotificationRecordRowDeleted == null)
          return;
        this.NotificationRecordRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.NotificationRecordRowDeleting == null)
          return;
        this.NotificationRecordRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveNotificationRecordRow(ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (NotificationRecordDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class SAP_CacheDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow>
    {
      private DataColumn columnMeterInfoID;
      private DataColumn columnParameterID;
      private DataColumn columnParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SAP_CacheDataTable()
      {
        this.TableName = "SAP_Cache";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SAP_CacheDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected SAP_CacheDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterInfoIDColumn => this.columnMeterInfoID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterIDColumn => this.columnParameterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ParameterValueColumn => this.columnParameterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRowChangeEventHandler SAP_CacheRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRowChangeEventHandler SAP_CacheRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRowChangeEventHandler SAP_CacheRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRowChangeEventHandler SAP_CacheRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddSAP_CacheRow(ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow AddSAP_CacheRow(
        int MeterInfoID,
        int ParameterID,
        string ParameterValue)
      {
        ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow row = (ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) MeterInfoID,
          (object) ParameterID,
          (object) ParameterValue
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow FindByMeterInfoIDParameterID(
        int MeterInfoID,
        int ParameterID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow) this.Rows.Find(new object[2]
        {
          (object) MeterInfoID,
          (object) ParameterID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheDataTable sapCacheDataTable = (ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheDataTable) base.Clone();
        sapCacheDataTable.InitVars();
        return (DataTable) sapCacheDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterInfoID = this.Columns["MeterInfoID"];
        this.columnParameterID = this.Columns["ParameterID"];
        this.columnParameterValue = this.Columns["ParameterValue"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterInfoID = new DataColumn("MeterInfoID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoID);
        this.columnParameterID = new DataColumn("ParameterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterID);
        this.columnParameterValue = new DataColumn("ParameterValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnParameterValue);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnMeterInfoID,
          this.columnParameterID
        }, true));
        this.columnMeterInfoID.AllowDBNull = false;
        this.columnParameterID.AllowDBNull = false;
        this.columnParameterValue.AllowDBNull = false;
        this.columnParameterValue.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow NewSAP_CacheRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.SAP_CacheRowChanged == null)
          return;
        this.SAP_CacheRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.SAP_CacheRowChanging == null)
          return;
        this.SAP_CacheRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.SAP_CacheRowDeleted == null)
          return;
        this.SAP_CacheRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.SAP_CacheRowDeleting == null)
          return;
        this.SAP_CacheRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveSAP_CacheRow(ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (SAP_CacheDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class SAP_ClassUsingDataTable : TypedTableBase<ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow>
    {
      private DataColumn columnMeterInfoID;
      private DataColumn columnSapClassID;
      private DataColumn columnIsMainClass;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SAP_ClassUsingDataTable()
      {
        this.TableName = "SAP_ClassUsing";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SAP_ClassUsingDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected SAP_ClassUsingDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterInfoIDColumn => this.columnMeterInfoID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SapClassIDColumn => this.columnSapClassID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn IsMainClassColumn => this.columnIsMainClass;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow this[int index]
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRowChangeEventHandler SAP_ClassUsingRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRowChangeEventHandler SAP_ClassUsingRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRowChangeEventHandler SAP_ClassUsingRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRowChangeEventHandler SAP_ClassUsingRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddSAP_ClassUsingRow(ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow AddSAP_ClassUsingRow(
        int MeterInfoID,
        int SapClassID,
        byte IsMainClass)
      {
        ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow row = (ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) MeterInfoID,
          (object) SapClassID,
          (object) IsMainClass
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow FindByMeterInfoIDSapClassID(
        int MeterInfoID,
        int SapClassID)
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow) this.Rows.Find(new object[2]
        {
          (object) MeterInfoID,
          (object) SapClassID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingDataTable classUsingDataTable = (ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingDataTable) base.Clone();
        classUsingDataTable.InitVars();
        return (DataTable) classUsingDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterInfoID = this.Columns["MeterInfoID"];
        this.columnSapClassID = this.Columns["SapClassID"];
        this.columnIsMainClass = this.Columns["IsMainClass"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterInfoID = new DataColumn("MeterInfoID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoID);
        this.columnSapClassID = new DataColumn("SapClassID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSapClassID);
        this.columnIsMainClass = new DataColumn("IsMainClass", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIsMainClass);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnMeterInfoID,
          this.columnSapClassID
        }, true));
        this.columnMeterInfoID.AllowDBNull = false;
        this.columnSapClassID.AllowDBNull = false;
        this.columnIsMainClass.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow NewSAP_ClassUsingRow()
      {
        return (ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.SAP_ClassUsingRowChanged == null)
          return;
        this.SAP_ClassUsingRowChanged((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.SAP_ClassUsingRowChanging == null)
          return;
        this.SAP_ClassUsingRowChanging((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.SAP_ClassUsingRowDeleted == null)
          return;
        this.SAP_ClassUsingRowDeleted((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.SAP_ClassUsingRowDeleting == null)
          return;
        this.SAP_ClassUsingRowDeleting((object) this, new ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRowChangeEvent((ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveSAP_ClassUsingRow(ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        ZR_ClassLibrary.Schema_Access.Schema schema = new ZR_ClassLibrary.Schema_Access.Schema();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = schema.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (SAP_ClassUsingDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = schema.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    public class EnumTranslationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationDataTable tableEnumTranslation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EnumTranslationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableEnumTranslation = (ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string EnumName
      {
        get => (string) this[this.tableEnumTranslation.EnumNameColumn];
        set => this[this.tableEnumTranslation.EnumNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string EnumElement
      {
        get => (string) this[this.tableEnumTranslation.EnumElementColumn];
        set => this[this.tableEnumTranslation.EnumElementColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string de_Name
      {
        get
        {
          try
          {
            return (string) this[this.tableEnumTranslation.de_NameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'de_Name' in table 'EnumTranslation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEnumTranslation.de_NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string de_Description
      {
        get
        {
          try
          {
            return (string) this[this.tableEnumTranslation.de_DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'de_Description' in table 'EnumTranslation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEnumTranslation.de_DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string en_Name
      {
        get
        {
          try
          {
            return (string) this[this.tableEnumTranslation.en_NameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'en_Name' in table 'EnumTranslation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEnumTranslation.en_NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string en_Description
      {
        get
        {
          try
          {
            return (string) this[this.tableEnumTranslation.en_DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'en_Description' in table 'EnumTranslation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEnumTranslation.en_DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Isde_NameNull() => this.IsNull(this.tableEnumTranslation.de_NameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void Setde_NameNull()
      {
        this[this.tableEnumTranslation.de_NameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Isde_DescriptionNull()
      {
        return this.IsNull(this.tableEnumTranslation.de_DescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void Setde_DescriptionNull()
      {
        this[this.tableEnumTranslation.de_DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Isen_NameNull() => this.IsNull(this.tableEnumTranslation.en_NameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void Seten_NameNull()
      {
        this[this.tableEnumTranslation.en_NameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Isen_DescriptionNull()
      {
        return this.IsNull(this.tableEnumTranslation.en_DescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void Seten_DescriptionNull()
      {
        this[this.tableEnumTranslation.en_DescriptionColumn] = Convert.DBNull;
      }
    }

    public class MTypeElectronicRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicDataTable tableMTypeElectronic;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeElectronicRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMTypeElectronic = (ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get => (int) this[this.tableMTypeElectronic.MeterTypeIDColumn];
        set => this[this.tableMTypeElectronic.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte[] EEPdata
      {
        get
        {
          try
          {
            return (byte[]) this[this.tableMTypeElectronic.EEPdataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EEPdata' in table 'MTypeElectronic' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeElectronic.EEPdataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TypeCreationString
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeElectronic.TypeCreationStringColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TypeCreationString' in table 'MTypeElectronic' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeElectronic.TypeCreationStringColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEEPdataNull() => this.IsNull(this.tableMTypeElectronic.EEPdataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEEPdataNull()
      {
        this[this.tableMTypeElectronic.EEPdataColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTypeCreationStringNull()
      {
        return this.IsNull(this.tableMTypeElectronic.TypeCreationStringColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTypeCreationStringNull()
      {
        this[this.tableMTypeElectronic.TypeCreationStringColumn] = Convert.DBNull;
      }
    }

    public class BlockNamesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.BlockNamesDataTable tableBlockNames;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal BlockNamesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableBlockNames = (ZR_ClassLibrary.Schema_Access.Schema.BlockNamesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int BlockId
      {
        get => (int) this[this.tableBlockNames.BlockIdColumn];
        set => this[this.tableBlockNames.BlockIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string BlockName
      {
        get
        {
          try
          {
            return (string) this[this.tableBlockNames.BlockNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'BlockName' in table 'BlockNames' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableBlockNames.BlockNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsBlockNameNull() => this.IsNull(this.tableBlockNames.BlockNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetBlockNameNull() => this[this.tableBlockNames.BlockNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow[] GetLinkerTableRows()
      {
        return this.Table.ChildRelations["BlockNamesLinkerTable"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow[]) this.GetChildRows(this.Table.ChildRelations["BlockNamesLinkerTable"]);
      }
    }

    public class CodeRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.CodeDataTable tableCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal CodeRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableCode = (ZR_ClassLibrary.Schema_Access.Schema.CodeDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CodeID
      {
        get => (int) this[this.tableCode.CodeIDColumn];
        set => this[this.tableCode.CodeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LineNr
      {
        get => (int) this[this.tableCode.LineNrColumn];
        set => this[this.tableCode.LineNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeType
      {
        get
        {
          try
          {
            return (string) this[this.tableCode.CodeTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeType' in table 'Code' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCode.CodeTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeValue
      {
        get
        {
          try
          {
            return (string) this[this.tableCode.CodeValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeValue' in table 'Code' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCode.CodeValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LineInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableCode.LineInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LineInfo' in table 'Code' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCode.LineInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeTypeNull() => this.IsNull(this.tableCode.CodeTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeTypeNull() => this[this.tableCode.CodeTypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeValueNull() => this.IsNull(this.tableCode.CodeValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeValueNull() => this[this.tableCode.CodeValueColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLineInfoNull() => this.IsNull(this.tableCode.LineInfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLineInfoNull() => this[this.tableCode.LineInfoColumn] = Convert.DBNull;
    }

    public class ControllerCodeRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeDataTable tableControllerCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ControllerCodeRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableControllerCode = (ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MapID
      {
        get => (int) this[this.tableControllerCode.MapIDColumn];
        set => this[this.tableControllerCode.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte[] FirmwareCode
      {
        get
        {
          try
          {
            return (byte[]) this[this.tableControllerCode.FirmwareCodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareCode' in table 'ControllerCode' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableControllerCode.FirmwareCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFirmwareCodeNull() => this.IsNull(this.tableControllerCode.FirmwareCodeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFirmwareCodeNull()
      {
        this[this.tableControllerCode.FirmwareCodeColumn] = Convert.DBNull;
      }
    }

    public class CurrentUsersRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersDataTable tableCurrentUsers;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal CurrentUsersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableCurrentUsers = (ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string UserName
      {
        get => (string) this[this.tableCurrentUsers.UserNameColumn];
        set => this[this.tableCurrentUsers.UserNameColumn] = (object) value;
      }
    }

    public class CustomerRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.CustomerDataTable tableCustomer;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal CustomerRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableCustomer = (ZR_ClassLibrary.Schema_Access.Schema.CustomerDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CustomerID
      {
        get => (int) this[this.tableCustomer.CustomerIDColumn];
        set => this[this.tableCustomer.CustomerIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LastName
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.LastNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LastName' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.LastNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FirstName
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.FirstNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirstName' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.FirstNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CustomerGroup
      {
        get
        {
          try
          {
            return (int) this[this.tableCustomer.CustomerGroupColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CustomerGroup' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.CustomerGroupColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SecondName
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.SecondNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SecondName' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.SecondNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Title
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.TitleColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Title' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.TitleColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Street
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.StreetColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Street' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.StreetColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string HouseNr
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.HouseNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HouseNr' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.HouseNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ZipCode
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.ZipCodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ZipCode' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.ZipCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Town
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.TownColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Town' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.TownColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Country
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.CountryColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Country' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.CountryColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string State
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.StateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'State' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.StateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Phone
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.PhoneColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Phone' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.PhoneColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Mobile
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.MobileColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Mobile' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.MobileColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FAX
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.FAXColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FAX' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.FAXColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Email
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.EmailColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Email' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.EmailColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Internet
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.InternetColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Internet' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.InternetColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Memo
      {
        get
        {
          try
          {
            return (string) this[this.tableCustomer.MemoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Memo' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.MemoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public float MwSt
      {
        get
        {
          try
          {
            return (float) this[this.tableCustomer.MwStColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MwSt' in table 'Customer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCustomer.MwStColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLastNameNull() => this.IsNull(this.tableCustomer.LastNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLastNameNull() => this[this.tableCustomer.LastNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFirstNameNull() => this.IsNull(this.tableCustomer.FirstNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFirstNameNull() => this[this.tableCustomer.FirstNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCustomerGroupNull() => this.IsNull(this.tableCustomer.CustomerGroupColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCustomerGroupNull()
      {
        this[this.tableCustomer.CustomerGroupColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSecondNameNull() => this.IsNull(this.tableCustomer.SecondNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSecondNameNull() => this[this.tableCustomer.SecondNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTitleNull() => this.IsNull(this.tableCustomer.TitleColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTitleNull() => this[this.tableCustomer.TitleColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStreetNull() => this.IsNull(this.tableCustomer.StreetColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStreetNull() => this[this.tableCustomer.StreetColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHouseNrNull() => this.IsNull(this.tableCustomer.HouseNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHouseNrNull() => this[this.tableCustomer.HouseNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsZipCodeNull() => this.IsNull(this.tableCustomer.ZipCodeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetZipCodeNull() => this[this.tableCustomer.ZipCodeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTownNull() => this.IsNull(this.tableCustomer.TownColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTownNull() => this[this.tableCustomer.TownColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCountryNull() => this.IsNull(this.tableCustomer.CountryColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCountryNull() => this[this.tableCustomer.CountryColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStateNull() => this.IsNull(this.tableCustomer.StateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStateNull() => this[this.tableCustomer.StateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPhoneNull() => this.IsNull(this.tableCustomer.PhoneColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPhoneNull() => this[this.tableCustomer.PhoneColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMobileNull() => this.IsNull(this.tableCustomer.MobileColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMobileNull() => this[this.tableCustomer.MobileColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFAXNull() => this.IsNull(this.tableCustomer.FAXColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFAXNull() => this[this.tableCustomer.FAXColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEmailNull() => this.IsNull(this.tableCustomer.EmailColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEmailNull() => this[this.tableCustomer.EmailColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInternetNull() => this.IsNull(this.tableCustomer.InternetColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInternetNull() => this[this.tableCustomer.InternetColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMemoNull() => this.IsNull(this.tableCustomer.MemoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMemoNull() => this[this.tableCustomer.MemoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMwStNull() => this.IsNull(this.tableCustomer.MwStColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMwStNull() => this[this.tableCustomer.MwStColumn] = Convert.DBNull;
    }

    public class DatabaseIdentificationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationDataTable tableDatabaseIdentification;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DatabaseIdentificationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDatabaseIdentification = (ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InfoName
      {
        get => (string) this[this.tableDatabaseIdentification.InfoNameColumn];
        set => this[this.tableDatabaseIdentification.InfoNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InfoData
      {
        get
        {
          try
          {
            return (string) this[this.tableDatabaseIdentification.InfoDataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InfoData' in table 'DatabaseIdentification' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatabaseIdentification.InfoDataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInfoDataNull() => this.IsNull(this.tableDatabaseIdentification.InfoDataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInfoDataNull()
      {
        this[this.tableDatabaseIdentification.InfoDataColumn] = Convert.DBNull;
      }
    }

    public class DatabaseLocationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationDataTable tableDatabaseLocation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DatabaseLocationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDatabaseLocation = (ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DatabaseLocationName
      {
        get => (string) this[this.tableDatabaseLocation.DatabaseLocationNameColumn];
        set => this[this.tableDatabaseLocation.DatabaseLocationNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Land
      {
        get
        {
          try
          {
            return (string) this[this.tableDatabaseLocation.LandColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Land' in table 'DatabaseLocation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatabaseLocation.LandColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Town
      {
        get
        {
          try
          {
            return (string) this[this.tableDatabaseLocation.TownColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Town' in table 'DatabaseLocation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatabaseLocation.TownColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CompanyName
      {
        get
        {
          try
          {
            return (string) this[this.tableDatabaseLocation.CompanyNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CompanyName' in table 'DatabaseLocation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatabaseLocation.CompanyNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLandNull() => this.IsNull(this.tableDatabaseLocation.LandColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLandNull() => this[this.tableDatabaseLocation.LandColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTownNull() => this.IsNull(this.tableDatabaseLocation.TownColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTownNull() => this[this.tableDatabaseLocation.TownColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCompanyNameNull() => this.IsNull(this.tableDatabaseLocation.CompanyNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCompanyNameNull()
      {
        this[this.tableDatabaseLocation.CompanyNameColumn] = Convert.DBNull;
      }
    }

    public class DataloggerRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DataloggerDataTable tableDatalogger;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DataloggerRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDatalogger = (ZR_ClassLibrary.Schema_Access.Schema.DataloggerDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FunctionNumber
      {
        get => (int) this[this.tableDatalogger.FunctionNumberColumn];
        set => this[this.tableDatalogger.FunctionNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LoggerID
      {
        get => (int) this[this.tableDatalogger.LoggerIDColumn];
        set => this[this.tableDatalogger.LoggerIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Loggername
      {
        get
        {
          try
          {
            return (string) this[this.tableDatalogger.LoggernameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Loggername' in table 'Datalogger' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatalogger.LoggernameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LoggerDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableDatalogger.LoggerDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LoggerDescription' in table 'Datalogger' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatalogger.LoggerDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short MaxLoggerEntries
      {
        get
        {
          try
          {
            return (short) this[this.tableDatalogger.MaxLoggerEntriesColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MaxLoggerEntries' in table 'Datalogger' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatalogger.MaxLoggerEntriesColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte EntrySize
      {
        get
        {
          try
          {
            return (byte) this[this.tableDatalogger.EntrySizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EntrySize' in table 'Datalogger' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatalogger.EntrySizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte LoggerType
      {
        get
        {
          try
          {
            return (byte) this[this.tableDatalogger.LoggerTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LoggerType' in table 'Datalogger' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatalogger.LoggerTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LoggerInterval
      {
        get
        {
          try
          {
            return (int) this[this.tableDatalogger.LoggerIntervalColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LoggerInterval' in table 'Datalogger' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatalogger.LoggerIntervalColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short StructureNr
      {
        get
        {
          try
          {
            return (short) this[this.tableDatalogger.StructureNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StructureNr' in table 'Datalogger' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatalogger.StructureNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte MBusMaxEntries
      {
        get
        {
          try
          {
            return (byte) this[this.tableDatalogger.MBusMaxEntriesColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MBusMaxEntries' in table 'Datalogger' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatalogger.MBusMaxEntriesColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow ZRFunctionRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) this.GetParentRow(this.Table.ParentRelations["FunctionDatalogger"]);
        }
        set => this.SetParentRow((DataRow) value, this.Table.ParentRelations["FunctionDatalogger"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLoggernameNull() => this.IsNull(this.tableDatalogger.LoggernameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLoggernameNull()
      {
        this[this.tableDatalogger.LoggernameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLoggerDescriptionNull()
      {
        return this.IsNull(this.tableDatalogger.LoggerDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLoggerDescriptionNull()
      {
        this[this.tableDatalogger.LoggerDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMaxLoggerEntriesNull()
      {
        return this.IsNull(this.tableDatalogger.MaxLoggerEntriesColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMaxLoggerEntriesNull()
      {
        this[this.tableDatalogger.MaxLoggerEntriesColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEntrySizeNull() => this.IsNull(this.tableDatalogger.EntrySizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEntrySizeNull() => this[this.tableDatalogger.EntrySizeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLoggerTypeNull() => this.IsNull(this.tableDatalogger.LoggerTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLoggerTypeNull()
      {
        this[this.tableDatalogger.LoggerTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLoggerIntervalNull() => this.IsNull(this.tableDatalogger.LoggerIntervalColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLoggerIntervalNull()
      {
        this[this.tableDatalogger.LoggerIntervalColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStructureNrNull() => this.IsNull(this.tableDatalogger.StructureNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStructureNrNull()
      {
        this[this.tableDatalogger.StructureNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMBusMaxEntriesNull() => this.IsNull(this.tableDatalogger.MBusMaxEntriesColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMBusMaxEntriesNull()
      {
        this[this.tableDatalogger.MBusMaxEntriesColumn] = Convert.DBNull;
      }
    }

    public class DataLoggerentryRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryDataTable tableDataLoggerentry;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DataLoggerentryRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDataLoggerentry = (ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LoggerID
      {
        get => (int) this[this.tableDataLoggerentry.LoggerIDColumn];
        set => this[this.tableDataLoggerentry.LoggerIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte ParameterPosition
      {
        get => (byte) this[this.tableDataLoggerentry.ParameterPositionColumn];
        set => this[this.tableDataLoggerentry.ParameterPositionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterName
      {
        get
        {
          try
          {
            return (string) this[this.tableDataLoggerentry.ParameterNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterName' in table 'DataLoggerentry' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataLoggerentry.ParameterNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte ParameterType
      {
        get
        {
          try
          {
            return (byte) this[this.tableDataLoggerentry.ParameterTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterType' in table 'DataLoggerentry' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataLoggerentry.ParameterTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte ParameterSize
      {
        get
        {
          try
          {
            return (byte) this[this.tableDataLoggerentry.ParameterSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterSize' in table 'DataLoggerentry' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataLoggerentry.ParameterSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableDataLoggerentry.ParameterDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterDescription' in table 'DataLoggerentry' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataLoggerentry.ParameterDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterUnit
      {
        get
        {
          try
          {
            return (string) this[this.tableDataLoggerentry.ParameterUnitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterUnit' in table 'DataLoggerentry' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataLoggerentry.ParameterUnitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterNameNull()
      {
        return this.IsNull(this.tableDataLoggerentry.ParameterNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterNameNull()
      {
        this[this.tableDataLoggerentry.ParameterNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterTypeNull()
      {
        return this.IsNull(this.tableDataLoggerentry.ParameterTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterTypeNull()
      {
        this[this.tableDataLoggerentry.ParameterTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterSizeNull()
      {
        return this.IsNull(this.tableDataLoggerentry.ParameterSizeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterSizeNull()
      {
        this[this.tableDataLoggerentry.ParameterSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterDescriptionNull()
      {
        return this.IsNull(this.tableDataLoggerentry.ParameterDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterDescriptionNull()
      {
        this[this.tableDataLoggerentry.ParameterDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterUnitNull()
      {
        return this.IsNull(this.tableDataLoggerentry.ParameterUnitColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterUnitNull()
      {
        this[this.tableDataLoggerentry.ParameterUnitColumn] = Convert.DBNull;
      }
    }

    public class DBTranslatorRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorDataTable tableDBTranslator;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DBTranslatorRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDBTranslator = (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TextID
      {
        get => (int) this[this.tableDBTranslator.TextIDColumn];
        set => this[this.tableDBTranslator.TextIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TableName
      {
        get
        {
          try
          {
            return (string) this[this.tableDBTranslator.TableNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TableName' in table 'DBTranslator' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDBTranslator.TableNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TableKey
      {
        get
        {
          try
          {
            return (string) this[this.tableDBTranslator.TableKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TableKey' in table 'DBTranslator' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDBTranslator.TableKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FieldName
      {
        get
        {
          try
          {
            return (string) this[this.tableDBTranslator.FieldNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FieldName' in table 'DBTranslator' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDBTranslator.FieldNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LANG_de
      {
        get
        {
          try
          {
            return (string) this[this.tableDBTranslator.LANG_deColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LANG_de' in table 'DBTranslator' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDBTranslator.LANG_deColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LANG_en
      {
        get
        {
          try
          {
            return (string) this[this.tableDBTranslator.LANG_enColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LANG_en' in table 'DBTranslator' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDBTranslator.LANG_enColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LANG_fr
      {
        get
        {
          try
          {
            return (string) this[this.tableDBTranslator.LANG_frColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LANG_fr' in table 'DBTranslator' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDBTranslator.LANG_frColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LANG_it
      {
        get
        {
          try
          {
            return (string) this[this.tableDBTranslator.LANG_itColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LANG_it' in table 'DBTranslator' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDBTranslator.LANG_itColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LANG_sk
      {
        get
        {
          try
          {
            return (string) this[this.tableDBTranslator.LANG_skColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LANG_sk' in table 'DBTranslator' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDBTranslator.LANG_skColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTableNameNull() => this.IsNull(this.tableDBTranslator.TableNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTableNameNull()
      {
        this[this.tableDBTranslator.TableNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTableKeyNull() => this.IsNull(this.tableDBTranslator.TableKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTableKeyNull() => this[this.tableDBTranslator.TableKeyColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFieldNameNull() => this.IsNull(this.tableDBTranslator.FieldNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFieldNameNull()
      {
        this[this.tableDBTranslator.FieldNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLANG_deNull() => this.IsNull(this.tableDBTranslator.LANG_deColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLANG_deNull() => this[this.tableDBTranslator.LANG_deColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLANG_enNull() => this.IsNull(this.tableDBTranslator.LANG_enColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLANG_enNull() => this[this.tableDBTranslator.LANG_enColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLANG_frNull() => this.IsNull(this.tableDBTranslator.LANG_frColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLANG_frNull() => this[this.tableDBTranslator.LANG_frColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLANG_itNull() => this.IsNull(this.tableDBTranslator.LANG_itColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLANG_itNull() => this[this.tableDBTranslator.LANG_itColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLANG_skNull() => this.IsNull(this.tableDBTranslator.LANG_skColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLANG_skNull() => this[this.tableDBTranslator.LANG_skColumn] = Convert.DBNull;
    }

    public class DBTranslatorStructRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructDataTable tableDBTranslatorStruct;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DBTranslatorStructRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDBTranslatorStruct = (ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TableName
      {
        get => (string) this[this.tableDBTranslatorStruct.TableNameColumn];
        set => this[this.tableDBTranslatorStruct.TableNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FieldName
      {
        get => (string) this[this.tableDBTranslatorStruct.FieldNameColumn];
        set => this[this.tableDBTranslatorStruct.FieldNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string KeyFields
      {
        get
        {
          try
          {
            return (string) this[this.tableDBTranslatorStruct.KeyFieldsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'KeyFields' in table 'DBTranslatorStruct' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDBTranslatorStruct.KeyFieldsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string KeyFieldTypes
      {
        get
        {
          try
          {
            return (string) this[this.tableDBTranslatorStruct.KeyFieldTypesColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'KeyFieldTypes' in table 'DBTranslatorStruct' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDBTranslatorStruct.KeyFieldTypesColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FieldSize
      {
        get
        {
          try
          {
            return (int) this[this.tableDBTranslatorStruct.FieldSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FieldSize' in table 'DBTranslatorStruct' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDBTranslatorStruct.FieldSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Requirements
      {
        get
        {
          try
          {
            return (string) this[this.tableDBTranslatorStruct.RequirementsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Requirements' in table 'DBTranslatorStruct' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDBTranslatorStruct.RequirementsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsKeyFieldsNull() => this.IsNull(this.tableDBTranslatorStruct.KeyFieldsColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetKeyFieldsNull()
      {
        this[this.tableDBTranslatorStruct.KeyFieldsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsKeyFieldTypesNull()
      {
        return this.IsNull(this.tableDBTranslatorStruct.KeyFieldTypesColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetKeyFieldTypesNull()
      {
        this[this.tableDBTranslatorStruct.KeyFieldTypesColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFieldSizeNull() => this.IsNull(this.tableDBTranslatorStruct.FieldSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFieldSizeNull()
      {
        this[this.tableDBTranslatorStruct.FieldSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRequirementsNull()
      {
        return this.IsNull(this.tableDBTranslatorStruct.RequirementsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRequirementsNull()
      {
        this[this.tableDBTranslatorStruct.RequirementsColumn] = Convert.DBNull;
      }
    }

    public class DisplayCodeRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeDataTable tableDisplayCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DisplayCodeRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDisplayCode = (ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int InterpreterCode
      {
        get => (int) this[this.tableDisplayCode.InterpreterCodeColumn];
        set => this[this.tableDisplayCode.InterpreterCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int SequenceNr
      {
        get => (int) this[this.tableDisplayCode.SequenceNrColumn];
        set => this[this.tableDisplayCode.SequenceNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeSequenceType
      {
        get
        {
          try
          {
            return (string) this[this.tableDisplayCode.CodeSequenceTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeSequenceType' in table 'DisplayCode' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDisplayCode.CodeSequenceTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeSequenceInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableDisplayCode.CodeSequenceInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeSequenceInfo' in table 'DisplayCode' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDisplayCode.CodeSequenceInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CodeID
      {
        get
        {
          try
          {
            return (int) this[this.tableDisplayCode.CodeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeID' in table 'DisplayCode' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDisplayCode.CodeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeSequenceTypeNull()
      {
        return this.IsNull(this.tableDisplayCode.CodeSequenceTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeSequenceTypeNull()
      {
        this[this.tableDisplayCode.CodeSequenceTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeSequenceInfoNull()
      {
        return this.IsNull(this.tableDisplayCode.CodeSequenceInfoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeSequenceInfoNull()
      {
        this[this.tableDisplayCode.CodeSequenceInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeIDNull() => this.IsNull(this.tableDisplayCode.CodeIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeIDNull() => this[this.tableDisplayCode.CodeIDColumn] = Convert.DBNull;
    }

    public class EquipmentTypeDescriptionRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionDataTable tableEquipmentTypeDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EquipmentTypeDescriptionRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableEquipmentTypeDescription = (ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentType
      {
        get => (int) this[this.tableEquipmentTypeDescription.EquipmentTypeColumn];
        set => this[this.tableEquipmentTypeDescription.EquipmentTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableEquipmentTypeDescription.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'EquipmentTypeDescription' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentTypeDescription.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull()
      {
        return this.IsNull(this.tableEquipmentTypeDescription.DescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableEquipmentTypeDescription.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow[] GetFactoryEquipmentRows()
      {
        return this.Table.ChildRelations["EquipmentTypeDescriptionFactoryEquipment"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow[]) this.GetChildRows(this.Table.ChildRelations["EquipmentTypeDescriptionFactoryEquipment"]);
      }
    }

    public class FactoryEquipmentRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentDataTable tableFactoryEquipment;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal FactoryEquipmentRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableFactoryEquipment = (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tableFactoryEquipment.EquipmentIDColumn];
        set => this[this.tableFactoryEquipment.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string EquipmentName
      {
        get
        {
          try
          {
            return (string) this[this.tableFactoryEquipment.EquipmentNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EquipmentName' in table 'FactoryEquipment' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableFactoryEquipment.EquipmentNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string EquipmentDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableFactoryEquipment.EquipmentDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EquipmentDescription' in table 'FactoryEquipment' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableFactoryEquipment.EquipmentDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentType
      {
        get
        {
          try
          {
            return (int) this[this.tableFactoryEquipment.EquipmentTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EquipmentType' in table 'FactoryEquipment' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableFactoryEquipment.EquipmentTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string EquipmentOwner
      {
        get
        {
          try
          {
            return (string) this[this.tableFactoryEquipment.EquipmentOwnerColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EquipmentOwner' in table 'FactoryEquipment' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableFactoryEquipment.EquipmentOwnerColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow EquipmentTypeDescriptionRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow) this.GetParentRow(this.Table.ParentRelations["EquipmentTypeDescriptionFactoryEquipment"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["EquipmentTypeDescriptionFactoryEquipment"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEquipmentNameNull()
      {
        return this.IsNull(this.tableFactoryEquipment.EquipmentNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEquipmentNameNull()
      {
        this[this.tableFactoryEquipment.EquipmentNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEquipmentDescriptionNull()
      {
        return this.IsNull(this.tableFactoryEquipment.EquipmentDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEquipmentDescriptionNull()
      {
        this[this.tableFactoryEquipment.EquipmentDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEquipmentTypeNull()
      {
        return this.IsNull(this.tableFactoryEquipment.EquipmentTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEquipmentTypeNull()
      {
        this[this.tableFactoryEquipment.EquipmentTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEquipmentOwnerNull()
      {
        return this.IsNull(this.tableFactoryEquipment.EquipmentOwnerColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEquipmentOwnerNull()
      {
        this[this.tableFactoryEquipment.EquipmentOwnerColumn] = Convert.DBNull;
      }
    }

    public class GMM_UserRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.GMM_UserDataTable tableGMM_User;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal GMM_UserRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGMM_User = (ZR_ClassLibrary.Schema_Access.Schema.GMM_UserDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string UserName
      {
        get => (string) this[this.tableGMM_User.UserNameColumn];
        set => this[this.tableGMM_User.UserNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int UserPersonalNumber
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_User.UserPersonalNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UserPersonalNumber' in table 'GMM_User' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_User.UserPersonalNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string UserRights
      {
        get
        {
          try
          {
            return (string) this[this.tableGMM_User.UserRightsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UserRights' in table 'GMM_User' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_User.UserRightsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string UserKey
      {
        get
        {
          try
          {
            return (string) this[this.tableGMM_User.UserKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UserKey' in table 'GMM_User' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_User.UserKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChangedUserRights
      {
        get
        {
          try
          {
            return (string) this[this.tableGMM_User.ChangedUserRightsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChangedUserRights' in table 'GMM_User' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_User.ChangedUserRightsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChangedUserKey
      {
        get
        {
          try
          {
            return (string) this[this.tableGMM_User.ChangedUserKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChangedUserKey' in table 'GMM_User' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_User.ChangedUserKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUserPersonalNumberNull()
      {
        return this.IsNull(this.tableGMM_User.UserPersonalNumberColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUserPersonalNumberNull()
      {
        this[this.tableGMM_User.UserPersonalNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUserRightsNull() => this.IsNull(this.tableGMM_User.UserRightsColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUserRightsNull() => this[this.tableGMM_User.UserRightsColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUserKeyNull() => this.IsNull(this.tableGMM_User.UserKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUserKeyNull() => this[this.tableGMM_User.UserKeyColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChangedUserRightsNull()
      {
        return this.IsNull(this.tableGMM_User.ChangedUserRightsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChangedUserRightsNull()
      {
        this[this.tableGMM_User.ChangedUserRightsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChangedUserKeyNull() => this.IsNull(this.tableGMM_User.ChangedUserKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChangedUserKeyNull()
      {
        this[this.tableGMM_User.ChangedUserKeyColumn] = Convert.DBNull;
      }
    }

    public class HardwareResourcesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesDataTable tableHardwareResources;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal HardwareResourcesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableHardwareResources = (ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ResourceName
      {
        get => (string) this[this.tableHardwareResources.ResourceNameColumn];
        set => this[this.tableHardwareResources.ResourceNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string HardwareName
      {
        get => (string) this[this.tableHardwareResources.HardwareNameColumn];
        set => this[this.tableHardwareResources.HardwareNameColumn] = (object) value;
      }
    }

    public class HardwareTypeRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeDataTable tableHardwareType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal HardwareTypeRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableHardwareType = (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int HardwareTypeID
      {
        get => (int) this[this.tableHardwareType.HardwareTypeIDColumn];
        set => this[this.tableHardwareType.HardwareTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MapID
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.MapIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MapID' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LinkerTableID
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.LinkerTableIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LinkerTableID' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.LinkerTableIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FirmwareVersion
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.FirmwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareVersion' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.FirmwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string HardwareName
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.HardwareNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareName' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.HardwareNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int HardwareVersion
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.HardwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareVersion' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.HardwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string HardwareResource
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.HardwareResourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareResource' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.HardwareResourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int extEEPSize
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.extEEPSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'extEEPSize' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.extEEPSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short maxStackSize
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.maxStackSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'maxStackSize' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.maxStackSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short RAMSize
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.RAMSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RAMSize' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.RAMSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short RAMStartAdr
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.RAMStartAdrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RAMStartAdr' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.RAMStartAdrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short intEEPStartAdr
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.intEEPStartAdrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'intEEPStartAdr' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.intEEPStartAdrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short intEEPSize
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.intEEPSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'intEEPSize' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.intEEPSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Testinfo
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.TestinfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Testinfo' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.TestinfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string HardwareOptions
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.HardwareOptionsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareOptions' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.HardwareOptionsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow ProgFilesRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow) this.GetParentRow(this.Table.ParentRelations["ProgFilesHardwareType"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["ProgFilesHardwareType"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMapIDNull() => this.IsNull(this.tableHardwareType.MapIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMapIDNull() => this[this.tableHardwareType.MapIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLinkerTableIDNull() => this.IsNull(this.tableHardwareType.LinkerTableIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLinkerTableIDNull()
      {
        this[this.tableHardwareType.LinkerTableIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFirmwareVersionNull()
      {
        return this.IsNull(this.tableHardwareType.FirmwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFirmwareVersionNull()
      {
        this[this.tableHardwareType.FirmwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareNameNull() => this.IsNull(this.tableHardwareType.HardwareNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareNameNull()
      {
        this[this.tableHardwareType.HardwareNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareVersionNull()
      {
        return this.IsNull(this.tableHardwareType.HardwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareVersionNull()
      {
        this[this.tableHardwareType.HardwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareResourceNull()
      {
        return this.IsNull(this.tableHardwareType.HardwareResourceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareResourceNull()
      {
        this[this.tableHardwareType.HardwareResourceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsextEEPSizeNull() => this.IsNull(this.tableHardwareType.extEEPSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetextEEPSizeNull()
      {
        this[this.tableHardwareType.extEEPSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsmaxStackSizeNull() => this.IsNull(this.tableHardwareType.maxStackSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetmaxStackSizeNull()
      {
        this[this.tableHardwareType.maxStackSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRAMSizeNull() => this.IsNull(this.tableHardwareType.RAMSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRAMSizeNull() => this[this.tableHardwareType.RAMSizeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRAMStartAdrNull() => this.IsNull(this.tableHardwareType.RAMStartAdrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRAMStartAdrNull()
      {
        this[this.tableHardwareType.RAMStartAdrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsintEEPStartAdrNull()
      {
        return this.IsNull(this.tableHardwareType.intEEPStartAdrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetintEEPStartAdrNull()
      {
        this[this.tableHardwareType.intEEPStartAdrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsintEEPSizeNull() => this.IsNull(this.tableHardwareType.intEEPSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetintEEPSizeNull()
      {
        this[this.tableHardwareType.intEEPSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableHardwareType.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableHardwareType.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestinfoNull() => this.IsNull(this.tableHardwareType.TestinfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestinfoNull() => this[this.tableHardwareType.TestinfoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareOptionsNull()
      {
        return this.IsNull(this.tableHardwareType.HardwareOptionsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareOptionsNull()
      {
        this[this.tableHardwareType.HardwareOptionsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow[] GetIncludeDefRows()
      {
        return this.Table.ChildRelations["HTypeSaariusIncludeDef"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow[]) this.GetChildRows(this.Table.ChildRelations["HTypeSaariusIncludeDef"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow[] GetLinkerTableRows()
      {
        return this.Table.ChildRelations["HardwareTypeLinkerTable"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow[]) this.GetChildRows(this.Table.ChildRelations["HardwareTypeLinkerTable"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MapDefRow[] GetMapDefRows()
      {
        return this.Table.ChildRelations["HTypeSaariusMapDef"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MapDefRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MapDefRow[]) this.GetChildRows(this.Table.ChildRelations["HTypeSaariusMapDef"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow[] GetMeterInfoRows()
      {
        return this.Table.ChildRelations["HardwareTypeMeterInfo"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow[]) this.GetChildRows(this.Table.ChildRelations["HardwareTypeMeterInfo"]);
      }
    }

    public class IncludeDefRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.IncludeDefDataTable tableIncludeDef;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal IncludeDefRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableIncludeDef = (ZR_ClassLibrary.Schema_Access.Schema.IncludeDefDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MapID
      {
        get => (int) this[this.tableIncludeDef.MapIDColumn];
        set => this[this.tableIncludeDef.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ConstName
      {
        get => (string) this[this.tableIncludeDef.ConstNameColumn];
        set => this[this.tableIncludeDef.ConstNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int cValue
      {
        get
        {
          try
          {
            return (int) this[this.tableIncludeDef.cValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'cValue' in table 'IncludeDef' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableIncludeDef.cValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow HardwareTypeRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow) this.GetParentRow(this.Table.ParentRelations["HTypeSaariusIncludeDef"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["HTypeSaariusIncludeDef"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IscValueNull() => this.IsNull(this.tableIncludeDef.cValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetcValueNull() => this[this.tableIncludeDef.cValueColumn] = Convert.DBNull;
    }

    public class LinkerTableRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.LinkerTableDataTable tableLinkerTable;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal LinkerTableRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableLinkerTable = (ZR_ClassLibrary.Schema_Access.Schema.LinkerTableDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LinkerTableID
      {
        get => (int) this[this.tableLinkerTable.LinkerTableIDColumn];
        set => this[this.tableLinkerTable.LinkerTableIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int BlockPosition
      {
        get => (int) this[this.tableLinkerTable.BlockPositionColumn];
        set => this[this.tableLinkerTable.BlockPositionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int BlockId
      {
        get
        {
          try
          {
            return (int) this[this.tableLinkerTable.BlockIdColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'BlockId' in table 'LinkerTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLinkerTable.BlockIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int AddressRangeCPU
      {
        get
        {
          try
          {
            return (int) this[this.tableLinkerTable.AddressRangeCPUColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AddressRangeCPU' in table 'LinkerTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLinkerTable.AddressRangeCPUColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int AddressRangePosition
      {
        get
        {
          try
          {
            return (int) this[this.tableLinkerTable.AddressRangePositionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AddressRangePosition' in table 'LinkerTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLinkerTable.AddressRangePositionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string AddressRangeVariable
      {
        get
        {
          try
          {
            return (string) this[this.tableLinkerTable.AddressRangeVariableColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AddressRangeVariable' in table 'LinkerTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLinkerTable.AddressRangeVariableColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow BlockNamesRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow) this.GetParentRow(this.Table.ParentRelations["BlockNamesLinkerTable"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["BlockNamesLinkerTable"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow HardwareTypeRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow) this.GetParentRow(this.Table.ParentRelations["HardwareTypeLinkerTable"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["HardwareTypeLinkerTable"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsBlockIdNull() => this.IsNull(this.tableLinkerTable.BlockIdColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetBlockIdNull() => this[this.tableLinkerTable.BlockIdColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAddressRangeCPUNull()
      {
        return this.IsNull(this.tableLinkerTable.AddressRangeCPUColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAddressRangeCPUNull()
      {
        this[this.tableLinkerTable.AddressRangeCPUColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAddressRangePositionNull()
      {
        return this.IsNull(this.tableLinkerTable.AddressRangePositionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAddressRangePositionNull()
      {
        this[this.tableLinkerTable.AddressRangePositionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAddressRangeVariableNull()
      {
        return this.IsNull(this.tableLinkerTable.AddressRangeVariableColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAddressRangeVariableNull()
      {
        this[this.tableLinkerTable.AddressRangeVariableColumn] = Convert.DBNull;
      }
    }

    public class ManufacturerRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ManufacturerDataTable tableManufacturer;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ManufacturerRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableManufacturer = (ZR_ClassLibrary.Schema_Access.Schema.ManufacturerDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ManufacturerID
      {
        get => (int) this[this.tableManufacturer.ManufacturerIDColumn];
        set => this[this.tableManufacturer.ManufacturerIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MName
      {
        get
        {
          try
          {
            return (string) this[this.tableManufacturer.MNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MName' in table 'Manufacturer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableManufacturer.MNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Name2
      {
        get
        {
          try
          {
            return (string) this[this.tableManufacturer.Name2Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Name2' in table 'Manufacturer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableManufacturer.Name2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Street
      {
        get
        {
          try
          {
            return (string) this[this.tableManufacturer.StreetColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Street' in table 'Manufacturer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableManufacturer.StreetColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Town
      {
        get
        {
          try
          {
            return (string) this[this.tableManufacturer.TownColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Town' in table 'Manufacturer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableManufacturer.TownColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PLZ
      {
        get
        {
          try
          {
            return (string) this[this.tableManufacturer.PLZColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PLZ' in table 'Manufacturer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableManufacturer.PLZColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Fon
      {
        get
        {
          try
          {
            return (string) this[this.tableManufacturer.FonColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Fon' in table 'Manufacturer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableManufacturer.FonColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FAX
      {
        get
        {
          try
          {
            return (string) this[this.tableManufacturer.FAXColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FAX' in table 'Manufacturer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableManufacturer.FAXColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Internet
      {
        get
        {
          try
          {
            return (string) this[this.tableManufacturer.InternetColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Internet' in table 'Manufacturer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableManufacturer.InternetColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string email
      {
        get
        {
          try
          {
            return (string) this[this.tableManufacturer.emailColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'email' in table 'Manufacturer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableManufacturer.emailColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MSign
      {
        get
        {
          try
          {
            return (string) this[this.tableManufacturer.MSignColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MSign' in table 'Manufacturer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableManufacturer.MSignColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MBusManufacturer
      {
        get
        {
          try
          {
            return (string) this[this.tableManufacturer.MBusManufacturerColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MBusManufacturer' in table 'Manufacturer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableManufacturer.MBusManufacturerColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableManufacturer.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'Manufacturer' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableManufacturer.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMNameNull() => this.IsNull(this.tableManufacturer.MNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMNameNull() => this[this.tableManufacturer.MNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsName2Null() => this.IsNull(this.tableManufacturer.Name2Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetName2Null() => this[this.tableManufacturer.Name2Column] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStreetNull() => this.IsNull(this.tableManufacturer.StreetColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStreetNull() => this[this.tableManufacturer.StreetColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTownNull() => this.IsNull(this.tableManufacturer.TownColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTownNull() => this[this.tableManufacturer.TownColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPLZNull() => this.IsNull(this.tableManufacturer.PLZColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPLZNull() => this[this.tableManufacturer.PLZColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFonNull() => this.IsNull(this.tableManufacturer.FonColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFonNull() => this[this.tableManufacturer.FonColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFAXNull() => this.IsNull(this.tableManufacturer.FAXColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFAXNull() => this[this.tableManufacturer.FAXColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInternetNull() => this.IsNull(this.tableManufacturer.InternetColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInternetNull() => this[this.tableManufacturer.InternetColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsemailNull() => this.IsNull(this.tableManufacturer.emailColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetemailNull() => this[this.tableManufacturer.emailColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMSignNull() => this.IsNull(this.tableManufacturer.MSignColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMSignNull() => this[this.tableManufacturer.MSignColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMBusManufacturerNull()
      {
        return this.IsNull(this.tableManufacturer.MBusManufacturerColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMBusManufacturerNull()
      {
        this[this.tableManufacturer.MBusManufacturerColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableManufacturer.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableManufacturer.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow[] GetMeterHardwareRows()
      {
        return this.Table.ChildRelations["ManufacturerMeterHardware"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow[]) this.GetChildRows(this.Table.ChildRelations["ManufacturerMeterHardware"]);
      }
    }

    public class MapBaseRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MapBaseDataTable tableMapBase;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MapBaseRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMapBase = (ZR_ClassLibrary.Schema_Access.Schema.MapBaseDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short MapID
      {
        get => (short) this[this.tableMapBase.MapIDColumn];
        set => this[this.tableMapBase.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SystemName
      {
        get
        {
          try
          {
            return (string) this[this.tableMapBase.SystemNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SystemName' in table 'MapBase' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMapBase.SystemNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SystemVersion
      {
        get
        {
          try
          {
            return (string) this[this.tableMapBase.SystemVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SystemVersion' in table 'MapBase' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMapBase.SystemVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableMapBase.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'MapBase' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMapBase.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSystemNameNull() => this.IsNull(this.tableMapBase.SystemNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSystemNameNull() => this[this.tableMapBase.SystemNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSystemVersionNull() => this.IsNull(this.tableMapBase.SystemVersionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSystemVersionNull()
      {
        this[this.tableMapBase.SystemVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableMapBase.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableMapBase.DescriptionColumn] = Convert.DBNull;
      }
    }

    public class MapDefRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MapDefDataTable tableMapDef;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MapDefRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMapDef = (ZR_ClassLibrary.Schema_Access.Schema.MapDefDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MapID
      {
        get => (int) this[this.tableMapDef.MapIDColumn];
        set => this[this.tableMapDef.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ConstName
      {
        get => (string) this[this.tableMapDef.ConstNameColumn];
        set => this[this.tableMapDef.ConstNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int cValue
      {
        get
        {
          try
          {
            return (int) this[this.tableMapDef.cValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'cValue' in table 'MapDef' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMapDef.cValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short ByteSize
      {
        get
        {
          try
          {
            return (short) this[this.tableMapDef.ByteSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ByteSize' in table 'MapDef' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMapDef.ByteSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow HardwareTypeRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow) this.GetParentRow(this.Table.ParentRelations["HTypeSaariusMapDef"]);
        }
        set => this.SetParentRow((DataRow) value, this.Table.ParentRelations["HTypeSaariusMapDef"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IscValueNull() => this.IsNull(this.tableMapDef.cValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetcValueNull() => this[this.tableMapDef.cValueColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsByteSizeNull() => this.IsNull(this.tableMapDef.ByteSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetByteSizeNull() => this[this.tableMapDef.ByteSizeColumn] = Convert.DBNull;
    }

    public class MBusCodeRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MBusCodeDataTable tableMBusCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MBusCodeRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMBusCode = (ZR_ClassLibrary.Schema_Access.Schema.MBusCodeDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FunctionNumber
      {
        get => (int) this[this.tableMBusCode.FunctionNumberColumn];
        set => this[this.tableMBusCode.FunctionNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int SequenceNr
      {
        get => (int) this[this.tableMBusCode.SequenceNrColumn];
        set => this[this.tableMBusCode.SequenceNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CodeID
      {
        get => (int) this[this.tableMBusCode.CodeIDColumn];
        set => this[this.tableMBusCode.CodeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeSequenceType
      {
        get
        {
          try
          {
            return (string) this[this.tableMBusCode.CodeSequenceTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeSequenceType' in table 'MBusCode' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMBusCode.CodeSequenceTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeSequenceInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableMBusCode.CodeSequenceInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeSequenceInfo' in table 'MBusCode' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMBusCode.CodeSequenceInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow ZRFunctionRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) this.GetParentRow(this.Table.ParentRelations["FunctionMBusCode"]);
        }
        set => this.SetParentRow((DataRow) value, this.Table.ParentRelations["FunctionMBusCode"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeSequenceTypeNull()
      {
        return this.IsNull(this.tableMBusCode.CodeSequenceTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeSequenceTypeNull()
      {
        this[this.tableMBusCode.CodeSequenceTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeSequenceInfoNull()
      {
        return this.IsNull(this.tableMBusCode.CodeSequenceInfoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeSequenceInfoNull()
      {
        this[this.tableMBusCode.CodeSequenceInfoColumn] = Convert.DBNull;
      }
    }

    public class MBusParameterTranslationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationDataTable tableMBusParameterTranslation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MBusParameterTranslationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMBusParameterTranslation = (ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Manufacturer
      {
        get => (string) this[this.tableMBusParameterTranslation.ManufacturerColumn];
        set => this[this.tableMBusParameterTranslation.ManufacturerColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Medium
      {
        get => (string) this[this.tableMBusParameterTranslation.MediumColumn];
        set => this[this.tableMBusParameterTranslation.MediumColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short VersionMin
      {
        get => (short) this[this.tableMBusParameterTranslation.VersionMinColumn];
        set => this[this.tableMBusParameterTranslation.VersionMinColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short VersionMax
      {
        get => (short) this[this.tableMBusParameterTranslation.VersionMaxColumn];
        set => this[this.tableMBusParameterTranslation.VersionMaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MBusZDF
      {
        get => (string) this[this.tableMBusParameterTranslation.MBusZDFColumn];
        set => this[this.tableMBusParameterTranslation.MBusZDFColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PValueID
      {
        get => (int) this[this.tableMBusParameterTranslation.PValueIDColumn];
        set => this[this.tableMBusParameterTranslation.PValueIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Multiplier
      {
        get
        {
          try
          {
            return (double) this[this.tableMBusParameterTranslation.MultiplierColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Multiplier' in table 'MBusParameterTranslation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMBusParameterTranslation.MultiplierColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short SpecialTranslation
      {
        get
        {
          try
          {
            return (short) this[this.tableMBusParameterTranslation.SpecialTranslationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SpecialTranslation' in table 'MBusParameterTranslation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMBusParameterTranslation.SpecialTranslationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ExternalMedium
      {
        get
        {
          try
          {
            return (string) this[this.tableMBusParameterTranslation.ExternalMediumColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ExternalMedium' in table 'MBusParameterTranslation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMBusParameterTranslation.ExternalMediumColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ExternalMeterNumber
      {
        get
        {
          try
          {
            return (string) this[this.tableMBusParameterTranslation.ExternalMeterNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ExternalMeterNumber' in table 'MBusParameterTranslation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMBusParameterTranslation.ExternalMeterNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string StorageTimeParam
      {
        get
        {
          try
          {
            return (string) this[this.tableMBusParameterTranslation.StorageTimeParamColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StorageTimeParam' in table 'MBusParameterTranslation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMBusParameterTranslation.StorageTimeParamColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short StorageTimeTranslation
      {
        get
        {
          try
          {
            return (short) this[this.tableMBusParameterTranslation.StorageTimeTranslationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StorageTimeTranslation' in table 'MBusParameterTranslation' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableMBusParameterTranslation.StorageTimeTranslationColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMultiplierNull()
      {
        return this.IsNull(this.tableMBusParameterTranslation.MultiplierColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMultiplierNull()
      {
        this[this.tableMBusParameterTranslation.MultiplierColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSpecialTranslationNull()
      {
        return this.IsNull(this.tableMBusParameterTranslation.SpecialTranslationColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSpecialTranslationNull()
      {
        this[this.tableMBusParameterTranslation.SpecialTranslationColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsExternalMediumNull()
      {
        return this.IsNull(this.tableMBusParameterTranslation.ExternalMediumColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetExternalMediumNull()
      {
        this[this.tableMBusParameterTranslation.ExternalMediumColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsExternalMeterNumberNull()
      {
        return this.IsNull(this.tableMBusParameterTranslation.ExternalMeterNumberColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetExternalMeterNumberNull()
      {
        this[this.tableMBusParameterTranslation.ExternalMeterNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStorageTimeParamNull()
      {
        return this.IsNull(this.tableMBusParameterTranslation.StorageTimeParamColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStorageTimeParamNull()
      {
        this[this.tableMBusParameterTranslation.StorageTimeParamColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStorageTimeTranslationNull()
      {
        return this.IsNull(this.tableMBusParameterTranslation.StorageTimeTranslationColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStorageTimeTranslationNull()
      {
        this[this.tableMBusParameterTranslation.StorageTimeTranslationColumn] = Convert.DBNull;
      }
    }

    public class MenuRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MenuDataTable tableMenu;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MenuRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMenu = (ZR_ClassLibrary.Schema_Access.Schema.MenuDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FunctionNumber
      {
        get => (int) this[this.tableMenu.FunctionNumberColumn];
        set => this[this.tableMenu.FunctionNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MenuName
      {
        get => (string) this[this.tableMenu.MenuNameColumn];
        set => this[this.tableMenu.MenuNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte XPos
      {
        get
        {
          try
          {
            return (byte) this[this.tableMenu.XPosColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'XPos' in table 'Menu' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMenu.XPosColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte YPos
      {
        get
        {
          try
          {
            return (byte) this[this.tableMenu.YPosColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'YPos' in table 'Menu' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMenu.YPosColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ClickEvent
      {
        get
        {
          try
          {
            return (string) this[this.tableMenu.ClickEventColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ClickEvent' in table 'Menu' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMenu.ClickEventColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PressEvent
      {
        get
        {
          try
          {
            return (string) this[this.tableMenu.PressEventColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PressEvent' in table 'Menu' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMenu.PressEventColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string HoldEvent
      {
        get
        {
          try
          {
            return (string) this[this.tableMenu.HoldEventColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HoldEvent' in table 'Menu' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMenu.HoldEventColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TimeOutEvent
      {
        get
        {
          try
          {
            return (string) this[this.tableMenu.TimeOutEventColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TimeOutEvent' in table 'Menu' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMenu.TimeOutEventColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableMenu.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'Menu' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMenu.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int InterpreterCode
      {
        get
        {
          try
          {
            return (int) this[this.tableMenu.InterpreterCodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InterpreterCode' in table 'Menu' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMenu.InterpreterCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow ZRFunctionRow
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) this.GetParentRow(this.Table.ParentRelations["FunctionMenu"]);
        set => this.SetParentRow((DataRow) value, this.Table.ParentRelations["FunctionMenu"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsXPosNull() => this.IsNull(this.tableMenu.XPosColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetXPosNull() => this[this.tableMenu.XPosColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsYPosNull() => this.IsNull(this.tableMenu.YPosColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetYPosNull() => this[this.tableMenu.YPosColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsClickEventNull() => this.IsNull(this.tableMenu.ClickEventColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetClickEventNull() => this[this.tableMenu.ClickEventColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPressEventNull() => this.IsNull(this.tableMenu.PressEventColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPressEventNull() => this[this.tableMenu.PressEventColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHoldEventNull() => this.IsNull(this.tableMenu.HoldEventColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHoldEventNull() => this[this.tableMenu.HoldEventColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTimeOutEventNull() => this.IsNull(this.tableMenu.TimeOutEventColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTimeOutEventNull() => this[this.tableMenu.TimeOutEventColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableMenu.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull() => this[this.tableMenu.DescriptionColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInterpreterCodeNull() => this.IsNull(this.tableMenu.InterpreterCodeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInterpreterCodeNull()
      {
        this[this.tableMenu.InterpreterCodeColumn] = Convert.DBNull;
      }
    }

    public class MeterRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterDataTable tableMeter;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeter = (ZR_ClassLibrary.Schema_Access.Schema.MeterDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterID
      {
        get => (int) this[this.tableMeter.MeterIDColumn];
        set => this[this.tableMeter.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterInfoID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeter.MeterInfoIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterInfoID' in table 'Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeter.MeterInfoIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SerialNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeter.SerialNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SerialNr' in table 'Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeter.SerialNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ProductionDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableMeter.ProductionDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ProductionDate' in table 'Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeter.ProductionDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ApprovalDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableMeter.ApprovalDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalDate' in table 'Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeter.ApprovalDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string OrderNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeter.OrderNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'OrderNr' in table 'Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeter.OrderNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow MeterInfoRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow) this.GetParentRow(this.Table.ParentRelations["MeterInfoMeter"]);
        }
        set => this.SetParentRow((DataRow) value, this.Table.ParentRelations["MeterInfoMeter"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterInfoIDNull() => this.IsNull(this.tableMeter.MeterInfoIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterInfoIDNull() => this[this.tableMeter.MeterInfoIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSerialNrNull() => this.IsNull(this.tableMeter.SerialNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSerialNrNull() => this[this.tableMeter.SerialNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsProductionDateNull() => this.IsNull(this.tableMeter.ProductionDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetProductionDateNull()
      {
        this[this.tableMeter.ProductionDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalDateNull() => this.IsNull(this.tableMeter.ApprovalDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalDateNull()
      {
        this[this.tableMeter.ApprovalDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsOrderNrNull() => this.IsNull(this.tableMeter.OrderNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetOrderNrNull() => this[this.tableMeter.OrderNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow[] GetMeterDataRows()
      {
        return this.Table.ChildRelations["MeterMeterData"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow[]) this.GetChildRows(this.Table.ChildRelations["MeterMeterData"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairRow[] GetRepairRows()
      {
        return this.Table.ChildRelations["MeterRepair"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.RepairRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.RepairRow[]) this.GetChildRows(this.Table.ChildRelations["MeterRepair"]);
      }
    }

    public class MeterDataRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterDataDataTable tableMeterData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterDataRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterData = (ZR_ClassLibrary.Schema_Access.Schema.MeterDataDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterID
      {
        get => (int) this[this.tableMeterData.MeterIDColumn];
        set => this[this.tableMeterData.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime TimePoint
      {
        get => (DateTime) this[this.tableMeterData.TimePointColumn];
        set => this[this.tableMeterData.TimePointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PValueID
      {
        get => (int) this[this.tableMeterData.PValueIDColumn];
        set => this[this.tableMeterData.PValueIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PValue
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterData.PValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PValue' in table 'MeterData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterData.PValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte[] PValueBinary
      {
        get
        {
          try
          {
            return (byte[]) this[this.tableMeterData.PValueBinaryColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PValueBinary' in table 'MeterData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterData.PValueBinaryColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte SyncStatus
      {
        get
        {
          try
          {
            return (byte) this[this.tableMeterData.SyncStatusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SyncStatus' in table 'MeterData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterData.SyncStatusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterRow MeterRow
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterRow) this.GetParentRow(this.Table.ParentRelations["MeterMeterData"]);
        set => this.SetParentRow((DataRow) value, this.Table.ParentRelations["MeterMeterData"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPValueNull() => this.IsNull(this.tableMeterData.PValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPValueNull() => this[this.tableMeterData.PValueColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPValueBinaryNull() => this.IsNull(this.tableMeterData.PValueBinaryColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPValueBinaryNull()
      {
        this[this.tableMeterData.PValueBinaryColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSyncStatusNull() => this.IsNull(this.tableMeterData.SyncStatusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSyncStatusNull()
      {
        this[this.tableMeterData.SyncStatusColumn] = Convert.DBNull;
      }
    }

    public class MeterDataRequestRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestDataTable tableMeterDataRequest;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterDataRequestRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterDataRequest = (ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterValueRequestID
      {
        get => (int) this[this.tableMeterDataRequest.MeterValueRequestIDColumn];
        set => this[this.tableMeterDataRequest.MeterValueRequestIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PValueID
      {
        get => (int) this[this.tableMeterDataRequest.PValueIDColumn];
        set => this[this.tableMeterDataRequest.PValueIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int RedCounts
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterDataRequest.RedCountsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RedCounts' in table 'MeterDataRequest' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterDataRequest.RedCountsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int YellowCounts
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterDataRequest.YellowCountsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'YellowCounts' in table 'MeterDataRequest' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterDataRequest.YellowCountsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MinCounts
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterDataRequest.MinCountsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MinCounts' in table 'MeterDataRequest' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterDataRequest.MinCountsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int OrderNr
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterDataRequest.OrderNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'OrderNr' in table 'MeterDataRequest' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterDataRequest.OrderNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRedCountsNull() => this.IsNull(this.tableMeterDataRequest.RedCountsColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRedCountsNull()
      {
        this[this.tableMeterDataRequest.RedCountsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsYellowCountsNull()
      {
        return this.IsNull(this.tableMeterDataRequest.YellowCountsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetYellowCountsNull()
      {
        this[this.tableMeterDataRequest.YellowCountsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMinCountsNull() => this.IsNull(this.tableMeterDataRequest.MinCountsColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMinCountsNull()
      {
        this[this.tableMeterDataRequest.MinCountsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsOrderNrNull() => this.IsNull(this.tableMeterDataRequest.OrderNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetOrderNrNull()
      {
        this[this.tableMeterDataRequest.OrderNrColumn] = Convert.DBNull;
      }
    }

    public class MeterHardwareRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareDataTable tableMeterHardware;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterHardwareRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterHardware = (ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterHardwareID
      {
        get => (int) this[this.tableMeterHardware.MeterHardwareIDColumn];
        set => this[this.tableMeterHardware.MeterHardwareIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ManufacturerID
      {
        get => (int) this[this.tableMeterHardware.ManufacturerIDColumn];
        set => this[this.tableMeterHardware.ManufacturerIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ProductionLocationID
      {
        get => (int) this[this.tableMeterHardware.ProductionLocationIDColumn];
        set => this[this.tableMeterHardware.ProductionLocationIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MeterName
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterHardware.MeterNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterName' in table 'MeterHardware' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterHardware.MeterNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterHardware.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'MeterHardware' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterHardware.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Approval
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterHardware.ApprovalColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Approval' in table 'MeterHardware' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterHardware.ApprovalColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ApprovalRestrict
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterHardware.ApprovalRestrictColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalRestrict' in table 'MeterHardware' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterHardware.ApprovalRestrictColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow ManufacturerRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow) this.GetParentRow(this.Table.ParentRelations["ManufacturerMeterHardware"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["ManufacturerMeterHardware"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterNameNull() => this.IsNull(this.tableMeterHardware.MeterNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterNameNull()
      {
        this[this.tableMeterHardware.MeterNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableMeterHardware.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableMeterHardware.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalNull() => this.IsNull(this.tableMeterHardware.ApprovalColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalNull()
      {
        this[this.tableMeterHardware.ApprovalColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalRestrictNull()
      {
        return this.IsNull(this.tableMeterHardware.ApprovalRestrictColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalRestrictNull()
      {
        this[this.tableMeterHardware.ApprovalRestrictColumn] = Convert.DBNull;
      }
    }

    public class MeterInfoRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterInfoDataTable tableMeterInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterInfoRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterInfo = (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterInfoID
      {
        get => (int) this[this.tableMeterInfo.MeterInfoIDColumn];
        set => this[this.tableMeterInfo.MeterInfoIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterHardwareID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfo.MeterHardwareIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterHardwareID' in table 'MeterInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfo.MeterHardwareIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfo.MeterTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterTypeID' in table 'MeterInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfo.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPSArtikelNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfo.PPSArtikelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPSArtikelNr' in table 'MeterInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfo.PPSArtikelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DefaultFunctionNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfo.DefaultFunctionNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DefaultFunctionNr' in table 'MeterInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfo.DefaultFunctionNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfo.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'MeterInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfo.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int HardwareTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfo.HardwareTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareTypeID' in table 'MeterInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfo.HardwareTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow HardwareTypeRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow) this.GetParentRow(this.Table.ParentRelations["HardwareTypeMeterInfo"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["HardwareTypeMeterInfo"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow MeterTypeRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) this.GetParentRow(this.Table.ParentRelations["MeterTypeMeterInfo"]);
        }
        set => this.SetParentRow((DataRow) value, this.Table.ParentRelations["MeterTypeMeterInfo"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterHardwareIDNull() => this.IsNull(this.tableMeterInfo.MeterHardwareIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterHardwareIDNull()
      {
        this[this.tableMeterInfo.MeterHardwareIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterTypeIDNull() => this.IsNull(this.tableMeterInfo.MeterTypeIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterTypeIDNull()
      {
        this[this.tableMeterInfo.MeterTypeIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPSArtikelNrNull() => this.IsNull(this.tableMeterInfo.PPSArtikelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPSArtikelNrNull()
      {
        this[this.tableMeterInfo.PPSArtikelNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDefaultFunctionNrNull()
      {
        return this.IsNull(this.tableMeterInfo.DefaultFunctionNrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDefaultFunctionNrNull()
      {
        this[this.tableMeterInfo.DefaultFunctionNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableMeterInfo.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableMeterInfo.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareTypeIDNull() => this.IsNull(this.tableMeterInfo.HardwareTypeIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareTypeIDNull()
      {
        this[this.tableMeterInfo.HardwareTypeIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterRow[] GetMeterRows()
      {
        return this.Table.ChildRelations["MeterInfoMeter"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MeterRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MeterRow[]) this.GetChildRows(this.Table.ChildRelations["MeterInfoMeter"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow[] GetTypeOverwriteParametersRows()
      {
        return this.Table.ChildRelations["MeterInfoTypeOverrideParameters"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow[]) this.GetChildRows(this.Table.ChildRelations["MeterInfoTypeOverrideParameters"]);
      }
    }

    public class MeterPositionRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterPositionDataTable tableMeterPosition;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterPositionRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterPosition = (ZR_ClassLibrary.Schema_Access.Schema.MeterPositionDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterID
      {
        get => (int) this[this.tableMeterPosition.MeterIDColumn];
        set => this[this.tableMeterPosition.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Street
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterPosition.StreetColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Street' in table 'MeterPosition' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterPosition.StreetColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Town
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterPosition.TownColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Town' in table 'MeterPosition' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterPosition.TownColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ZipCode
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterPosition.ZipCodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ZipCode' in table 'MeterPosition' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterPosition.ZipCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string State
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterPosition.StateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'State' in table 'MeterPosition' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterPosition.StateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public float GPS_x
      {
        get
        {
          try
          {
            return (float) this[this.tableMeterPosition.GPS_xColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'GPS_x' in table 'MeterPosition' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterPosition.GPS_xColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public float GPS_y
      {
        get
        {
          try
          {
            return (float) this[this.tableMeterPosition.GPS_yColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'GPS_y' in table 'MeterPosition' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterPosition.GPS_yColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public float GPS_z
      {
        get
        {
          try
          {
            return (float) this[this.tableMeterPosition.GPS_zColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'GPS_z' in table 'MeterPosition' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterPosition.GPS_zColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CustomerID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterPosition.CustomerIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CustomerID' in table 'MeterPosition' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterPosition.CustomerIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStreetNull() => this.IsNull(this.tableMeterPosition.StreetColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStreetNull() => this[this.tableMeterPosition.StreetColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTownNull() => this.IsNull(this.tableMeterPosition.TownColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTownNull() => this[this.tableMeterPosition.TownColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsZipCodeNull() => this.IsNull(this.tableMeterPosition.ZipCodeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetZipCodeNull() => this[this.tableMeterPosition.ZipCodeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStateNull() => this.IsNull(this.tableMeterPosition.StateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStateNull() => this[this.tableMeterPosition.StateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsGPS_xNull() => this.IsNull(this.tableMeterPosition.GPS_xColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetGPS_xNull() => this[this.tableMeterPosition.GPS_xColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsGPS_yNull() => this.IsNull(this.tableMeterPosition.GPS_yColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetGPS_yNull() => this[this.tableMeterPosition.GPS_yColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsGPS_zNull() => this.IsNull(this.tableMeterPosition.GPS_zColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetGPS_zNull() => this[this.tableMeterPosition.GPS_zColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCustomerIDNull() => this.IsNull(this.tableMeterPosition.CustomerIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCustomerIDNull()
      {
        this[this.tableMeterPosition.CustomerIDColumn] = Convert.DBNull;
      }
    }

    public class MeterTypeRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterTypeDataTable tableMeterType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterTypeRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterType = (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get => (int) this[this.tableMeterType.MeterTypeIDColumn];
        set => this[this.tableMeterType.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MTypeTableName
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterType.MTypeTableNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MTypeTableName' in table 'MeterType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterType.MTypeTableNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Typename
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterType.TypenameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Typename' in table 'MeterType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterType.TypenameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime GenerateDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableMeterType.GenerateDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'GenerateDate' in table 'MeterType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterType.GenerateDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterType.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'MeterType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterType.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMTypeTableNameNull() => this.IsNull(this.tableMeterType.MTypeTableNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMTypeTableNameNull()
      {
        this[this.tableMeterType.MTypeTableNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTypenameNull() => this.IsNull(this.tableMeterType.TypenameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTypenameNull() => this[this.tableMeterType.TypenameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsGenerateDateNull() => this.IsNull(this.tableMeterType.GenerateDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetGenerateDateNull()
      {
        this[this.tableMeterType.GenerateDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableMeterType.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableMeterType.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow[] GetMeterInfoRows()
      {
        return this.Table.ChildRelations["MeterTypeMeterInfo"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow[]) this.GetChildRows(this.Table.ChildRelations["MeterTypeMeterInfo"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow[] GetMTypeKapselRows()
      {
        return this.Table.ChildRelations["MeterTypeMTypeSaariuskapsel"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow[]) this.GetChildRows(this.Table.ChildRelations["MeterTypeMTypeSaariuskapsel"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow[] GetMTypeSaariusRows()
      {
        return this.Table.ChildRelations["MeterTypeMTypeSaarius"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow[]) this.GetChildRows(this.Table.ChildRelations["MeterTypeMTypeSaarius"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow[] GetMTypeTempSensorRows()
      {
        return this.Table.ChildRelations["MeterTypeMTypeTempSensor"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow[]) this.GetChildRows(this.Table.ChildRelations["MeterTypeMTypeTempSensor"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow[] GetMTypeZelsiusRows()
      {
        return this.Table.ChildRelations["MeterTypeMTypeZelsius"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow[]) this.GetChildRows(this.Table.ChildRelations["MeterTypeMTypeZelsius"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow[] GetMTypeZelsiusModuleRows()
      {
        return this.Table.ChildRelations["MeterTypeMTypeZelsiusModule"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow[]) this.GetChildRows(this.Table.ChildRelations["MeterTypeMTypeZelsiusModule"]);
      }
    }

    public class MTypeKapselRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselDataTable tableMTypeKapsel;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeKapselRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMTypeKapsel = (ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get => (int) this[this.tableMTypeKapsel.MeterTypeIDColumn];
        set => this[this.tableMTypeKapsel.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MeterUnit
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeKapsel.MeterUnitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterUnit' in table 'MTypeKapsel' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeKapsel.MeterUnitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Qn
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeKapsel.QnColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Qn' in table 'MTypeKapsel' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeKapsel.QnColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Qmax
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeKapsel.QmaxColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Qmax' in table 'MTypeKapsel' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeKapsel.QmaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Qtrenn
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeKapsel.QtrennColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Qtrenn' in table 'MTypeKapsel' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeKapsel.QtrennColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Qmin
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeKapsel.QminColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Qmin' in table 'MTypeKapsel' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeKapsel.QminColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ImpulseValue
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeKapsel.ImpulseValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ImpulseValue' in table 'MTypeKapsel' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeKapsel.ImpulseValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Class
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeKapsel.ClassColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Class' in table 'MTypeKapsel' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeKapsel.ClassColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow MeterTypeRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) this.GetParentRow(this.Table.ParentRelations["MeterTypeMTypeSaariuskapsel"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["MeterTypeMTypeSaariuskapsel"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterUnitNull() => this.IsNull(this.tableMTypeKapsel.MeterUnitColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterUnitNull()
      {
        this[this.tableMTypeKapsel.MeterUnitColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQnNull() => this.IsNull(this.tableMTypeKapsel.QnColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQnNull() => this[this.tableMTypeKapsel.QnColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQmaxNull() => this.IsNull(this.tableMTypeKapsel.QmaxColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQmaxNull() => this[this.tableMTypeKapsel.QmaxColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQtrennNull() => this.IsNull(this.tableMTypeKapsel.QtrennColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQtrennNull() => this[this.tableMTypeKapsel.QtrennColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQminNull() => this.IsNull(this.tableMTypeKapsel.QminColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQminNull() => this[this.tableMTypeKapsel.QminColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsImpulseValueNull() => this.IsNull(this.tableMTypeKapsel.ImpulseValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetImpulseValueNull()
      {
        this[this.tableMTypeKapsel.ImpulseValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsClassNull() => this.IsNull(this.tableMTypeKapsel.ClassColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetClassNull() => this[this.tableMTypeKapsel.ClassColumn] = Convert.DBNull;
    }

    public class MTypeMIDWaterMeterRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterDataTable tableMTypeMIDWaterMeter;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeMIDWaterMeterRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMTypeMIDWaterMeter = (ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get => (int) this[this.tableMTypeMIDWaterMeter.MeterTypeIDColumn];
        set => this[this.tableMTypeMIDWaterMeter.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeCode
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeMIDWaterMeter.MeterTypeCodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterTypeCode' in table 'MTypeMIDWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeMIDWaterMeter.MeterTypeCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ApprovalCode
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeMIDWaterMeter.ApprovalCodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalCode' in table 'MTypeMIDWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeMIDWaterMeter.ApprovalCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short RatioID
      {
        get
        {
          try
          {
            return (short) this[this.tableMTypeMIDWaterMeter.RatioIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RatioID' in table 'MTypeMIDWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeMIDWaterMeter.RatioIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MIDTestingTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeMIDWaterMeter.MIDTestingTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MIDTestingTypeID' in table 'MTypeMIDWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeMIDWaterMeter.MIDTestingTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MIDErrorOffsetID
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeMIDWaterMeter.MIDErrorOffsetIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MIDErrorOffsetID' in table 'MTypeMIDWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeMIDWaterMeter.MIDErrorOffsetIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MTDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeMIDWaterMeter.MTDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MTDescription' in table 'MTypeMIDWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeMIDWaterMeter.MTDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeMIDWaterMeter.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'MTypeMIDWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeMIDWaterMeter.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterTypeCodeNull()
      {
        return this.IsNull(this.tableMTypeMIDWaterMeter.MeterTypeCodeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterTypeCodeNull()
      {
        this[this.tableMTypeMIDWaterMeter.MeterTypeCodeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalCodeNull()
      {
        return this.IsNull(this.tableMTypeMIDWaterMeter.ApprovalCodeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalCodeNull()
      {
        this[this.tableMTypeMIDWaterMeter.ApprovalCodeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRatioIDNull() => this.IsNull(this.tableMTypeMIDWaterMeter.RatioIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRatioIDNull()
      {
        this[this.tableMTypeMIDWaterMeter.RatioIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDTestingTypeIDNull()
      {
        return this.IsNull(this.tableMTypeMIDWaterMeter.MIDTestingTypeIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDTestingTypeIDNull()
      {
        this[this.tableMTypeMIDWaterMeter.MIDTestingTypeIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDErrorOffsetIDNull()
      {
        return this.IsNull(this.tableMTypeMIDWaterMeter.MIDErrorOffsetIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDErrorOffsetIDNull()
      {
        this[this.tableMTypeMIDWaterMeter.MIDErrorOffsetIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMTDescriptionNull()
      {
        return this.IsNull(this.tableMTypeMIDWaterMeter.MTDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMTDescriptionNull()
      {
        this[this.tableMTypeMIDWaterMeter.MTDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableMTypeMIDWaterMeter.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull()
      {
        this[this.tableMTypeMIDWaterMeter.PersonelNrColumn] = Convert.DBNull;
      }
    }

    public class MTypeSaariusRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusDataTable tableMTypeSaarius;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeSaariusRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMTypeSaarius = (ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get => (int) this[this.tableMTypeSaarius.MeterTypeIDColumn];
        set => this[this.tableMTypeSaarius.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte[] EEPData
      {
        get
        {
          try
          {
            return (byte[]) this[this.tableMTypeSaarius.EEPDataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EEPData' in table 'MTypeSaarius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeSaarius.EEPDataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Ability
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeSaarius.AbilityColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Ability' in table 'MTypeSaarius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeSaarius.AbilityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MeterUnit
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeSaarius.MeterUnitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterUnit' in table 'MTypeSaarius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeSaarius.MeterUnitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MediumName
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeSaarius.MediumNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MediumName' in table 'MTypeSaarius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeSaarius.MediumNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MediumDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeSaarius.MediumDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MediumDescription' in table 'MTypeSaarius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeSaarius.MediumDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MediumConst
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeSaarius.MediumConstColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MediumConst' in table 'MTypeSaarius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeSaarius.MediumConstColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int Baudrate
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeSaarius.BaudrateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Baudrate' in table 'MTypeSaarius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeSaarius.BaudrateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int iInput
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeSaarius.iInputColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'iInput' in table 'MTypeSaarius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeSaarius.iInputColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int iOutput
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeSaarius.iOutputColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'iOutput' in table 'MTypeSaarius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeSaarius.iOutputColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte RAM_WriteLimit
      {
        get
        {
          try
          {
            return (byte) this[this.tableMTypeSaarius.RAM_WriteLimitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RAM_WriteLimit' in table 'MTypeSaarius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeSaarius.RAM_WriteLimitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte MBusMeterType
      {
        get
        {
          try
          {
            return (byte) this[this.tableMTypeSaarius.MBusMeterTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MBusMeterType' in table 'MTypeSaarius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeSaarius.MBusMeterTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow MeterTypeRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) this.GetParentRow(this.Table.ParentRelations["MeterTypeMTypeSaarius"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["MeterTypeMTypeSaarius"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEEPDataNull() => this.IsNull(this.tableMTypeSaarius.EEPDataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEEPDataNull() => this[this.tableMTypeSaarius.EEPDataColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAbilityNull() => this.IsNull(this.tableMTypeSaarius.AbilityColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAbilityNull() => this[this.tableMTypeSaarius.AbilityColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterUnitNull() => this.IsNull(this.tableMTypeSaarius.MeterUnitColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterUnitNull()
      {
        this[this.tableMTypeSaarius.MeterUnitColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMediumNameNull() => this.IsNull(this.tableMTypeSaarius.MediumNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMediumNameNull()
      {
        this[this.tableMTypeSaarius.MediumNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMediumDescriptionNull()
      {
        return this.IsNull(this.tableMTypeSaarius.MediumDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMediumDescriptionNull()
      {
        this[this.tableMTypeSaarius.MediumDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMediumConstNull() => this.IsNull(this.tableMTypeSaarius.MediumConstColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMediumConstNull()
      {
        this[this.tableMTypeSaarius.MediumConstColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsBaudrateNull() => this.IsNull(this.tableMTypeSaarius.BaudrateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetBaudrateNull() => this[this.tableMTypeSaarius.BaudrateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsiInputNull() => this.IsNull(this.tableMTypeSaarius.iInputColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetiInputNull() => this[this.tableMTypeSaarius.iInputColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsiOutputNull() => this.IsNull(this.tableMTypeSaarius.iOutputColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetiOutputNull() => this[this.tableMTypeSaarius.iOutputColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRAM_WriteLimitNull()
      {
        return this.IsNull(this.tableMTypeSaarius.RAM_WriteLimitColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRAM_WriteLimitNull()
      {
        this[this.tableMTypeSaarius.RAM_WriteLimitColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMBusMeterTypeNull() => this.IsNull(this.tableMTypeSaarius.MBusMeterTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMBusMeterTypeNull()
      {
        this[this.tableMTypeSaarius.MBusMeterTypeColumn] = Convert.DBNull;
      }
    }

    public class MTypeTempSensorRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorDataTable tableMTypeTempSensor;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeTempSensorRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMTypeTempSensor = (ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get => (int) this[this.tableMTypeTempSensor.MeterTypeIDColumn];
        set => this[this.tableMTypeTempSensor.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MeterUnit
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeTempSensor.MeterUnitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterUnit' in table 'MTypeTempSensor' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeTempSensor.MeterUnitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SensorType
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeTempSensor.SensorTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SensorType' in table 'MTypeTempSensor' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeTempSensor.SensorTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double PN
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeTempSensor.PNColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PN' in table 'MTypeTempSensor' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeTempSensor.PNColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Tmin
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeTempSensor.TminColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Tmin' in table 'MTypeTempSensor' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeTempSensor.TminColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Tmax
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeTempSensor.TmaxColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Tmax' in table 'MTypeTempSensor' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeTempSensor.TmaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double DTMin
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeTempSensor.DTMinColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DTMin' in table 'MTypeTempSensor' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeTempSensor.DTMinColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double DTMax
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeTempSensor.DTMaxColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DTMax' in table 'MTypeTempSensor' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeTempSensor.DTMaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow MeterTypeRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) this.GetParentRow(this.Table.ParentRelations["MeterTypeMTypeTempSensor"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["MeterTypeMTypeTempSensor"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterUnitNull() => this.IsNull(this.tableMTypeTempSensor.MeterUnitColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterUnitNull()
      {
        this[this.tableMTypeTempSensor.MeterUnitColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSensorTypeNull() => this.IsNull(this.tableMTypeTempSensor.SensorTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSensorTypeNull()
      {
        this[this.tableMTypeTempSensor.SensorTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPNNull() => this.IsNull(this.tableMTypeTempSensor.PNColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPNNull() => this[this.tableMTypeTempSensor.PNColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTminNull() => this.IsNull(this.tableMTypeTempSensor.TminColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTminNull() => this[this.tableMTypeTempSensor.TminColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTmaxNull() => this.IsNull(this.tableMTypeTempSensor.TmaxColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTmaxNull() => this[this.tableMTypeTempSensor.TmaxColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDTMinNull() => this.IsNull(this.tableMTypeTempSensor.DTMinColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDTMinNull() => this[this.tableMTypeTempSensor.DTMinColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDTMaxNull() => this.IsNull(this.tableMTypeTempSensor.DTMaxColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDTMaxNull() => this[this.tableMTypeTempSensor.DTMaxColumn] = Convert.DBNull;
    }

    public class MTypeWaterMeterRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterDataTable tableMTypeWaterMeter;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeWaterMeterRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMTypeWaterMeter = (ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get => (int) this[this.tableMTypeWaterMeter.MeterTypeIDColumn];
        set => this[this.tableMTypeWaterMeter.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeCode
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeWaterMeter.MeterTypeCodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterTypeCode' in table 'MTypeWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeWaterMeter.MeterTypeCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ApprovalCode
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeWaterMeter.ApprovalCodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalCode' in table 'MTypeWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeWaterMeter.ApprovalCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ClassID
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeWaterMeter.ClassIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ClassID' in table 'MTypeWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeWaterMeter.ClassIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestingTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeWaterMeter.TestingTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestingTypeID' in table 'MTypeWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeWaterMeter.TestingTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ErrorOffsetID
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeWaterMeter.ErrorOffsetIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorOffsetID' in table 'MTypeWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeWaterMeter.ErrorOffsetIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MTDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeWaterMeter.MTDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MTDescription' in table 'MTypeWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeWaterMeter.MTDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableMTypeWaterMeter.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'MTypeWaterMeter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeWaterMeter.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterTypeCodeNull()
      {
        return this.IsNull(this.tableMTypeWaterMeter.MeterTypeCodeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterTypeCodeNull()
      {
        this[this.tableMTypeWaterMeter.MeterTypeCodeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalCodeNull() => this.IsNull(this.tableMTypeWaterMeter.ApprovalCodeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalCodeNull()
      {
        this[this.tableMTypeWaterMeter.ApprovalCodeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsClassIDNull() => this.IsNull(this.tableMTypeWaterMeter.ClassIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetClassIDNull()
      {
        this[this.tableMTypeWaterMeter.ClassIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestingTypeIDNull()
      {
        return this.IsNull(this.tableMTypeWaterMeter.TestingTypeIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestingTypeIDNull()
      {
        this[this.tableMTypeWaterMeter.TestingTypeIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorOffsetIDNull()
      {
        return this.IsNull(this.tableMTypeWaterMeter.ErrorOffsetIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorOffsetIDNull()
      {
        this[this.tableMTypeWaterMeter.ErrorOffsetIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMTDescriptionNull()
      {
        return this.IsNull(this.tableMTypeWaterMeter.MTDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMTDescriptionNull()
      {
        this[this.tableMTypeWaterMeter.MTDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableMTypeWaterMeter.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull()
      {
        this[this.tableMTypeWaterMeter.PersonelNrColumn] = Convert.DBNull;
      }
    }

    public class MTypeZelsiusRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusDataTable tableMTypeZelsius;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeZelsiusRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMTypeZelsius = (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get => (int) this[this.tableMTypeZelsius.MeterTypeIDColumn];
        set => this[this.tableMTypeZelsius.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte[] EEPdata
      {
        get
        {
          try
          {
            return (byte[]) this[this.tableMTypeZelsius.EEPdataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EEPdata' in table 'MTypeZelsius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeZelsius.EEPdataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TypeOverrideString
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeZelsius.TypeOverrideStringColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TypeOverrideString' in table 'MTypeZelsius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeZelsius.TypeOverrideStringColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TypeCreationString
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeZelsius.TypeCreationStringColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TypeCreationString' in table 'MTypeZelsius' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeZelsius.TypeCreationStringColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow MeterTypeRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) this.GetParentRow(this.Table.ParentRelations["MeterTypeMTypeZelsius"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["MeterTypeMTypeZelsius"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEEPdataNull() => this.IsNull(this.tableMTypeZelsius.EEPdataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEEPdataNull() => this[this.tableMTypeZelsius.EEPdataColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTypeOverrideStringNull()
      {
        return this.IsNull(this.tableMTypeZelsius.TypeOverrideStringColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTypeOverrideStringNull()
      {
        this[this.tableMTypeZelsius.TypeOverrideStringColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTypeCreationStringNull()
      {
        return this.IsNull(this.tableMTypeZelsius.TypeCreationStringColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTypeCreationStringNull()
      {
        this[this.tableMTypeZelsius.TypeCreationStringColumn] = Convert.DBNull;
      }
    }

    public class MTypeZelsiusModuleRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleDataTable tableMTypeZelsiusModule;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeZelsiusModuleRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMTypeZelsiusModule = (ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get => (int) this[this.tableMTypeZelsiusModule.MeterTypeIDColumn];
        set => this[this.tableMTypeZelsiusModule.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ModuleType
      {
        get
        {
          try
          {
            return (string) this[this.tableMTypeZelsiusModule.ModuleTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ModuleType' in table 'MTypeZelsiusModule' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeZelsiusModule.ModuleTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow MeterTypeRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow) this.GetParentRow(this.Table.ParentRelations["MeterTypeMTypeZelsiusModule"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["MeterTypeMTypeZelsiusModule"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsModuleTypeNull() => this.IsNull(this.tableMTypeZelsiusModule.ModuleTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetModuleTypeNull()
      {
        this[this.tableMTypeZelsiusModule.ModuleTypeColumn] = Convert.DBNull;
      }
    }

    public class NodeListRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.NodeListDataTable tableNodeList;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal NodeListRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableNodeList = (ZR_ClassLibrary.Schema_Access.Schema.NodeListDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int NodeID
      {
        get => (int) this[this.tableNodeList.NodeIDColumn];
        set => this[this.tableNodeList.NodeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterID
      {
        get => (int) this[this.tableNodeList.MeterIDColumn];
        set => this[this.tableNodeList.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short NodeTypeID
      {
        get
        {
          try
          {
            return (short) this[this.tableNodeList.NodeTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NodeTypeID' in table 'NodeList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNodeList.NodeTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string NodeName
      {
        get
        {
          try
          {
            return (string) this[this.tableNodeList.NodeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NodeName' in table 'NodeList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNodeList.NodeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string NodeDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableNodeList.NodeDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NodeDescription' in table 'NodeList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNodeList.NodeDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string NodeSettings
      {
        get
        {
          try
          {
            return (string) this[this.tableNodeList.NodeSettingsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NodeSettings' in table 'NodeList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNodeList.NodeSettingsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ValidFrom
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableNodeList.ValidFromColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidFrom' in table 'NodeList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNodeList.ValidFromColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ValidTo
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableNodeList.ValidToColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidTo' in table 'NodeList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNodeList.ValidToColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string NodeAdditionalInfos
      {
        get
        {
          return this.IsNodeAdditionalInfosNull() ? string.Empty : (string) this[this.tableNodeList.NodeAdditionalInfosColumn];
        }
        set => this[this.tableNodeList.NodeAdditionalInfosColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNodeTypeIDNull() => this.IsNull(this.tableNodeList.NodeTypeIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNodeTypeIDNull() => this[this.tableNodeList.NodeTypeIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNodeNameNull() => this.IsNull(this.tableNodeList.NodeNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNodeNameNull() => this[this.tableNodeList.NodeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNodeDescriptionNull() => this.IsNull(this.tableNodeList.NodeDescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNodeDescriptionNull()
      {
        this[this.tableNodeList.NodeDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNodeSettingsNull() => this.IsNull(this.tableNodeList.NodeSettingsColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNodeSettingsNull()
      {
        this[this.tableNodeList.NodeSettingsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsValidFromNull() => this.IsNull(this.tableNodeList.ValidFromColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetValidFromNull() => this[this.tableNodeList.ValidFromColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsValidToNull() => this.IsNull(this.tableNodeList.ValidToColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetValidToNull() => this[this.tableNodeList.ValidToColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNodeAdditionalInfosNull()
      {
        return this.IsNull(this.tableNodeList.NodeAdditionalInfosColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNodeAdditionalInfosNull()
      {
        this[this.tableNodeList.NodeAdditionalInfosColumn] = Convert.DBNull;
      }
    }

    public class NodeReferencesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesDataTable tableNodeReferences;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal NodeReferencesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableNodeReferences = (ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int NodeID
      {
        get => (int) this[this.tableNodeReferences.NodeIDColumn];
        set => this[this.tableNodeReferences.NodeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ParentID
      {
        get => (int) this[this.tableNodeReferences.ParentIDColumn];
        set => this[this.tableNodeReferences.ParentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LayerID
      {
        get => (int) this[this.tableNodeReferences.LayerIDColumn];
        set => this[this.tableNodeReferences.LayerIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int NodeOrder
      {
        get
        {
          try
          {
            return (int) this[this.tableNodeReferences.NodeOrderColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NodeOrder' in table 'NodeReferences' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNodeReferences.NodeOrderColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNodeOrderNull() => this.IsNull(this.tableNodeReferences.NodeOrderColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNodeOrderNull()
      {
        this[this.tableNodeReferences.NodeOrderColumn] = Convert.DBNull;
      }
    }

    public class PartlistRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PartlistDataTable tablePartlist;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PartlistRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tablePartlist = (ZR_ClassLibrary.Schema_Access.Schema.PartlistDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterID
      {
        get => (int) this[this.tablePartlist.MeterIDColumn];
        set => this[this.tablePartlist.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int IncludeMeterID
      {
        get => (int) this[this.tablePartlist.IncludeMeterIDColumn];
        set => this[this.tablePartlist.IncludeMeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime CreationDate
      {
        get => (DateTime) this[this.tablePartlist.CreationDateColumn];
        set => this[this.tablePartlist.CreationDateColumn] = (object) value;
      }
    }

    public class PPS_CacheRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheDataTable tablePPS_Cache;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PPS_CacheRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tablePPS_Cache = (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PPS_CacheElementID
      {
        get => (int) this[this.tablePPS_Cache.PPS_CacheElementIDColumn];
        set => this[this.tablePPS_Cache.PPS_CacheElementIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPS_MaterialNumber
      {
        get
        {
          try
          {
            return (string) this[this.tablePPS_Cache.PPS_MaterialNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPS_MaterialNumber' in table 'PPS_Cache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePPS_Cache.PPS_MaterialNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PPS_MainClassID
      {
        get
        {
          try
          {
            return (int) this[this.tablePPS_Cache.PPS_MainClassIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPS_MainClassID' in table 'PPS_Cache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePPS_Cache.PPS_MainClassIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PPS_ParameterID
      {
        get
        {
          try
          {
            return (int) this[this.tablePPS_Cache.PPS_ParameterIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPS_ParameterID' in table 'PPS_Cache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePPS_Cache.PPS_ParameterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPS_ParameterValue
      {
        get
        {
          try
          {
            return (string) this[this.tablePPS_Cache.PPS_ParameterValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPS_ParameterValue' in table 'PPS_Cache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePPS_Cache.PPS_ParameterValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPS_MaterialNumberNull()
      {
        return this.IsNull(this.tablePPS_Cache.PPS_MaterialNumberColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPS_MaterialNumberNull()
      {
        this[this.tablePPS_Cache.PPS_MaterialNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPS_MainClassIDNull() => this.IsNull(this.tablePPS_Cache.PPS_MainClassIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPS_MainClassIDNull()
      {
        this[this.tablePPS_Cache.PPS_MainClassIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPS_ParameterIDNull() => this.IsNull(this.tablePPS_Cache.PPS_ParameterIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPS_ParameterIDNull()
      {
        this[this.tablePPS_Cache.PPS_ParameterIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPS_ParameterValueNull()
      {
        return this.IsNull(this.tablePPS_Cache.PPS_ParameterValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPS_ParameterValueNull()
      {
        this[this.tablePPS_Cache.PPS_ParameterValueColumn] = Convert.DBNull;
      }
    }

    public class PPS_CacheClassNamesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesDataTable tablePPS_CacheClassNames;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PPS_CacheClassNamesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tablePPS_CacheClassNames = (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PPS_MainClassID
      {
        get => (int) this[this.tablePPS_CacheClassNames.PPS_MainClassIDColumn];
        set => this[this.tablePPS_CacheClassNames.PPS_MainClassIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPS_ClassName
      {
        get
        {
          try
          {
            return (string) this[this.tablePPS_CacheClassNames.PPS_ClassNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPS_ClassName' in table 'PPS_CacheClassNames' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePPS_CacheClassNames.PPS_ClassNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPS_ClassDescription
      {
        get
        {
          try
          {
            return (string) this[this.tablePPS_CacheClassNames.PPS_ClassDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPS_ClassDescription' in table 'PPS_CacheClassNames' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePPS_CacheClassNames.PPS_ClassDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPS_ClassNameNull()
      {
        return this.IsNull(this.tablePPS_CacheClassNames.PPS_ClassNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPS_ClassNameNull()
      {
        this[this.tablePPS_CacheClassNames.PPS_ClassNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPS_ClassDescriptionNull()
      {
        return this.IsNull(this.tablePPS_CacheClassNames.PPS_ClassDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPS_ClassDescriptionNull()
      {
        this[this.tablePPS_CacheClassNames.PPS_ClassDescriptionColumn] = Convert.DBNull;
      }
    }

    public class PPS_CacheParmNamesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesDataTable tablePPS_CacheParmNames;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PPS_CacheParmNamesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tablePPS_CacheParmNames = (ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PPS_ParameterID
      {
        get => (int) this[this.tablePPS_CacheParmNames.PPS_ParameterIDColumn];
        set => this[this.tablePPS_CacheParmNames.PPS_ParameterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPS_ParameterName
      {
        get
        {
          try
          {
            return (string) this[this.tablePPS_CacheParmNames.PPS_ParameterNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPS_ParameterName' in table 'PPS_CacheParmNames' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePPS_CacheParmNames.PPS_ParameterNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPS_ParameterDescription
      {
        get
        {
          try
          {
            return (string) this[this.tablePPS_CacheParmNames.PPS_ParameterDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPS_ParameterDescription' in table 'PPS_CacheParmNames' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePPS_CacheParmNames.PPS_ParameterDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPS_ParameterNameNull()
      {
        return this.IsNull(this.tablePPS_CacheParmNames.PPS_ParameterNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPS_ParameterNameNull()
      {
        this[this.tablePPS_CacheParmNames.PPS_ParameterNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPS_ParameterDescriptionNull()
      {
        return this.IsNull(this.tablePPS_CacheParmNames.PPS_ParameterDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPS_ParameterDescriptionNull()
      {
        this[this.tablePPS_CacheParmNames.PPS_ParameterDescriptionColumn] = Convert.DBNull;
      }
    }

    public class PPS_RW_WMZ_MapperRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperDataTable tablePPS_RW_WMZ_Mapper;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PPS_RW_WMZ_MapperRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tablePPS_RW_WMZ_Mapper = (ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPS_ArticleNr_old
      {
        get => (string) this[this.tablePPS_RW_WMZ_Mapper.PPS_ArticleNr_oldColumn];
        set => this[this.tablePPS_RW_WMZ_Mapper.PPS_ArticleNr_oldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPS_MaterialNumber
      {
        get => (string) this[this.tablePPS_RW_WMZ_Mapper.PPS_MaterialNumberColumn];
        set => this[this.tablePPS_RW_WMZ_Mapper.PPS_MaterialNumberColumn] = (object) value;
      }
    }

    public class PPS_STS_ReferenceRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceDataTable tablePPS_STS_Reference;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PPS_STS_ReferenceRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tablePPS_STS_Reference = (ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPS_Group
      {
        get => (string) this[this.tablePPS_STS_Reference.PPS_GroupColumn];
        set => this[this.tablePPS_STS_Reference.PPS_GroupColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPS_Name
      {
        get => (string) this[this.tablePPS_STS_Reference.PPS_NameColumn];
        set => this[this.tablePPS_STS_Reference.PPS_NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPS_Generation
      {
        get => (string) this[this.tablePPS_STS_Reference.PPS_GenerationColumn];
        set => this[this.tablePPS_STS_Reference.PPS_GenerationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PPS_AttributeNo
      {
        get
        {
          try
          {
            return (int) this[this.tablePPS_STS_Reference.PPS_AttributeNoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPS_AttributeNo' in table 'PPS_STS_Reference' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePPS_STS_Reference.PPS_AttributeNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PPS_EntryNo
      {
        get
        {
          try
          {
            return (int) this[this.tablePPS_STS_Reference.PPS_EntryNoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPS_EntryNo' in table 'PPS_STS_Reference' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePPS_STS_Reference.PPS_EntryNoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPS_FromGroup
      {
        get
        {
          try
          {
            return (string) this[this.tablePPS_STS_Reference.PPS_FromGroupColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPS_FromGroup' in table 'PPS_STS_Reference' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePPS_STS_Reference.PPS_FromGroupColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPS_AttributeNoNull()
      {
        return this.IsNull(this.tablePPS_STS_Reference.PPS_AttributeNoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPS_AttributeNoNull()
      {
        this[this.tablePPS_STS_Reference.PPS_AttributeNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPS_EntryNoNull() => this.IsNull(this.tablePPS_STS_Reference.PPS_EntryNoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPS_EntryNoNull()
      {
        this[this.tablePPS_STS_Reference.PPS_EntryNoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPS_FromGroupNull()
      {
        return this.IsNull(this.tablePPS_STS_Reference.PPS_FromGroupColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPS_FromGroupNull()
      {
        this[this.tablePPS_STS_Reference.PPS_FromGroupColumn] = Convert.DBNull;
      }
    }

    public class ProgFilesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ProgFilesDataTable tableProgFiles;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ProgFilesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableProgFiles = (ZR_ClassLibrary.Schema_Access.Schema.ProgFilesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MapID
      {
        get => (int) this[this.tableProgFiles.MapIDColumn];
        set => this[this.tableProgFiles.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ProgFileName
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.ProgFileNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ProgFileName' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.ProgFileNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Options
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.OptionsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Options' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.OptionsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string HexText
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.HexTextColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HexText' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.HexTextColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SourceInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.SourceInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SourceInfo' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.SourceInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsProgFileNameNull() => this.IsNull(this.tableProgFiles.ProgFileNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetProgFileNameNull()
      {
        this[this.tableProgFiles.ProgFileNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsOptionsNull() => this.IsNull(this.tableProgFiles.OptionsColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetOptionsNull() => this[this.tableProgFiles.OptionsColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHexTextNull() => this.IsNull(this.tableProgFiles.HexTextColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHexTextNull() => this[this.tableProgFiles.HexTextColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSourceInfoNull() => this.IsNull(this.tableProgFiles.SourceInfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSourceInfoNull()
      {
        this[this.tableProgFiles.SourceInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow[] GetHardwareTypeRows()
      {
        return this.Table.ChildRelations["ProgFilesHardwareType"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow[]) this.GetChildRows(this.Table.ChildRelations["ProgFilesHardwareType"]);
      }
    }

    public class PValueIdentRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PValueIdentDataTable tablePValueIdent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PValueIdentRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tablePValueIdent = (ZR_ClassLibrary.Schema_Access.Schema.PValueIdentDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PValueID
      {
        get => (int) this[this.tablePValueIdent.PValueIDColumn];
        set => this[this.tablePValueIdent.PValueIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PValueName
      {
        get
        {
          try
          {
            return (string) this[this.tablePValueIdent.PValueNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PValueName' in table 'PValueIdent' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePValueIdent.PValueNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Unit
      {
        get
        {
          try
          {
            return (string) this[this.tablePValueIdent.UnitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Unit' in table 'PValueIdent' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePValueIdent.UnitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tablePValueIdent.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'PValueIdent' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePValueIdent.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int DependID
      {
        get
        {
          try
          {
            return (int) this[this.tablePValueIdent.DependIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DependID' in table 'PValueIdent' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePValueIdent.DependIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CalcRoule
      {
        get
        {
          try
          {
            return (string) this[this.tablePValueIdent.CalcRouleColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CalcRoule' in table 'PValueIdent' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePValueIdent.CalcRouleColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPValueNameNull() => this.IsNull(this.tablePValueIdent.PValueNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPValueNameNull()
      {
        this[this.tablePValueIdent.PValueNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUnitNull() => this.IsNull(this.tablePValueIdent.UnitColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUnitNull() => this[this.tablePValueIdent.UnitColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tablePValueIdent.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tablePValueIdent.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDependIDNull() => this.IsNull(this.tablePValueIdent.DependIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDependIDNull() => this[this.tablePValueIdent.DependIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCalcRouleNull() => this.IsNull(this.tablePValueIdent.CalcRouleColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCalcRouleNull()
      {
        this[this.tablePValueIdent.CalcRouleColumn] = Convert.DBNull;
      }
    }

    public class RepairRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.RepairDataTable tableRepair;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal RepairRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableRepair = (ZR_ClassLibrary.Schema_Access.Schema.RepairDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int RepairID
      {
        get => (int) this[this.tableRepair.RepairIDColumn];
        set => this[this.tableRepair.RepairIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterID
      {
        get
        {
          try
          {
            return (int) this[this.tableRepair.MeterIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterID' in table 'Repair' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRepair.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int RepairErrorGroupId
      {
        get
        {
          try
          {
            return (int) this[this.tableRepair.RepairErrorGroupIdColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RepairErrorGroupId' in table 'Repair' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRepair.RepairErrorGroupIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ErrorGroupText
      {
        get
        {
          try
          {
            return (string) this[this.tableRepair.ErrorGroupTextColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorGroupText' in table 'Repair' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRepair.ErrorGroupTextColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RepairDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableRepair.RepairDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RepairDescription' in table 'Repair' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRepair.RepairDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte RepairOk
      {
        get
        {
          try
          {
            return (byte) this[this.tableRepair.RepairOkColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RepairOk' in table 'Repair' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRepair.RepairOkColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime RepairDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableRepair.RepairDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RepairDate' in table 'Repair' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRepair.RepairDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int RepairMinutes
      {
        get
        {
          try
          {
            return (int) this[this.tableRepair.RepairMinutesColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RepairMinutes' in table 'Repair' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRepair.RepairMinutesColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterRow MeterRow
      {
        get => (ZR_ClassLibrary.Schema_Access.Schema.MeterRow) this.GetParentRow(this.Table.ParentRelations["MeterRepair"]);
        set => this.SetParentRow((DataRow) value, this.Table.ParentRelations["MeterRepair"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow RepairErrorGroupsRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow) this.GetParentRow(this.Table.ParentRelations["RepairErrorGroupsRepair"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["RepairErrorGroupsRepair"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterIDNull() => this.IsNull(this.tableRepair.MeterIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterIDNull() => this[this.tableRepair.MeterIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRepairErrorGroupIdNull()
      {
        return this.IsNull(this.tableRepair.RepairErrorGroupIdColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRepairErrorGroupIdNull()
      {
        this[this.tableRepair.RepairErrorGroupIdColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorGroupTextNull() => this.IsNull(this.tableRepair.ErrorGroupTextColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorGroupTextNull()
      {
        this[this.tableRepair.ErrorGroupTextColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRepairDescriptionNull()
      {
        return this.IsNull(this.tableRepair.RepairDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRepairDescriptionNull()
      {
        this[this.tableRepair.RepairDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRepairOkNull() => this.IsNull(this.tableRepair.RepairOkColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRepairOkNull() => this[this.tableRepair.RepairOkColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRepairDateNull() => this.IsNull(this.tableRepair.RepairDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRepairDateNull() => this[this.tableRepair.RepairDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRepairMinutesNull() => this.IsNull(this.tableRepair.RepairMinutesColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRepairMinutesNull()
      {
        this[this.tableRepair.RepairMinutesColumn] = Convert.DBNull;
      }
    }

    public class RepairErrorGroupsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsDataTable tableRepairErrorGroups;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal RepairErrorGroupsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableRepairErrorGroups = (ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int RepairErrorGroupId
      {
        get => (int) this[this.tableRepairErrorGroups.RepairErrorGroupIdColumn];
        set => this[this.tableRepairErrorGroups.RepairErrorGroupIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterHardwareID
      {
        get
        {
          try
          {
            return (int) this[this.tableRepairErrorGroups.MeterHardwareIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterHardwareID' in table 'RepairErrorGroups' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRepairErrorGroups.MeterHardwareIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ErrorGroupText
      {
        get
        {
          try
          {
            return (string) this[this.tableRepairErrorGroups.ErrorGroupTextColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorGroupText' in table 'RepairErrorGroups' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRepairErrorGroups.ErrorGroupTextColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterHardwareIDNull()
      {
        return this.IsNull(this.tableRepairErrorGroups.MeterHardwareIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterHardwareIDNull()
      {
        this[this.tableRepairErrorGroups.MeterHardwareIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorGroupTextNull()
      {
        return this.IsNull(this.tableRepairErrorGroups.ErrorGroupTextColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorGroupTextNull()
      {
        this[this.tableRepairErrorGroups.ErrorGroupTextColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairRow[] GetRepairRows()
      {
        return this.Table.ChildRelations["RepairErrorGroupsRepair"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.RepairRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.RepairRow[]) this.GetChildRows(this.Table.ChildRelations["RepairErrorGroupsRepair"]);
      }
    }

    public class RuntimeCodeRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeDataTable tableRuntimeCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal RuntimeCodeRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableRuntimeCode = (ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FunctionNumber
      {
        get => (int) this[this.tableRuntimeCode.FunctionNumberColumn];
        set => this[this.tableRuntimeCode.FunctionNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CodeID
      {
        get => (int) this[this.tableRuntimeCode.CodeIDColumn];
        set => this[this.tableRuntimeCode.CodeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeSequenceType
      {
        get
        {
          try
          {
            return (string) this[this.tableRuntimeCode.CodeSequenceTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeSequenceType' in table 'RuntimeCode' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRuntimeCode.CodeSequenceTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeSequenceInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableRuntimeCode.CodeSequenceInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeSequenceInfo' in table 'RuntimeCode' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRuntimeCode.CodeSequenceInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeSequenceName
      {
        get
        {
          try
          {
            return (string) this[this.tableRuntimeCode.CodeSequenceNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeSequenceName' in table 'RuntimeCode' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableRuntimeCode.CodeSequenceNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow ZRFunctionRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) this.GetParentRow(this.Table.ParentRelations["FunctionRuntimeCodeKopf"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["FunctionRuntimeCodeKopf"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeSequenceTypeNull()
      {
        return this.IsNull(this.tableRuntimeCode.CodeSequenceTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeSequenceTypeNull()
      {
        this[this.tableRuntimeCode.CodeSequenceTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeSequenceInfoNull()
      {
        return this.IsNull(this.tableRuntimeCode.CodeSequenceInfoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeSequenceInfoNull()
      {
        this[this.tableRuntimeCode.CodeSequenceInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeSequenceNameNull()
      {
        return this.IsNull(this.tableRuntimeCode.CodeSequenceNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeSequenceNameNull()
      {
        this[this.tableRuntimeCode.CodeSequenceNameColumn] = Convert.DBNull;
      }
    }

    public class TestRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestDataTable tableTest;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTest = (ZR_ClassLibrary.Schema_Access.Schema.TestDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestID
      {
        get => (int) this[this.tableTest.TestIDColumn];
        set => this[this.tableTest.TestIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime TestStartDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableTest.TestStartDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestStartDate' in table 'Test' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTest.TestStartDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime TestEndDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableTest.TestEndDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestEndDate' in table 'Test' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTest.TestEndDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableTest.TestTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestTypeID' in table 'Test' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTest.TestTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte TestPassed
      {
        get
        {
          try
          {
            return (byte) this[this.tableTest.TestPassedColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestPassed' in table 'Test' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTest.TestPassedColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableTest.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'Test' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTest.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableTest.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'Test' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTest.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TestOrderNr
      {
        get
        {
          try
          {
            return (string) this[this.tableTest.TestOrderNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestOrderNr' in table 'Test' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTest.TestOrderNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte Verification
      {
        get
        {
          try
          {
            return (byte) this[this.tableTest.VerificationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Verification' in table 'Test' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTest.VerificationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ExternalTestID
      {
        get
        {
          try
          {
            return (string) this[this.tableTest.ExternalTestIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ExternalTestID' in table 'Test' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTest.ExternalTestIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestStartDateNull() => this.IsNull(this.tableTest.TestStartDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestStartDateNull()
      {
        this[this.tableTest.TestStartDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestEndDateNull() => this.IsNull(this.tableTest.TestEndDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestEndDateNull() => this[this.tableTest.TestEndDateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestTypeIDNull() => this.IsNull(this.tableTest.TestTypeIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestTypeIDNull() => this[this.tableTest.TestTypeIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestPassedNull() => this.IsNull(this.tableTest.TestPassedColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestPassedNull() => this[this.tableTest.TestPassedColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableTest.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull() => this[this.tableTest.PersonelNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableTest.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull() => this[this.tableTest.DescriptionColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestOrderNrNull() => this.IsNull(this.tableTest.TestOrderNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestOrderNrNull() => this[this.tableTest.TestOrderNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVerificationNull() => this.IsNull(this.tableTest.VerificationColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVerificationNull() => this[this.tableTest.VerificationColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsExternalTestIDNull() => this.IsNull(this.tableTest.ExternalTestIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetExternalTestIDNull()
      {
        this[this.tableTest.ExternalTestIDColumn] = Convert.DBNull;
      }
    }

    public class TestbenchActualValuesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesDataTable tableTestbenchActualValues;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestbenchActualValuesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTestbenchActualValues = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestID
      {
        get => (int) this[this.tableTestbenchActualValues.TestIDColumn];
        set => this[this.tableTestbenchActualValues.TestIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestPointDataID
      {
        get => (int) this[this.tableTestbenchActualValues.TestPointDataIDColumn];
        set => this[this.tableTestbenchActualValues.TestPointDataIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestRunOrderNr
      {
        get => (int) this[this.tableTestbenchActualValues.TestRunOrderNrColumn];
        set => this[this.tableTestbenchActualValues.TestRunOrderNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ActualValueID
      {
        get => (int) this[this.tableTestbenchActualValues.ActualValueIDColumn];
        set => this[this.tableTestbenchActualValues.ActualValueIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ActualValue
      {
        get
        {
          try
          {
            return (string) this[this.tableTestbenchActualValues.ActualValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ActualValue' in table 'TestbenchActualValues' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestbenchActualValues.ActualValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsActualValueNull()
      {
        return this.IsNull(this.tableTestbenchActualValues.ActualValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetActualValueNull()
      {
        this[this.tableTestbenchActualValues.ActualValueColumn] = Convert.DBNull;
      }
    }

    public class TestbenchNominalValuesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesDataTable tableTestbenchNominalValues;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestbenchNominalValuesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTestbenchNominalValues = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestPointDataID
      {
        get => (int) this[this.tableTestbenchNominalValues.TestPointDataIDColumn];
        set => this[this.tableTestbenchNominalValues.TestPointDataIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int NominalValueID
      {
        get => (int) this[this.tableTestbenchNominalValues.NominalValueIDColumn];
        set => this[this.tableTestbenchNominalValues.NominalValueIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string NominalValue
      {
        get
        {
          try
          {
            return (string) this[this.tableTestbenchNominalValues.NominalValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NominalValue' in table 'TestbenchNominalValues' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestbenchNominalValues.NominalValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ValueDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableTestbenchNominalValues.ValueDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValueDescription' in table 'TestbenchNominalValues' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestbenchNominalValues.ValueDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNominalValueNull()
      {
        return this.IsNull(this.tableTestbenchNominalValues.NominalValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNominalValueNull()
      {
        this[this.tableTestbenchNominalValues.NominalValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsValueDescriptionNull()
      {
        return this.IsNull(this.tableTestbenchNominalValues.ValueDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetValueDescriptionNull()
      {
        this[this.tableTestbenchNominalValues.ValueDescriptionColumn] = Convert.DBNull;
      }
    }

    public class TestEquipmentRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentDataTable tableTestEquipment;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestEquipmentRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTestEquipment = (ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestID
      {
        get => (int) this[this.tableTestEquipment.TestIDColumn];
        set => this[this.tableTestEquipment.TestIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tableTestEquipment.EquipmentIDColumn];
        set => this[this.tableTestEquipment.EquipmentIDColumn] = (object) value;
      }
    }

    public class TestPointListRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestPointListDataTable tableTestPointList;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestPointListRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTestPointList = (ZR_ClassLibrary.Schema_Access.Schema.TestPointListDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestTypeID
      {
        get => (int) this[this.tableTestPointList.TestTypeIDColumn];
        set => this[this.tableTestPointList.TestTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestPointDataID
      {
        get => (int) this[this.tableTestPointList.TestPointDataIDColumn];
        set => this[this.tableTestPointList.TestPointDataIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestRunOrderNr
      {
        get => (int) this[this.tableTestPointList.TestRunOrderNrColumn];
        set => this[this.tableTestPointList.TestRunOrderNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TestPointName
      {
        get
        {
          try
          {
            return (string) this[this.tableTestPointList.TestPointNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestPointName' in table 'TestPointList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestPointList.TestPointNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestErrorOrderNr
      {
        get
        {
          try
          {
            return (int) this[this.tableTestPointList.TestErrorOrderNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestErrorOrderNr' in table 'TestPointList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestPointList.TestErrorOrderNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableTestPointList.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'TestPointList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestPointList.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestPointNameNull() => this.IsNull(this.tableTestPointList.TestPointNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestPointNameNull()
      {
        this[this.tableTestPointList.TestPointNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestErrorOrderNrNull()
      {
        return this.IsNull(this.tableTestPointList.TestErrorOrderNrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestErrorOrderNrNull()
      {
        this[this.tableTestPointList.TestErrorOrderNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableTestPointList.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableTestPointList.DescriptionColumn] = Convert.DBNull;
      }
    }

    public class TestResistorTableRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableDataTable tableTestResistorTable;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestResistorTableRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTestResistorTable = (ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentId
      {
        get => (int) this[this.tableTestResistorTable.EquipmentIdColumn];
        set => this[this.tableTestResistorTable.EquipmentIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SwitchPositionId
      {
        get => (string) this[this.tableTestResistorTable.SwitchPositionIdColumn];
        set => this[this.tableTestResistorTable.SwitchPositionIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime CalibrationDate
      {
        get => (DateTime) this[this.tableTestResistorTable.CalibrationDateColumn];
        set => this[this.tableTestResistorTable.CalibrationDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ResistorType
      {
        get
        {
          try
          {
            return (string) this[this.tableTestResistorTable.ResistorTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ResistorType' in table 'TestResistorTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResistorTable.ResistorTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ResistorFlowValue
      {
        get
        {
          try
          {
            return (double) this[this.tableTestResistorTable.ResistorFlowValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ResistorFlowValue' in table 'TestResistorTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResistorTable.ResistorFlowValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ResistorReturnValue
      {
        get
        {
          try
          {
            return (double) this[this.tableTestResistorTable.ResistorReturnValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ResistorReturnValue' in table 'TestResistorTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResistorTable.ResistorReturnValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double EnergieFactorReturn
      {
        get
        {
          try
          {
            return (double) this[this.tableTestResistorTable.EnergieFactorReturnColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EnergieFactorReturn' in table 'TestResistorTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResistorTable.EnergieFactorReturnColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double EnergieFactorFlow
      {
        get
        {
          try
          {
            return (double) this[this.tableTestResistorTable.EnergieFactorFlowColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EnergieFactorFlow' in table 'TestResistorTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResistorTable.EnergieFactorFlowColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CalibrationInterval
      {
        get
        {
          try
          {
            return (int) this[this.tableTestResistorTable.CalibrationIntervalColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CalibrationInterval' in table 'TestResistorTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResistorTable.CalibrationIntervalColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CalibrationPersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableTestResistorTable.CalibrationPersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CalibrationPersonelNr' in table 'TestResistorTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResistorTable.CalibrationPersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ResistorInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableTestResistorTable.ResistorInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ResistorInfo' in table 'TestResistorTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResistorTable.ResistorInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte NumberFlow
      {
        get
        {
          try
          {
            return (byte) this[this.tableTestResistorTable.NumberFlowColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NumberFlow' in table 'TestResistorTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResistorTable.NumberFlowColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte NumberReturn
      {
        get
        {
          try
          {
            return (byte) this[this.tableTestResistorTable.NumberReturnColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NumberReturn' in table 'TestResistorTable' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResistorTable.NumberReturnColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResistorTypeNull()
      {
        return this.IsNull(this.tableTestResistorTable.ResistorTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResistorTypeNull()
      {
        this[this.tableTestResistorTable.ResistorTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResistorFlowValueNull()
      {
        return this.IsNull(this.tableTestResistorTable.ResistorFlowValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResistorFlowValueNull()
      {
        this[this.tableTestResistorTable.ResistorFlowValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResistorReturnValueNull()
      {
        return this.IsNull(this.tableTestResistorTable.ResistorReturnValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResistorReturnValueNull()
      {
        this[this.tableTestResistorTable.ResistorReturnValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEnergieFactorReturnNull()
      {
        return this.IsNull(this.tableTestResistorTable.EnergieFactorReturnColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEnergieFactorReturnNull()
      {
        this[this.tableTestResistorTable.EnergieFactorReturnColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEnergieFactorFlowNull()
      {
        return this.IsNull(this.tableTestResistorTable.EnergieFactorFlowColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEnergieFactorFlowNull()
      {
        this[this.tableTestResistorTable.EnergieFactorFlowColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCalibrationIntervalNull()
      {
        return this.IsNull(this.tableTestResistorTable.CalibrationIntervalColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCalibrationIntervalNull()
      {
        this[this.tableTestResistorTable.CalibrationIntervalColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCalibrationPersonelNrNull()
      {
        return this.IsNull(this.tableTestResistorTable.CalibrationPersonelNrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCalibrationPersonelNrNull()
      {
        this[this.tableTestResistorTable.CalibrationPersonelNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResistorInfoNull()
      {
        return this.IsNull(this.tableTestResistorTable.ResistorInfoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResistorInfoNull()
      {
        this[this.tableTestResistorTable.ResistorInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNumberFlowNull() => this.IsNull(this.tableTestResistorTable.NumberFlowColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNumberFlowNull()
      {
        this[this.tableTestResistorTable.NumberFlowColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNumberReturnNull()
      {
        return this.IsNull(this.tableTestResistorTable.NumberReturnColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNumberReturnNull()
      {
        this[this.tableTestResistorTable.NumberReturnColumn] = Convert.DBNull;
      }
    }

    public class TestResultRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestResultDataTable tableTestResult;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestResultRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTestResult = (ZR_ClassLibrary.Schema_Access.Schema.TestResultDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestResultID
      {
        get => (int) this[this.tableTestResult.TestResultIDColumn];
        set => this[this.tableTestResult.TestResultIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterID
      {
        get
        {
          try
          {
            return (int) this[this.tableTestResult.MeterIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterID' in table 'TestResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResult.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestID
      {
        get
        {
          try
          {
            return (int) this[this.tableTestResult.TestIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestID' in table 'TestResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResult.TestIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestPointDataID
      {
        get
        {
          try
          {
            return (int) this[this.tableTestResult.TestPointDataIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestPointDataID' in table 'TestResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResult.TestPointDataIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestRunOrderNr
      {
        get
        {
          try
          {
            return (int) this[this.tableTestResult.TestRunOrderNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestRunOrderNr' in table 'TestResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResult.TestRunOrderNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TestValue
      {
        get
        {
          try
          {
            return (double) this[this.tableTestResult.TestValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestValue' in table 'TestResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResult.TestValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TestError
      {
        get
        {
          try
          {
            return (double) this[this.tableTestResult.TestErrorColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestError' in table 'TestResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResult.TestErrorColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte TestState
      {
        get
        {
          try
          {
            return (byte) this[this.tableTestResult.TestStateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestState' in table 'TestResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResult.TestStateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestPlaceID
      {
        get
        {
          try
          {
            return (int) this[this.tableTestResult.TestPlaceIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestPlaceID' in table 'TestResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResult.TestPlaceIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestAdapterID
      {
        get
        {
          try
          {
            return (int) this[this.tableTestResult.TestAdapterIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestAdapterID' in table 'TestResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResult.TestAdapterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterIDNull() => this.IsNull(this.tableTestResult.MeterIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterIDNull() => this[this.tableTestResult.MeterIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestIDNull() => this.IsNull(this.tableTestResult.TestIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestIDNull() => this[this.tableTestResult.TestIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestPointDataIDNull()
      {
        return this.IsNull(this.tableTestResult.TestPointDataIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestPointDataIDNull()
      {
        this[this.tableTestResult.TestPointDataIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestRunOrderNrNull() => this.IsNull(this.tableTestResult.TestRunOrderNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestRunOrderNrNull()
      {
        this[this.tableTestResult.TestRunOrderNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestValueNull() => this.IsNull(this.tableTestResult.TestValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestValueNull() => this[this.tableTestResult.TestValueColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestErrorNull() => this.IsNull(this.tableTestResult.TestErrorColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestErrorNull() => this[this.tableTestResult.TestErrorColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestStateNull() => this.IsNull(this.tableTestResult.TestStateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestStateNull() => this[this.tableTestResult.TestStateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestPlaceIDNull() => this.IsNull(this.tableTestResult.TestPlaceIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestPlaceIDNull()
      {
        this[this.tableTestResult.TestPlaceIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestAdapterIDNull() => this.IsNull(this.tableTestResult.TestAdapterIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestAdapterIDNull()
      {
        this[this.tableTestResult.TestAdapterIDColumn] = Convert.DBNull;
      }
    }

    public class TestResultExtendedRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedDataTable tableTestResultExtended;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestResultExtendedRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTestResultExtended = (ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestResultID
      {
        get => (int) this[this.tableTestResultExtended.TestResultIDColumn];
        set => this[this.tableTestResultExtended.TestResultIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ResultValueID
      {
        get => (int) this[this.tableTestResultExtended.ResultValueIDColumn];
        set => this[this.tableTestResultExtended.ResultValueIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ResultValue
      {
        get
        {
          try
          {
            return (string) this[this.tableTestResultExtended.ResultValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ResultValue' in table 'TestResultExtended' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestResultExtended.ResultValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResultValueNull()
      {
        return this.IsNull(this.tableTestResultExtended.ResultValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResultValueNull()
      {
        this[this.tableTestResultExtended.ResultValueColumn] = Convert.DBNull;
      }
    }

    public class TestTypeRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestTypeDataTable tableTestType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestTypeRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTestType = (ZR_ClassLibrary.Schema_Access.Schema.TestTypeDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestTypeID
      {
        get => (int) this[this.tableTestType.TestTypeIDColumn];
        set => this[this.tableTestType.TestTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TestName
      {
        get
        {
          try
          {
            return (string) this[this.tableTestType.TestNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestName' in table 'TestType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestType.TestNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TestDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableTestType.TestDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestDescription' in table 'TestType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestType.TestDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TestClass
      {
        get
        {
          try
          {
            return (string) this[this.tableTestType.TestClassColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestClass' in table 'TestType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestType.TestClassColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestCode
      {
        get
        {
          try
          {
            return (int) this[this.tableTestType.TestCodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestCode' in table 'TestType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestType.TestCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestNameNull() => this.IsNull(this.tableTestType.TestNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestNameNull() => this[this.tableTestType.TestNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestDescriptionNull() => this.IsNull(this.tableTestType.TestDescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestDescriptionNull()
      {
        this[this.tableTestType.TestDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestClassNull() => this.IsNull(this.tableTestType.TestClassColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestClassNull() => this[this.tableTestType.TestClassColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestCodeNull() => this.IsNull(this.tableTestType.TestCodeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestCodeNull() => this[this.tableTestType.TestCodeColumn] = Convert.DBNull;
    }

    public class TypeOverwriteParametersRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersDataTable tableTypeOverwriteParameters;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TypeOverwriteParametersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTypeOverwriteParameters = (ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterInfoID
      {
        get => (int) this[this.tableTypeOverwriteParameters.MeterInfoIDColumn];
        set => this[this.tableTypeOverwriteParameters.MeterInfoIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int POID
      {
        get => (int) this[this.tableTypeOverwriteParameters.POIDColumn];
        set => this[this.tableTypeOverwriteParameters.POIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterValue
      {
        get
        {
          try
          {
            return (string) this[this.tableTypeOverwriteParameters.ParameterValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterValue' in table 'TypeOverwriteParameters' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTypeOverwriteParameters.ParameterValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow MeterInfoRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow) this.GetParentRow(this.Table.ParentRelations["MeterInfoTypeOverrideParameters"]);
        }
        set
        {
          this.SetParentRow((DataRow) value, this.Table.ParentRelations["MeterInfoTypeOverrideParameters"]);
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterValueNull()
      {
        return this.IsNull(this.tableTypeOverwriteParameters.ParameterValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterValueNull()
      {
        this[this.tableTypeOverwriteParameters.ParameterValueColumn] = Convert.DBNull;
      }
    }

    public class UnitsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.UnitsDataTable tableUnits;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal UnitsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableUnits = (ZR_ClassLibrary.Schema_Access.Schema.UnitsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string fromUnit
      {
        get => (string) this[this.tableUnits.fromUnitColumn];
        set => this[this.tableUnits.fromUnitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string toUnit
      {
        get => (string) this[this.tableUnits.toUnitColumn];
        set => this[this.tableUnits.toUnitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string factor
      {
        get => (string) this[this.tableUnits.factorColumn];
        set => this[this.tableUnits.factorColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get => (string) this[this.tableUnits.DescriptionColumn];
        set => this[this.tableUnits.DescriptionColumn] = (object) value;
      }
    }

    public class WaterDensityRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WaterDensityDataTable tableWaterDensity;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WaterDensityRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWaterDensity = (ZR_ClassLibrary.Schema_Access.Schema.WaterDensityDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeasuringID
      {
        get => (int) this[this.tableWaterDensity.MeasuringIDColumn];
        set => this[this.tableWaterDensity.MeasuringIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime MeasuringTimePoint
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableWaterDensity.MeasuringTimePointColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeasuringTimePoint' in table 'WaterDensity' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWaterDensity.MeasuringTimePointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Temperature
      {
        get
        {
          try
          {
            return (double) this[this.tableWaterDensity.TemperatureColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Temperature' in table 'WaterDensity' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWaterDensity.TemperatureColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Density
      {
        get
        {
          try
          {
            return (double) this[this.tableWaterDensity.DensityColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Density' in table 'WaterDensity' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWaterDensity.DensityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double CorrectionFactor
      {
        get
        {
          try
          {
            return (double) this[this.tableWaterDensity.CorrectionFactorColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CorrectionFactor' in table 'WaterDensity' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWaterDensity.CorrectionFactorColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int WaterSupplyLocationID
      {
        get
        {
          try
          {
            return (int) this[this.tableWaterDensity.WaterSupplyLocationIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WaterSupplyLocationID' in table 'WaterDensity' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWaterDensity.WaterSupplyLocationIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeasuringTimePointNull()
      {
        return this.IsNull(this.tableWaterDensity.MeasuringTimePointColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeasuringTimePointNull()
      {
        this[this.tableWaterDensity.MeasuringTimePointColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTemperatureNull() => this.IsNull(this.tableWaterDensity.TemperatureColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTemperatureNull()
      {
        this[this.tableWaterDensity.TemperatureColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDensityNull() => this.IsNull(this.tableWaterDensity.DensityColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDensityNull() => this[this.tableWaterDensity.DensityColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCorrectionFactorNull()
      {
        return this.IsNull(this.tableWaterDensity.CorrectionFactorColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCorrectionFactorNull()
      {
        this[this.tableWaterDensity.CorrectionFactorColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWaterSupplyLocationIDNull()
      {
        return this.IsNull(this.tableWaterDensity.WaterSupplyLocationIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWaterSupplyLocationIDNull()
      {
        this[this.tableWaterDensity.WaterSupplyLocationIDColumn] = Convert.DBNull;
      }
    }

    public class WMApprovalDataRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataDataTable tableWMApprovalData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMApprovalDataRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWMApprovalData = (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ApprovalCode
      {
        get => (int) this[this.tableWMApprovalData.ApprovalCodeColumn];
        set => this[this.tableWMApprovalData.ApprovalCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CounterTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableWMApprovalData.CounterTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CounterTypeID' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.CounterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short TypeNumber
      {
        get
        {
          try
          {
            return (short) this[this.tableWMApprovalData.TypeNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TypeNumber' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.TypeNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ApprovalID
      {
        get
        {
          try
          {
            return (int) this[this.tableWMApprovalData.ApprovalIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalID' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.ApprovalIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double NominalSize
      {
        get
        {
          try
          {
            return (double) this[this.tableWMApprovalData.NominalSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NominalSize' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.NominalSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorLimitQmaxPlus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMApprovalData.ErrorLimitQmaxPlusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorLimitQmaxPlus' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.ErrorLimitQmaxPlusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorLimitQmaxMinus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMApprovalData.ErrorLimitQmaxMinusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorLimitQmaxMinus' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.ErrorLimitQmaxMinusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorLimitQtrennPlus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMApprovalData.ErrorLimitQtrennPlusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorLimitQtrennPlus' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.ErrorLimitQtrennPlusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorLimitQtrennMinus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMApprovalData.ErrorLimitQtrennMinusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorLimitQtrennMinus' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.ErrorLimitQtrennMinusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorLimitQminPlus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMApprovalData.ErrorLimitQminPlusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorLimitQminPlus' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.ErrorLimitQminPlusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorLimitQminMinus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMApprovalData.ErrorLimitQminMinusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorLimitQminMinus' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.ErrorLimitQminMinusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ManufacturerID
      {
        get
        {
          try
          {
            return (int) this[this.tableWMApprovalData.ManufacturerIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ManufacturerID' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.ManufacturerIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ApprovalDataDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableWMApprovalData.ApprovalDataDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalDataDescription' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.ApprovalDataDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableWMApprovalData.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'WMApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovalData.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCounterTypeIDNull()
      {
        return this.IsNull(this.tableWMApprovalData.CounterTypeIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCounterTypeIDNull()
      {
        this[this.tableWMApprovalData.CounterTypeIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTypeNumberNull() => this.IsNull(this.tableWMApprovalData.TypeNumberColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTypeNumberNull()
      {
        this[this.tableWMApprovalData.TypeNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalIDNull() => this.IsNull(this.tableWMApprovalData.ApprovalIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalIDNull()
      {
        this[this.tableWMApprovalData.ApprovalIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNominalSizeNull() => this.IsNull(this.tableWMApprovalData.NominalSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNominalSizeNull()
      {
        this[this.tableWMApprovalData.NominalSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorLimitQmaxPlusNull()
      {
        return this.IsNull(this.tableWMApprovalData.ErrorLimitQmaxPlusColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorLimitQmaxPlusNull()
      {
        this[this.tableWMApprovalData.ErrorLimitQmaxPlusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorLimitQmaxMinusNull()
      {
        return this.IsNull(this.tableWMApprovalData.ErrorLimitQmaxMinusColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorLimitQmaxMinusNull()
      {
        this[this.tableWMApprovalData.ErrorLimitQmaxMinusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorLimitQtrennPlusNull()
      {
        return this.IsNull(this.tableWMApprovalData.ErrorLimitQtrennPlusColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorLimitQtrennPlusNull()
      {
        this[this.tableWMApprovalData.ErrorLimitQtrennPlusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorLimitQtrennMinusNull()
      {
        return this.IsNull(this.tableWMApprovalData.ErrorLimitQtrennMinusColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorLimitQtrennMinusNull()
      {
        this[this.tableWMApprovalData.ErrorLimitQtrennMinusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorLimitQminPlusNull()
      {
        return this.IsNull(this.tableWMApprovalData.ErrorLimitQminPlusColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorLimitQminPlusNull()
      {
        this[this.tableWMApprovalData.ErrorLimitQminPlusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorLimitQminMinusNull()
      {
        return this.IsNull(this.tableWMApprovalData.ErrorLimitQminMinusColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorLimitQminMinusNull()
      {
        this[this.tableWMApprovalData.ErrorLimitQminMinusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsManufacturerIDNull()
      {
        return this.IsNull(this.tableWMApprovalData.ManufacturerIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetManufacturerIDNull()
      {
        this[this.tableWMApprovalData.ManufacturerIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalDataDescriptionNull()
      {
        return this.IsNull(this.tableWMApprovalData.ApprovalDataDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalDataDescriptionNull()
      {
        this[this.tableWMApprovalData.ApprovalDataDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableWMApprovalData.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull()
      {
        this[this.tableWMApprovalData.PersonelNrColumn] = Convert.DBNull;
      }
    }

    public class WMApprovalsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsDataTable tableWMApprovals;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMApprovalsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWMApprovals = (ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ApprovalID
      {
        get => (int) this[this.tableWMApprovals.ApprovalIDColumn];
        set => this[this.tableWMApprovals.ApprovalIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Approval
      {
        get
        {
          try
          {
            return (string) this[this.tableWMApprovals.ApprovalColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Approval' in table 'WMApprovals' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovals.ApprovalColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte MID
      {
        get
        {
          try
          {
            return (byte) this[this.tableWMApprovals.MIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MID' in table 'WMApprovals' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovals.MIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ApprovalDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableWMApprovals.ApprovalDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalDescription' in table 'WMApprovals' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovals.ApprovalDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableWMApprovals.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'WMApprovals' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMApprovals.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalNull() => this.IsNull(this.tableWMApprovals.ApprovalColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalNull() => this[this.tableWMApprovals.ApprovalColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDNull() => this.IsNull(this.tableWMApprovals.MIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDNull() => this[this.tableWMApprovals.MIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalDescriptionNull()
      {
        return this.IsNull(this.tableWMApprovals.ApprovalDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalDescriptionNull()
      {
        this[this.tableWMApprovals.ApprovalDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableWMApprovals.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull()
      {
        this[this.tableWMApprovals.PersonelNrColumn] = Convert.DBNull;
      }
    }

    public class WMClassesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMClassesDataTable tableWMClasses;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMClassesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWMClasses = (ZR_ClassLibrary.Schema_Access.Schema.WMClassesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ClassID
      {
        get => (int) this[this.tableWMClasses.ClassIDColumn];
        set => this[this.tableWMClasses.ClassIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Class
      {
        get
        {
          try
          {
            return (string) this[this.tableWMClasses.ClassColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Class' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.ClassColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FlowFactorQmaxColdU15
      {
        get
        {
          try
          {
            return (double) this[this.tableWMClasses.FlowFactorQmaxColdU15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowFactorQmaxColdU15' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.FlowFactorQmaxColdU15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FlowFactorQtrennColdU15
      {
        get
        {
          try
          {
            return (double) this[this.tableWMClasses.FlowFactorQtrennColdU15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowFactorQtrennColdU15' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.FlowFactorQtrennColdU15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FlowFactorQminColdU15
      {
        get
        {
          try
          {
            return (double) this[this.tableWMClasses.FlowFactorQminColdU15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowFactorQminColdU15' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.FlowFactorQminColdU15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FlowFactorQmaxWarmU15
      {
        get
        {
          try
          {
            return (double) this[this.tableWMClasses.FlowFactorQmaxWarmU15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowFactorQmaxWarmU15' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.FlowFactorQmaxWarmU15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FlowFactorQtrennWarmU15
      {
        get
        {
          try
          {
            return (double) this[this.tableWMClasses.FlowFactorQtrennWarmU15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowFactorQtrennWarmU15' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.FlowFactorQtrennWarmU15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FlowFactorQminWarmU15
      {
        get
        {
          try
          {
            return (double) this[this.tableWMClasses.FlowFactorQminWarmU15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowFactorQminWarmU15' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.FlowFactorQminWarmU15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FlowFactorQmaxColdO15
      {
        get
        {
          try
          {
            return (double) this[this.tableWMClasses.FlowFactorQmaxColdO15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowFactorQmaxColdO15' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.FlowFactorQmaxColdO15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FlowFactorQtrennColdO15
      {
        get
        {
          try
          {
            return (double) this[this.tableWMClasses.FlowFactorQtrennColdO15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowFactorQtrennColdO15' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.FlowFactorQtrennColdO15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FlowFactorQminColdO15
      {
        get
        {
          try
          {
            return (double) this[this.tableWMClasses.FlowFactorQminColdO15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowFactorQminColdO15' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.FlowFactorQminColdO15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FlowFactorQmaxWarmO15
      {
        get
        {
          try
          {
            return (double) this[this.tableWMClasses.FlowFactorQmaxWarmO15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowFactorQmaxWarmO15' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.FlowFactorQmaxWarmO15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FlowFactorQtrennWarmO15
      {
        get
        {
          try
          {
            return (double) this[this.tableWMClasses.FlowFactorQtrennWarmO15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowFactorQtrennWarmO15' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.FlowFactorQtrennWarmO15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FlowFactorQminWarmO15
      {
        get
        {
          try
          {
            return (double) this[this.tableWMClasses.FlowFactorQminWarmO15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowFactorQminWarmO15' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.FlowFactorQminWarmO15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ClassDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableWMClasses.ClassDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ClassDescription' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.ClassDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableWMClasses.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'WMClasses' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMClasses.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsClassNull() => this.IsNull(this.tableWMClasses.ClassColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetClassNull() => this[this.tableWMClasses.ClassColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowFactorQmaxColdU15Null()
      {
        return this.IsNull(this.tableWMClasses.FlowFactorQmaxColdU15Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowFactorQmaxColdU15Null()
      {
        this[this.tableWMClasses.FlowFactorQmaxColdU15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowFactorQtrennColdU15Null()
      {
        return this.IsNull(this.tableWMClasses.FlowFactorQtrennColdU15Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowFactorQtrennColdU15Null()
      {
        this[this.tableWMClasses.FlowFactorQtrennColdU15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowFactorQminColdU15Null()
      {
        return this.IsNull(this.tableWMClasses.FlowFactorQminColdU15Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowFactorQminColdU15Null()
      {
        this[this.tableWMClasses.FlowFactorQminColdU15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowFactorQmaxWarmU15Null()
      {
        return this.IsNull(this.tableWMClasses.FlowFactorQmaxWarmU15Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowFactorQmaxWarmU15Null()
      {
        this[this.tableWMClasses.FlowFactorQmaxWarmU15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowFactorQtrennWarmU15Null()
      {
        return this.IsNull(this.tableWMClasses.FlowFactorQtrennWarmU15Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowFactorQtrennWarmU15Null()
      {
        this[this.tableWMClasses.FlowFactorQtrennWarmU15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowFactorQminWarmU15Null()
      {
        return this.IsNull(this.tableWMClasses.FlowFactorQminWarmU15Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowFactorQminWarmU15Null()
      {
        this[this.tableWMClasses.FlowFactorQminWarmU15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowFactorQmaxColdO15Null()
      {
        return this.IsNull(this.tableWMClasses.FlowFactorQmaxColdO15Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowFactorQmaxColdO15Null()
      {
        this[this.tableWMClasses.FlowFactorQmaxColdO15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowFactorQtrennColdO15Null()
      {
        return this.IsNull(this.tableWMClasses.FlowFactorQtrennColdO15Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowFactorQtrennColdO15Null()
      {
        this[this.tableWMClasses.FlowFactorQtrennColdO15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowFactorQminColdO15Null()
      {
        return this.IsNull(this.tableWMClasses.FlowFactorQminColdO15Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowFactorQminColdO15Null()
      {
        this[this.tableWMClasses.FlowFactorQminColdO15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowFactorQmaxWarmO15Null()
      {
        return this.IsNull(this.tableWMClasses.FlowFactorQmaxWarmO15Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowFactorQmaxWarmO15Null()
      {
        this[this.tableWMClasses.FlowFactorQmaxWarmO15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowFactorQtrennWarmO15Null()
      {
        return this.IsNull(this.tableWMClasses.FlowFactorQtrennWarmO15Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowFactorQtrennWarmO15Null()
      {
        this[this.tableWMClasses.FlowFactorQtrennWarmO15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowFactorQminWarmO15Null()
      {
        return this.IsNull(this.tableWMClasses.FlowFactorQminWarmO15Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowFactorQminWarmO15Null()
      {
        this[this.tableWMClasses.FlowFactorQminWarmO15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsClassDescriptionNull()
      {
        return this.IsNull(this.tableWMClasses.ClassDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetClassDescriptionNull()
      {
        this[this.tableWMClasses.ClassDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableWMClasses.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull()
      {
        this[this.tableWMClasses.PersonelNrColumn] = Convert.DBNull;
      }
    }

    public class WMCounterTypesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesDataTable tableWMCounterTypes;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMCounterTypesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWMCounterTypes = (ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CounterTypeID
      {
        get => (int) this[this.tableWMCounterTypes.CounterTypeIDColumn];
        set => this[this.tableWMCounterTypes.CounterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CounterType
      {
        get
        {
          try
          {
            return (string) this[this.tableWMCounterTypes.CounterTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CounterType' in table 'WMCounterTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMCounterTypes.CounterTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte CounterWarmWater
      {
        get
        {
          try
          {
            return (byte) this[this.tableWMCounterTypes.CounterWarmWaterColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CounterWarmWater' in table 'WMCounterTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMCounterTypes.CounterWarmWaterColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CounterTypeDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableWMCounterTypes.CounterTypeDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CounterTypeDescription' in table 'WMCounterTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMCounterTypes.CounterTypeDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableWMCounterTypes.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'WMCounterTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMCounterTypes.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCounterTypeNull() => this.IsNull(this.tableWMCounterTypes.CounterTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCounterTypeNull()
      {
        this[this.tableWMCounterTypes.CounterTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCounterWarmWaterNull()
      {
        return this.IsNull(this.tableWMCounterTypes.CounterWarmWaterColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCounterWarmWaterNull()
      {
        this[this.tableWMCounterTypes.CounterWarmWaterColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCounterTypeDescriptionNull()
      {
        return this.IsNull(this.tableWMCounterTypes.CounterTypeDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCounterTypeDescriptionNull()
      {
        this[this.tableWMCounterTypes.CounterTypeDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableWMCounterTypes.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull()
      {
        this[this.tableWMCounterTypes.PersonelNrColumn] = Convert.DBNull;
      }
    }

    public class WMErrorOffsetRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetDataTable tableWMErrorOffset;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMErrorOffsetRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWMErrorOffset = (ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ErrorOffsetID
      {
        get => (int) this[this.tableWMErrorOffset.ErrorOffsetIDColumn];
        set => this[this.tableWMErrorOffset.ErrorOffsetIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double QmaxPlus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMErrorOffset.QmaxPlusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'QmaxPlus' in table 'WMErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMErrorOffset.QmaxPlusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double QmaxMinus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMErrorOffset.QmaxMinusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'QmaxMinus' in table 'WMErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMErrorOffset.QmaxMinusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double QtrennPlus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMErrorOffset.QtrennPlusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'QtrennPlus' in table 'WMErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMErrorOffset.QtrennPlusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double QtrennMinus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMErrorOffset.QtrennMinusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'QtrennMinus' in table 'WMErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMErrorOffset.QtrennMinusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double QminPlus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMErrorOffset.QminPlusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'QminPlus' in table 'WMErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMErrorOffset.QminPlusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double QminMinus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMErrorOffset.QminMinusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'QminMinus' in table 'WMErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMErrorOffset.QminMinusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ErrorOffsetDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableWMErrorOffset.ErrorOffsetDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorOffsetDescription' in table 'WMErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMErrorOffset.ErrorOffsetDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableWMErrorOffset.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'WMErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMErrorOffset.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQmaxPlusNull() => this.IsNull(this.tableWMErrorOffset.QmaxPlusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQmaxPlusNull()
      {
        this[this.tableWMErrorOffset.QmaxPlusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQmaxMinusNull() => this.IsNull(this.tableWMErrorOffset.QmaxMinusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQmaxMinusNull()
      {
        this[this.tableWMErrorOffset.QmaxMinusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQtrennPlusNull() => this.IsNull(this.tableWMErrorOffset.QtrennPlusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQtrennPlusNull()
      {
        this[this.tableWMErrorOffset.QtrennPlusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQtrennMinusNull() => this.IsNull(this.tableWMErrorOffset.QtrennMinusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQtrennMinusNull()
      {
        this[this.tableWMErrorOffset.QtrennMinusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQminPlusNull() => this.IsNull(this.tableWMErrorOffset.QminPlusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQminPlusNull()
      {
        this[this.tableWMErrorOffset.QminPlusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQminMinusNull() => this.IsNull(this.tableWMErrorOffset.QminMinusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQminMinusNull()
      {
        this[this.tableWMErrorOffset.QminMinusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorOffsetDescriptionNull()
      {
        return this.IsNull(this.tableWMErrorOffset.ErrorOffsetDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorOffsetDescriptionNull()
      {
        this[this.tableWMErrorOffset.ErrorOffsetDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableWMErrorOffset.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull()
      {
        this[this.tableWMErrorOffset.PersonelNrColumn] = Convert.DBNull;
      }
    }

    public class WMMIDApprovalDataRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataDataTable tableWMMIDApprovalData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMMIDApprovalDataRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWMMIDApprovalData = (ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ApprovalCode
      {
        get => (int) this[this.tableWMMIDApprovalData.ApprovalCodeColumn];
        set => this[this.tableWMMIDApprovalData.ApprovalCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CounterTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableWMMIDApprovalData.CounterTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CounterTypeID' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.CounterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte TypeNumber
      {
        get
        {
          try
          {
            return (byte) this[this.tableWMMIDApprovalData.TypeNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TypeNumber' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.TypeNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ApprovalID
      {
        get
        {
          try
          {
            return (int) this[this.tableWMMIDApprovalData.ApprovalIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalID' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.ApprovalIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double NominalSize
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDApprovalData.NominalSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NominalSize' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.NominalSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorLimitQ3Plus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDApprovalData.ErrorLimitQ3PlusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorLimitQ3Plus' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.ErrorLimitQ3PlusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorLimitQ3Minus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDApprovalData.ErrorLimitQ3MinusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorLimitQ3Minus' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.ErrorLimitQ3MinusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorLimitQ2Plus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDApprovalData.ErrorLimitQ2PlusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorLimitQ2Plus' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.ErrorLimitQ2PlusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorLimitQ2Minus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDApprovalData.ErrorLimitQ2MinusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorLimitQ2Minus' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.ErrorLimitQ2MinusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorLimitQ1Plus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDApprovalData.ErrorLimitQ1PlusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorLimitQ1Plus' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.ErrorLimitQ1PlusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorLimitQ1Minus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDApprovalData.ErrorLimitQ1MinusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorLimitQ1Minus' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.ErrorLimitQ1MinusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ManufacturerID
      {
        get
        {
          try
          {
            return (int) this[this.tableWMMIDApprovalData.ManufacturerIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ManufacturerID' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.ManufacturerIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ApprovalDataDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableWMMIDApprovalData.ApprovalDataDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalDataDescription' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.ApprovalDataDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableWMMIDApprovalData.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'WMMIDApprovalData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDApprovalData.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCounterTypeIDNull()
      {
        return this.IsNull(this.tableWMMIDApprovalData.CounterTypeIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCounterTypeIDNull()
      {
        this[this.tableWMMIDApprovalData.CounterTypeIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTypeNumberNull() => this.IsNull(this.tableWMMIDApprovalData.TypeNumberColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTypeNumberNull()
      {
        this[this.tableWMMIDApprovalData.TypeNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalIDNull() => this.IsNull(this.tableWMMIDApprovalData.ApprovalIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalIDNull()
      {
        this[this.tableWMMIDApprovalData.ApprovalIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNominalSizeNull() => this.IsNull(this.tableWMMIDApprovalData.NominalSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNominalSizeNull()
      {
        this[this.tableWMMIDApprovalData.NominalSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorLimitQ3PlusNull()
      {
        return this.IsNull(this.tableWMMIDApprovalData.ErrorLimitQ3PlusColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorLimitQ3PlusNull()
      {
        this[this.tableWMMIDApprovalData.ErrorLimitQ3PlusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorLimitQ3MinusNull()
      {
        return this.IsNull(this.tableWMMIDApprovalData.ErrorLimitQ3MinusColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorLimitQ3MinusNull()
      {
        this[this.tableWMMIDApprovalData.ErrorLimitQ3MinusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorLimitQ2PlusNull()
      {
        return this.IsNull(this.tableWMMIDApprovalData.ErrorLimitQ2PlusColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorLimitQ2PlusNull()
      {
        this[this.tableWMMIDApprovalData.ErrorLimitQ2PlusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorLimitQ2MinusNull()
      {
        return this.IsNull(this.tableWMMIDApprovalData.ErrorLimitQ2MinusColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorLimitQ2MinusNull()
      {
        this[this.tableWMMIDApprovalData.ErrorLimitQ2MinusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorLimitQ1PlusNull()
      {
        return this.IsNull(this.tableWMMIDApprovalData.ErrorLimitQ1PlusColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorLimitQ1PlusNull()
      {
        this[this.tableWMMIDApprovalData.ErrorLimitQ1PlusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorLimitQ1MinusNull()
      {
        return this.IsNull(this.tableWMMIDApprovalData.ErrorLimitQ1MinusColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorLimitQ1MinusNull()
      {
        this[this.tableWMMIDApprovalData.ErrorLimitQ1MinusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsManufacturerIDNull()
      {
        return this.IsNull(this.tableWMMIDApprovalData.ManufacturerIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetManufacturerIDNull()
      {
        this[this.tableWMMIDApprovalData.ManufacturerIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalDataDescriptionNull()
      {
        return this.IsNull(this.tableWMMIDApprovalData.ApprovalDataDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalDataDescriptionNull()
      {
        this[this.tableWMMIDApprovalData.ApprovalDataDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableWMMIDApprovalData.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull()
      {
        this[this.tableWMMIDApprovalData.PersonelNrColumn] = Convert.DBNull;
      }
    }

    public class WMMIDErrorOffsetRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetDataTable tableWMMIDErrorOffset;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMMIDErrorOffsetRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWMMIDErrorOffset = (ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MIDErrorOffsetID
      {
        get => (int) this[this.tableWMMIDErrorOffset.MIDErrorOffsetIDColumn];
        set => this[this.tableWMMIDErrorOffset.MIDErrorOffsetIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Q3Plus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDErrorOffset.Q3PlusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Q3Plus' in table 'WMMIDErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDErrorOffset.Q3PlusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Q3Minus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDErrorOffset.Q3MinusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Q3Minus' in table 'WMMIDErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDErrorOffset.Q3MinusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Q2Plus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDErrorOffset.Q2PlusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Q2Plus' in table 'WMMIDErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDErrorOffset.Q2PlusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Q2Minus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDErrorOffset.Q2MinusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Q2Minus' in table 'WMMIDErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDErrorOffset.Q2MinusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Q1Plus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDErrorOffset.Q1PlusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Q1Plus' in table 'WMMIDErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDErrorOffset.Q1PlusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Q1Minus
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDErrorOffset.Q1MinusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Q1Minus' in table 'WMMIDErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDErrorOffset.Q1MinusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ErrorOffsetDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableWMMIDErrorOffset.ErrorOffsetDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorOffsetDescription' in table 'WMMIDErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDErrorOffset.ErrorOffsetDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableWMMIDErrorOffset.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'WMMIDErrorOffset' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDErrorOffset.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQ3PlusNull() => this.IsNull(this.tableWMMIDErrorOffset.Q3PlusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQ3PlusNull() => this[this.tableWMMIDErrorOffset.Q3PlusColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQ3MinusNull() => this.IsNull(this.tableWMMIDErrorOffset.Q3MinusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQ3MinusNull()
      {
        this[this.tableWMMIDErrorOffset.Q3MinusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQ2PlusNull() => this.IsNull(this.tableWMMIDErrorOffset.Q2PlusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQ2PlusNull() => this[this.tableWMMIDErrorOffset.Q2PlusColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQ2MinusNull() => this.IsNull(this.tableWMMIDErrorOffset.Q2MinusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQ2MinusNull()
      {
        this[this.tableWMMIDErrorOffset.Q2MinusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQ1PlusNull() => this.IsNull(this.tableWMMIDErrorOffset.Q1PlusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQ1PlusNull() => this[this.tableWMMIDErrorOffset.Q1PlusColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQ1MinusNull() => this.IsNull(this.tableWMMIDErrorOffset.Q1MinusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQ1MinusNull()
      {
        this[this.tableWMMIDErrorOffset.Q1MinusColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorOffsetDescriptionNull()
      {
        return this.IsNull(this.tableWMMIDErrorOffset.ErrorOffsetDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorOffsetDescriptionNull()
      {
        this[this.tableWMMIDErrorOffset.ErrorOffsetDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableWMMIDErrorOffset.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull()
      {
        this[this.tableWMMIDErrorOffset.PersonelNrColumn] = Convert.DBNull;
      }
    }

    public class WMMIDTestingTypesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesDataTable tableWMMIDTestingTypes;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMMIDTestingTypesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWMMIDTestingTypes = (ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MIDTestingTypeID
      {
        get => (int) this[this.tableWMMIDTestingTypes.MIDTestingTypeIDColumn];
        set => this[this.tableWMMIDTestingTypes.MIDTestingTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MIDTestingType
      {
        get
        {
          try
          {
            return (string) this[this.tableWMMIDTestingTypes.MIDTestingTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MIDTestingType' in table 'WMMIDTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDTestingTypes.MIDTestingTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double MIDFactorQ1Min
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDTestingTypes.MIDFactorQ1MinColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MIDFactorQ1Min' in table 'WMMIDTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDTestingTypes.MIDFactorQ1MinColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double MIDFactorQ1Max
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDTestingTypes.MIDFactorQ1MaxColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MIDFactorQ1Max' in table 'WMMIDTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDTestingTypes.MIDFactorQ1MaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double MIDFactorQ2Min
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDTestingTypes.MIDFactorQ2MinColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MIDFactorQ2Min' in table 'WMMIDTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDTestingTypes.MIDFactorQ2MinColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double MIDFactorQ2Max
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDTestingTypes.MIDFactorQ2MaxColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MIDFactorQ2Max' in table 'WMMIDTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDTestingTypes.MIDFactorQ2MaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double MIDFactorQ3Min
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDTestingTypes.MIDFactorQ3MinColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MIDFactorQ3Min' in table 'WMMIDTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDTestingTypes.MIDFactorQ3MinColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double MIDFactorQ3Max
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDTestingTypes.MIDFactorQ3MaxColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MIDFactorQ3Max' in table 'WMMIDTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDTestingTypes.MIDFactorQ3MaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double MIDTempMin
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDTestingTypes.MIDTempMinColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MIDTempMin' in table 'WMMIDTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDTestingTypes.MIDTempMinColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double MIDTempMax
      {
        get
        {
          try
          {
            return (double) this[this.tableWMMIDTestingTypes.MIDTempMaxColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MIDTempMax' in table 'WMMIDTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDTestingTypes.MIDTempMaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MIDTestingTypeDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableWMMIDTestingTypes.MIDTestingTypeDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MIDTestingTypeDescription' in table 'WMMIDTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDTestingTypes.MIDTestingTypeDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableWMMIDTestingTypes.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'WMMIDTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMMIDTestingTypes.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDTestingTypeNull()
      {
        return this.IsNull(this.tableWMMIDTestingTypes.MIDTestingTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDTestingTypeNull()
      {
        this[this.tableWMMIDTestingTypes.MIDTestingTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDFactorQ1MinNull()
      {
        return this.IsNull(this.tableWMMIDTestingTypes.MIDFactorQ1MinColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDFactorQ1MinNull()
      {
        this[this.tableWMMIDTestingTypes.MIDFactorQ1MinColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDFactorQ1MaxNull()
      {
        return this.IsNull(this.tableWMMIDTestingTypes.MIDFactorQ1MaxColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDFactorQ1MaxNull()
      {
        this[this.tableWMMIDTestingTypes.MIDFactorQ1MaxColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDFactorQ2MinNull()
      {
        return this.IsNull(this.tableWMMIDTestingTypes.MIDFactorQ2MinColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDFactorQ2MinNull()
      {
        this[this.tableWMMIDTestingTypes.MIDFactorQ2MinColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDFactorQ2MaxNull()
      {
        return this.IsNull(this.tableWMMIDTestingTypes.MIDFactorQ2MaxColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDFactorQ2MaxNull()
      {
        this[this.tableWMMIDTestingTypes.MIDFactorQ2MaxColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDFactorQ3MinNull()
      {
        return this.IsNull(this.tableWMMIDTestingTypes.MIDFactorQ3MinColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDFactorQ3MinNull()
      {
        this[this.tableWMMIDTestingTypes.MIDFactorQ3MinColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDFactorQ3MaxNull()
      {
        return this.IsNull(this.tableWMMIDTestingTypes.MIDFactorQ3MaxColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDFactorQ3MaxNull()
      {
        this[this.tableWMMIDTestingTypes.MIDFactorQ3MaxColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDTempMinNull() => this.IsNull(this.tableWMMIDTestingTypes.MIDTempMinColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDTempMinNull()
      {
        this[this.tableWMMIDTestingTypes.MIDTempMinColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDTempMaxNull() => this.IsNull(this.tableWMMIDTestingTypes.MIDTempMaxColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDTempMaxNull()
      {
        this[this.tableWMMIDTestingTypes.MIDTempMaxColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMIDTestingTypeDescriptionNull()
      {
        return this.IsNull(this.tableWMMIDTestingTypes.MIDTestingTypeDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMIDTestingTypeDescriptionNull()
      {
        this[this.tableWMMIDTestingTypes.MIDTestingTypeDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableWMMIDTestingTypes.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull()
      {
        this[this.tableWMMIDTestingTypes.PersonelNrColumn] = Convert.DBNull;
      }
    }

    public class WMOrdersRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMOrdersDataTable tableWMOrders;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMOrdersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWMOrders = (ZR_ClassLibrary.Schema_Access.Schema.WMOrdersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WmOrderNr
      {
        get => (string) this[this.tableWMOrders.WmOrderNrColumn];
        set => this[this.tableWMOrders.WmOrderNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int WmNumberOfMeters
      {
        get
        {
          try
          {
            return (int) this[this.tableWMOrders.WmNumberOfMetersColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmNumberOfMeters' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmNumberOfMetersColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte WmKindOfMeters
      {
        get
        {
          try
          {
            return (byte) this[this.tableWMOrders.WmKindOfMetersColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmKindOfMeters' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmKindOfMetersColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime WmAccountTime
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableWMOrders.WmAccountTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmAccountTime' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmAccountTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime WmFinishTime
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableWMOrders.WmFinishTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmFinishTime' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmFinishTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int WmOkTestedMeters
      {
        get
        {
          try
          {
            return (int) this[this.tableWMOrders.WmOkTestedMetersColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmOkTestedMeters' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmOkTestedMetersColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int WmTestedMeters
      {
        get
        {
          try
          {
            return (int) this[this.tableWMOrders.WmTestedMetersColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmTestedMeters' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmTestedMetersColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int WmApprovalCode
      {
        get
        {
          try
          {
            return (int) this[this.tableWMOrders.WmApprovalCodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmApprovalCode' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmApprovalCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte WmMID
      {
        get
        {
          try
          {
            return (byte) this[this.tableWMOrders.WmMIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmMID' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmMIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double WmOverallLength
      {
        get
        {
          try
          {
            return (double) this[this.tableWMOrders.WmOverallLengthColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmOverallLength' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmOverallLengthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WmConnectingThread
      {
        get
        {
          try
          {
            return (string) this[this.tableWMOrders.WmConnectingThreadColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmConnectingThread' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmConnectingThreadColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte WmKindOfNumber
      {
        get
        {
          try
          {
            return (byte) this[this.tableWMOrders.WmKindOfNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmKindOfNumber' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmKindOfNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WmToken
      {
        get
        {
          try
          {
            return (string) this[this.tableWMOrders.WmTokenColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmToken' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmTokenColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int WmENumberLength
      {
        get
        {
          try
          {
            return (int) this[this.tableWMOrders.WmENumberLengthColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmENumberLength' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmENumberLengthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WmStartNumber
      {
        get
        {
          try
          {
            return (string) this[this.tableWMOrders.WmStartNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmStartNumber' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmStartNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WmEndNumber
      {
        get
        {
          try
          {
            return (string) this[this.tableWMOrders.WmEndNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmEndNumber' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmEndNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte WmNumberAllocation
      {
        get
        {
          try
          {
            return (byte) this[this.tableWMOrders.WmNumberAllocationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmNumberAllocation' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmNumberAllocationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int WmCustomerOrderNumber
      {
        get
        {
          try
          {
            return (int) this[this.tableWMOrders.WmCustomerOrderNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmCustomerOrderNumber' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmCustomerOrderNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WmCustomerNumber
      {
        get
        {
          try
          {
            return (string) this[this.tableWMOrders.WmCustomerNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmCustomerNumber' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmCustomerNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte WmComplete
      {
        get
        {
          try
          {
            return (byte) this[this.tableWMOrders.WmCompleteColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmComplete' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmCompleteColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int WmAddPersonalNumber
      {
        get
        {
          try
          {
            return (int) this[this.tableWMOrders.WmAddPersonalNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmAddPersonalNumber' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmAddPersonalNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int WmManualCompletePersonalNumber
      {
        get
        {
          try
          {
            return (int) this[this.tableWMOrders.WmManualCompletePersonalNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmManualCompletePersonalNumber' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmManualCompletePersonalNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WmMountingDirection
      {
        get
        {
          try
          {
            return (string) this[this.tableWMOrders.WmMountingDirectionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmMountingDirection' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmMountingDirectionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte WmOnlyMaxTestpoint
      {
        get
        {
          try
          {
            return (byte) this[this.tableWMOrders.WmOnlyMaxTestpointColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WmOnlyMaxTestpoint' in table 'WMOrders' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMOrders.WmOnlyMaxTestpointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmNumberOfMetersNull()
      {
        return this.IsNull(this.tableWMOrders.WmNumberOfMetersColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmNumberOfMetersNull()
      {
        this[this.tableWMOrders.WmNumberOfMetersColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmKindOfMetersNull() => this.IsNull(this.tableWMOrders.WmKindOfMetersColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmKindOfMetersNull()
      {
        this[this.tableWMOrders.WmKindOfMetersColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmAccountTimeNull() => this.IsNull(this.tableWMOrders.WmAccountTimeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmAccountTimeNull()
      {
        this[this.tableWMOrders.WmAccountTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmFinishTimeNull() => this.IsNull(this.tableWMOrders.WmFinishTimeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmFinishTimeNull()
      {
        this[this.tableWMOrders.WmFinishTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmOkTestedMetersNull()
      {
        return this.IsNull(this.tableWMOrders.WmOkTestedMetersColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmOkTestedMetersNull()
      {
        this[this.tableWMOrders.WmOkTestedMetersColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmTestedMetersNull() => this.IsNull(this.tableWMOrders.WmTestedMetersColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmTestedMetersNull()
      {
        this[this.tableWMOrders.WmTestedMetersColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmApprovalCodeNull() => this.IsNull(this.tableWMOrders.WmApprovalCodeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmApprovalCodeNull()
      {
        this[this.tableWMOrders.WmApprovalCodeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmMIDNull() => this.IsNull(this.tableWMOrders.WmMIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmMIDNull() => this[this.tableWMOrders.WmMIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmOverallLengthNull() => this.IsNull(this.tableWMOrders.WmOverallLengthColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmOverallLengthNull()
      {
        this[this.tableWMOrders.WmOverallLengthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmConnectingThreadNull()
      {
        return this.IsNull(this.tableWMOrders.WmConnectingThreadColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmConnectingThreadNull()
      {
        this[this.tableWMOrders.WmConnectingThreadColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmKindOfNumberNull() => this.IsNull(this.tableWMOrders.WmKindOfNumberColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmKindOfNumberNull()
      {
        this[this.tableWMOrders.WmKindOfNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmTokenNull() => this.IsNull(this.tableWMOrders.WmTokenColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmTokenNull() => this[this.tableWMOrders.WmTokenColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmENumberLengthNull() => this.IsNull(this.tableWMOrders.WmENumberLengthColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmENumberLengthNull()
      {
        this[this.tableWMOrders.WmENumberLengthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmStartNumberNull() => this.IsNull(this.tableWMOrders.WmStartNumberColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmStartNumberNull()
      {
        this[this.tableWMOrders.WmStartNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmEndNumberNull() => this.IsNull(this.tableWMOrders.WmEndNumberColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmEndNumberNull()
      {
        this[this.tableWMOrders.WmEndNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmNumberAllocationNull()
      {
        return this.IsNull(this.tableWMOrders.WmNumberAllocationColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmNumberAllocationNull()
      {
        this[this.tableWMOrders.WmNumberAllocationColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmCustomerOrderNumberNull()
      {
        return this.IsNull(this.tableWMOrders.WmCustomerOrderNumberColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmCustomerOrderNumberNull()
      {
        this[this.tableWMOrders.WmCustomerOrderNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmCustomerNumberNull()
      {
        return this.IsNull(this.tableWMOrders.WmCustomerNumberColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmCustomerNumberNull()
      {
        this[this.tableWMOrders.WmCustomerNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmCompleteNull() => this.IsNull(this.tableWMOrders.WmCompleteColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmCompleteNull() => this[this.tableWMOrders.WmCompleteColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmAddPersonalNumberNull()
      {
        return this.IsNull(this.tableWMOrders.WmAddPersonalNumberColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmAddPersonalNumberNull()
      {
        this[this.tableWMOrders.WmAddPersonalNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmManualCompletePersonalNumberNull()
      {
        return this.IsNull(this.tableWMOrders.WmManualCompletePersonalNumberColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmManualCompletePersonalNumberNull()
      {
        this[this.tableWMOrders.WmManualCompletePersonalNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmMountingDirectionNull()
      {
        return this.IsNull(this.tableWMOrders.WmMountingDirectionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmMountingDirectionNull()
      {
        this[this.tableWMOrders.WmMountingDirectionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWmOnlyMaxTestpointNull()
      {
        return this.IsNull(this.tableWMOrders.WmOnlyMaxTestpointColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWmOnlyMaxTestpointNull()
      {
        this[this.tableWMOrders.WmOnlyMaxTestpointColumn] = Convert.DBNull;
      }
    }

    public class WMRatiosRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMRatiosDataTable tableWMRatios;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMRatiosRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWMRatios = (ZR_ClassLibrary.Schema_Access.Schema.WMRatiosDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int RatioID
      {
        get => (int) this[this.tableWMRatios.RatioIDColumn];
        set => this[this.tableWMRatios.RatioIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Ratio
      {
        get
        {
          try
          {
            return (double) this[this.tableWMRatios.RatioColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Ratio' in table 'WMRatios' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMRatios.RatioColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RatioDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableWMRatios.RatioDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RatioDescription' in table 'WMRatios' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMRatios.RatioDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableWMRatios.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'WMRatios' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMRatios.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRatioNull() => this.IsNull(this.tableWMRatios.RatioColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRatioNull() => this[this.tableWMRatios.RatioColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRatioDescriptionNull()
      {
        return this.IsNull(this.tableWMRatios.RatioDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRatioDescriptionNull()
      {
        this[this.tableWMRatios.RatioDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableWMRatios.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull() => this[this.tableWMRatios.PersonelNrColumn] = Convert.DBNull;
    }

    public class WMTestingTypesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesDataTable tableWMTestingTypes;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WMTestingTypesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWMTestingTypes = (ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestingTypeID
      {
        get => (int) this[this.tableWMTestingTypes.TestingTypeIDColumn];
        set => this[this.tableWMTestingTypes.TestingTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TestingType
      {
        get
        {
          try
          {
            return (string) this[this.tableWMTestingTypes.TestingTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestingType' in table 'WMTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMTestingTypes.TestingTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FactorQmaxMin
      {
        get
        {
          try
          {
            return (double) this[this.tableWMTestingTypes.FactorQmaxMinColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FactorQmaxMin' in table 'WMTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMTestingTypes.FactorQmaxMinColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FactorQmaxMax
      {
        get
        {
          try
          {
            return (double) this[this.tableWMTestingTypes.FactorQmaxMaxColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FactorQmaxMax' in table 'WMTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMTestingTypes.FactorQmaxMaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FactorQtrennMin
      {
        get
        {
          try
          {
            return (double) this[this.tableWMTestingTypes.FactorQtrennMinColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FactorQtrennMin' in table 'WMTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMTestingTypes.FactorQtrennMinColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FactorQtrennMax
      {
        get
        {
          try
          {
            return (double) this[this.tableWMTestingTypes.FactorQtrennMaxColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FactorQtrennMax' in table 'WMTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMTestingTypes.FactorQtrennMaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FactorQMinMin
      {
        get
        {
          try
          {
            return (double) this[this.tableWMTestingTypes.FactorQMinMinColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FactorQMinMin' in table 'WMTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMTestingTypes.FactorQMinMinColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FactorQMinMax
      {
        get
        {
          try
          {
            return (double) this[this.tableWMTestingTypes.FactorQMinMaxColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FactorQMinMax' in table 'WMTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMTestingTypes.FactorQMinMaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TempMin
      {
        get
        {
          try
          {
            return (double) this[this.tableWMTestingTypes.TempMinColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TempMin' in table 'WMTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMTestingTypes.TempMinColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TempMax
      {
        get
        {
          try
          {
            return (double) this[this.tableWMTestingTypes.TempMaxColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TempMax' in table 'WMTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMTestingTypes.TempMaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TestingTypeDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableWMTestingTypes.TestingTypeDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestingTypeDescription' in table 'WMTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMTestingTypes.TestingTypeDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableWMTestingTypes.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'WMTestingTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableWMTestingTypes.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestingTypeNull() => this.IsNull(this.tableWMTestingTypes.TestingTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestingTypeNull()
      {
        this[this.tableWMTestingTypes.TestingTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFactorQmaxMinNull()
      {
        return this.IsNull(this.tableWMTestingTypes.FactorQmaxMinColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFactorQmaxMinNull()
      {
        this[this.tableWMTestingTypes.FactorQmaxMinColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFactorQmaxMaxNull()
      {
        return this.IsNull(this.tableWMTestingTypes.FactorQmaxMaxColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFactorQmaxMaxNull()
      {
        this[this.tableWMTestingTypes.FactorQmaxMaxColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFactorQtrennMinNull()
      {
        return this.IsNull(this.tableWMTestingTypes.FactorQtrennMinColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFactorQtrennMinNull()
      {
        this[this.tableWMTestingTypes.FactorQtrennMinColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFactorQtrennMaxNull()
      {
        return this.IsNull(this.tableWMTestingTypes.FactorQtrennMaxColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFactorQtrennMaxNull()
      {
        this[this.tableWMTestingTypes.FactorQtrennMaxColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFactorQMinMinNull()
      {
        return this.IsNull(this.tableWMTestingTypes.FactorQMinMinColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFactorQMinMinNull()
      {
        this[this.tableWMTestingTypes.FactorQMinMinColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFactorQMinMaxNull()
      {
        return this.IsNull(this.tableWMTestingTypes.FactorQMinMaxColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFactorQMinMaxNull()
      {
        this[this.tableWMTestingTypes.FactorQMinMaxColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTempMinNull() => this.IsNull(this.tableWMTestingTypes.TempMinColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTempMinNull() => this[this.tableWMTestingTypes.TempMinColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTempMaxNull() => this.IsNull(this.tableWMTestingTypes.TempMaxColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTempMaxNull() => this[this.tableWMTestingTypes.TempMaxColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestingTypeDescriptionNull()
      {
        return this.IsNull(this.tableWMTestingTypes.TestingTypeDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestingTypeDescriptionNull()
      {
        this[this.tableWMTestingTypes.TestingTypeDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableWMTestingTypes.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull()
      {
        this[this.tableWMTestingTypes.PersonelNrColumn] = Convert.DBNull;
      }
    }

    public class ZRFunctionRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionDataTable tableZRFunction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ZRFunctionRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableZRFunction = (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FunctionNumber
      {
        get => (int) this[this.tableZRFunction.FunctionNumberColumn];
        set => this[this.tableZRFunction.FunctionNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FunctionName
      {
        get
        {
          try
          {
            return (string) this[this.tableZRFunction.FunctionNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FunctionName' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.FunctionNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FunctionGroup
      {
        get
        {
          try
          {
            return (string) this[this.tableZRFunction.FunctionGroupColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FunctionGroup' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.FunctionGroupColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FullName
      {
        get
        {
          try
          {
            return (string) this[this.tableZRFunction.FullNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FullName' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.FullNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MeterUnit
      {
        get
        {
          try
          {
            return (string) this[this.tableZRFunction.MeterUnitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterUnit' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.MeterUnitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FirmwareVersionMin
      {
        get
        {
          try
          {
            return (int) this[this.tableZRFunction.FirmwareVersionMinColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareVersionMin' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.FirmwareVersionMinColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FirmwareVersionMax
      {
        get
        {
          try
          {
            return (int) this[this.tableZRFunction.FirmwareVersionMaxColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareVersionMax' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.FirmwareVersionMaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FunctionType
      {
        get
        {
          try
          {
            return (int) this[this.tableZRFunction.FunctionTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FunctionType' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.FunctionTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FunctionShortInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableZRFunction.FunctionShortInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FunctionShortInfo' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.FunctionShortInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FunctionDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableZRFunction.FunctionDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FunctionDescription' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.FunctionDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FunctionVersion
      {
        get
        {
          try
          {
            return (int) this[this.tableZRFunction.FunctionVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FunctionVersion' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.FunctionVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int AccessRight
      {
        get
        {
          try
          {
            return (int) this[this.tableZRFunction.AccessRightColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AccessRight' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.AccessRightColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int UserGroup
      {
        get
        {
          try
          {
            return (int) this[this.tableZRFunction.UserGroupColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UserGroup' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.UserGroupColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Symbolname
      {
        get
        {
          try
          {
            return (string) this[this.tableZRFunction.SymbolnameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Symbolname' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.SymbolnameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LoggerType
      {
        get
        {
          try
          {
            return (int) this[this.tableZRFunction.LoggerTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LoggerType' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.LoggerTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string HardwareResource
      {
        get
        {
          try
          {
            return (string) this[this.tableZRFunction.HardwareResourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareResource' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.HardwareResourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string AccessRights
      {
        get
        {
          try
          {
            return (string) this[this.tableZRFunction.AccessRightsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AccessRights' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.AccessRightsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SoftwareResource
      {
        get
        {
          try
          {
            return (string) this[this.tableZRFunction.SoftwareResourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SoftwareResource' in table 'ZRFunction' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunction.SoftwareResourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFunctionNameNull() => this.IsNull(this.tableZRFunction.FunctionNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFunctionNameNull()
      {
        this[this.tableZRFunction.FunctionNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFunctionGroupNull() => this.IsNull(this.tableZRFunction.FunctionGroupColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFunctionGroupNull()
      {
        this[this.tableZRFunction.FunctionGroupColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFullNameNull() => this.IsNull(this.tableZRFunction.FullNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFullNameNull() => this[this.tableZRFunction.FullNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterUnitNull() => this.IsNull(this.tableZRFunction.MeterUnitColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterUnitNull() => this[this.tableZRFunction.MeterUnitColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFirmwareVersionMinNull()
      {
        return this.IsNull(this.tableZRFunction.FirmwareVersionMinColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFirmwareVersionMinNull()
      {
        this[this.tableZRFunction.FirmwareVersionMinColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFirmwareVersionMaxNull()
      {
        return this.IsNull(this.tableZRFunction.FirmwareVersionMaxColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFirmwareVersionMaxNull()
      {
        this[this.tableZRFunction.FirmwareVersionMaxColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFunctionTypeNull() => this.IsNull(this.tableZRFunction.FunctionTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFunctionTypeNull()
      {
        this[this.tableZRFunction.FunctionTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFunctionShortInfoNull()
      {
        return this.IsNull(this.tableZRFunction.FunctionShortInfoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFunctionShortInfoNull()
      {
        this[this.tableZRFunction.FunctionShortInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFunctionDescriptionNull()
      {
        return this.IsNull(this.tableZRFunction.FunctionDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFunctionDescriptionNull()
      {
        this[this.tableZRFunction.FunctionDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFunctionVersionNull()
      {
        return this.IsNull(this.tableZRFunction.FunctionVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFunctionVersionNull()
      {
        this[this.tableZRFunction.FunctionVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAccessRightNull() => this.IsNull(this.tableZRFunction.AccessRightColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAccessRightNull()
      {
        this[this.tableZRFunction.AccessRightColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUserGroupNull() => this.IsNull(this.tableZRFunction.UserGroupColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUserGroupNull() => this[this.tableZRFunction.UserGroupColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSymbolnameNull() => this.IsNull(this.tableZRFunction.SymbolnameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSymbolnameNull()
      {
        this[this.tableZRFunction.SymbolnameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLoggerTypeNull() => this.IsNull(this.tableZRFunction.LoggerTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLoggerTypeNull()
      {
        this[this.tableZRFunction.LoggerTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareResourceNull()
      {
        return this.IsNull(this.tableZRFunction.HardwareResourceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareResourceNull()
      {
        this[this.tableZRFunction.HardwareResourceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAccessRightsNull() => this.IsNull(this.tableZRFunction.AccessRightsColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAccessRightsNull()
      {
        this[this.tableZRFunction.AccessRightsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSoftwareResourceNull()
      {
        return this.IsNull(this.tableZRFunction.SoftwareResourceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSoftwareResourceNull()
      {
        this[this.tableZRFunction.SoftwareResourceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow[] GetDataloggerRows()
      {
        return this.Table.ChildRelations["FunctionDatalogger"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow[]) this.GetChildRows(this.Table.ChildRelations["FunctionDatalogger"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow[] GetMBusCodeRows()
      {
        return this.Table.ChildRelations["FunctionMBusCode"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow[]) this.GetChildRows(this.Table.ChildRelations["FunctionMBusCode"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MenuRow[] GetMenuRows()
      {
        return this.Table.ChildRelations["FunctionMenu"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.MenuRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.MenuRow[]) this.GetChildRows(this.Table.ChildRelations["FunctionMenu"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow[] GetRuntimeCodeRows()
      {
        return this.Table.ChildRelations["FunctionRuntimeCodeKopf"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow[]) this.GetChildRows(this.Table.ChildRelations["FunctionRuntimeCodeKopf"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow[] GetZRParameterRows()
      {
        return this.Table.ChildRelations["FunctionParameter"] == null ? new ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow[0] : (ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow[]) this.GetChildRows(this.Table.ChildRelations["FunctionParameter"]);
      }
    }

    public class ZRGlobalIDRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDDataTable tableZRGlobalID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ZRGlobalIDRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableZRGlobalID = (ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ZRTableName
      {
        get => (string) this[this.tableZRGlobalID.ZRTableNameColumn];
        set => this[this.tableZRGlobalID.ZRTableNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ZRFieldName
      {
        get
        {
          try
          {
            return (string) this[this.tableZRGlobalID.ZRFieldNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ZRFieldName' in table 'ZRGlobalID' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRGlobalID.ZRFieldNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ZRNextNr
      {
        get
        {
          try
          {
            return (int) this[this.tableZRGlobalID.ZRNextNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ZRNextNr' in table 'ZRGlobalID' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRGlobalID.ZRNextNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ZRFirstNr
      {
        get
        {
          try
          {
            return (int) this[this.tableZRGlobalID.ZRFirstNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ZRFirstNr' in table 'ZRGlobalID' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRGlobalID.ZRFirstNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ZRLastNr
      {
        get
        {
          try
          {
            return (int) this[this.tableZRGlobalID.ZRLastNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ZRLastNr' in table 'ZRGlobalID' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRGlobalID.ZRLastNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DatabaseLocationName
      {
        get => (string) this[this.tableZRGlobalID.DatabaseLocationNameColumn];
        set => this[this.tableZRGlobalID.DatabaseLocationNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsZRFieldNameNull() => this.IsNull(this.tableZRGlobalID.ZRFieldNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetZRFieldNameNull()
      {
        this[this.tableZRGlobalID.ZRFieldNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsZRNextNrNull() => this.IsNull(this.tableZRGlobalID.ZRNextNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetZRNextNrNull() => this[this.tableZRGlobalID.ZRNextNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsZRFirstNrNull() => this.IsNull(this.tableZRGlobalID.ZRFirstNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetZRFirstNrNull() => this[this.tableZRGlobalID.ZRFirstNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsZRLastNrNull() => this.IsNull(this.tableZRGlobalID.ZRLastNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetZRLastNrNull() => this[this.tableZRGlobalID.ZRLastNrColumn] = Convert.DBNull;
    }

    public class ZrOrderRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ZrOrderDataTable tableZrOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ZrOrderRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableZrOrder = (ZR_ClassLibrary.Schema_Access.Schema.ZrOrderDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string OrderNr
      {
        get => (string) this[this.tableZrOrder.OrderNrColumn];
        set => this[this.tableZrOrder.OrderNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tableZrOrder.EquipmentIDColumn];
        set => this[this.tableZrOrder.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int StartNr
      {
        get
        {
          try
          {
            return (int) this[this.tableZrOrder.StartNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StartNr' in table 'ZrOrder' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZrOrder.StartNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EndNr
      {
        get
        {
          try
          {
            return (int) this[this.tableZrOrder.EndNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EndNr' in table 'ZrOrder' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZrOrder.EndNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int AktNr
      {
        get
        {
          try
          {
            return (int) this[this.tableZrOrder.AktNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AktNr' in table 'ZrOrder' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZrOrder.AktNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPSArtikelNr
      {
        get
        {
          try
          {
            return (string) this[this.tableZrOrder.PPSArtikelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPSArtikelNr' in table 'ZrOrder' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZrOrder.PPSArtikelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TypeName
      {
        get
        {
          try
          {
            return (string) this[this.tableZrOrder.TypeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TypeName' in table 'ZrOrder' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZrOrder.TypeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string OrderInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableZrOrder.OrderInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'OrderInfo' in table 'ZrOrder' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZrOrder.OrderInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStartNrNull() => this.IsNull(this.tableZrOrder.StartNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStartNrNull() => this[this.tableZrOrder.StartNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEndNrNull() => this.IsNull(this.tableZrOrder.EndNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEndNrNull() => this[this.tableZrOrder.EndNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAktNrNull() => this.IsNull(this.tableZrOrder.AktNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAktNrNull() => this[this.tableZrOrder.AktNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPSArtikelNrNull() => this.IsNull(this.tableZrOrder.PPSArtikelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPSArtikelNrNull()
      {
        this[this.tableZrOrder.PPSArtikelNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTypeNameNull() => this.IsNull(this.tableZrOrder.TypeNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTypeNameNull() => this[this.tableZrOrder.TypeNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsOrderInfoNull() => this.IsNull(this.tableZrOrder.OrderInfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetOrderInfoNull() => this[this.tableZrOrder.OrderInfoColumn] = Convert.DBNull;
    }

    public class ZRParameterRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ZRParameterDataTable tableZRParameter;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ZRParameterRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableZRParameter = (ZR_ClassLibrary.Schema_Access.Schema.ZRParameterDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FunctionNumber
      {
        get => (int) this[this.tableZRParameter.FunctionNumberColumn];
        set => this[this.tableZRParameter.FunctionNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterName
      {
        get => (string) this[this.tableZRParameter.ParameterNameColumn];
        set => this[this.tableZRParameter.ParameterNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string NameTranslated
      {
        get
        {
          try
          {
            return (string) this[this.tableZRParameter.NameTranslatedColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NameTranslated' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.NameTranslatedColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableZRParameter.ParameterInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterInfo' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.ParameterInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ParameterSize
      {
        get
        {
          try
          {
            return (int) this[this.tableZRParameter.ParameterSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterSize' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.ParameterSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte ParameterType
      {
        get
        {
          try
          {
            return (byte) this[this.tableZRParameter.ParameterTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterType' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.ParameterTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int DefaultValueHigh
      {
        get
        {
          try
          {
            return (int) this[this.tableZRParameter.DefaultValueHighColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DefaultValueHigh' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.DefaultValueHighColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int DefaultValueLow
      {
        get
        {
          try
          {
            return (int) this[this.tableZRParameter.DefaultValueLowColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DefaultValueLow' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.DefaultValueLowColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MinValueHigh
      {
        get
        {
          try
          {
            return (int) this[this.tableZRParameter.MinValueHighColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MinValueHigh' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.MinValueHighColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MinValueLow
      {
        get
        {
          try
          {
            return (int) this[this.tableZRParameter.MinValueLowColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MinValueLow' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.MinValueLowColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MaxValueHigh
      {
        get
        {
          try
          {
            return (int) this[this.tableZRParameter.MaxValueHighColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MaxValueHigh' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.MaxValueHighColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MaxValueLow
      {
        get
        {
          try
          {
            return (int) this[this.tableZRParameter.MaxValueLowColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MaxValueLow' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.MaxValueLowColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short MemoryType
      {
        get
        {
          try
          {
            return (short) this[this.tableZRParameter.MemoryTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MemoryType' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.MemoryTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Accessrights
      {
        get
        {
          try
          {
            return (string) this[this.tableZRParameter.AccessrightsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Accessrights' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.AccessrightsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Unit
      {
        get
        {
          try
          {
            return (string) this[this.tableZRParameter.UnitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Unit' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.UnitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FileName
      {
        get
        {
          try
          {
            return (string) this[this.tableZRParameter.FileNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FileName' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.FileNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte[] ByteArray
      {
        get
        {
          try
          {
            return (byte[]) this[this.tableZRParameter.ByteArrayColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ByteArray' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.ByteArrayColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MBusDifVifValue
      {
        get
        {
          try
          {
            return (string) this[this.tableZRParameter.MBusDifVifValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MBusDifVifValue' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.MBusDifVifValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte MBusShortProt
      {
        get
        {
          try
          {
            return (byte) this[this.tableZRParameter.MBusShortProtColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MBusShortProt' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.MBusShortProtColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte MBusLongProt
      {
        get
        {
          try
          {
            return (byte) this[this.tableZRParameter.MBusLongProtColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MBusLongProt' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.MBusLongProtColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte MBusParamLen
      {
        get
        {
          try
          {
            return (byte) this[this.tableZRParameter.MBusParamLenColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MBusParamLen' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.MBusParamLenColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MBusParamConvert
      {
        get
        {
          try
          {
            return (string) this[this.tableZRParameter.MBusParamConvertColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MBusParamConvert' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.MBusParamConvertColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte MBusEnable
      {
        get
        {
          try
          {
            return (byte) this[this.tableZRParameter.MBusEnableColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MBusEnable' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.MBusEnableColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LoggerID
      {
        get
        {
          try
          {
            return (int) this[this.tableZRParameter.LoggerIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LoggerID' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.LoggerIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short StructureNr
      {
        get
        {
          try
          {
            return (short) this[this.tableZRParameter.StructureNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StructureNr' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.StructureNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short StructureIndex
      {
        get
        {
          try
          {
            return (short) this[this.tableZRParameter.StructureIndexColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StructureIndex' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.StructureIndexColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string configinfo
      {
        get
        {
          try
          {
            return (string) this[this.tableZRParameter.configinfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'configinfo' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.configinfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MeterResource
      {
        get
        {
          try
          {
            return (string) this[this.tableZRParameter.MeterResourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterResource' in table 'ZRParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRParameter.MeterResourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow ZRFunctionRow
      {
        get
        {
          return (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow) this.GetParentRow(this.Table.ParentRelations["FunctionParameter"]);
        }
        set => this.SetParentRow((DataRow) value, this.Table.ParentRelations["FunctionParameter"]);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNameTranslatedNull() => this.IsNull(this.tableZRParameter.NameTranslatedColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNameTranslatedNull()
      {
        this[this.tableZRParameter.NameTranslatedColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterInfoNull() => this.IsNull(this.tableZRParameter.ParameterInfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterInfoNull()
      {
        this[this.tableZRParameter.ParameterInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterSizeNull() => this.IsNull(this.tableZRParameter.ParameterSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterSizeNull()
      {
        this[this.tableZRParameter.ParameterSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterTypeNull() => this.IsNull(this.tableZRParameter.ParameterTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterTypeNull()
      {
        this[this.tableZRParameter.ParameterTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDefaultValueHighNull()
      {
        return this.IsNull(this.tableZRParameter.DefaultValueHighColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDefaultValueHighNull()
      {
        this[this.tableZRParameter.DefaultValueHighColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDefaultValueLowNull()
      {
        return this.IsNull(this.tableZRParameter.DefaultValueLowColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDefaultValueLowNull()
      {
        this[this.tableZRParameter.DefaultValueLowColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMinValueHighNull() => this.IsNull(this.tableZRParameter.MinValueHighColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMinValueHighNull()
      {
        this[this.tableZRParameter.MinValueHighColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMinValueLowNull() => this.IsNull(this.tableZRParameter.MinValueLowColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMinValueLowNull()
      {
        this[this.tableZRParameter.MinValueLowColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMaxValueHighNull() => this.IsNull(this.tableZRParameter.MaxValueHighColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMaxValueHighNull()
      {
        this[this.tableZRParameter.MaxValueHighColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMaxValueLowNull() => this.IsNull(this.tableZRParameter.MaxValueLowColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMaxValueLowNull()
      {
        this[this.tableZRParameter.MaxValueLowColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMemoryTypeNull() => this.IsNull(this.tableZRParameter.MemoryTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMemoryTypeNull()
      {
        this[this.tableZRParameter.MemoryTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAccessrightsNull() => this.IsNull(this.tableZRParameter.AccessrightsColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAccessrightsNull()
      {
        this[this.tableZRParameter.AccessrightsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUnitNull() => this.IsNull(this.tableZRParameter.UnitColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUnitNull() => this[this.tableZRParameter.UnitColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFileNameNull() => this.IsNull(this.tableZRParameter.FileNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFileNameNull() => this[this.tableZRParameter.FileNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsByteArrayNull() => this.IsNull(this.tableZRParameter.ByteArrayColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetByteArrayNull()
      {
        this[this.tableZRParameter.ByteArrayColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMBusDifVifValueNull()
      {
        return this.IsNull(this.tableZRParameter.MBusDifVifValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMBusDifVifValueNull()
      {
        this[this.tableZRParameter.MBusDifVifValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMBusShortProtNull() => this.IsNull(this.tableZRParameter.MBusShortProtColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMBusShortProtNull()
      {
        this[this.tableZRParameter.MBusShortProtColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMBusLongProtNull() => this.IsNull(this.tableZRParameter.MBusLongProtColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMBusLongProtNull()
      {
        this[this.tableZRParameter.MBusLongProtColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMBusParamLenNull() => this.IsNull(this.tableZRParameter.MBusParamLenColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMBusParamLenNull()
      {
        this[this.tableZRParameter.MBusParamLenColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMBusParamConvertNull()
      {
        return this.IsNull(this.tableZRParameter.MBusParamConvertColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMBusParamConvertNull()
      {
        this[this.tableZRParameter.MBusParamConvertColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMBusEnableNull() => this.IsNull(this.tableZRParameter.MBusEnableColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMBusEnableNull()
      {
        this[this.tableZRParameter.MBusEnableColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLoggerIDNull() => this.IsNull(this.tableZRParameter.LoggerIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLoggerIDNull() => this[this.tableZRParameter.LoggerIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStructureNrNull() => this.IsNull(this.tableZRParameter.StructureNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStructureNrNull()
      {
        this[this.tableZRParameter.StructureNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStructureIndexNull() => this.IsNull(this.tableZRParameter.StructureIndexColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStructureIndexNull()
      {
        this[this.tableZRParameter.StructureIndexColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsconfiginfoNull() => this.IsNull(this.tableZRParameter.configinfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetconfiginfoNull()
      {
        this[this.tableZRParameter.configinfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterResourceNull() => this.IsNull(this.tableZRParameter.MeterResourceColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterResourceNull()
      {
        this[this.tableZRParameter.MeterResourceColumn] = Convert.DBNull;
      }
    }

    public class ZRTableNamesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesDataTable tableZRTableNames;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ZRTableNamesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableZRTableNames = (ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TableName
      {
        get => (string) this[this.tableZRTableNames.TableNameColumn];
        set => this[this.tableZRTableNames.TableNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short TableID
      {
        get => (short) this[this.tableZRTableNames.TableIDColumn];
        set => this[this.tableZRTableNames.TableIDColumn] = (object) value;
      }
    }

    public class NodeLayersRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.NodeLayersDataTable tableNodeLayers;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal NodeLayersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableNodeLayers = (ZR_ClassLibrary.Schema_Access.Schema.NodeLayersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LayerID
      {
        get => (int) this[this.tableNodeLayers.LayerIDColumn];
        set => this[this.tableNodeLayers.LayerIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Name
      {
        get
        {
          try
          {
            return (string) this[this.tableNodeLayers.NameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Name' in table 'NodeLayers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNodeLayers.NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableNodeLayers.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'NodeLayers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNodeLayers.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNameNull() => this.IsNull(this.tableNodeLayers.NameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNameNull() => this[this.tableNodeLayers.NameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableNodeLayers.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableNodeLayers.DescriptionColumn] = Convert.DBNull;
      }
    }

    public class ExternalUserTableRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableDataTable tableExternalUserTable;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ExternalUserTableRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableExternalUserTable = (ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tableExternalUserTable.EquipmentIDColumn];
        set => this[this.tableExternalUserTable.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TesterName
      {
        get => (string) this[this.tableExternalUserTable.TesterNameColumn];
        set => this[this.tableExternalUserTable.TesterNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int UserPersonalNumber
      {
        get => (int) this[this.tableExternalUserTable.UserPersonalNumberColumn];
        set => this[this.tableExternalUserTable.UserPersonalNumberColumn] = (object) value;
      }
    }

    public class DocumentGroupsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsDataTable tableDocumentGroups;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DocumentGroupsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDocumentGroups = (ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int DocumentGroupID
      {
        get => (int) this[this.tableDocumentGroups.DocumentGroupIDColumn];
        set => this[this.tableDocumentGroups.DocumentGroupIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DocumentGroupName
      {
        get
        {
          try
          {
            return (string) this[this.tableDocumentGroups.DocumentGroupNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DocumentGroupName' in table 'DocumentGroups' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDocumentGroups.DocumentGroupNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DocumentGroupDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableDocumentGroups.DocumentGroupDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DocumentGroupDescription' in table 'DocumentGroups' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDocumentGroups.DocumentGroupDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDocumentGroupNameNull()
      {
        return this.IsNull(this.tableDocumentGroups.DocumentGroupNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDocumentGroupNameNull()
      {
        this[this.tableDocumentGroups.DocumentGroupNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDocumentGroupDescriptionNull()
      {
        return this.IsNull(this.tableDocumentGroups.DocumentGroupDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDocumentGroupDescriptionNull()
      {
        this[this.tableDocumentGroups.DocumentGroupDescriptionColumn] = Convert.DBNull;
      }
    }

    public class DocumentsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DocumentsDataTable tableDocuments;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DocumentsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDocuments = (ZR_ClassLibrary.Schema_Access.Schema.DocumentsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int DocumentID
      {
        get => (int) this[this.tableDocuments.DocumentIDColumn];
        set => this[this.tableDocuments.DocumentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DocumentName
      {
        get
        {
          try
          {
            return (string) this[this.tableDocuments.DocumentNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DocumentName' in table 'Documents' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDocuments.DocumentNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int DocumentGroupID
      {
        get
        {
          try
          {
            return (int) this[this.tableDocuments.DocumentGroupIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DocumentGroupID' in table 'Documents' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDocuments.DocumentGroupIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DocumentDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableDocuments.DocumentDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DocumentDescription' in table 'Documents' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDocuments.DocumentDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Document
      {
        get
        {
          try
          {
            return (string) this[this.tableDocuments.DocumentColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Document' in table 'Documents' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDocuments.DocumentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDocumentNameNull() => this.IsNull(this.tableDocuments.DocumentNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDocumentNameNull()
      {
        this[this.tableDocuments.DocumentNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDocumentGroupIDNull() => this.IsNull(this.tableDocuments.DocumentGroupIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDocumentGroupIDNull()
      {
        this[this.tableDocuments.DocumentGroupIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDocumentDescriptionNull()
      {
        return this.IsNull(this.tableDocuments.DocumentDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDocumentDescriptionNull()
      {
        this[this.tableDocuments.DocumentDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDocumentNull() => this.IsNull(this.tableDocuments.DocumentColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDocumentNull() => this[this.tableDocuments.DocumentColumn] = Convert.DBNull;
    }

    public class ErrorDescriptionRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionDataTable tableErrorDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ErrorDescriptionRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableErrorDescription = (ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ErrorNumber
      {
        get => (int) this[this.tableErrorDescription.ErrorNumberColumn];
        set => this[this.tableErrorDescription.ErrorNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ErrorClass
      {
        get
        {
          try
          {
            return (int) this[this.tableErrorDescription.ErrorClassColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorClass' in table 'ErrorDescription' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErrorDescription.ErrorClassColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableErrorDescription.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'ErrorDescription' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErrorDescription.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int DocumentID
      {
        get
        {
          try
          {
            return (int) this[this.tableErrorDescription.DocumentIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DocumentID' in table 'ErrorDescription' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErrorDescription.DocumentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorClassNull() => this.IsNull(this.tableErrorDescription.ErrorClassColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorClassNull()
      {
        this[this.tableErrorDescription.ErrorClassColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableErrorDescription.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableErrorDescription.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDocumentIDNull() => this.IsNull(this.tableErrorDescription.DocumentIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDocumentIDNull()
      {
        this[this.tableErrorDescription.DocumentIDColumn] = Convert.DBNull;
      }
    }

    public class MultidataCacheRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheDataTable tableMultidataCache;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MultidataCacheRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMultidataCache = (ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ALTARTNR
      {
        get => (string) this[this.tableMultidataCache.ALTARTNRColumn];
        set => this[this.tableMultidataCache.ALTARTNRColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MNR
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.MNRColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MNR' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.MNRColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string KTXT
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.KTXTColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'KTXT' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.KTXTColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string GRP
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.GRPColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'GRP' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.GRPColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte KM01
      {
        get
        {
          try
          {
            return (byte) this[this.tableMultidataCache.KM01Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'KM01' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.KM01Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB01
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB01Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB01' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB01Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB02
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB02Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB02' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB02Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB03
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB03Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB03' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB03Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB04
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB04Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB04' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB04Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB05
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB05Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB05' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB05Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB06
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB06Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB06' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB06Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB07
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB07Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB07' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB07Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB08
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB08Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB08' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB08Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB09
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB09Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB09' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB09Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB10
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB10Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB10' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB10Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB11
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB11Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB11' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB11Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB12
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB12Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB12' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB12Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB13
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB13Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB13' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB13Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB14
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB14Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB14' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB14Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB15
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB15Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB15' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB15Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB16
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB16Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB16' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB16Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB17
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB17Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB17' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB17Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB18
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB18Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB18' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB18Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB19
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB19Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB19' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB19Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ATTRIB20
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ATTRIB20Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ATTRIB20' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ATTRIB20Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string USItemText2
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.USItemText2Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'USItemText2' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.USItemText2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ADDNAME2
      {
        get
        {
          try
          {
            return (string) this[this.tableMultidataCache.ADDNAME2Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ADDNAME2' in table 'MultidataCache' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMultidataCache.ADDNAME2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMNRNull() => this.IsNull(this.tableMultidataCache.MNRColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMNRNull() => this[this.tableMultidataCache.MNRColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsKTXTNull() => this.IsNull(this.tableMultidataCache.KTXTColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetKTXTNull() => this[this.tableMultidataCache.KTXTColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsGRPNull() => this.IsNull(this.tableMultidataCache.GRPColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetGRPNull() => this[this.tableMultidataCache.GRPColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsKM01Null() => this.IsNull(this.tableMultidataCache.KM01Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetKM01Null() => this[this.tableMultidataCache.KM01Column] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB01Null() => this.IsNull(this.tableMultidataCache.ATTRIB01Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB01Null()
      {
        this[this.tableMultidataCache.ATTRIB01Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB02Null() => this.IsNull(this.tableMultidataCache.ATTRIB02Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB02Null()
      {
        this[this.tableMultidataCache.ATTRIB02Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB03Null() => this.IsNull(this.tableMultidataCache.ATTRIB03Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB03Null()
      {
        this[this.tableMultidataCache.ATTRIB03Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB04Null() => this.IsNull(this.tableMultidataCache.ATTRIB04Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB04Null()
      {
        this[this.tableMultidataCache.ATTRIB04Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB05Null() => this.IsNull(this.tableMultidataCache.ATTRIB05Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB05Null()
      {
        this[this.tableMultidataCache.ATTRIB05Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB06Null() => this.IsNull(this.tableMultidataCache.ATTRIB06Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB06Null()
      {
        this[this.tableMultidataCache.ATTRIB06Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB07Null() => this.IsNull(this.tableMultidataCache.ATTRIB07Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB07Null()
      {
        this[this.tableMultidataCache.ATTRIB07Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB08Null() => this.IsNull(this.tableMultidataCache.ATTRIB08Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB08Null()
      {
        this[this.tableMultidataCache.ATTRIB08Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB09Null() => this.IsNull(this.tableMultidataCache.ATTRIB09Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB09Null()
      {
        this[this.tableMultidataCache.ATTRIB09Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB10Null() => this.IsNull(this.tableMultidataCache.ATTRIB10Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB10Null()
      {
        this[this.tableMultidataCache.ATTRIB10Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB11Null() => this.IsNull(this.tableMultidataCache.ATTRIB11Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB11Null()
      {
        this[this.tableMultidataCache.ATTRIB11Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB12Null() => this.IsNull(this.tableMultidataCache.ATTRIB12Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB12Null()
      {
        this[this.tableMultidataCache.ATTRIB12Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB13Null() => this.IsNull(this.tableMultidataCache.ATTRIB13Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB13Null()
      {
        this[this.tableMultidataCache.ATTRIB13Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB14Null() => this.IsNull(this.tableMultidataCache.ATTRIB14Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB14Null()
      {
        this[this.tableMultidataCache.ATTRIB14Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB15Null() => this.IsNull(this.tableMultidataCache.ATTRIB15Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB15Null()
      {
        this[this.tableMultidataCache.ATTRIB15Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB16Null() => this.IsNull(this.tableMultidataCache.ATTRIB16Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB16Null()
      {
        this[this.tableMultidataCache.ATTRIB16Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB17Null() => this.IsNull(this.tableMultidataCache.ATTRIB17Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB17Null()
      {
        this[this.tableMultidataCache.ATTRIB17Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB18Null() => this.IsNull(this.tableMultidataCache.ATTRIB18Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB18Null()
      {
        this[this.tableMultidataCache.ATTRIB18Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB19Null() => this.IsNull(this.tableMultidataCache.ATTRIB19Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB19Null()
      {
        this[this.tableMultidataCache.ATTRIB19Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsATTRIB20Null() => this.IsNull(this.tableMultidataCache.ATTRIB20Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetATTRIB20Null()
      {
        this[this.tableMultidataCache.ATTRIB20Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUSItemText2Null() => this.IsNull(this.tableMultidataCache.USItemText2Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUSItemText2Null()
      {
        this[this.tableMultidataCache.USItemText2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsADDNAME2Null() => this.IsNull(this.tableMultidataCache.ADDNAME2Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetADDNAME2Null()
      {
        this[this.tableMultidataCache.ADDNAME2Column] = Convert.DBNull;
      }
    }

    public class WaveFlowDeviceModelsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsDataTable tableWaveFlowDeviceModels;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal WaveFlowDeviceModelsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableWaveFlowDeviceModels = (ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WaveFlowDeviceModel
      {
        get => (string) this[this.tableWaveFlowDeviceModels.WaveFlowDeviceModelColumn];
        set => this[this.tableWaveFlowDeviceModels.WaveFlowDeviceModelColumn] = (object) value;
      }
    }

    public class MinolDeviceDataReadRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadDataTable tableMinolDeviceDataRead;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinolDeviceDataReadRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMinolDeviceDataRead = (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MapID
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceDataRead.MapIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MapID' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RangeName
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.RangeNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RangeName' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.RangeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int Index
      {
        get => (int) this[this.tableMinolDeviceDataRead.IndexColumn];
        set => this[this.tableMinolDeviceDataRead.IndexColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Name
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.NameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Name' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Type
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.TypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Type' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.TypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short Length
      {
        get
        {
          try
          {
            return (short) this[this.tableMinolDeviceDataRead.LengthColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Length' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.LengthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int Address
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceDataRead.AddressColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Address' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.AddressColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte Bit
      {
        get
        {
          try
          {
            return (byte) this[this.tableMinolDeviceDataRead.BitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Bit' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.BitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int BitMask
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceDataRead.BitMaskColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'BitMask' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.BitMaskColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Parent
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.ParentColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Parent' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.ParentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Info
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.InfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Info' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.InfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InfoBit0
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.InfoBit0Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InfoBit0' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.InfoBit0Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InfoBit1
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.InfoBit1Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InfoBit1' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.InfoBit1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DateStamp
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.DateStampColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DateStamp' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.DateStampColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DateReference
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.DateReferenceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DateReference' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.DateReferenceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Data
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.RD_DataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Data' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.RD_DataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Value
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.RD_ValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Value' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.RD_ValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WR_Data
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.WR_DataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WR_Data' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.WR_DataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WR_Value
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.WR_ValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WR_Value' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.WR_ValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int RD_Factor
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceDataRead.RD_FactorColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Factor' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.RD_FactorColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int RD_Divisor
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceDataRead.RD_DivisorColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Divisor' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.RD_DivisorColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Format
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.RD_FormatColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Format' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.RD_FormatColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Unit
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.RD_UnitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Unit' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.RD_UnitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Type
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.RD_TypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Type' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.RD_TypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Data_Default
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.RD_Data_DefaultColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Data_Default' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.RD_Data_DefaultColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Value_Default
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.RD_Value_DefaultColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Value_Default' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.RD_Value_DefaultColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WR_Data_Default
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.WR_Data_DefaultColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WR_Data_Default' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.WR_Data_DefaultColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WR_Value_Default
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.WR_Value_DefaultColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WR_Value_Default' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.WR_Value_DefaultColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Checked
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceDataRead.CheckedColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Checked' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.CheckedColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool CheckedTmp
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceDataRead.CheckedTmpColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckedTmp' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.CheckedTmpColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool CheckedSnd
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceDataRead.CheckedSndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckedSnd' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.CheckedSndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Visible_RD
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceDataRead.Visible_RDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Visible_RD' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.Visible_RDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Visible_RD_All
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceDataRead.Visible_RD_AllColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Visible_RD_All' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.Visible_RD_AllColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Visible_RD_User
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceDataRead.Visible_RD_UserColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Visible_RD_User' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.Visible_RD_UserColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Visible_WR
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceDataRead.Visible_WRColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Visible_WR' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.Visible_WRColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Visible_WR_All
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceDataRead.Visible_WR_AllColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Visible_WR_All' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.Visible_WR_AllColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Visible_WR_User
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceDataRead.Visible_WR_UserColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Visible_WR_User' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.Visible_WR_UserColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool UseK
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceDataRead.UseKColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UseK' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.UseKColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool UseMulDiv
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceDataRead.UseMulDivColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UseMulDiv' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.UseMulDivColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParamType
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceDataRead.ParamTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParamType' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.ParamTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public long ValueIdent
      {
        get
        {
          try
          {
            return (long) this[this.tableMinolDeviceDataRead.ValueIdentColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValueIdent' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.ValueIdentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int OverrideID
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceDataRead.OverrideIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'OverrideID' in table 'MinolDeviceDataRead' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceDataRead.OverrideIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMapIDNull() => this.IsNull(this.tableMinolDeviceDataRead.MapIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMapIDNull()
      {
        this[this.tableMinolDeviceDataRead.MapIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRangeNameNull() => this.IsNull(this.tableMinolDeviceDataRead.RangeNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRangeNameNull()
      {
        this[this.tableMinolDeviceDataRead.RangeNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNameNull() => this.IsNull(this.tableMinolDeviceDataRead.NameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNameNull() => this[this.tableMinolDeviceDataRead.NameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTypeNull() => this.IsNull(this.tableMinolDeviceDataRead.TypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTypeNull() => this[this.tableMinolDeviceDataRead.TypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLengthNull() => this.IsNull(this.tableMinolDeviceDataRead.LengthColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLengthNull()
      {
        this[this.tableMinolDeviceDataRead.LengthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAddressNull() => this.IsNull(this.tableMinolDeviceDataRead.AddressColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAddressNull()
      {
        this[this.tableMinolDeviceDataRead.AddressColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsBitNull() => this.IsNull(this.tableMinolDeviceDataRead.BitColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetBitNull() => this[this.tableMinolDeviceDataRead.BitColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsBitMaskNull() => this.IsNull(this.tableMinolDeviceDataRead.BitMaskColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetBitMaskNull()
      {
        this[this.tableMinolDeviceDataRead.BitMaskColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParentNull() => this.IsNull(this.tableMinolDeviceDataRead.ParentColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParentNull()
      {
        this[this.tableMinolDeviceDataRead.ParentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull()
      {
        return this.IsNull(this.tableMinolDeviceDataRead.DescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableMinolDeviceDataRead.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInfoNull() => this.IsNull(this.tableMinolDeviceDataRead.InfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInfoNull() => this[this.tableMinolDeviceDataRead.InfoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInfoBit0Null() => this.IsNull(this.tableMinolDeviceDataRead.InfoBit0Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInfoBit0Null()
      {
        this[this.tableMinolDeviceDataRead.InfoBit0Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInfoBit1Null() => this.IsNull(this.tableMinolDeviceDataRead.InfoBit1Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInfoBit1Null()
      {
        this[this.tableMinolDeviceDataRead.InfoBit1Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDateStampNull() => this.IsNull(this.tableMinolDeviceDataRead.DateStampColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDateStampNull()
      {
        this[this.tableMinolDeviceDataRead.DateStampColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDateReferenceNull()
      {
        return this.IsNull(this.tableMinolDeviceDataRead.DateReferenceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDateReferenceNull()
      {
        this[this.tableMinolDeviceDataRead.DateReferenceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_DataNull() => this.IsNull(this.tableMinolDeviceDataRead.RD_DataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_DataNull()
      {
        this[this.tableMinolDeviceDataRead.RD_DataColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_ValueNull() => this.IsNull(this.tableMinolDeviceDataRead.RD_ValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_ValueNull()
      {
        this[this.tableMinolDeviceDataRead.RD_ValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWR_DataNull() => this.IsNull(this.tableMinolDeviceDataRead.WR_DataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWR_DataNull()
      {
        this[this.tableMinolDeviceDataRead.WR_DataColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWR_ValueNull() => this.IsNull(this.tableMinolDeviceDataRead.WR_ValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWR_ValueNull()
      {
        this[this.tableMinolDeviceDataRead.WR_ValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_FactorNull() => this.IsNull(this.tableMinolDeviceDataRead.RD_FactorColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_FactorNull()
      {
        this[this.tableMinolDeviceDataRead.RD_FactorColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_DivisorNull() => this.IsNull(this.tableMinolDeviceDataRead.RD_DivisorColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_DivisorNull()
      {
        this[this.tableMinolDeviceDataRead.RD_DivisorColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_FormatNull() => this.IsNull(this.tableMinolDeviceDataRead.RD_FormatColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_FormatNull()
      {
        this[this.tableMinolDeviceDataRead.RD_FormatColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_UnitNull() => this.IsNull(this.tableMinolDeviceDataRead.RD_UnitColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_UnitNull()
      {
        this[this.tableMinolDeviceDataRead.RD_UnitColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_TypeNull() => this.IsNull(this.tableMinolDeviceDataRead.RD_TypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_TypeNull()
      {
        this[this.tableMinolDeviceDataRead.RD_TypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_Data_DefaultNull()
      {
        return this.IsNull(this.tableMinolDeviceDataRead.RD_Data_DefaultColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_Data_DefaultNull()
      {
        this[this.tableMinolDeviceDataRead.RD_Data_DefaultColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_Value_DefaultNull()
      {
        return this.IsNull(this.tableMinolDeviceDataRead.RD_Value_DefaultColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_Value_DefaultNull()
      {
        this[this.tableMinolDeviceDataRead.RD_Value_DefaultColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWR_Data_DefaultNull()
      {
        return this.IsNull(this.tableMinolDeviceDataRead.WR_Data_DefaultColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWR_Data_DefaultNull()
      {
        this[this.tableMinolDeviceDataRead.WR_Data_DefaultColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWR_Value_DefaultNull()
      {
        return this.IsNull(this.tableMinolDeviceDataRead.WR_Value_DefaultColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWR_Value_DefaultNull()
      {
        this[this.tableMinolDeviceDataRead.WR_Value_DefaultColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCheckedNull() => this.IsNull(this.tableMinolDeviceDataRead.CheckedColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCheckedNull()
      {
        this[this.tableMinolDeviceDataRead.CheckedColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCheckedTmpNull() => this.IsNull(this.tableMinolDeviceDataRead.CheckedTmpColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCheckedTmpNull()
      {
        this[this.tableMinolDeviceDataRead.CheckedTmpColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCheckedSndNull() => this.IsNull(this.tableMinolDeviceDataRead.CheckedSndColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCheckedSndNull()
      {
        this[this.tableMinolDeviceDataRead.CheckedSndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVisible_RDNull() => this.IsNull(this.tableMinolDeviceDataRead.Visible_RDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVisible_RDNull()
      {
        this[this.tableMinolDeviceDataRead.Visible_RDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVisible_RD_AllNull()
      {
        return this.IsNull(this.tableMinolDeviceDataRead.Visible_RD_AllColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVisible_RD_AllNull()
      {
        this[this.tableMinolDeviceDataRead.Visible_RD_AllColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVisible_RD_UserNull()
      {
        return this.IsNull(this.tableMinolDeviceDataRead.Visible_RD_UserColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVisible_RD_UserNull()
      {
        this[this.tableMinolDeviceDataRead.Visible_RD_UserColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVisible_WRNull() => this.IsNull(this.tableMinolDeviceDataRead.Visible_WRColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVisible_WRNull()
      {
        this[this.tableMinolDeviceDataRead.Visible_WRColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVisible_WR_AllNull()
      {
        return this.IsNull(this.tableMinolDeviceDataRead.Visible_WR_AllColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVisible_WR_AllNull()
      {
        this[this.tableMinolDeviceDataRead.Visible_WR_AllColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVisible_WR_UserNull()
      {
        return this.IsNull(this.tableMinolDeviceDataRead.Visible_WR_UserColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVisible_WR_UserNull()
      {
        this[this.tableMinolDeviceDataRead.Visible_WR_UserColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUseKNull() => this.IsNull(this.tableMinolDeviceDataRead.UseKColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUseKNull() => this[this.tableMinolDeviceDataRead.UseKColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUseMulDivNull() => this.IsNull(this.tableMinolDeviceDataRead.UseMulDivColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUseMulDivNull()
      {
        this[this.tableMinolDeviceDataRead.UseMulDivColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParamTypeNull() => this.IsNull(this.tableMinolDeviceDataRead.ParamTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParamTypeNull()
      {
        this[this.tableMinolDeviceDataRead.ParamTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsValueIdentNull() => this.IsNull(this.tableMinolDeviceDataRead.ValueIdentColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetValueIdentNull()
      {
        this[this.tableMinolDeviceDataRead.ValueIdentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsOverrideIDNull() => this.IsNull(this.tableMinolDeviceDataRead.OverrideIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetOverrideIDNull()
      {
        this[this.tableMinolDeviceDataRead.OverrideIDColumn] = Convert.DBNull;
      }
    }

    public class MinolDeviceDataRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataDataTable tableMinolDeviceData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinolDeviceDataRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMinolDeviceData = (ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MapID
      {
        get => (int) this[this.tableMinolDeviceData.MapIDColumn];
        set => this[this.tableMinolDeviceData.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RangeName
      {
        get => (string) this[this.tableMinolDeviceData.RangeNameColumn];
        set => this[this.tableMinolDeviceData.RangeNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int Index
      {
        get => (int) this[this.tableMinolDeviceData.IndexColumn];
        set => this[this.tableMinolDeviceData.IndexColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Name
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.NameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Name' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Type
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.TypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Type' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.TypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short Length
      {
        get
        {
          try
          {
            return (short) this[this.tableMinolDeviceData.LengthColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Length' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.LengthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int Address
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceData.AddressColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Address' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.AddressColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte Bit
      {
        get
        {
          try
          {
            return (byte) this[this.tableMinolDeviceData.BitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Bit' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.BitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int BitMask
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceData.BitMaskColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'BitMask' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.BitMaskColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Parent
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.ParentColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Parent' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.ParentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Info
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.InfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Info' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.InfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InfoBit0
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.InfoBit0Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InfoBit0' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.InfoBit0Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InfoBit1
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.InfoBit1Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InfoBit1' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.InfoBit1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DateStamp
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.DateStampColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DateStamp' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.DateStampColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DateReference
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.DateReferenceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DateReference' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.DateReferenceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Data
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.RD_DataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Data' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.RD_DataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Value
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.RD_ValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Value' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.RD_ValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WR_Data
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.WR_DataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WR_Data' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.WR_DataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WR_Value
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.WR_ValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WR_Value' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.WR_ValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int RD_Factor
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceData.RD_FactorColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Factor' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.RD_FactorColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int RD_Divisor
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceData.RD_DivisorColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Divisor' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.RD_DivisorColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Format
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.RD_FormatColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Format' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.RD_FormatColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Unit
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.RD_UnitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Unit' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.RD_UnitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Type
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.RD_TypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Type' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.RD_TypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Data_Default
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.RD_Data_DefaultColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Data_Default' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.RD_Data_DefaultColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RD_Value_Default
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.RD_Value_DefaultColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RD_Value_Default' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.RD_Value_DefaultColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WR_Data_Default
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.WR_Data_DefaultColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WR_Data_Default' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.WR_Data_DefaultColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string WR_Value_Default
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.WR_Value_DefaultColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'WR_Value_Default' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.WR_Value_DefaultColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Checked
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceData.CheckedColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Checked' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.CheckedColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool CheckedTmp
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceData.CheckedTmpColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckedTmp' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.CheckedTmpColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool CheckedSnd
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceData.CheckedSndColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckedSnd' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.CheckedSndColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Visible_RD
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceData.Visible_RDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Visible_RD' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.Visible_RDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Visible_RD_All
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceData.Visible_RD_AllColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Visible_RD_All' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.Visible_RD_AllColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Visible_RD_User
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceData.Visible_RD_UserColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Visible_RD_User' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.Visible_RD_UserColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Visible_WR
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceData.Visible_WRColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Visible_WR' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.Visible_WRColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Visible_WR_All
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceData.Visible_WR_AllColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Visible_WR_All' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.Visible_WR_AllColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool Visible_WR_User
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceData.Visible_WR_UserColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Visible_WR_User' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.Visible_WR_UserColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool UseK
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceData.UseKColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UseK' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.UseKColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool UseMulDiv
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinolDeviceData.UseMulDivColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UseMulDiv' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.UseMulDivColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParamType
      {
        get
        {
          try
          {
            return (string) this[this.tableMinolDeviceData.ParamTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParamType' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.ParamTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ValueIdent
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceData.ValueIdentColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValueIdent' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.ValueIdentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int OverrideID
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceData.OverrideIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'OverrideID' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.OverrideIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int Signature
      {
        get
        {
          try
          {
            return (int) this[this.tableMinolDeviceData.SignatureColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Signature' in table 'MinolDeviceData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinolDeviceData.SignatureColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNameNull() => this.IsNull(this.tableMinolDeviceData.NameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNameNull() => this[this.tableMinolDeviceData.NameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTypeNull() => this.IsNull(this.tableMinolDeviceData.TypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTypeNull() => this[this.tableMinolDeviceData.TypeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLengthNull() => this.IsNull(this.tableMinolDeviceData.LengthColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLengthNull() => this[this.tableMinolDeviceData.LengthColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAddressNull() => this.IsNull(this.tableMinolDeviceData.AddressColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAddressNull()
      {
        this[this.tableMinolDeviceData.AddressColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsBitNull() => this.IsNull(this.tableMinolDeviceData.BitColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetBitNull() => this[this.tableMinolDeviceData.BitColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsBitMaskNull() => this.IsNull(this.tableMinolDeviceData.BitMaskColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetBitMaskNull()
      {
        this[this.tableMinolDeviceData.BitMaskColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParentNull() => this.IsNull(this.tableMinolDeviceData.ParentColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParentNull() => this[this.tableMinolDeviceData.ParentColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableMinolDeviceData.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableMinolDeviceData.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInfoNull() => this.IsNull(this.tableMinolDeviceData.InfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInfoNull() => this[this.tableMinolDeviceData.InfoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInfoBit0Null() => this.IsNull(this.tableMinolDeviceData.InfoBit0Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInfoBit0Null()
      {
        this[this.tableMinolDeviceData.InfoBit0Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInfoBit1Null() => this.IsNull(this.tableMinolDeviceData.InfoBit1Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInfoBit1Null()
      {
        this[this.tableMinolDeviceData.InfoBit1Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDateStampNull() => this.IsNull(this.tableMinolDeviceData.DateStampColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDateStampNull()
      {
        this[this.tableMinolDeviceData.DateStampColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDateReferenceNull()
      {
        return this.IsNull(this.tableMinolDeviceData.DateReferenceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDateReferenceNull()
      {
        this[this.tableMinolDeviceData.DateReferenceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_DataNull() => this.IsNull(this.tableMinolDeviceData.RD_DataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_DataNull()
      {
        this[this.tableMinolDeviceData.RD_DataColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_ValueNull() => this.IsNull(this.tableMinolDeviceData.RD_ValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_ValueNull()
      {
        this[this.tableMinolDeviceData.RD_ValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWR_DataNull() => this.IsNull(this.tableMinolDeviceData.WR_DataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWR_DataNull()
      {
        this[this.tableMinolDeviceData.WR_DataColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWR_ValueNull() => this.IsNull(this.tableMinolDeviceData.WR_ValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWR_ValueNull()
      {
        this[this.tableMinolDeviceData.WR_ValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_FactorNull() => this.IsNull(this.tableMinolDeviceData.RD_FactorColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_FactorNull()
      {
        this[this.tableMinolDeviceData.RD_FactorColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_DivisorNull() => this.IsNull(this.tableMinolDeviceData.RD_DivisorColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_DivisorNull()
      {
        this[this.tableMinolDeviceData.RD_DivisorColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_FormatNull() => this.IsNull(this.tableMinolDeviceData.RD_FormatColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_FormatNull()
      {
        this[this.tableMinolDeviceData.RD_FormatColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_UnitNull() => this.IsNull(this.tableMinolDeviceData.RD_UnitColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_UnitNull()
      {
        this[this.tableMinolDeviceData.RD_UnitColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_TypeNull() => this.IsNull(this.tableMinolDeviceData.RD_TypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_TypeNull()
      {
        this[this.tableMinolDeviceData.RD_TypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_Data_DefaultNull()
      {
        return this.IsNull(this.tableMinolDeviceData.RD_Data_DefaultColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_Data_DefaultNull()
      {
        this[this.tableMinolDeviceData.RD_Data_DefaultColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRD_Value_DefaultNull()
      {
        return this.IsNull(this.tableMinolDeviceData.RD_Value_DefaultColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRD_Value_DefaultNull()
      {
        this[this.tableMinolDeviceData.RD_Value_DefaultColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWR_Data_DefaultNull()
      {
        return this.IsNull(this.tableMinolDeviceData.WR_Data_DefaultColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWR_Data_DefaultNull()
      {
        this[this.tableMinolDeviceData.WR_Data_DefaultColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsWR_Value_DefaultNull()
      {
        return this.IsNull(this.tableMinolDeviceData.WR_Value_DefaultColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetWR_Value_DefaultNull()
      {
        this[this.tableMinolDeviceData.WR_Value_DefaultColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCheckedNull() => this.IsNull(this.tableMinolDeviceData.CheckedColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCheckedNull()
      {
        this[this.tableMinolDeviceData.CheckedColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCheckedTmpNull() => this.IsNull(this.tableMinolDeviceData.CheckedTmpColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCheckedTmpNull()
      {
        this[this.tableMinolDeviceData.CheckedTmpColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCheckedSndNull() => this.IsNull(this.tableMinolDeviceData.CheckedSndColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCheckedSndNull()
      {
        this[this.tableMinolDeviceData.CheckedSndColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVisible_RDNull() => this.IsNull(this.tableMinolDeviceData.Visible_RDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVisible_RDNull()
      {
        this[this.tableMinolDeviceData.Visible_RDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVisible_RD_AllNull()
      {
        return this.IsNull(this.tableMinolDeviceData.Visible_RD_AllColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVisible_RD_AllNull()
      {
        this[this.tableMinolDeviceData.Visible_RD_AllColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVisible_RD_UserNull()
      {
        return this.IsNull(this.tableMinolDeviceData.Visible_RD_UserColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVisible_RD_UserNull()
      {
        this[this.tableMinolDeviceData.Visible_RD_UserColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVisible_WRNull() => this.IsNull(this.tableMinolDeviceData.Visible_WRColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVisible_WRNull()
      {
        this[this.tableMinolDeviceData.Visible_WRColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVisible_WR_AllNull()
      {
        return this.IsNull(this.tableMinolDeviceData.Visible_WR_AllColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVisible_WR_AllNull()
      {
        this[this.tableMinolDeviceData.Visible_WR_AllColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVisible_WR_UserNull()
      {
        return this.IsNull(this.tableMinolDeviceData.Visible_WR_UserColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVisible_WR_UserNull()
      {
        this[this.tableMinolDeviceData.Visible_WR_UserColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUseKNull() => this.IsNull(this.tableMinolDeviceData.UseKColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUseKNull() => this[this.tableMinolDeviceData.UseKColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUseMulDivNull() => this.IsNull(this.tableMinolDeviceData.UseMulDivColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUseMulDivNull()
      {
        this[this.tableMinolDeviceData.UseMulDivColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParamTypeNull() => this.IsNull(this.tableMinolDeviceData.ParamTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParamTypeNull()
      {
        this[this.tableMinolDeviceData.ParamTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsValueIdentNull() => this.IsNull(this.tableMinolDeviceData.ValueIdentColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetValueIdentNull()
      {
        this[this.tableMinolDeviceData.ValueIdentColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsOverrideIDNull() => this.IsNull(this.tableMinolDeviceData.OverrideIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetOverrideIDNull()
      {
        this[this.tableMinolDeviceData.OverrideIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSignatureNull() => this.IsNull(this.tableMinolDeviceData.SignatureColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSignatureNull()
      {
        this[this.tableMinolDeviceData.SignatureColumn] = Convert.DBNull;
      }
    }

    public class AutoboxCardConfigurationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationDataTable tableAutoboxCardConfiguration;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal AutoboxCardConfigurationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAutoboxCardConfiguration = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tableAutoboxCardConfiguration.EquipmentIDColumn];
        set => this[this.tableAutoboxCardConfiguration.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte CardNumber
      {
        get => (byte) this[this.tableAutoboxCardConfiguration.CardNumberColumn];
        set => this[this.tableAutoboxCardConfiguration.CardNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ResisitorPosition
      {
        get => (string) this[this.tableAutoboxCardConfiguration.ResisitorPositionColumn];
        set => this[this.tableAutoboxCardConfiguration.ResisitorPositionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte ResistorNumber
      {
        get => (byte) this[this.tableAutoboxCardConfiguration.ResistorNumberColumn];
        set => this[this.tableAutoboxCardConfiguration.ResistorNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ResistorType
      {
        get
        {
          try
          {
            return (string) this[this.tableAutoboxCardConfiguration.ResistorTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ResistorType' in table 'AutoboxCardConfiguration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAutoboxCardConfiguration.ResistorTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double NominalTemperature
      {
        get
        {
          try
          {
            return (double) this[this.tableAutoboxCardConfiguration.NominalTemperatureColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NominalTemperature' in table 'AutoboxCardConfiguration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAutoboxCardConfiguration.NominalTemperatureColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResistorTypeNull()
      {
        return this.IsNull(this.tableAutoboxCardConfiguration.ResistorTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResistorTypeNull()
      {
        this[this.tableAutoboxCardConfiguration.ResistorTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNominalTemperatureNull()
      {
        return this.IsNull(this.tableAutoboxCardConfiguration.NominalTemperatureColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNominalTemperatureNull()
      {
        this[this.tableAutoboxCardConfiguration.NominalTemperatureColumn] = Convert.DBNull;
      }
    }

    public class AutoboxResistorCalibrationDataRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataDataTable tableAutoboxResistorCalibrationData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal AutoboxResistorCalibrationDataRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAutoboxResistorCalibrationData = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CalibrationID
      {
        get => (int) this[this.tableAutoboxResistorCalibrationData.CalibrationIDColumn];
        set => this[this.tableAutoboxResistorCalibrationData.CalibrationIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tableAutoboxResistorCalibrationData.EquipmentIDColumn];
        set => this[this.tableAutoboxResistorCalibrationData.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte CardNumber
      {
        get => (byte) this[this.tableAutoboxResistorCalibrationData.CardNumberColumn];
        set => this[this.tableAutoboxResistorCalibrationData.CardNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte ResistorNumber
      {
        get => (byte) this[this.tableAutoboxResistorCalibrationData.ResistorNumberColumn];
        set => this[this.tableAutoboxResistorCalibrationData.ResistorNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ResistorPosition
      {
        get => (string) this[this.tableAutoboxResistorCalibrationData.ResistorPositionColumn];
        set
        {
          this[this.tableAutoboxResistorCalibrationData.ResistorPositionColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ResistorValue
      {
        get
        {
          try
          {
            return (double) this[this.tableAutoboxResistorCalibrationData.ResistorValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ResistorValue' in table 'AutoboxResistorCalibrationData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAutoboxResistorCalibrationData.ResistorValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResistorValueNull()
      {
        return this.IsNull(this.tableAutoboxResistorCalibrationData.ResistorValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResistorValueNull()
      {
        this[this.tableAutoboxResistorCalibrationData.ResistorValueColumn] = Convert.DBNull;
      }
    }

    public class AutoboxConfigurationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationDataTable tableAutoboxConfiguration;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal AutoboxConfigurationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAutoboxConfiguration = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tableAutoboxConfiguration.EquipmentIDColumn];
        set => this[this.tableAutoboxConfiguration.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte CardNumber
      {
        get => (byte) this[this.tableAutoboxConfiguration.CardNumberColumn];
        set => this[this.tableAutoboxConfiguration.CardNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CardName
      {
        get
        {
          try
          {
            return (string) this[this.tableAutoboxConfiguration.CardNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CardName' in table 'AutoboxConfiguration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAutoboxConfiguration.CardNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InterfaceID
      {
        get
        {
          try
          {
            return (string) this[this.tableAutoboxConfiguration.InterfaceIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InterfaceID' in table 'AutoboxConfiguration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAutoboxConfiguration.InterfaceIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InterfaceType
      {
        get
        {
          try
          {
            return (string) this[this.tableAutoboxConfiguration.InterfaceTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InterfaceType' in table 'AutoboxConfiguration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAutoboxConfiguration.InterfaceTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte InterfacePort
      {
        get
        {
          try
          {
            return (byte) this[this.tableAutoboxConfiguration.InterfacePortColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InterfacePort' in table 'AutoboxConfiguration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableAutoboxConfiguration.InterfacePortColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCardNameNull() => this.IsNull(this.tableAutoboxConfiguration.CardNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCardNameNull()
      {
        this[this.tableAutoboxConfiguration.CardNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInterfaceIDNull()
      {
        return this.IsNull(this.tableAutoboxConfiguration.InterfaceIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInterfaceIDNull()
      {
        this[this.tableAutoboxConfiguration.InterfaceIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInterfaceTypeNull()
      {
        return this.IsNull(this.tableAutoboxConfiguration.InterfaceTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInterfaceTypeNull()
      {
        this[this.tableAutoboxConfiguration.InterfaceTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInterfacePortNull()
      {
        return this.IsNull(this.tableAutoboxConfiguration.InterfacePortColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInterfacePortNull()
      {
        this[this.tableAutoboxConfiguration.InterfacePortColumn] = Convert.DBNull;
      }
    }

    public class AutoboxResistorPairsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsDataTable tableAutoboxResistorPairs;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal AutoboxResistorPairsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableAutoboxResistorPairs = (ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tableAutoboxResistorPairs.EquipmentIDColumn];
        set => this[this.tableAutoboxResistorPairs.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte CardNumber
      {
        get => (byte) this[this.tableAutoboxResistorPairs.CardNumberColumn];
        set => this[this.tableAutoboxResistorPairs.CardNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte ResistorNumberFlow
      {
        get => (byte) this[this.tableAutoboxResistorPairs.ResistorNumberFlowColumn];
        set => this[this.tableAutoboxResistorPairs.ResistorNumberFlowColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte ResistorNumberReturn
      {
        get => (byte) this[this.tableAutoboxResistorPairs.ResistorNumberReturnColumn];
        set => this[this.tableAutoboxResistorPairs.ResistorNumberReturnColumn] = (object) value;
      }
    }

    public class EnergyFactorsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsDataTable tableEnergyFactors;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EnergyFactorsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableEnergyFactors = (ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TempFlow
      {
        get => (double) this[this.tableEnergyFactors.TempFlowColumn];
        set => this[this.tableEnergyFactors.TempFlowColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TempReturn
      {
        get => (double) this[this.tableEnergyFactors.TempReturnColumn];
        set => this[this.tableEnergyFactors.TempReturnColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FactorFlowPosition
      {
        get
        {
          try
          {
            return (double) this[this.tableEnergyFactors.FactorFlowPositionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FactorFlowPosition' in table 'EnergyFactors' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEnergyFactors.FactorFlowPositionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double FactorReturnPosition
      {
        get
        {
          try
          {
            return (double) this[this.tableEnergyFactors.FactorReturnPositionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FactorReturnPosition' in table 'EnergyFactors' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEnergyFactors.FactorReturnPositionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFactorFlowPositionNull()
      {
        return this.IsNull(this.tableEnergyFactors.FactorFlowPositionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFactorFlowPositionNull()
      {
        this[this.tableEnergyFactors.FactorFlowPositionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFactorReturnPositionNull()
      {
        return this.IsNull(this.tableEnergyFactors.FactorReturnPositionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFactorReturnPositionNull()
      {
        this[this.tableEnergyFactors.FactorReturnPositionColumn] = Convert.DBNull;
      }
    }

    public class MeterInfoPropertiesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesDataTable tableMeterInfoProperties;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterInfoPropertiesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterInfoProperties = (ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterInfoId
      {
        get => (int) this[this.tableMeterInfoProperties.MeterInfoIdColumn];
        set => this[this.tableMeterInfoProperties.MeterInfoIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PropertyField1
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfoProperties.PropertyField1Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PropertyField1' in table 'MeterInfoProperties' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoProperties.PropertyField1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPropertyField1Null()
      {
        return this.IsNull(this.tableMeterInfoProperties.PropertyField1Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPropertyField1Null()
      {
        this[this.tableMeterInfoProperties.PropertyField1Column] = Convert.DBNull;
      }
    }

    public class EquipmentCalibrationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationDataTable tableEquipmentCalibration;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EquipmentCalibrationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableEquipmentCalibration = (ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CalibrationID
      {
        get => (int) this[this.tableEquipmentCalibration.CalibrationIDColumn];
        set => this[this.tableEquipmentCalibration.CalibrationIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get
        {
          try
          {
            return (int) this[this.tableEquipmentCalibration.EquipmentIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EquipmentID' in table 'EquipmentCalibration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentCalibration.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNumber
      {
        get
        {
          try
          {
            return (int) this[this.tableEquipmentCalibration.PersonelNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNumber' in table 'EquipmentCalibration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentCalibration.PersonelNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime CalibrationDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableEquipmentCalibration.CalibrationDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CalibrationDate' in table 'EquipmentCalibration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentCalibration.CalibrationDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte IsBasisEntry
      {
        get
        {
          try
          {
            return (byte) this[this.tableEquipmentCalibration.IsBasisEntryColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'IsBasisEntry' in table 'EquipmentCalibration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentCalibration.IsBasisEntryColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEquipmentIDNull()
      {
        return this.IsNull(this.tableEquipmentCalibration.EquipmentIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEquipmentIDNull()
      {
        this[this.tableEquipmentCalibration.EquipmentIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNumberNull()
      {
        return this.IsNull(this.tableEquipmentCalibration.PersonelNumberColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNumberNull()
      {
        this[this.tableEquipmentCalibration.PersonelNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCalibrationDateNull()
      {
        return this.IsNull(this.tableEquipmentCalibration.CalibrationDateColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCalibrationDateNull()
      {
        this[this.tableEquipmentCalibration.CalibrationDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsIsBasisEntryNull()
      {
        return this.IsNull(this.tableEquipmentCalibration.IsBasisEntryColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetIsBasisEntryNull()
      {
        this[this.tableEquipmentCalibration.IsBasisEntryColumn] = Convert.DBNull;
      }
    }

    public class TranslationRulesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesDataTable tableTranslationRules;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TranslationRulesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTranslationRules = (ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Manufacturer
      {
        get => (string) this[this.tableTranslationRules.ManufacturerColumn];
        set => this[this.tableTranslationRules.ManufacturerColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Medium
      {
        get => (string) this[this.tableTranslationRules.MediumColumn];
        set => this[this.tableTranslationRules.MediumColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short VersionMin
      {
        get => (short) this[this.tableTranslationRules.VersionMinColumn];
        set => this[this.tableTranslationRules.VersionMinColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short VersionMax
      {
        get => (short) this[this.tableTranslationRules.VersionMaxColumn];
        set => this[this.tableTranslationRules.VersionMaxColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MBusZDF
      {
        get => (string) this[this.tableTranslationRules.MBusZDFColumn];
        set => this[this.tableTranslationRules.MBusZDFColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ValueIdent
      {
        get => (string) this[this.tableTranslationRules.ValueIdentColumn];
        set => this[this.tableTranslationRules.ValueIdentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short RuleOrder
      {
        get => (short) this[this.tableTranslationRules.RuleOrderColumn];
        set => this[this.tableTranslationRules.RuleOrderColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Multiplier
      {
        get
        {
          try
          {
            return (double) this[this.tableTranslationRules.MultiplierColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Multiplier' in table 'TranslationRules' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTranslationRules.MultiplierColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short SpecialTranslation
      {
        get
        {
          try
          {
            return (short) this[this.tableTranslationRules.SpecialTranslationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SpecialTranslation' in table 'TranslationRules' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTranslationRules.SpecialTranslationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SubDeviceAttributeIdentifier
      {
        get
        {
          try
          {
            return (string) this[this.tableTranslationRules.SubDeviceAttributeIdentifierColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SubDeviceAttributeIdentifier' in table 'TranslationRules' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTranslationRules.SubDeviceAttributeIdentifierColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int SubDeviceIndex
      {
        get
        {
          try
          {
            return (int) this[this.tableTranslationRules.SubDeviceIndexColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SubDeviceIndex' in table 'TranslationRules' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTranslationRules.SubDeviceIndexColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string StorageTimeParam
      {
        get
        {
          try
          {
            return (string) this[this.tableTranslationRules.StorageTimeParamColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StorageTimeParam' in table 'TranslationRules' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTranslationRules.StorageTimeParamColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short StorageTimeTranslation
      {
        get
        {
          try
          {
            return (short) this[this.tableTranslationRules.StorageTimeTranslationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StorageTimeTranslation' in table 'TranslationRules' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTranslationRules.StorageTimeTranslationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMultiplierNull() => this.IsNull(this.tableTranslationRules.MultiplierColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMultiplierNull()
      {
        this[this.tableTranslationRules.MultiplierColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSpecialTranslationNull()
      {
        return this.IsNull(this.tableTranslationRules.SpecialTranslationColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSpecialTranslationNull()
      {
        this[this.tableTranslationRules.SpecialTranslationColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSubDeviceAttributeIdentifierNull()
      {
        return this.IsNull(this.tableTranslationRules.SubDeviceAttributeIdentifierColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSubDeviceAttributeIdentifierNull()
      {
        this[this.tableTranslationRules.SubDeviceAttributeIdentifierColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSubDeviceIndexNull()
      {
        return this.IsNull(this.tableTranslationRules.SubDeviceIndexColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSubDeviceIndexNull()
      {
        this[this.tableTranslationRules.SubDeviceIndexColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStorageTimeParamNull()
      {
        return this.IsNull(this.tableTranslationRules.StorageTimeParamColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStorageTimeParamNull()
      {
        this[this.tableTranslationRules.StorageTimeParamColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStorageTimeTranslationNull()
      {
        return this.IsNull(this.tableTranslationRules.StorageTimeTranslationColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStorageTimeTranslationNull()
      {
        this[this.tableTranslationRules.StorageTimeTranslationColumn] = Convert.DBNull;
      }
    }

    public class MeterValuesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterValuesDataTable tableMeterValues;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterValuesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterValues = (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterId
      {
        get => (int) this[this.tableMeterValues.MeterIdColumn];
        set => this[this.tableMeterValues.MeterIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte ValueIdentIndex
      {
        get => (byte) this[this.tableMeterValues.ValueIdentIndexColumn];
        set => this[this.tableMeterValues.ValueIdentIndexColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime TimePoint
      {
        get => (DateTime) this[this.tableMeterValues.TimePointColumn];
        set => this[this.tableMeterValues.TimePointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Value
      {
        get => (double) this[this.tableMeterValues.ValueColumn];
        set => this[this.tableMeterValues.ValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte PhysicalQuantity
      {
        get => (byte) this[this.tableMeterValues.PhysicalQuantityColumn];
        set => this[this.tableMeterValues.PhysicalQuantityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte MeterType
      {
        get => (byte) this[this.tableMeterValues.MeterTypeColumn];
        set => this[this.tableMeterValues.MeterTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte Calculation
      {
        get => (byte) this[this.tableMeterValues.CalculationColumn];
        set => this[this.tableMeterValues.CalculationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte CalculationStart
      {
        get => (byte) this[this.tableMeterValues.CalculationStartColumn];
        set => this[this.tableMeterValues.CalculationStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte StorageInterval
      {
        get => (byte) this[this.tableMeterValues.StorageIntervalColumn];
        set => this[this.tableMeterValues.StorageIntervalColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte Creation
      {
        get => (byte) this[this.tableMeterValues.CreationColumn];
        set => this[this.tableMeterValues.CreationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int NodeID
      {
        get => (int) this[this.tableMeterValues.NodeIDColumn];
        set => this[this.tableMeterValues.NodeIDColumn] = (object) value;
      }
    }

    public class MeterValuesAndSerialRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialDataTable tableMeterValuesAndSerial;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterValuesAndSerialRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterValuesAndSerial = (ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterId
      {
        get => (int) this[this.tableMeterValuesAndSerial.MeterIdColumn];
        set => this[this.tableMeterValuesAndSerial.MeterIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public long ValueIdent
      {
        get => (long) this[this.tableMeterValuesAndSerial.ValueIdentColumn];
        set => this[this.tableMeterValuesAndSerial.ValueIdentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte ValueIdentIndex
      {
        get => (byte) this[this.tableMeterValuesAndSerial.ValueIdentIndexColumn];
        set => this[this.tableMeterValuesAndSerial.ValueIdentIndexColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime TimePoint
      {
        get => (DateTime) this[this.tableMeterValuesAndSerial.TimePointColumn];
        set => this[this.tableMeterValuesAndSerial.TimePointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Value
      {
        get
        {
          try
          {
            return (double) this[this.tableMeterValuesAndSerial.ValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Value' in table 'MeterValuesAndSerial' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterValuesAndSerial.ValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte PhysicalQuantity
      {
        get
        {
          try
          {
            return (byte) this[this.tableMeterValuesAndSerial.PhysicalQuantityColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PhysicalQuantity' in table 'MeterValuesAndSerial' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterValuesAndSerial.PhysicalQuantityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte MeterType
      {
        get
        {
          try
          {
            return (byte) this[this.tableMeterValuesAndSerial.MeterTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterType' in table 'MeterValuesAndSerial' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterValuesAndSerial.MeterTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte Calculation
      {
        get
        {
          try
          {
            return (byte) this[this.tableMeterValuesAndSerial.CalculationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Calculation' in table 'MeterValuesAndSerial' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterValuesAndSerial.CalculationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte CalculationStart
      {
        get
        {
          try
          {
            return (byte) this[this.tableMeterValuesAndSerial.CalculationStartColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CalculationStart' in table 'MeterValuesAndSerial' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterValuesAndSerial.CalculationStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte StorageInterval
      {
        get
        {
          try
          {
            return (byte) this[this.tableMeterValuesAndSerial.StorageIntervalColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'StorageInterval' in table 'MeterValuesAndSerial' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterValuesAndSerial.StorageIntervalColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte Creation
      {
        get
        {
          try
          {
            return (byte) this[this.tableMeterValuesAndSerial.CreationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Creation' in table 'MeterValuesAndSerial' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterValuesAndSerial.CreationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SerialNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterValuesAndSerial.SerialNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SerialNr' in table 'MeterValuesAndSerial' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterValuesAndSerial.SerialNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsValueNull() => this.IsNull(this.tableMeterValuesAndSerial.ValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetValueNull()
      {
        this[this.tableMeterValuesAndSerial.ValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPhysicalQuantityNull()
      {
        return this.IsNull(this.tableMeterValuesAndSerial.PhysicalQuantityColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPhysicalQuantityNull()
      {
        this[this.tableMeterValuesAndSerial.PhysicalQuantityColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterTypeNull() => this.IsNull(this.tableMeterValuesAndSerial.MeterTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterTypeNull()
      {
        this[this.tableMeterValuesAndSerial.MeterTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCalculationNull()
      {
        return this.IsNull(this.tableMeterValuesAndSerial.CalculationColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCalculationNull()
      {
        this[this.tableMeterValuesAndSerial.CalculationColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCalculationStartNull()
      {
        return this.IsNull(this.tableMeterValuesAndSerial.CalculationStartColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCalculationStartNull()
      {
        this[this.tableMeterValuesAndSerial.CalculationStartColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStorageIntervalNull()
      {
        return this.IsNull(this.tableMeterValuesAndSerial.StorageIntervalColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStorageIntervalNull()
      {
        this[this.tableMeterValuesAndSerial.StorageIntervalColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCreationNull() => this.IsNull(this.tableMeterValuesAndSerial.CreationColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCreationNull()
      {
        this[this.tableMeterValuesAndSerial.CreationColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSerialNrNull() => this.IsNull(this.tableMeterValuesAndSerial.SerialNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSerialNrNull()
      {
        this[this.tableMeterValuesAndSerial.SerialNrColumn] = Convert.DBNull;
      }
    }

    public class OnlineTranslationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationDataTable tableOnlineTranslation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal OnlineTranslationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableOnlineTranslation = (ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TextKey
      {
        get => (string) this[this.tableOnlineTranslation.TextKeyColumn];
        set => this[this.tableOnlineTranslation.TextKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TextDE
      {
        get
        {
          try
          {
            return (string) this[this.tableOnlineTranslation.TextDEColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TextDE' in table 'OnlineTranslation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableOnlineTranslation.TextDEColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TextEN
      {
        get
        {
          try
          {
            return (string) this[this.tableOnlineTranslation.TextENColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TextEN' in table 'OnlineTranslation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableOnlineTranslation.TextENColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTextDENull() => this.IsNull(this.tableOnlineTranslation.TextDEColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTextDENull()
      {
        this[this.tableOnlineTranslation.TextDEColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTextENNull() => this.IsNull(this.tableOnlineTranslation.TextENColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTextENNull()
      {
        this[this.tableOnlineTranslation.TextENColumn] = Convert.DBNull;
      }
    }

    public class S3_FunctionParameterRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterDataTable tableS3_FunctionParameter;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal S3_FunctionParameterRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableS3_FunctionParameter = (ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short FunctionNumber
      {
        get => (short) this[this.tableS3_FunctionParameter.FunctionNumberColumn];
        set => this[this.tableS3_FunctionParameter.FunctionNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short ParameterOrder
      {
        get => (short) this[this.tableS3_FunctionParameter.ParameterOrderColumn];
        set => this[this.tableS3_FunctionParameter.ParameterOrderColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterName
      {
        get
        {
          try
          {
            return (string) this[this.tableS3_FunctionParameter.ParameterNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterName' in table 'S3_FunctionParameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_FunctionParameter.ParameterNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterNameNull()
      {
        return this.IsNull(this.tableS3_FunctionParameter.ParameterNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterNameNull()
      {
        this[this.tableS3_FunctionParameter.ParameterNameColumn] = Convert.DBNull;
      }
    }

    public class MTypeVMT_ElectronicRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicDataTable tableMTypeVMT_Electronic;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeVMT_ElectronicRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMTypeVMT_Electronic = (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeId
      {
        get => (int) this[this.tableMTypeVMT_Electronic.MeterTypeIdColumn];
        set => this[this.tableMTypeVMT_Electronic.MeterTypeIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte[] DeviceMemory
      {
        get
        {
          try
          {
            return (byte[]) this[this.tableMTypeVMT_Electronic.DeviceMemoryColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DeviceMemory' in table 'MTypeVMT_Electronic' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeVMT_Electronic.DeviceMemoryColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDeviceMemoryNull()
      {
        return this.IsNull(this.tableMTypeVMT_Electronic.DeviceMemoryColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDeviceMemoryNull()
      {
        this[this.tableMTypeVMT_Electronic.DeviceMemoryColumn] = Convert.DBNull;
      }
    }

    public class MTypeVMT_HydraulicRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicDataTable tableMTypeVMT_Hydraulic;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MTypeVMT_HydraulicRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMTypeVMT_Hydraulic = (ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeId
      {
        get => (int) this[this.tableMTypeVMT_Hydraulic.MeterTypeIdColumn];
        set => this[this.tableMTypeVMT_Hydraulic.MeterTypeIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ImpulseValue
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeVMT_Hydraulic.ImpulseValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ImpulseValue' in table 'MTypeVMT_Hydraulic' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeVMT_Hydraulic.ImpulseValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TestImpulseValue
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeVMT_Hydraulic.TestImpulseValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestImpulseValue' in table 'MTypeVMT_Hydraulic' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeVMT_Hydraulic.TestImpulseValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Qn
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeVMT_Hydraulic.QnColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Qn' in table 'MTypeVMT_Hydraulic' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeVMT_Hydraulic.QnColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ErrorCurveOffset
      {
        get
        {
          try
          {
            return (double) this[this.tableMTypeVMT_Hydraulic.ErrorCurveOffsetColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ErrorCurveOffset' in table 'MTypeVMT_Hydraulic' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMTypeVMT_Hydraulic.ErrorCurveOffsetColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsImpulseValueNull()
      {
        return this.IsNull(this.tableMTypeVMT_Hydraulic.ImpulseValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetImpulseValueNull()
      {
        this[this.tableMTypeVMT_Hydraulic.ImpulseValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestImpulseValueNull()
      {
        return this.IsNull(this.tableMTypeVMT_Hydraulic.TestImpulseValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestImpulseValueNull()
      {
        this[this.tableMTypeVMT_Hydraulic.TestImpulseValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQnNull() => this.IsNull(this.tableMTypeVMT_Hydraulic.QnColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQnNull() => this[this.tableMTypeVMT_Hydraulic.QnColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsErrorCurveOffsetNull()
      {
        return this.IsNull(this.tableMTypeVMT_Hydraulic.ErrorCurveOffsetColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetErrorCurveOffsetNull()
      {
        this[this.tableMTypeVMT_Hydraulic.ErrorCurveOffsetColumn] = Convert.DBNull;
      }
    }

    public class DataQsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DataQsDataTable tableDataQs;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal DataQsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDataQs = (ZR_ClassLibrary.Schema_Access.Schema.DataQsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPSArtikelNr
      {
        get
        {
          try
          {
            return (string) this[this.tableDataQs.PPSArtikelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPSArtikelNr' in table 'DataQs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataQs.PPSArtikelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime CheckDate
      {
        get => (DateTime) this[this.tableDataQs.CheckDateColumn];
        set => this[this.tableDataQs.CheckDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterInfoID
      {
        get => (int) this[this.tableDataQs.MeterInfoIDColumn];
        set => this[this.tableDataQs.MeterInfoIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterID
      {
        get
        {
          try
          {
            return (int) this[this.tableDataQs.MeterIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterID' in table 'DataQs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataQs.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SerialNr
      {
        get
        {
          try
          {
            return (string) this[this.tableDataQs.SerialNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SerialNr' in table 'DataQs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataQs.SerialNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int BasetypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableDataQs.BasetypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'BasetypeID' in table 'DataQs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataQs.BasetypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int HardwareTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableDataQs.HardwareTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareTypeID' in table 'DataQs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataQs.HardwareTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FirmwareVersion
      {
        get
        {
          try
          {
            return (string) this[this.tableDataQs.FirmwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareVersion' in table 'DataQs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataQs.FirmwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string QsComment
      {
        get
        {
          try
          {
            return (string) this[this.tableDataQs.QsCommentColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'QsComment' in table 'DataQs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataQs.QsCommentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte CheckState
      {
        get
        {
          try
          {
            return (byte) this[this.tableDataQs.CheckStateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CheckState' in table 'DataQs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataQs.CheckStateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonelNr
      {
        get
        {
          try
          {
            return (int) this[this.tableDataQs.PersonelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonelNr' in table 'DataQs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDataQs.PersonelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPSArtikelNrNull() => this.IsNull(this.tableDataQs.PPSArtikelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPSArtikelNrNull()
      {
        this[this.tableDataQs.PPSArtikelNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterIDNull() => this.IsNull(this.tableDataQs.MeterIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterIDNull() => this[this.tableDataQs.MeterIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSerialNrNull() => this.IsNull(this.tableDataQs.SerialNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSerialNrNull() => this[this.tableDataQs.SerialNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsBasetypeIDNull() => this.IsNull(this.tableDataQs.BasetypeIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetBasetypeIDNull() => this[this.tableDataQs.BasetypeIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareTypeIDNull() => this.IsNull(this.tableDataQs.HardwareTypeIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareTypeIDNull()
      {
        this[this.tableDataQs.HardwareTypeIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFirmwareVersionNull() => this.IsNull(this.tableDataQs.FirmwareVersionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFirmwareVersionNull()
      {
        this[this.tableDataQs.FirmwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsQsCommentNull() => this.IsNull(this.tableDataQs.QsCommentColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetQsCommentNull() => this[this.tableDataQs.QsCommentColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCheckStateNull() => this.IsNull(this.tableDataQs.CheckStateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCheckStateNull() => this[this.tableDataQs.CheckStateColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonelNrNull() => this.IsNull(this.tableDataQs.PersonelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonelNrNull() => this[this.tableDataQs.PersonelNrColumn] = Convert.DBNull;
    }

    public class S3_ParameterRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterDataTable tableS3_Parameter;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal S3_ParameterRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableS3_Parameter = (ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterName
      {
        get => (string) this[this.tableS3_Parameter.ParameterNameColumn];
        set => this[this.tableS3_Parameter.ParameterNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double DefaultValue
      {
        get
        {
          try
          {
            return (double) this[this.tableS3_Parameter.DefaultValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DefaultValue' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.DefaultValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double MinValue
      {
        get
        {
          try
          {
            return (double) this[this.tableS3_Parameter.MinValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MinValue' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.MinValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double MaxValue
      {
        get
        {
          try
          {
            return (double) this[this.tableS3_Parameter.MaxValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MaxValue' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.MaxValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte VariableType
      {
        get
        {
          try
          {
            return (byte) this[this.tableS3_Parameter.VariableTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'VariableType' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.VariableTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Location
      {
        get
        {
          try
          {
            return (string) this[this.tableS3_Parameter.LocationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Location' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.LocationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DefaultDivVif
      {
        get
        {
          try
          {
            return (string) this[this.tableS3_Parameter.DefaultDivVifColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DefaultDivVif' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.DefaultDivVifColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short MBusParameterLen
      {
        get
        {
          try
          {
            return (short) this[this.tableS3_Parameter.MBusParameterLenColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MBusParameterLen' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.MBusParameterLenColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MBusParameterConvert
      {
        get
        {
          try
          {
            return (string) this[this.tableS3_Parameter.MBusParameterConvertColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MBusParameterConvert' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.MBusParameterConvertColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string IsResource
      {
        get
        {
          try
          {
            return (string) this[this.tableS3_Parameter.IsResourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'IsResource' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.IsResourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string NeedResource
      {
        get
        {
          try
          {
            return (string) this[this.tableS3_Parameter.NeedResourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NeedResource' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.NeedResourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterUnit
      {
        get
        {
          try
          {
            return (string) this[this.tableS3_Parameter.ParameterUnitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterUnit' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.ParameterUnitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterStorageType
      {
        get
        {
          try
          {
            return (string) this[this.tableS3_Parameter.ParameterStorageTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterStorageType' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.ParameterStorageTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ParameterUnitFactor
      {
        get
        {
          try
          {
            return (double) this[this.tableS3_Parameter.ParameterUnitFactorColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterUnitFactor' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.ParameterUnitFactorColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableS3_Parameter.ParameterInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterInfo' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.ParameterInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDynamicRamValue
      {
        get
        {
          try
          {
            return (bool) this[this.tableS3_Parameter.IsDynamicRamValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'IsDynamicRamValue' in table 'S3_Parameter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableS3_Parameter.IsDynamicRamValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDefaultValueNull() => this.IsNull(this.tableS3_Parameter.DefaultValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDefaultValueNull()
      {
        this[this.tableS3_Parameter.DefaultValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMinValueNull() => this.IsNull(this.tableS3_Parameter.MinValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMinValueNull() => this[this.tableS3_Parameter.MinValueColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMaxValueNull() => this.IsNull(this.tableS3_Parameter.MaxValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMaxValueNull() => this[this.tableS3_Parameter.MaxValueColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsVariableTypeNull() => this.IsNull(this.tableS3_Parameter.VariableTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetVariableTypeNull()
      {
        this[this.tableS3_Parameter.VariableTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLocationNull() => this.IsNull(this.tableS3_Parameter.LocationColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLocationNull() => this[this.tableS3_Parameter.LocationColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDefaultDivVifNull() => this.IsNull(this.tableS3_Parameter.DefaultDivVifColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDefaultDivVifNull()
      {
        this[this.tableS3_Parameter.DefaultDivVifColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMBusParameterLenNull()
      {
        return this.IsNull(this.tableS3_Parameter.MBusParameterLenColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMBusParameterLenNull()
      {
        this[this.tableS3_Parameter.MBusParameterLenColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMBusParameterConvertNull()
      {
        return this.IsNull(this.tableS3_Parameter.MBusParameterConvertColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMBusParameterConvertNull()
      {
        this[this.tableS3_Parameter.MBusParameterConvertColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsIsResourceNull() => this.IsNull(this.tableS3_Parameter.IsResourceColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetIsResourceNull()
      {
        this[this.tableS3_Parameter.IsResourceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNeedResourceNull() => this.IsNull(this.tableS3_Parameter.NeedResourceColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNeedResourceNull()
      {
        this[this.tableS3_Parameter.NeedResourceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterUnitNull() => this.IsNull(this.tableS3_Parameter.ParameterUnitColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterUnitNull()
      {
        this[this.tableS3_Parameter.ParameterUnitColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterStorageTypeNull()
      {
        return this.IsNull(this.tableS3_Parameter.ParameterStorageTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterStorageTypeNull()
      {
        this[this.tableS3_Parameter.ParameterStorageTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterUnitFactorNull()
      {
        return this.IsNull(this.tableS3_Parameter.ParameterUnitFactorColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterUnitFactorNull()
      {
        this[this.tableS3_Parameter.ParameterUnitFactorColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterInfoNull() => this.IsNull(this.tableS3_Parameter.ParameterInfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterInfoNull()
      {
        this[this.tableS3_Parameter.ParameterInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsIsDynamicRamValueNull()
      {
        return this.IsNull(this.tableS3_Parameter.IsDynamicRamValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetIsDynamicRamValueNull()
      {
        this[this.tableS3_Parameter.IsDynamicRamValueColumn] = Convert.DBNull;
      }
    }

    public class SerialPortConfigurationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationDataTable tableSerialPortConfiguration;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SerialPortConfigurationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableSerialPortConfiguration = (ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tableSerialPortConfiguration.EquipmentIDColumn];
        set => this[this.tableSerialPortConfiguration.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PortGroup
      {
        get => (int) this[this.tableSerialPortConfiguration.PortGroupColumn];
        set => this[this.tableSerialPortConfiguration.PortGroupColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PortPlace
      {
        get => (int) this[this.tableSerialPortConfiguration.PortPlaceColumn];
        set => this[this.tableSerialPortConfiguration.PortPlaceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PortIdentification
      {
        get => (string) this[this.tableSerialPortConfiguration.PortIdentificationColumn];
        set => this[this.tableSerialPortConfiguration.PortIdentificationColumn] = (object) value;
      }
    }

    public class FilterRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.FilterDataTable tableFilter;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal FilterRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableFilter = (ZR_ClassLibrary.Schema_Access.Schema.FilterDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FilterId
      {
        get => (int) this[this.tableFilter.FilterIdColumn];
        set => this[this.tableFilter.FilterIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Name
      {
        get => (string) this[this.tableFilter.NameColumn];
        set => this[this.tableFilter.NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableFilter.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'Filter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableFilter.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableFilter.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull() => this[this.tableFilter.DescriptionColumn] = Convert.DBNull;
    }

    public class FilterValueRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.FilterValueDataTable tableFilterValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal FilterValueRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableFilterValue = (ZR_ClassLibrary.Schema_Access.Schema.FilterValueDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FilterId
      {
        get => (int) this[this.tableFilterValue.FilterIdColumn];
        set => this[this.tableFilterValue.FilterIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ValueIdent
      {
        get => (string) this[this.tableFilterValue.ValueIdentColumn];
        set => this[this.tableFilterValue.ValueIdentColumn] = (object) value;
      }
    }

    public class PostTranslationMappingRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingDataTable tablePostTranslationMapping;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PostTranslationMappingRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tablePostTranslationMapping = (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int RuleID
      {
        get => (int) this[this.tablePostTranslationMapping.RuleIDColumn];
        set => this[this.tablePostTranslationMapping.RuleIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PValueIDSource
      {
        get => (int) this[this.tablePostTranslationMapping.PValueIDSourceColumn];
        set => this[this.tablePostTranslationMapping.PValueIDSourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PValueIDDestination
      {
        get
        {
          try
          {
            return (int) this[this.tablePostTranslationMapping.PValueIDDestinationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PValueIDDestination' in table 'PostTranslationMapping' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePostTranslationMapping.PValueIDDestinationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPValueIDDestinationNull()
      {
        return this.IsNull(this.tablePostTranslationMapping.PValueIDDestinationColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPValueIDDestinationNull()
      {
        this[this.tablePostTranslationMapping.PValueIDDestinationColumn] = Convert.DBNull;
      }
    }

    public class PostTranslationRulesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesDataTable tablePostTranslationRules;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PostTranslationRulesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tablePostTranslationRules = (ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int RuleID
      {
        get => (int) this[this.tablePostTranslationRules.RuleIDColumn];
        set => this[this.tablePostTranslationRules.RuleIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RuleName
      {
        get
        {
          try
          {
            return (string) this[this.tablePostTranslationRules.RuleNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RuleName' in table 'PostTranslationRules' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePostTranslationRules.RuleNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RuleDescription
      {
        get
        {
          try
          {
            return (string) this[this.tablePostTranslationRules.RuleDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RuleDescription' in table 'PostTranslationRules' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePostTranslationRules.RuleDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RuleExportKey
      {
        get
        {
          try
          {
            return (string) this[this.tablePostTranslationRules.RuleExportKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RuleExportKey' in table 'PostTranslationRules' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePostTranslationRules.RuleExportKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRuleNameNull() => this.IsNull(this.tablePostTranslationRules.RuleNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRuleNameNull()
      {
        this[this.tablePostTranslationRules.RuleNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRuleDescriptionNull()
      {
        return this.IsNull(this.tablePostTranslationRules.RuleDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRuleDescriptionNull()
      {
        this[this.tablePostTranslationRules.RuleDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRuleExportKeyNull()
      {
        return this.IsNull(this.tablePostTranslationRules.RuleExportKeyColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRuleExportKeyNull()
      {
        this[this.tablePostTranslationRules.RuleExportKeyColumn] = Convert.DBNull;
      }
    }

    public class PTSensorParametersRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersDataTable tablePTSensorParameters;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PTSensorParametersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tablePTSensorParameters = (ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CalibrationID
      {
        get => (int) this[this.tablePTSensorParameters.CalibrationIDColumn];
        set => this[this.tablePTSensorParameters.CalibrationIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tablePTSensorParameters.EquipmentIDColumn];
        set => this[this.tablePTSensorParameters.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double R0
      {
        get => (double) this[this.tablePTSensorParameters.R0Column];
        set => this[this.tablePTSensorParameters.R0Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Alpha
      {
        get => (double) this[this.tablePTSensorParameters.AlphaColumn];
        set => this[this.tablePTSensorParameters.AlphaColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Beta
      {
        get => (double) this[this.tablePTSensorParameters.BetaColumn];
        set => this[this.tablePTSensorParameters.BetaColumn] = (object) value;
      }
    }

    public class SensorObservationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.SensorObservationDataTable tableSensorObservation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SensorObservationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableSensorObservation = (ZR_ClassLibrary.Schema_Access.Schema.SensorObservationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentIDTestbench
      {
        get => (int) this[this.tableSensorObservation.EquipmentIDTestbenchColumn];
        set => this[this.tableSensorObservation.EquipmentIDTestbenchColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CalibrationID
      {
        get => (int) this[this.tableSensorObservation.CalibrationIDColumn];
        set => this[this.tableSensorObservation.CalibrationIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int BathNumber
      {
        get => (int) this[this.tableSensorObservation.BathNumberColumn];
        set => this[this.tableSensorObservation.BathNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentIDSensor
      {
        get => (int) this[this.tableSensorObservation.EquipmentIDSensorColumn];
        set => this[this.tableSensorObservation.EquipmentIDSensorColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentIDRef
      {
        get => (int) this[this.tableSensorObservation.EquipmentIDRefColumn];
        set => this[this.tableSensorObservation.EquipmentIDRefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double SensorTemperature
      {
        get => (double) this[this.tableSensorObservation.SensorTemperatureColumn];
        set => this[this.tableSensorObservation.SensorTemperatureColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double RefTemperature
      {
        get => (double) this[this.tableSensorObservation.RefTemperatureColumn];
        set => this[this.tableSensorObservation.RefTemperatureColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double DeltaT
      {
        get => (double) this[this.tableSensorObservation.DeltaTColumn];
        set => this[this.tableSensorObservation.DeltaTColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte IsSwitchedOff
      {
        get
        {
          try
          {
            return (byte) this[this.tableSensorObservation.IsSwitchedOffColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'IsSwitchedOff' in table 'SensorObservation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSensorObservation.IsSwitchedOffColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsIsSwitchedOffNull()
      {
        return this.IsNull(this.tableSensorObservation.IsSwitchedOffColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetIsSwitchedOffNull()
      {
        this[this.tableSensorObservation.IsSwitchedOffColumn] = Convert.DBNull;
      }
    }

    public class TestbenchNominalValuesHistoryRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryDataTable tableTestbenchNominalValuesHistory;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestbenchNominalValuesHistoryRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTestbenchNominalValuesHistory = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ModificationDate
      {
        get => (DateTime) this[this.tableTestbenchNominalValuesHistory.ModificationDateColumn];
        set
        {
          this[this.tableTestbenchNominalValuesHistory.ModificationDateColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TestPointDataID
      {
        get => (int) this[this.tableTestbenchNominalValuesHistory.TestPointDataIDColumn];
        set => this[this.tableTestbenchNominalValuesHistory.TestPointDataIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int NominalValueID
      {
        get => (int) this[this.tableTestbenchNominalValuesHistory.NominalValueIDColumn];
        set => this[this.tableTestbenchNominalValuesHistory.NominalValueIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string NominalValue
      {
        get
        {
          try
          {
            return (string) this[this.tableTestbenchNominalValuesHistory.NominalValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NominalValue' in table 'TestbenchNominalValuesHistory' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestbenchNominalValuesHistory.NominalValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ValueDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableTestbenchNominalValuesHistory.ValueDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValueDescription' in table 'TestbenchNominalValuesHistory' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableTestbenchNominalValuesHistory.ValueDescriptionColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ModificationReason
      {
        get
        {
          try
          {
            return (string) this[this.tableTestbenchNominalValuesHistory.ModificationReasonColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ModificationReason' in table 'TestbenchNominalValuesHistory' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableTestbenchNominalValuesHistory.ModificationReasonColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNominalValueNull()
      {
        return this.IsNull(this.tableTestbenchNominalValuesHistory.NominalValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNominalValueNull()
      {
        this[this.tableTestbenchNominalValuesHistory.NominalValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsValueDescriptionNull()
      {
        return this.IsNull(this.tableTestbenchNominalValuesHistory.ValueDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetValueDescriptionNull()
      {
        this[this.tableTestbenchNominalValuesHistory.ValueDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsModificationReasonNull()
      {
        return this.IsNull(this.tableTestbenchNominalValuesHistory.ModificationReasonColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetModificationReasonNull()
      {
        this[this.tableTestbenchNominalValuesHistory.ModificationReasonColumn] = Convert.DBNull;
      }
    }

    public class ZRFunctionCompiledRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledDataTable tableZRFunctionCompiled;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ZRFunctionCompiledRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableZRFunctionCompiled = (ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FunctionNumber
      {
        get => (int) this[this.tableZRFunctionCompiled.FunctionNumberColumn];
        set => this[this.tableZRFunctionCompiled.FunctionNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short RecordOrder
      {
        get => (short) this[this.tableZRFunctionCompiled.RecordOrderColumn];
        set => this[this.tableZRFunctionCompiled.RecordOrderColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short RecordType
      {
        get
        {
          try
          {
            return (short) this[this.tableZRFunctionCompiled.RecordTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RecordType' in table 'ZRFunctionCompiled' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunctionCompiled.RecordTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Name
      {
        get
        {
          try
          {
            return (string) this[this.tableZRFunctionCompiled.NameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Name' in table 'ZRFunctionCompiled' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunctionCompiled.NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int Offset
      {
        get
        {
          try
          {
            return (int) this[this.tableZRFunctionCompiled.OffsetColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Offset' in table 'ZRFunctionCompiled' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunctionCompiled.OffsetColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte[] Codes
      {
        get
        {
          try
          {
            return (byte[]) this[this.tableZRFunctionCompiled.CodesColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Codes' in table 'ZRFunctionCompiled' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRFunctionCompiled.CodesColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRecordTypeNull() => this.IsNull(this.tableZRFunctionCompiled.RecordTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRecordTypeNull()
      {
        this[this.tableZRFunctionCompiled.RecordTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNameNull() => this.IsNull(this.tableZRFunctionCompiled.NameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNameNull() => this[this.tableZRFunctionCompiled.NameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsOffsetNull() => this.IsNull(this.tableZRFunctionCompiled.OffsetColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetOffsetNull()
      {
        this[this.tableZRFunctionCompiled.OffsetColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodesNull() => this.IsNull(this.tableZRFunctionCompiled.CodesColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodesNull() => this[this.tableZRFunctionCompiled.CodesColumn] = Convert.DBNull;
    }

    public class FactoryEquipmentPartlistRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistDataTable tableFactoryEquipmentPartlist;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal FactoryEquipmentPartlistRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableFactoryEquipmentPartlist = (ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PartlistID
      {
        get => (int) this[this.tableFactoryEquipmentPartlist.PartlistIDColumn];
        set => this[this.tableFactoryEquipmentPartlist.PartlistIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MainEquipmentID
      {
        get => (int) this[this.tableFactoryEquipmentPartlist.MainEquipmentIDColumn];
        set => this[this.tableFactoryEquipmentPartlist.MainEquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PartEquipmentID
      {
        get => (int) this[this.tableFactoryEquipmentPartlist.PartEquipmentIDColumn];
        set => this[this.tableFactoryEquipmentPartlist.PartEquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentIdentifier
      {
        get => (int) this[this.tableFactoryEquipmentPartlist.EquipmentIdentifierColumn];
        set => this[this.tableFactoryEquipmentPartlist.EquipmentIdentifierColumn] = (object) value;
      }
    }

    public class EquipmentPartlistCreationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationDataTable tableEquipmentPartlistCreation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EquipmentPartlistCreationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableEquipmentPartlistCreation = (ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PartlistID
      {
        get => (int) this[this.tableEquipmentPartlistCreation.PartlistIDColumn];
        set => this[this.tableEquipmentPartlistCreation.PartlistIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime CreationDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableEquipmentPartlistCreation.CreationDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CreationDate' in table 'EquipmentPartlistCreation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentPartlistCreation.CreationDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCreationDateNull()
      {
        return this.IsNull(this.tableEquipmentPartlistCreation.CreationDateColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCreationDateNull()
      {
        this[this.tableEquipmentPartlistCreation.CreationDateColumn] = Convert.DBNull;
      }
    }

    public class PTCardChannelCalibrationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationDataTable tablePTCardChannelCalibration;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PTCardChannelCalibrationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tablePTCardChannelCalibration = (ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentIDCard
      {
        get => (int) this[this.tablePTCardChannelCalibration.EquipmentIDCardColumn];
        set => this[this.tablePTCardChannelCalibration.EquipmentIDCardColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentIDCardChannel
      {
        get => (int) this[this.tablePTCardChannelCalibration.EquipmentIDCardChannelColumn];
        set
        {
          this[this.tablePTCardChannelCalibration.EquipmentIDCardChannelColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CalibrationID
      {
        get => (int) this[this.tablePTCardChannelCalibration.CalibrationIDColumn];
        set => this[this.tablePTCardChannelCalibration.CalibrationIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Resistance1_Device
      {
        get
        {
          try
          {
            return (double) this[this.tablePTCardChannelCalibration.Resistance1_DeviceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Resistance1_Device' in table 'PTCardChannelCalibration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePTCardChannelCalibration.Resistance1_DeviceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Resistance1_Ref
      {
        get
        {
          try
          {
            return (double) this[this.tablePTCardChannelCalibration.Resistance1_RefColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Resistance1_Ref' in table 'PTCardChannelCalibration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePTCardChannelCalibration.Resistance1_RefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Resistance2_Device
      {
        get
        {
          try
          {
            return (double) this[this.tablePTCardChannelCalibration.Resistance2_DeviceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Resistance2_Device' in table 'PTCardChannelCalibration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePTCardChannelCalibration.Resistance2_DeviceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Resistance2_Ref
      {
        get
        {
          try
          {
            return (double) this[this.tablePTCardChannelCalibration.Resistance2_RefColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Resistance2_Ref' in table 'PTCardChannelCalibration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePTCardChannelCalibration.Resistance2_RefColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ResistanceOffset
      {
        get
        {
          try
          {
            return (double) this[this.tablePTCardChannelCalibration.ResistanceOffsetColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ResistanceOffset' in table 'PTCardChannelCalibration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePTCardChannelCalibration.ResistanceOffsetColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double ResistanceGradient
      {
        get
        {
          try
          {
            return (double) this[this.tablePTCardChannelCalibration.ResistanceGradientColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ResistanceGradient' in table 'PTCardChannelCalibration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tablePTCardChannelCalibration.ResistanceGradientColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResistance1_DeviceNull()
      {
        return this.IsNull(this.tablePTCardChannelCalibration.Resistance1_DeviceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResistance1_DeviceNull()
      {
        this[this.tablePTCardChannelCalibration.Resistance1_DeviceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResistance1_RefNull()
      {
        return this.IsNull(this.tablePTCardChannelCalibration.Resistance1_RefColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResistance1_RefNull()
      {
        this[this.tablePTCardChannelCalibration.Resistance1_RefColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResistance2_DeviceNull()
      {
        return this.IsNull(this.tablePTCardChannelCalibration.Resistance2_DeviceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResistance2_DeviceNull()
      {
        this[this.tablePTCardChannelCalibration.Resistance2_DeviceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResistance2_RefNull()
      {
        return this.IsNull(this.tablePTCardChannelCalibration.Resistance2_RefColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResistance2_RefNull()
      {
        this[this.tablePTCardChannelCalibration.Resistance2_RefColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResistanceOffsetNull()
      {
        return this.IsNull(this.tablePTCardChannelCalibration.ResistanceOffsetColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResistanceOffsetNull()
      {
        this[this.tablePTCardChannelCalibration.ResistanceOffsetColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResistanceGradientNull()
      {
        return this.IsNull(this.tablePTCardChannelCalibration.ResistanceGradientColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResistanceGradientNull()
      {
        this[this.tablePTCardChannelCalibration.ResistanceGradientColumn] = Convert.DBNull;
      }
    }

    public class PTSensorCalibrationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationDataTable tablePTSensorCalibration;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal PTSensorCalibrationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tablePTSensorCalibration = (ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentIDSensor
      {
        get => (int) this[this.tablePTSensorCalibration.EquipmentIDSensorColumn];
        set => this[this.tablePTSensorCalibration.EquipmentIDSensorColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentIDCard
      {
        get => (int) this[this.tablePTSensorCalibration.EquipmentIDCardColumn];
        set => this[this.tablePTSensorCalibration.EquipmentIDCardColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CardChannel
      {
        get => (int) this[this.tablePTSensorCalibration.CardChannelColumn];
        set => this[this.tablePTSensorCalibration.CardChannelColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CalibrationID
      {
        get => (int) this[this.tablePTSensorCalibration.CalibrationIDColumn];
        set => this[this.tablePTSensorCalibration.CalibrationIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double T1
      {
        get => (double) this[this.tablePTSensorCalibration.T1Column];
        set => this[this.tablePTSensorCalibration.T1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double R1
      {
        get => (double) this[this.tablePTSensorCalibration.R1Column];
        set => this[this.tablePTSensorCalibration.R1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double T2
      {
        get => (double) this[this.tablePTSensorCalibration.T2Column];
        set => this[this.tablePTSensorCalibration.T2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double R2
      {
        get => (double) this[this.tablePTSensorCalibration.R2Column];
        set => this[this.tablePTSensorCalibration.R2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double T3
      {
        get => (double) this[this.tablePTSensorCalibration.T3Column];
        set => this[this.tablePTSensorCalibration.T3Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double R3
      {
        get => (double) this[this.tablePTSensorCalibration.R3Column];
        set => this[this.tablePTSensorCalibration.R3Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TDevice1
      {
        get => (double) this[this.tablePTSensorCalibration.TDevice1Column];
        set => this[this.tablePTSensorCalibration.TDevice1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TRef1
      {
        get => (double) this[this.tablePTSensorCalibration.TRef1Column];
        set => this[this.tablePTSensorCalibration.TRef1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TDevice2
      {
        get => (double) this[this.tablePTSensorCalibration.TDevice2Column];
        set => this[this.tablePTSensorCalibration.TDevice2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TRef2
      {
        get => (double) this[this.tablePTSensorCalibration.TRef2Column];
        set => this[this.tablePTSensorCalibration.TRef2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double R0
      {
        get => (double) this[this.tablePTSensorCalibration.R0Column];
        set => this[this.tablePTSensorCalibration.R0Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Alpha
      {
        get => (double) this[this.tablePTSensorCalibration.AlphaColumn];
        set => this[this.tablePTSensorCalibration.AlphaColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Beta
      {
        get => (double) this[this.tablePTSensorCalibration.BetaColumn];
        set => this[this.tablePTSensorCalibration.BetaColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TempOffset
      {
        get => (double) this[this.tablePTSensorCalibration.TempOffsetColumn];
        set => this[this.tablePTSensorCalibration.TempOffsetColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double TempGradient
      {
        get => (double) this[this.tablePTSensorCalibration.TempGradientColumn];
        set => this[this.tablePTSensorCalibration.TempGradientColumn] = (object) value;
      }
    }

    public class EtalonCalibrationRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationDataTable tableEtalonCalibration;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EtalonCalibrationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableEtalonCalibration = (ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tableEtalonCalibration.EquipmentIDColumn];
        set => this[this.tableEtalonCalibration.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CalibrationID
      {
        get => (int) this[this.tableEtalonCalibration.CalibrationIDColumn];
        set => this[this.tableEtalonCalibration.CalibrationIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CalibrationValueID
      {
        get => (int) this[this.tableEtalonCalibration.CalibrationValueIDColumn];
        set => this[this.tableEtalonCalibration.CalibrationValueIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CalibrationValue
      {
        get
        {
          try
          {
            return (string) this[this.tableEtalonCalibration.CalibrationValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CalibrationValue' in table 'EtalonCalibration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEtalonCalibration.CalibrationValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CalibrationValueDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableEtalonCalibration.CalibrationValueDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CalibrationValueDescription' in table 'EtalonCalibration' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEtalonCalibration.CalibrationValueDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCalibrationValueNull()
      {
        return this.IsNull(this.tableEtalonCalibration.CalibrationValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCalibrationValueNull()
      {
        this[this.tableEtalonCalibration.CalibrationValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCalibrationValueDescriptionNull()
      {
        return this.IsNull(this.tableEtalonCalibration.CalibrationValueDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCalibrationValueDescriptionNull()
      {
        this[this.tableEtalonCalibration.CalibrationValueDescriptionColumn] = Convert.DBNull;
      }
    }

    public class UserPermissionsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsDataTable tableUserPermissions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal UserPermissionsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableUserPermissions = (ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PermissionId
      {
        get => (int) this[this.tableUserPermissions.PermissionIdColumn];
        set => this[this.tableUserPermissions.PermissionIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int UserId
      {
        get => (int) this[this.tableUserPermissions.UserIdColumn];
        set => this[this.tableUserPermissions.UserIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PermissionName
      {
        get
        {
          try
          {
            return (string) this[this.tableUserPermissions.PermissionNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PermissionName' in table 'UserPermissions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableUserPermissions.PermissionNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool PermissionValue
      {
        get
        {
          try
          {
            return (bool) this[this.tableUserPermissions.PermissionValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PermissionValue' in table 'UserPermissions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableUserPermissions.PermissionValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPermissionNameNull()
      {
        return this.IsNull(this.tableUserPermissions.PermissionNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPermissionNameNull()
      {
        this[this.tableUserPermissions.PermissionNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPermissionValueNull()
      {
        return this.IsNull(this.tableUserPermissions.PermissionValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPermissionValueNull()
      {
        this[this.tableUserPermissions.PermissionValueColumn] = Convert.DBNull;
      }
    }

    public class MinomatListRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MinomatListDataTable tableMinomatList;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinomatListRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMinomatList = (ZR_ClassLibrary.Schema_Access.Schema.MinomatListDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string GsmID
      {
        get => (string) this[this.tableMinomatList.GsmIDColumn];
        set => this[this.tableMinomatList.GsmIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MinolID
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.MinolIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MinolID' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.MinolIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChallengeKey
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.ChallengeKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChallengeKey' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.ChallengeKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SessionKey
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.SessionKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SessionKey' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.SessionKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChallengeKeyOld
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.ChallengeKeyOldColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChallengeKeyOld' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.ChallengeKeyOldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SessionKeyOld
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.SessionKeyOldColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SessionKeyOld' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.SessionKeyOldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ConnectionDate
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.ConnectionDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ConnectionDate' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.ConnectionDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ConnectionLog
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.ConnectionLogColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ConnectionLog' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.ConnectionLogColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string GsmIDEncoded
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.GsmIDEncodedColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'GsmIDEncoded' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.GsmIDEncodedColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChallengeKeyEncoded
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.ChallengeKeyEncodedColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChallengeKeyEncoded' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.ChallengeKeyEncodedColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string GsmIDEncodedOld
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.GsmIDEncodedOldColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'GsmIDEncodedOld' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.GsmIDEncodedOldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChallengeKeyEncodedOld
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.ChallengeKeyEncodedOldColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChallengeKeyEncodedOld' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.ChallengeKeyEncodedOldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMinolIDNull() => this.IsNull(this.tableMinomatList.MinolIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMinolIDNull() => this[this.tableMinomatList.MinolIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChallengeKeyNull() => this.IsNull(this.tableMinomatList.ChallengeKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChallengeKeyNull()
      {
        this[this.tableMinomatList.ChallengeKeyColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSessionKeyNull() => this.IsNull(this.tableMinomatList.SessionKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSessionKeyNull()
      {
        this[this.tableMinomatList.SessionKeyColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChallengeKeyOldNull()
      {
        return this.IsNull(this.tableMinomatList.ChallengeKeyOldColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChallengeKeyOldNull()
      {
        this[this.tableMinomatList.ChallengeKeyOldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSessionKeyOldNull() => this.IsNull(this.tableMinomatList.SessionKeyOldColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSessionKeyOldNull()
      {
        this[this.tableMinomatList.SessionKeyOldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsConnectionDateNull() => this.IsNull(this.tableMinomatList.ConnectionDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetConnectionDateNull()
      {
        this[this.tableMinomatList.ConnectionDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsConnectionLogNull() => this.IsNull(this.tableMinomatList.ConnectionLogColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetConnectionLogNull()
      {
        this[this.tableMinomatList.ConnectionLogColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsGsmIDEncodedNull() => this.IsNull(this.tableMinomatList.GsmIDEncodedColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetGsmIDEncodedNull()
      {
        this[this.tableMinomatList.GsmIDEncodedColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChallengeKeyEncodedNull()
      {
        return this.IsNull(this.tableMinomatList.ChallengeKeyEncodedColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChallengeKeyEncodedNull()
      {
        this[this.tableMinomatList.ChallengeKeyEncodedColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsGsmIDEncodedOldNull()
      {
        return this.IsNull(this.tableMinomatList.GsmIDEncodedOldColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetGsmIDEncodedOldNull()
      {
        this[this.tableMinomatList.GsmIDEncodedOldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChallengeKeyEncodedOldNull()
      {
        return this.IsNull(this.tableMinomatList.ChallengeKeyEncodedOldColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChallengeKeyEncodedOldNull()
      {
        this[this.tableMinomatList.ChallengeKeyEncodedOldColumn] = Convert.DBNull;
      }
    }

    public class InstallationChangeLogRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogDataTable tableInstallationChangeLog;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal InstallationChangeLogRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableInstallationChangeLog = (ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int InstallationId
      {
        get => (int) this[this.tableInstallationChangeLog.InstallationIdColumn];
        set => this[this.tableInstallationChangeLog.InstallationIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ChangeTime
      {
        get => (DateTime) this[this.tableInstallationChangeLog.ChangeTimeColumn];
        set => this[this.tableInstallationChangeLog.ChangeTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SoftwareVersion
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.SoftwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SoftwareVersion' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.SoftwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LicenseName
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.LicenseNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LicenseName' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.LicenseNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LicenseCustomer
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.LicenseCustomerColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LicenseCustomer' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.LicenseCustomerColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LicenseGeneratorID
      {
        get
        {
          try
          {
            return (int) this[this.tableInstallationChangeLog.LicenseGeneratorIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LicenseGeneratorID' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.LicenseGeneratorIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime LicenseGenerationTime
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableInstallationChangeLog.LicenseGenerationTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LicenseGenerationTime' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.LicenseGenerationTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string BasicState
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.BasicStateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'BasicState' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.BasicStateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string State1
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.State1Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'State1' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.State1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string State2
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.State2Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'State2' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.State2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChangeInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.ChangeInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChangeInfo' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.ChangeInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MainEquipmentID
      {
        get
        {
          try
          {
            return (int) this[this.tableInstallationChangeLog.MainEquipmentIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MainEquipmentID' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.MainEquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSoftwareVersionNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.SoftwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSoftwareVersionNull()
      {
        this[this.tableInstallationChangeLog.SoftwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLicenseNameNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.LicenseNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLicenseNameNull()
      {
        this[this.tableInstallationChangeLog.LicenseNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLicenseCustomerNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.LicenseCustomerColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLicenseCustomerNull()
      {
        this[this.tableInstallationChangeLog.LicenseCustomerColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLicenseGeneratorIDNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.LicenseGeneratorIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLicenseGeneratorIDNull()
      {
        this[this.tableInstallationChangeLog.LicenseGeneratorIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLicenseGenerationTimeNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.LicenseGenerationTimeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLicenseGenerationTimeNull()
      {
        this[this.tableInstallationChangeLog.LicenseGenerationTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsBasicStateNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.BasicStateColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetBasicStateNull()
      {
        this[this.tableInstallationChangeLog.BasicStateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsState1Null() => this.IsNull(this.tableInstallationChangeLog.State1Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetState1Null()
      {
        this[this.tableInstallationChangeLog.State1Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsState2Null() => this.IsNull(this.tableInstallationChangeLog.State2Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetState2Null()
      {
        this[this.tableInstallationChangeLog.State2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChangeInfoNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.ChangeInfoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChangeInfoNull()
      {
        this[this.tableInstallationChangeLog.ChangeInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMainEquipmentIDNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.MainEquipmentIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMainEquipmentIDNull()
      {
        this[this.tableInstallationChangeLog.MainEquipmentIDColumn] = Convert.DBNull;
      }
    }

    public class InstallationsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.InstallationsDataTable tableInstallations;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal InstallationsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableInstallations = (ZR_ClassLibrary.Schema_Access.Schema.InstallationsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int InstallationId
      {
        get => (int) this[this.tableInstallations.InstallationIdColumn];
        set => this[this.tableInstallations.InstallationIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PcName
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallations.PcNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PcName' in table 'Installations' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallations.PcNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InstallationPath
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallations.InstallationPathColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InstallationPath' in table 'Installations' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallations.InstallationPathColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InstallataionName
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallations.InstallataionNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InstallataionName' in table 'Installations' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallations.InstallataionNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPcNameNull() => this.IsNull(this.tableInstallations.PcNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPcNameNull() => this[this.tableInstallations.PcNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInstallationPathNull()
      {
        return this.IsNull(this.tableInstallations.InstallationPathColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInstallationPathNull()
      {
        this[this.tableInstallations.InstallationPathColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInstallataionNameNull()
      {
        return this.IsNull(this.tableInstallations.InstallataionNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInstallataionNameNull()
      {
        this[this.tableInstallations.InstallataionNameColumn] = Convert.DBNull;
      }
    }

    public class InstallationUsersRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersDataTable tableInstallationUsers;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal InstallationUsersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableInstallationUsers = (ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int InstallationId
      {
        get => (int) this[this.tableInstallationUsers.InstallationIdColumn];
        set => this[this.tableInstallationUsers.InstallationIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ChangeTime
      {
        get => (DateTime) this[this.tableInstallationUsers.ChangeTimeColumn];
        set => this[this.tableInstallationUsers.ChangeTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int UserId
      {
        get
        {
          try
          {
            return (int) this[this.tableInstallationUsers.UserIdColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UserId' in table 'InstallationUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationUsers.UserIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUserIdNull() => this.IsNull(this.tableInstallationUsers.UserIdColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUserIdNull()
      {
        this[this.tableInstallationUsers.UserIdColumn] = Convert.DBNull;
      }
    }

    public class ChangeableParametersRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersDataTable tableChangeableParameters;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ChangeableParametersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableChangeableParameters = (ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ParameterID
      {
        get => (int) this[this.tableChangeableParameters.ParameterIDColumn];
        set => this[this.tableChangeableParameters.ParameterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Name
      {
        get
        {
          try
          {
            return (string) this[this.tableChangeableParameters.NameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Name' in table 'ChangeableParameters' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableChangeableParameters.NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterType
      {
        get
        {
          try
          {
            return (string) this[this.tableChangeableParameters.ParameterTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterType' in table 'ChangeableParameters' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableChangeableParameters.ParameterTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MinValue
      {
        get
        {
          try
          {
            return (string) this[this.tableChangeableParameters.MinValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MinValue' in table 'ChangeableParameters' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableChangeableParameters.MinValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MaxValue
      {
        get
        {
          try
          {
            return (string) this[this.tableChangeableParameters.MaxValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MaxValue' in table 'ChangeableParameters' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableChangeableParameters.MaxValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ValueList
      {
        get
        {
          try
          {
            return (string) this[this.tableChangeableParameters.ValueListColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValueList' in table 'ChangeableParameters' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableChangeableParameters.ValueListColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterEnvironment
      {
        get
        {
          try
          {
            return (string) this[this.tableChangeableParameters.ParameterEnvironmentColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterEnvironment' in table 'ChangeableParameters' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableChangeableParameters.ParameterEnvironmentColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNameNull() => this.IsNull(this.tableChangeableParameters.NameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNameNull() => this[this.tableChangeableParameters.NameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterTypeNull()
      {
        return this.IsNull(this.tableChangeableParameters.ParameterTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterTypeNull()
      {
        this[this.tableChangeableParameters.ParameterTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMinValueNull() => this.IsNull(this.tableChangeableParameters.MinValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMinValueNull()
      {
        this[this.tableChangeableParameters.MinValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMaxValueNull() => this.IsNull(this.tableChangeableParameters.MaxValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMaxValueNull()
      {
        this[this.tableChangeableParameters.MaxValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsValueListNull() => this.IsNull(this.tableChangeableParameters.ValueListColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetValueListNull()
      {
        this[this.tableChangeableParameters.ValueListColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterEnvironmentNull()
      {
        return this.IsNull(this.tableChangeableParameters.ParameterEnvironmentColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterEnvironmentNull()
      {
        this[this.tableChangeableParameters.ParameterEnvironmentColumn] = Convert.DBNull;
      }
    }

    public class GmmImagesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.GmmImagesDataTable tableGmmImages;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal GmmImagesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGmmImages = (ZR_ClassLibrary.Schema_Access.Schema.GmmImagesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ImageID
      {
        get => (int) this[this.tableGmmImages.ImageIDColumn];
        set => this[this.tableGmmImages.ImageIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short ImageGroup
      {
        get
        {
          try
          {
            return (short) this[this.tableGmmImages.ImageGroupColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ImageGroup' in table 'GmmImages' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGmmImages.ImageGroupColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Name
      {
        get
        {
          try
          {
            return (string) this[this.tableGmmImages.NameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Name' in table 'GmmImages' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGmmImages.NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte[] ImageData
      {
        get
        {
          try
          {
            return (byte[]) this[this.tableGmmImages.ImageDataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ImageData' in table 'GmmImages' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGmmImages.ImageDataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsImageGroupNull() => this.IsNull(this.tableGmmImages.ImageGroupColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetImageGroupNull()
      {
        this[this.tableGmmImages.ImageGroupColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNameNull() => this.IsNull(this.tableGmmImages.NameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNameNull() => this[this.tableGmmImages.NameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsImageDataNull() => this.IsNull(this.tableGmmImages.ImageDataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetImageDataNull() => this[this.tableGmmImages.ImageDataColumn] = Convert.DBNull;
    }

    public class ConnectionSettingsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsDataTable tableConnectionSettings;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ConnectionSettingsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableConnectionSettings = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ConnectionSettingsID
      {
        get => (int) this[this.tableConnectionSettings.ConnectionSettingsIDColumn];
        set => this[this.tableConnectionSettings.ConnectionSettingsIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ParameterID
      {
        get => (int) this[this.tableConnectionSettings.ParameterIDColumn];
        set => this[this.tableConnectionSettings.ParameterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterValue
      {
        get
        {
          return this.IsParameterValueNull() ? string.Empty : (string) this[this.tableConnectionSettings.ParameterValueColumn];
        }
        set => this[this.tableConnectionSettings.ParameterValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterUsing
      {
        get
        {
          return this.IsParameterUsingNull() ? string.Empty : (string) this[this.tableConnectionSettings.ParameterUsingColumn];
        }
        set => this[this.tableConnectionSettings.ParameterUsingColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterValueNull()
      {
        return this.IsNull(this.tableConnectionSettings.ParameterValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterValueNull()
      {
        this[this.tableConnectionSettings.ParameterValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterUsingNull()
      {
        return this.IsNull(this.tableConnectionSettings.ParameterUsingColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterUsingNull()
      {
        this[this.tableConnectionSettings.ParameterUsingColumn] = Convert.DBNull;
      }
    }

    public class ConnectionItemsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsDataTable tableConnectionItems;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ConnectionItemsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableConnectionItems = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ConnectionItemID
      {
        get => (int) this[this.tableConnectionItems.ConnectionItemIDColumn];
        set => this[this.tableConnectionItems.ConnectionItemIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ItemGroupID
      {
        get
        {
          try
          {
            return (int) this[this.tableConnectionItems.ItemGroupIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ItemGroupID' in table 'ConnectionItems' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionItems.ItemGroupIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ItemType
      {
        get
        {
          try
          {
            return (string) this[this.tableConnectionItems.ItemTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ItemType' in table 'ConnectionItems' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionItems.ItemTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ItemOrder
      {
        get
        {
          try
          {
            return (int) this[this.tableConnectionItems.ItemOrderColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ItemOrder' in table 'ConnectionItems' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionItems.ItemOrderColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ImageID
      {
        get
        {
          try
          {
            return (int) this[this.tableConnectionItems.ImageIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ImageID' in table 'ConnectionItems' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionItems.ImageIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PermissionKey
      {
        get
        {
          try
          {
            return (string) this[this.tableConnectionItems.PermissionKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PermissionKey' in table 'ConnectionItems' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionItems.PermissionKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Name
      {
        get
        {
          try
          {
            return (string) this[this.tableConnectionItems.NameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Name' in table 'ConnectionItems' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionItems.NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableConnectionItems.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'ConnectionItems' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionItems.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TypeClassification
      {
        get
        {
          try
          {
            return (string) this[this.tableConnectionItems.TypeClassificationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TypeClassification' in table 'ConnectionItems' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionItems.TypeClassificationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Manufacturer
      {
        get
        {
          try
          {
            return (string) this[this.tableConnectionItems.ManufacturerColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Manufacturer' in table 'ConnectionItems' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionItems.ManufacturerColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Medium
      {
        get
        {
          try
          {
            return (string) this[this.tableConnectionItems.MediumColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Medium' in table 'ConnectionItems' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionItems.MediumColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Generation
      {
        get
        {
          try
          {
            return (string) this[this.tableConnectionItems.GenerationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Generation' in table 'ConnectionItems' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionItems.GenerationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsItemGroupIDNull() => this.IsNull(this.tableConnectionItems.ItemGroupIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetItemGroupIDNull()
      {
        this[this.tableConnectionItems.ItemGroupIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsItemTypeNull() => this.IsNull(this.tableConnectionItems.ItemTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetItemTypeNull()
      {
        this[this.tableConnectionItems.ItemTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsItemOrderNull() => this.IsNull(this.tableConnectionItems.ItemOrderColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetItemOrderNull()
      {
        this[this.tableConnectionItems.ItemOrderColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsImageIDNull() => this.IsNull(this.tableConnectionItems.ImageIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetImageIDNull()
      {
        this[this.tableConnectionItems.ImageIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPermissionKeyNull()
      {
        return this.IsNull(this.tableConnectionItems.PermissionKeyColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPermissionKeyNull()
      {
        this[this.tableConnectionItems.PermissionKeyColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNameNull() => this.IsNull(this.tableConnectionItems.NameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNameNull() => this[this.tableConnectionItems.NameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableConnectionItems.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableConnectionItems.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTypeClassificationNull()
      {
        return this.IsNull(this.tableConnectionItems.TypeClassificationColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTypeClassificationNull()
      {
        this[this.tableConnectionItems.TypeClassificationColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsManufacturerNull() => this.IsNull(this.tableConnectionItems.ManufacturerColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetManufacturerNull()
      {
        this[this.tableConnectionItems.ManufacturerColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMediumNull() => this.IsNull(this.tableConnectionItems.MediumColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMediumNull() => this[this.tableConnectionItems.MediumColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsGenerationNull() => this.IsNull(this.tableConnectionItems.GenerationColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetGenerationNull()
      {
        this[this.tableConnectionItems.GenerationColumn] = Convert.DBNull;
      }
    }

    public class ConnectionProfilesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesDataTable tableConnectionProfiles;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ConnectionProfilesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableConnectionProfiles = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ConnectionProfileID
      {
        get => (int) this[this.tableConnectionProfiles.ConnectionProfileIDColumn];
        set => this[this.tableConnectionProfiles.ConnectionProfileIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentModelID
      {
        get
        {
          try
          {
            return (int) this[this.tableConnectionProfiles.EquipmentModelIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EquipmentModelID' in table 'ConnectionProfiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionProfiles.EquipmentModelIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int DeviceModelID
      {
        get
        {
          try
          {
            return (int) this[this.tableConnectionProfiles.DeviceModelIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DeviceModelID' in table 'ConnectionProfiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionProfiles.DeviceModelIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ProfileTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableConnectionProfiles.ProfileTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ProfileTypeID' in table 'ConnectionProfiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionProfiles.ProfileTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ConnectionSettingsID
      {
        get
        {
          try
          {
            return (int) this[this.tableConnectionProfiles.ConnectionSettingsIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ConnectionSettingsID' in table 'ConnectionProfiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionProfiles.ConnectionSettingsIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEquipmentModelIDNull()
      {
        return this.IsNull(this.tableConnectionProfiles.EquipmentModelIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEquipmentModelIDNull()
      {
        this[this.tableConnectionProfiles.EquipmentModelIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDeviceModelIDNull()
      {
        return this.IsNull(this.tableConnectionProfiles.DeviceModelIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDeviceModelIDNull()
      {
        this[this.tableConnectionProfiles.DeviceModelIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsProfileTypeIDNull()
      {
        return this.IsNull(this.tableConnectionProfiles.ProfileTypeIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetProfileTypeIDNull()
      {
        this[this.tableConnectionProfiles.ProfileTypeIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsConnectionSettingsIDNull()
      {
        return this.IsNull(this.tableConnectionProfiles.ConnectionSettingsIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetConnectionSettingsIDNull()
      {
        this[this.tableConnectionProfiles.ConnectionSettingsIDColumn] = Convert.DBNull;
      }
    }

    public class ServiceTaskResultRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultDataTable tableServiceTaskResult;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ServiceTaskResultRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableServiceTaskResult = (ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime TimePoint
      {
        get => (DateTime) this[this.tableServiceTaskResult.TimePointColumn];
        set => this[this.tableServiceTaskResult.TimePointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SerialNumber
      {
        get => (string) this[this.tableServiceTaskResult.SerialNumberColumn];
        set => this[this.tableServiceTaskResult.SerialNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string JobID
      {
        get
        {
          try
          {
            return (string) this[this.tableServiceTaskResult.JobIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'JobID' in table 'ServiceTaskResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableServiceTaskResult.JobIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MeterID
      {
        get
        {
          try
          {
            return (string) this[this.tableServiceTaskResult.MeterIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterID' in table 'ServiceTaskResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableServiceTaskResult.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MethodName
      {
        get => (string) this[this.tableServiceTaskResult.MethodNameColumn];
        set => this[this.tableServiceTaskResult.MethodNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ResultType
      {
        get => (string) this[this.tableServiceTaskResult.ResultTypeColumn];
        set => this[this.tableServiceTaskResult.ResultTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ResultObject
      {
        get => (string) this[this.tableServiceTaskResult.ResultObjectColumn];
        set => this[this.tableServiceTaskResult.ResultObjectColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RawData
      {
        get
        {
          try
          {
            return (string) this[this.tableServiceTaskResult.RawDataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RawData' in table 'ServiceTaskResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableServiceTaskResult.RawDataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsJobIDNull() => this.IsNull(this.tableServiceTaskResult.JobIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetJobIDNull() => this[this.tableServiceTaskResult.JobIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterIDNull() => this.IsNull(this.tableServiceTaskResult.MeterIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterIDNull()
      {
        this[this.tableServiceTaskResult.MeterIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRawDataNull() => this.IsNull(this.tableServiceTaskResult.RawDataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRawDataNull()
      {
        this[this.tableServiceTaskResult.RawDataColumn] = Convert.DBNull;
      }
    }

    public class MeterMSSRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterMSSDataTable tableMeterMSS;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterMSSRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterMSS = (ZR_ClassLibrary.Schema_Access.Schema.MeterMSSDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MeterID
      {
        get => (string) this[this.tableMeterMSS.MeterIDColumn];
        set => this[this.tableMeterMSS.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SerialNumber
      {
        get => (string) this[this.tableMeterMSS.SerialNumberColumn];
        set => this[this.tableMeterMSS.SerialNumberColumn] = (object) value;
      }
    }

    public class TestbenchFlowSettingsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsDataTable tableTestbenchFlowSettings;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TestbenchFlowSettingsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTestbenchFlowSettings = (ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime CreationDate
      {
        get => (DateTime) this[this.tableTestbenchFlowSettings.CreationDateColumn];
        set => this[this.tableTestbenchFlowSettings.CreationDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tableTestbenchFlowSettings.EquipmentIDColumn];
        set => this[this.tableTestbenchFlowSettings.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short TestbenchLine
      {
        get
        {
          try
          {
            return (short) this[this.tableTestbenchFlowSettings.TestbenchLineColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TestbenchLine' in table 'TestbenchFlowSettings' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestbenchFlowSettings.TestbenchLineColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short NumberOfDevices
      {
        get
        {
          try
          {
            return (short) this[this.tableTestbenchFlowSettings.NumberOfDevicesColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NumberOfDevices' in table 'TestbenchFlowSettings' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestbenchFlowSettings.NumberOfDevicesColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DeviceType
      {
        get
        {
          try
          {
            return (string) this[this.tableTestbenchFlowSettings.DeviceTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DeviceType' in table 'TestbenchFlowSettings' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestbenchFlowSettings.DeviceTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int NominalFlow
      {
        get
        {
          try
          {
            return (int) this[this.tableTestbenchFlowSettings.NominalFlowColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'NominalFlow' in table 'TestbenchFlowSettings' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestbenchFlowSettings.NominalFlowColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string FlowSettings
      {
        get
        {
          try
          {
            return (string) this[this.tableTestbenchFlowSettings.FlowSettingsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FlowSettings' in table 'TestbenchFlowSettings' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTestbenchFlowSettings.FlowSettingsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestbenchLineNull()
      {
        return this.IsNull(this.tableTestbenchFlowSettings.TestbenchLineColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestbenchLineNull()
      {
        this[this.tableTestbenchFlowSettings.TestbenchLineColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNumberOfDevicesNull()
      {
        return this.IsNull(this.tableTestbenchFlowSettings.NumberOfDevicesColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNumberOfDevicesNull()
      {
        this[this.tableTestbenchFlowSettings.NumberOfDevicesColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDeviceTypeNull()
      {
        return this.IsNull(this.tableTestbenchFlowSettings.DeviceTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDeviceTypeNull()
      {
        this[this.tableTestbenchFlowSettings.DeviceTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNominalFlowNull()
      {
        return this.IsNull(this.tableTestbenchFlowSettings.NominalFlowColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNominalFlowNull()
      {
        this[this.tableTestbenchFlowSettings.NominalFlowColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFlowSettingsNull()
      {
        return this.IsNull(this.tableTestbenchFlowSettings.FlowSettingsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFlowSettingsNull()
      {
        this[this.tableTestbenchFlowSettings.FlowSettingsColumn] = Convert.DBNull;
      }
    }

    public class MinomatConnectionLogsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsDataTable tableMinomatConnectionLogs;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinomatConnectionLogsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMinomatConnectionLogs = (ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ConnectionID
      {
        get => (string) this[this.tableMinomatConnectionLogs.ConnectionIDColumn];
        set => this[this.tableMinomatConnectionLogs.ConnectionIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TimePoint
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatConnectionLogs.TimePointColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TimePoint' in table 'MinomatConnectionLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatConnectionLogs.TimePointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ClientIP
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatConnectionLogs.ClientIPColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ClientIP' in table 'MinomatConnectionLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatConnectionLogs.ClientIPColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string GsmID
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatConnectionLogs.GsmIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'GsmID' in table 'MinomatConnectionLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatConnectionLogs.GsmIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTimePointNull() => this.IsNull(this.tableMinomatConnectionLogs.TimePointColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTimePointNull()
      {
        this[this.tableMinomatConnectionLogs.TimePointColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsClientIPNull() => this.IsNull(this.tableMinomatConnectionLogs.ClientIPColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetClientIPNull()
      {
        this[this.tableMinomatConnectionLogs.ClientIPColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsGsmIDNull() => this.IsNull(this.tableMinomatConnectionLogs.GsmIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetGsmIDNull()
      {
        this[this.tableMinomatConnectionLogs.GsmIDColumn] = Convert.DBNull;
      }
    }

    public class MinomatDataLogsRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsDataTable tableMinomatDataLogs;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinomatDataLogsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMinomatDataLogs = (ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MinomatDataLogID
      {
        get => (string) this[this.tableMinomatDataLogs.MinomatDataLogIDColumn];
        set => this[this.tableMinomatDataLogs.MinomatDataLogIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ConnectionID
      {
        get => (string) this[this.tableMinomatDataLogs.ConnectionIDColumn];
        set => this[this.tableMinomatDataLogs.ConnectionIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TimePoint
      {
        get => (string) this[this.tableMinomatDataLogs.TimePointColumn];
        set => this[this.tableMinomatDataLogs.TimePointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RawData
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatDataLogs.RawDataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RawData' in table 'MinomatDataLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatDataLogs.RawDataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChallengeKey
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatDataLogs.ChallengeKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChallengeKey' in table 'MinomatDataLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatDataLogs.ChallengeKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SessionKey
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatDataLogs.SessionKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SessionKey' in table 'MinomatDataLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatDataLogs.SessionKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsIncoming
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinomatDataLogs.IsIncomingColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'IsIncoming' in table 'MinomatDataLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatDataLogs.IsIncomingColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRawDataNull() => this.IsNull(this.tableMinomatDataLogs.RawDataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRawDataNull()
      {
        this[this.tableMinomatDataLogs.RawDataColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChallengeKeyNull() => this.IsNull(this.tableMinomatDataLogs.ChallengeKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChallengeKeyNull()
      {
        this[this.tableMinomatDataLogs.ChallengeKeyColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSessionKeyNull() => this.IsNull(this.tableMinomatDataLogs.SessionKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSessionKeyNull()
      {
        this[this.tableMinomatDataLogs.SessionKeyColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsIsIncomingNull() => this.IsNull(this.tableMinomatDataLogs.IsIncomingColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetIsIncomingNull()
      {
        this[this.tableMinomatDataLogs.IsIncomingColumn] = Convert.DBNull;
      }
    }

    public class MeterChangesRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterChangesDataTable tableMeterChanges;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterChangesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterChanges = (ZR_ClassLibrary.Schema_Access.Schema.MeterChangesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ChangeID
      {
        get => (int) this[this.tableMeterChanges.ChangeIDColumn];
        set => this[this.tableMeterChanges.ChangeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterChanges.MeterIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterID' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ChangeDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableMeterChanges.ChangeDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChangeDate' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.ChangeDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterInfoID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterChanges.MeterInfoIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterInfoID' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.MeterInfoIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SerialNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterChanges.SerialNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SerialNr' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.SerialNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ProductionDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableMeterChanges.ProductionDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ProductionDate' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.ProductionDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ApprovalDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableMeterChanges.ApprovalDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalDate' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.ApprovalDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string OrderNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterChanges.OrderNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'OrderNr' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.OrderNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterIDNull() => this.IsNull(this.tableMeterChanges.MeterIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterIDNull() => this[this.tableMeterChanges.MeterIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChangeDateNull() => this.IsNull(this.tableMeterChanges.ChangeDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChangeDateNull()
      {
        this[this.tableMeterChanges.ChangeDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterInfoIDNull() => this.IsNull(this.tableMeterChanges.MeterInfoIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterInfoIDNull()
      {
        this[this.tableMeterChanges.MeterInfoIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSerialNrNull() => this.IsNull(this.tableMeterChanges.SerialNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSerialNrNull() => this[this.tableMeterChanges.SerialNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsProductionDateNull()
      {
        return this.IsNull(this.tableMeterChanges.ProductionDateColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetProductionDateNull()
      {
        this[this.tableMeterChanges.ProductionDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalDateNull() => this.IsNull(this.tableMeterChanges.ApprovalDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalDateNull()
      {
        this[this.tableMeterChanges.ApprovalDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsOrderNrNull() => this.IsNull(this.tableMeterChanges.OrderNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetOrderNrNull() => this[this.tableMeterChanges.OrderNrColumn] = Convert.DBNull;
    }

    public class TransducerPalletRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletDataTable tableTransducerPallet;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TransducerPalletRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTransducerPallet = (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PalletID
      {
        get => (int) this[this.tableTransducerPallet.PalletIDColumn];
        set => this[this.tableTransducerPallet.PalletIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PalletNumber
      {
        get => (string) this[this.tableTransducerPallet.PalletNumberColumn];
        set => this[this.tableTransducerPallet.PalletNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PalletTypeID
      {
        get => (int) this[this.tableTransducerPallet.PalletTypeIDColumn];
        set => this[this.tableTransducerPallet.PalletTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime PalletCreationDate
      {
        get => (DateTime) this[this.tableTransducerPallet.PalletCreationDateColumn];
        set => this[this.tableTransducerPallet.PalletCreationDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CreatorID
      {
        get => (int) this[this.tableTransducerPallet.CreatorIDColumn];
        set => this[this.tableTransducerPallet.CreatorIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime LastModificationDate
      {
        get => (DateTime) this[this.tableTransducerPallet.LastModificationDateColumn];
        set => this[this.tableTransducerPallet.LastModificationDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int Throughputs
      {
        get => (int) this[this.tableTransducerPallet.ThroughputsColumn];
        set => this[this.tableTransducerPallet.ThroughputsColumn] = (object) value;
      }
    }

    public class TransducerPalletStateRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateDataTable tableTransducerPalletState;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TransducerPalletStateRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTransducerPalletState = (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PalletID
      {
        get => (int) this[this.tableTransducerPalletState.PalletIDColumn];
        set => this[this.tableTransducerPalletState.PalletIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterID
      {
        get => (int) this[this.tableTransducerPalletState.MeterIDColumn];
        set => this[this.tableTransducerPalletState.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PalletPlace
      {
        get => (int) this[this.tableTransducerPalletState.PalletPlaceColumn];
        set => this[this.tableTransducerPalletState.PalletPlaceColumn] = (object) value;
      }
    }

    public class TransducerPalletTypeRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeDataTable tableTransducerPalletType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal TransducerPalletTypeRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableTransducerPalletType = (ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PalletTypeID
      {
        get => (int) this[this.tableTransducerPalletType.PalletTypeIDColumn];
        set => this[this.tableTransducerPalletType.PalletTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PalletDescription
      {
        get => (string) this[this.tableTransducerPalletType.PalletDescriptionColumn];
        set => this[this.tableTransducerPalletType.PalletDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte PalletColumns
      {
        get => (byte) this[this.tableTransducerPalletType.PalletColumnsColumn];
        set => this[this.tableTransducerPalletType.PalletColumnsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte PalletRows
      {
        get => (byte) this[this.tableTransducerPalletType.PalletRowsColumn];
        set => this[this.tableTransducerPalletType.PalletRowsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string UnusablePlaces
      {
        get
        {
          try
          {
            return (string) this[this.tableTransducerPalletType.UnusablePlacesColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UnusablePlaces' in table 'TransducerPalletType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableTransducerPalletType.UnusablePlacesColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TransducerType
      {
        get => (int) this[this.tableTransducerPalletType.TransducerTypeColumn];
        set => this[this.tableTransducerPalletType.TransducerTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUnusablePlacesNull()
      {
        return this.IsNull(this.tableTransducerPalletType.UnusablePlacesColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUnusablePlacesNull()
      {
        this[this.tableTransducerPalletType.UnusablePlacesColumn] = Convert.DBNull;
      }
    }

    public class ConnectionItemParametersRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersDataTable tableConnectionItemParameters;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ConnectionItemParametersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableConnectionItemParameters = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ConnectionItemID
      {
        get => (int) this[this.tableConnectionItemParameters.ConnectionItemIDColumn];
        set => this[this.tableConnectionItemParameters.ConnectionItemIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ConnectionItemParameter
      {
        get => (int) this[this.tableConnectionItemParameters.ConnectionItemParameterColumn];
        set
        {
          this[this.tableConnectionItemParameters.ConnectionItemParameterColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ParameterOrder
      {
        get => (int) this[this.tableConnectionItemParameters.ParameterOrderColumn];
        set => this[this.tableConnectionItemParameters.ParameterOrderColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterValue
      {
        get
        {
          try
          {
            return (string) this[this.tableConnectionItemParameters.ParameterValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterValue' in table 'ConnectionItemParameters' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionItemParameters.ParameterValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterValueNull()
      {
        return this.IsNull(this.tableConnectionItemParameters.ParameterValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterValueNull()
      {
        this[this.tableConnectionItemParameters.ParameterValueColumn] = Convert.DBNull;
      }
    }

    public class ConnectionProfileParametersRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersDataTable tableConnectionProfileParameters;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ConnectionProfileParametersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableConnectionProfileParameters = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ConnectionProfileID
      {
        get => (int) this[this.tableConnectionProfileParameters.ConnectionProfileIDColumn];
        set
        {
          this[this.tableConnectionProfileParameters.ConnectionProfileIDColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ConnectionProfileParameter
      {
        get => (int) this[this.tableConnectionProfileParameters.ConnectionProfileParameterColumn];
        set
        {
          this[this.tableConnectionProfileParameters.ConnectionProfileParameterColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ParameterOrder
      {
        get => (int) this[this.tableConnectionProfileParameters.ParameterOrderColumn];
        set => this[this.tableConnectionProfileParameters.ParameterOrderColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterValue
      {
        get
        {
          try
          {
            return (string) this[this.tableConnectionProfileParameters.ParameterValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterValue' in table 'ConnectionProfileParameters' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionProfileParameters.ParameterValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterValueNull()
      {
        return this.IsNull(this.tableConnectionProfileParameters.ParameterValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterValueNull()
      {
        this[this.tableConnectionProfileParameters.ParameterValueColumn] = Convert.DBNull;
      }
    }

    public class ConnectionProfileFiltersRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersDataTable tableConnectionProfileFilters;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ConnectionProfileFiltersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableConnectionProfileFilters = (ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ConnectionFilterID
      {
        get => (int) this[this.tableConnectionProfileFilters.ConnectionFilterIDColumn];
        set => this[this.tableConnectionProfileFilters.ConnectionFilterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FilterGroupNumber
      {
        get => (int) this[this.tableConnectionProfileFilters.FilterGroupNumberColumn];
        set => this[this.tableConnectionProfileFilters.FilterGroupNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ConnectionProfileParameter
      {
        get => (int) this[this.tableConnectionProfileFilters.ConnectionProfileParameterColumn];
        set
        {
          this[this.tableConnectionProfileFilters.ConnectionProfileParameterColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ParameterOrder
      {
        get => (int) this[this.tableConnectionProfileFilters.ParameterOrderColumn];
        set => this[this.tableConnectionProfileFilters.ParameterOrderColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int GroupFunction
      {
        get => (int) this[this.tableConnectionProfileFilters.GroupFunctionColumn];
        set => this[this.tableConnectionProfileFilters.GroupFunctionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterValue
      {
        get
        {
          try
          {
            return (string) this[this.tableConnectionProfileFilters.ParameterValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ParameterValue' in table 'ConnectionProfileFilters' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableConnectionProfileFilters.ParameterValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsParameterValueNull()
      {
        return this.IsNull(this.tableConnectionProfileFilters.ParameterValueColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetParameterValueNull()
      {
        this[this.tableConnectionProfileFilters.ParameterValueColumn] = Convert.DBNull;
      }
    }

    public class SoftwareUsersRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersDataTable tableSoftwareUsers;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SoftwareUsersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableSoftwareUsers = (ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int UserId
      {
        get => (int) this[this.tableSoftwareUsers.UserIdColumn];
        set => this[this.tableSoftwareUsers.UserIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Name
      {
        get => (string) this[this.tableSoftwareUsers.NameColumn];
        set => this[this.tableSoftwareUsers.NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonalNumber
      {
        get
        {
          try
          {
            return (int) this[this.tableSoftwareUsers.PersonalNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonalNumber' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.PersonalNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Password
      {
        get
        {
          try
          {
            return (string) this[this.tableSoftwareUsers.PasswordColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Password' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.PasswordColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LanguageSetting
      {
        get
        {
          try
          {
            return (string) this[this.tableSoftwareUsers.LanguageSettingColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LanguageSetting' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.LanguageSettingColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ControlKey
      {
        get
        {
          try
          {
            return (string) this[this.tableSoftwareUsers.ControlKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ControlKey' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.ControlKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int UserRole
      {
        get
        {
          try
          {
            return (int) this[this.tableSoftwareUsers.UserRoleColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UserRole' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.UserRoleColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool OnlyFinterprintLogin
      {
        get
        {
          try
          {
            return (bool) this[this.tableSoftwareUsers.OnlyFinterprintLoginColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'OnlyFinterprintLogin' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.OnlyFinterprintLoginColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PhoneNumber
      {
        get
        {
          try
          {
            return (string) this[this.tableSoftwareUsers.PhoneNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PhoneNumber' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.PhoneNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string EmailAddress
      {
        get
        {
          try
          {
            return (string) this[this.tableSoftwareUsers.EmailAddressColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EmailAddress' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.EmailAddressColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PNSource
      {
        get
        {
          try
          {
            return (string) this[this.tableSoftwareUsers.PNSourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PNSource' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.PNSourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string UserExtendedInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableSoftwareUsers.UserExtendedInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UserExtendedInfo' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.UserExtendedInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonalNumberNull()
      {
        return this.IsNull(this.tableSoftwareUsers.PersonalNumberColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonalNumberNull()
      {
        this[this.tableSoftwareUsers.PersonalNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPasswordNull() => this.IsNull(this.tableSoftwareUsers.PasswordColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPasswordNull()
      {
        this[this.tableSoftwareUsers.PasswordColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLanguageSettingNull()
      {
        return this.IsNull(this.tableSoftwareUsers.LanguageSettingColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLanguageSettingNull()
      {
        this[this.tableSoftwareUsers.LanguageSettingColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsControlKeyNull() => this.IsNull(this.tableSoftwareUsers.ControlKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetControlKeyNull()
      {
        this[this.tableSoftwareUsers.ControlKeyColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUserRoleNull() => this.IsNull(this.tableSoftwareUsers.UserRoleColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUserRoleNull()
      {
        this[this.tableSoftwareUsers.UserRoleColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsOnlyFinterprintLoginNull()
      {
        return this.IsNull(this.tableSoftwareUsers.OnlyFinterprintLoginColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetOnlyFinterprintLoginNull()
      {
        this[this.tableSoftwareUsers.OnlyFinterprintLoginColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPhoneNumberNull() => this.IsNull(this.tableSoftwareUsers.PhoneNumberColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPhoneNumberNull()
      {
        this[this.tableSoftwareUsers.PhoneNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEmailAddressNull() => this.IsNull(this.tableSoftwareUsers.EmailAddressColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEmailAddressNull()
      {
        this[this.tableSoftwareUsers.EmailAddressColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPNSourceNull() => this.IsNull(this.tableSoftwareUsers.PNSourceColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPNSourceNull()
      {
        this[this.tableSoftwareUsers.PNSourceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUserExtendedInfoNull()
      {
        return this.IsNull(this.tableSoftwareUsers.UserExtendedInfoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUserExtendedInfoNull()
      {
        this[this.tableSoftwareUsers.UserExtendedInfoColumn] = Convert.DBNull;
      }
    }

    public class NotificationRecordRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordDataTable tableNotificationRecord;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal NotificationRecordRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableNotificationRecord = (ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ID
      {
        get
        {
          try
          {
            return (int) this[this.tableNotificationRecord.IDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ID' in table 'NotificationRecord' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNotificationRecord.IDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentID
      {
        get => (int) this[this.tableNotificationRecord.EquipmentIDColumn];
        set => this[this.tableNotificationRecord.EquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string BasicState
      {
        get => (string) this[this.tableNotificationRecord.BasicStateColumn];
        set => this[this.tableNotificationRecord.BasicStateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool SMSState
      {
        get
        {
          try
          {
            return (bool) this[this.tableNotificationRecord.SMSStateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SMSState' in table 'NotificationRecord' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNotificationRecord.SMSStateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool EmailState
      {
        get
        {
          try
          {
            return (bool) this[this.tableNotificationRecord.EmailStateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EmailState' in table 'NotificationRecord' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNotificationRecord.EmailStateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime DateTime
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableNotificationRecord.DateTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DateTime' in table 'NotificationRecord' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableNotificationRecord.DateTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsIDNull() => this.IsNull(this.tableNotificationRecord.IDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetIDNull() => this[this.tableNotificationRecord.IDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSMSStateNull() => this.IsNull(this.tableNotificationRecord.SMSStateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSMSStateNull()
      {
        this[this.tableNotificationRecord.SMSStateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEmailStateNull() => this.IsNull(this.tableNotificationRecord.EmailStateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEmailStateNull()
      {
        this[this.tableNotificationRecord.EmailStateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDateTimeNull() => this.IsNull(this.tableNotificationRecord.DateTimeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDateTimeNull()
      {
        this[this.tableNotificationRecord.DateTimeColumn] = Convert.DBNull;
      }
    }

    public class SAP_CacheRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheDataTable tableSAP_Cache;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SAP_CacheRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableSAP_Cache = (ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterInfoID
      {
        get => (int) this[this.tableSAP_Cache.MeterInfoIDColumn];
        set => this[this.tableSAP_Cache.MeterInfoIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int ParameterID
      {
        get => (int) this[this.tableSAP_Cache.ParameterIDColumn];
        set => this[this.tableSAP_Cache.ParameterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ParameterValue
      {
        get => (string) this[this.tableSAP_Cache.ParameterValueColumn];
        set => this[this.tableSAP_Cache.ParameterValueColumn] = (object) value;
      }
    }

    public class SAP_ClassUsingRow : DataRow
    {
      private ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingDataTable tableSAP_ClassUsing;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SAP_ClassUsingRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableSAP_ClassUsing = (ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterInfoID
      {
        get => (int) this[this.tableSAP_ClassUsing.MeterInfoIDColumn];
        set => this[this.tableSAP_ClassUsing.MeterInfoIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int SapClassID
      {
        get => (int) this[this.tableSAP_ClassUsing.SapClassIDColumn];
        set => this[this.tableSAP_ClassUsing.SapClassIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte IsMainClass
      {
        get => (byte) this[this.tableSAP_ClassUsing.IsMainClassColumn];
        set => this[this.tableSAP_ClassUsing.IsMainClassColumn] = (object) value;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class EnumTranslationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EnumTranslationRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EnumTranslationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MTypeElectronicRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeElectronicRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeElectronicRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class BlockNamesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public BlockNamesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.BlockNamesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class CodeRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.CodeRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public CodeRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.CodeRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CodeRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ControllerCodeRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ControllerCodeRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ControllerCodeRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class CurrentUsersRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public CurrentUsersRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CurrentUsersRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class CustomerRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.CustomerRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public CustomerRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.CustomerRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.CustomerRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class DatabaseIdentificationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DatabaseIdentificationRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DatabaseIdentificationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class DatabaseLocationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DatabaseLocationRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DatabaseLocationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class DataloggerRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataloggerRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataloggerRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class DataLoggerentryRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataLoggerentryRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataLoggerentryRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class DBTranslatorRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DBTranslatorRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class DBTranslatorStructRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DBTranslatorStructRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DBTranslatorStructRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class DisplayCodeRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DisplayCodeRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DisplayCodeRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class EquipmentTypeDescriptionRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EquipmentTypeDescriptionRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentTypeDescriptionRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class FactoryEquipmentRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public FactoryEquipmentRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class GMM_UserRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public GMM_UserRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.GMM_UserRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class HardwareResourcesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public HardwareResourcesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareResourcesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class HardwareTypeRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public HardwareTypeRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.HardwareTypeRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class IncludeDefRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public IncludeDefRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.IncludeDefRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class LinkerTableRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public LinkerTableRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.LinkerTableRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ManufacturerRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ManufacturerRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ManufacturerRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MapBaseRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MapBaseRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MapBaseRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MapDefRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MapDefRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MapDefRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MapDefRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MapDefRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MBusCodeRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MBusCodeRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MBusCodeRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MBusParameterTranslationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MBusParameterTranslationRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MBusParameterTranslationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MenuRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MenuRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MenuRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MenuRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MenuRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MeterRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterDataRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterDataRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterDataRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterDataRequestRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterDataRequestRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterDataRequestRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterHardwareRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterHardwareRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterHardwareRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterInfoRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterInfoRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterPositionRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterPositionRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterPositionRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterTypeRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterTypeRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterTypeRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MTypeKapselRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeKapselRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeKapselRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MTypeMIDWaterMeterRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeMIDWaterMeterRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeMIDWaterMeterRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MTypeSaariusRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeSaariusRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeSaariusRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MTypeTempSensorRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeTempSensorRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeTempSensorRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MTypeWaterMeterRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeWaterMeterRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeWaterMeterRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MTypeZelsiusRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeZelsiusRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MTypeZelsiusModuleRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeZelsiusModuleRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeZelsiusModuleRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class NodeListRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.NodeListRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public NodeListRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.NodeListRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeListRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class NodeReferencesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public NodeReferencesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeReferencesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PartlistRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PartlistRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PartlistRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.PartlistRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PartlistRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PPS_CacheRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PPS_CacheRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PPS_CacheClassNamesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PPS_CacheClassNamesRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheClassNamesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PPS_CacheParmNamesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PPS_CacheParmNamesRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_CacheParmNamesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PPS_RW_WMZ_MapperRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PPS_RW_WMZ_MapperRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_RW_WMZ_MapperRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PPS_STS_ReferenceRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PPS_STS_ReferenceRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PPS_STS_ReferenceRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ProgFilesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ProgFilesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ProgFilesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PValueIdentRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PValueIdentRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PValueIdentRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class RepairRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.RepairRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public RepairRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.RepairRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class RepairErrorGroupsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public RepairErrorGroupsRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RepairErrorGroupsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class RuntimeCodeRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public RuntimeCodeRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.RuntimeCodeRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TestRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.TestRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TestbenchActualValuesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchActualValuesRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchActualValuesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TestbenchNominalValuesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchNominalValuesRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TestEquipmentRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestEquipmentRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestEquipmentRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TestPointListRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestPointListRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestPointListRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TestResistorTableRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestResistorTableRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResistorTableRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TestResultRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestResultRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestResultRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.TestResultRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResultRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TestResultExtendedRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestResultExtendedRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestResultExtendedRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TestTypeRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestTypeRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestTypeRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TypeOverwriteParametersRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TypeOverwriteParametersRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TypeOverwriteParametersRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class UnitsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.UnitsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public UnitsRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.UnitsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.UnitsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WaterDensityRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WaterDensityRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WaterDensityRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WMApprovalDataRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMApprovalDataRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMApprovalDataRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WMApprovalsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMApprovalsRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMApprovalsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WMClassesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMClassesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMClassesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WMCounterTypesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMCounterTypesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMCounterTypesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WMErrorOffsetRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMErrorOffsetRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMErrorOffsetRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WMMIDApprovalDataRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMMIDApprovalDataRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDApprovalDataRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WMMIDErrorOffsetRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMMIDErrorOffsetRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDErrorOffsetRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WMMIDTestingTypesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMMIDTestingTypesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMMIDTestingTypesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WMOrdersRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMOrdersRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMOrdersRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WMRatiosRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMRatiosRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMRatiosRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WMTestingTypesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WMTestingTypesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WMTestingTypesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ZRFunctionRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZRFunctionRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ZRGlobalIDRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZRGlobalIDRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRGlobalIDRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ZrOrderRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZrOrderRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZrOrderRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ZRParameterRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZRParameterRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRParameterRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ZRTableNamesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZRTableNamesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRTableNamesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class NodeLayersRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public NodeLayersRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NodeLayersRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ExternalUserTableRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ExternalUserTableRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ExternalUserTableRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class DocumentGroupsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DocumentGroupsRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DocumentGroupsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class DocumentsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DocumentsRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DocumentsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ErrorDescriptionRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ErrorDescriptionRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ErrorDescriptionRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MultidataCacheRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MultidataCacheRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MultidataCacheRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class WaveFlowDeviceModelsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public WaveFlowDeviceModelsRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.WaveFlowDeviceModelsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MinolDeviceDataReadRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinolDeviceDataReadRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataReadRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MinolDeviceDataRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinolDeviceDataRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinolDeviceDataRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class AutoboxCardConfigurationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public AutoboxCardConfigurationRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxCardConfigurationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class AutoboxResistorCalibrationDataRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public AutoboxResistorCalibrationDataRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorCalibrationDataRow Row
      {
        get => this.eventRow;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class AutoboxConfigurationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public AutoboxConfigurationRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxConfigurationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class AutoboxResistorPairsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public AutoboxResistorPairsRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.AutoboxResistorPairsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class EnergyFactorsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EnergyFactorsRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EnergyFactorsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterInfoPropertiesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterInfoPropertiesRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterInfoPropertiesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class EquipmentCalibrationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EquipmentCalibrationRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentCalibrationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TranslationRulesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TranslationRulesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TranslationRulesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterValuesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterValuesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterValuesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterValuesAndSerialRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterValuesAndSerialRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterValuesAndSerialRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class OnlineTranslationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public OnlineTranslationRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.OnlineTranslationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class S3_FunctionParameterRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public S3_FunctionParameterRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.S3_FunctionParameterRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MTypeVMT_ElectronicRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeVMT_ElectronicRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_ElectronicRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MTypeVMT_HydraulicRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MTypeVMT_HydraulicRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MTypeVMT_HydraulicRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class DataQsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.DataQsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataQsRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.DataQsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.DataQsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class S3_ParameterRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public S3_ParameterRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.S3_ParameterRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SerialPortConfigurationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SerialPortConfigurationRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SerialPortConfigurationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class FilterRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.FilterRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public FilterRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.FilterRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FilterRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class FilterValueRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public FilterValueRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FilterValueRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PostTranslationMappingRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PostTranslationMappingRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PostTranslationMappingRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PostTranslationRulesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PostTranslationRulesRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PostTranslationRulesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PTSensorParametersRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PTSensorParametersRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTSensorParametersRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SensorObservationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SensorObservationRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SensorObservationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TestbenchNominalValuesHistoryRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchNominalValuesHistoryRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchNominalValuesHistoryRow Row
      {
        get => this.eventRow;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ZRFunctionCompiledRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZRFunctionCompiledRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ZRFunctionCompiledRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class FactoryEquipmentPartlistRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public FactoryEquipmentPartlistRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.FactoryEquipmentPartlistRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class EquipmentPartlistCreationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EquipmentPartlistCreationRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EquipmentPartlistCreationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PTCardChannelCalibrationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PTCardChannelCalibrationRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTCardChannelCalibrationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class PTSensorCalibrationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public PTSensorCalibrationRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.PTSensorCalibrationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class EtalonCalibrationRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EtalonCalibrationRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.EtalonCalibrationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class UserPermissionsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public UserPermissionsRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.UserPermissionsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MinomatListRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinomatListRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatListRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class InstallationChangeLogRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public InstallationChangeLogRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationChangeLogRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class InstallationsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public InstallationsRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class InstallationUsersRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public InstallationUsersRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.InstallationUsersRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ChangeableParametersRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ChangeableParametersRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ChangeableParametersRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class GmmImagesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public GmmImagesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.GmmImagesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ConnectionSettingsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ConnectionSettingsRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionSettingsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ConnectionItemsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ConnectionItemsRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ConnectionProfilesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ConnectionProfilesRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfilesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ServiceTaskResultRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ServiceTaskResultRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ServiceTaskResultRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterMSSRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterMSSRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterMSSRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TestbenchFlowSettingsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchFlowSettingsRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TestbenchFlowSettingsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MinomatConnectionLogsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinomatConnectionLogsRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatConnectionLogsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MinomatDataLogsRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinomatDataLogsRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MinomatDataLogsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterChangesRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterChangesRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.MeterChangesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TransducerPalletRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TransducerPalletRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TransducerPalletStateRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TransducerPalletStateRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletStateRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class TransducerPalletTypeRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TransducerPalletTypeRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.TransducerPalletTypeRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ConnectionItemParametersRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ConnectionItemParametersRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionItemParametersRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ConnectionProfileParametersRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ConnectionProfileParametersRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileParametersRow Row
      {
        get => this.eventRow;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ConnectionProfileFiltersRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ConnectionProfileFiltersRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.ConnectionProfileFiltersRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SoftwareUsersRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SoftwareUsersRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SoftwareUsersRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class NotificationRecordRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public NotificationRecordRowChangeEvent(
        ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.NotificationRecordRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SAP_CacheRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SAP_CacheRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SAP_CacheRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SAP_ClassUsingRowChangeEvent : EventArgs
    {
      private ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SAP_ClassUsingRowChangeEvent(ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ZR_ClassLibrary.Schema_Access.Schema.SAP_ClassUsingRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }
  }
}
