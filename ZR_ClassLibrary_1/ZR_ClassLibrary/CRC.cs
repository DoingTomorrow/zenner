// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.CRC
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public static class CRC
  {
    private static ushort[] CRC_TABLE = new ushort[256]
    {
      (ushort) 0,
      (ushort) 4129,
      (ushort) 8258,
      (ushort) 12387,
      (ushort) 16516,
      (ushort) 20645,
      (ushort) 24774,
      (ushort) 28903,
      (ushort) 33032,
      (ushort) 37161,
      (ushort) 41290,
      (ushort) 45419,
      (ushort) 49548,
      (ushort) 53677,
      (ushort) 57806,
      (ushort) 61935,
      (ushort) 4657,
      (ushort) 528,
      (ushort) 12915,
      (ushort) 8786,
      (ushort) 21173,
      (ushort) 17044,
      (ushort) 29431,
      (ushort) 25302,
      (ushort) 37689,
      (ushort) 33560,
      (ushort) 45947,
      (ushort) 41818,
      (ushort) 54205,
      (ushort) 50076,
      (ushort) 62463,
      (ushort) 58334,
      (ushort) 9314,
      (ushort) 13379,
      (ushort) 1056,
      (ushort) 5121,
      (ushort) 25830,
      (ushort) 29895,
      (ushort) 17572,
      (ushort) 21637,
      (ushort) 42346,
      (ushort) 46411,
      (ushort) 34088,
      (ushort) 38153,
      (ushort) 58862,
      (ushort) 62927,
      (ushort) 50604,
      (ushort) 54669,
      (ushort) 13907,
      (ushort) 9842,
      (ushort) 5649,
      (ushort) 1584,
      (ushort) 30423,
      (ushort) 26358,
      (ushort) 22165,
      (ushort) 18100,
      (ushort) 46939,
      (ushort) 42874,
      (ushort) 38681,
      (ushort) 34616,
      (ushort) 63455,
      (ushort) 59390,
      (ushort) 55197,
      (ushort) 51132,
      (ushort) 18628,
      (ushort) 22757,
      (ushort) 26758,
      (ushort) 30887,
      (ushort) 2112,
      (ushort) 6241,
      (ushort) 10242,
      (ushort) 14371,
      (ushort) 51660,
      (ushort) 55789,
      (ushort) 59790,
      (ushort) 63919,
      (ushort) 35144,
      (ushort) 39273,
      (ushort) 43274,
      (ushort) 47403,
      (ushort) 23285,
      (ushort) 19156,
      (ushort) 31415,
      (ushort) 27286,
      (ushort) 6769,
      (ushort) 2640,
      (ushort) 14899,
      (ushort) 10770,
      (ushort) 56317,
      (ushort) 52188,
      (ushort) 64447,
      (ushort) 60318,
      (ushort) 39801,
      (ushort) 35672,
      (ushort) 47931,
      (ushort) 43802,
      (ushort) 27814,
      (ushort) 31879,
      (ushort) 19684,
      (ushort) 23749,
      (ushort) 11298,
      (ushort) 15363,
      (ushort) 3168,
      (ushort) 7233,
      (ushort) 60846,
      (ushort) 64911,
      (ushort) 52716,
      (ushort) 56781,
      (ushort) 44330,
      (ushort) 48395,
      (ushort) 36200,
      (ushort) 40265,
      (ushort) 32407,
      (ushort) 28342,
      (ushort) 24277,
      (ushort) 20212,
      (ushort) 15891,
      (ushort) 11826,
      (ushort) 7761,
      (ushort) 3696,
      (ushort) 65439,
      (ushort) 61374,
      (ushort) 57309,
      (ushort) 53244,
      (ushort) 48923,
      (ushort) 44858,
      (ushort) 40793,
      (ushort) 36728,
      (ushort) 37256,
      (ushort) 33193,
      (ushort) 45514,
      (ushort) 41451,
      (ushort) 53516,
      (ushort) 49453,
      (ushort) 61774,
      (ushort) 57711,
      (ushort) 4224,
      (ushort) 161,
      (ushort) 12482,
      (ushort) 8419,
      (ushort) 20484,
      (ushort) 16421,
      (ushort) 28742,
      (ushort) 24679,
      (ushort) 33721,
      (ushort) 37784,
      (ushort) 41979,
      (ushort) 46042,
      (ushort) 49981,
      (ushort) 54044,
      (ushort) 58239,
      (ushort) 62302,
      (ushort) 689,
      (ushort) 4752,
      (ushort) 8947,
      (ushort) 13010,
      (ushort) 16949,
      (ushort) 21012,
      (ushort) 25207,
      (ushort) 29270,
      (ushort) 46570,
      (ushort) 42443,
      (ushort) 38312,
      (ushort) 34185,
      (ushort) 62830,
      (ushort) 58703,
      (ushort) 54572,
      (ushort) 50445,
      (ushort) 13538,
      (ushort) 9411,
      (ushort) 5280,
      (ushort) 1153,
      (ushort) 29798,
      (ushort) 25671,
      (ushort) 21540,
      (ushort) 17413,
      (ushort) 42971,
      (ushort) 47098,
      (ushort) 34713,
      (ushort) 38840,
      (ushort) 59231,
      (ushort) 63358,
      (ushort) 50973,
      (ushort) 55100,
      (ushort) 9939,
      (ushort) 14066,
      (ushort) 1681,
      (ushort) 5808,
      (ushort) 26199,
      (ushort) 30326,
      (ushort) 17941,
      (ushort) 22068,
      (ushort) 55628,
      (ushort) 51565,
      (ushort) 63758,
      (ushort) 59695,
      (ushort) 39368,
      (ushort) 35305,
      (ushort) 47498,
      (ushort) 43435,
      (ushort) 22596,
      (ushort) 18533,
      (ushort) 30726,
      (ushort) 26663,
      (ushort) 6336,
      (ushort) 2273,
      (ushort) 14466,
      (ushort) 10403,
      (ushort) 52093,
      (ushort) 56156,
      (ushort) 60223,
      (ushort) 64286,
      (ushort) 35833,
      (ushort) 39896,
      (ushort) 43963,
      (ushort) 48026,
      (ushort) 19061,
      (ushort) 23124,
      (ushort) 27191,
      (ushort) 31254,
      (ushort) 2801,
      (ushort) 6864,
      (ushort) 10931,
      (ushort) 14994,
      (ushort) 64814,
      (ushort) 60687,
      (ushort) 56684,
      (ushort) 52557,
      (ushort) 48554,
      (ushort) 44427,
      (ushort) 40424,
      (ushort) 36297,
      (ushort) 31782,
      (ushort) 27655,
      (ushort) 23652,
      (ushort) 19525,
      (ushort) 15522,
      (ushort) 11395,
      (ushort) 7392,
      (ushort) 3265,
      (ushort) 61215,
      (ushort) 65342,
      (ushort) 53085,
      (ushort) 57212,
      (ushort) 44955,
      (ushort) 49082,
      (ushort) 36825,
      (ushort) 40952,
      (ushort) 28183,
      (ushort) 32310,
      (ushort) 20053,
      (ushort) 24180,
      (ushort) 11923,
      (ushort) 16050,
      (ushort) 3793,
      (ushort) 7920
    };
    private static ushort[] CRC_TABLE_REVERSED = new ushort[256]
    {
      (ushort) 0,
      (ushort) 4489,
      (ushort) 8978,
      (ushort) 12955,
      (ushort) 17956,
      (ushort) 22445,
      (ushort) 25910,
      (ushort) 29887,
      (ushort) 35912,
      (ushort) 40385,
      (ushort) 44890,
      (ushort) 48851,
      (ushort) 51820,
      (ushort) 56293,
      (ushort) 59774,
      (ushort) 63735,
      (ushort) 4225,
      (ushort) 264,
      (ushort) 13203,
      (ushort) 8730,
      (ushort) 22181,
      (ushort) 18220,
      (ushort) 30135,
      (ushort) 25662,
      (ushort) 40137,
      (ushort) 36160,
      (ushort) 49115,
      (ushort) 44626,
      (ushort) 56045,
      (ushort) 52068,
      (ushort) 63999,
      (ushort) 59510,
      (ushort) 8450,
      (ushort) 12427,
      (ushort) 528,
      (ushort) 5017,
      (ushort) 26406,
      (ushort) 30383,
      (ushort) 17460,
      (ushort) 21949,
      (ushort) 44362,
      (ushort) 48323,
      (ushort) 36440,
      (ushort) 40913,
      (ushort) 60270,
      (ushort) 64231,
      (ushort) 51324,
      (ushort) 55797,
      (ushort) 12675,
      (ushort) 8202,
      (ushort) 4753,
      (ushort) 792,
      (ushort) 30631,
      (ushort) 26158,
      (ushort) 21685,
      (ushort) 17724,
      (ushort) 48587,
      (ushort) 44098,
      (ushort) 40665,
      (ushort) 36688,
      (ushort) 64495,
      (ushort) 60006,
      (ushort) 55549,
      (ushort) 51572,
      (ushort) 16900,
      (ushort) 21389,
      (ushort) 24854,
      (ushort) 28831,
      (ushort) 1056,
      (ushort) 5545,
      (ushort) 10034,
      (ushort) 14011,
      (ushort) 52812,
      (ushort) 57285,
      (ushort) 60766,
      (ushort) 64727,
      (ushort) 34920,
      (ushort) 39393,
      (ushort) 43898,
      (ushort) 47859,
      (ushort) 21125,
      (ushort) 17164,
      (ushort) 29079,
      (ushort) 24606,
      (ushort) 5281,
      (ushort) 1320,
      (ushort) 14259,
      (ushort) 9786,
      (ushort) 57037,
      (ushort) 53060,
      (ushort) 64991,
      (ushort) 60502,
      (ushort) 39145,
      (ushort) 35168,
      (ushort) 48123,
      (ushort) 43634,
      (ushort) 25350,
      (ushort) 29327,
      (ushort) 16404,
      (ushort) 20893,
      (ushort) 9506,
      (ushort) 13483,
      (ushort) 1584,
      (ushort) 6073,
      (ushort) 61262,
      (ushort) 65223,
      (ushort) 52316,
      (ushort) 56789,
      (ushort) 43370,
      (ushort) 47331,
      (ushort) 35448,
      (ushort) 39921,
      (ushort) 29575,
      (ushort) 25102,
      (ushort) 20629,
      (ushort) 16668,
      (ushort) 13731,
      (ushort) 9258,
      (ushort) 5809,
      (ushort) 1848,
      (ushort) 65487,
      (ushort) 60998,
      (ushort) 56541,
      (ushort) 52564,
      (ushort) 47595,
      (ushort) 43106,
      (ushort) 39673,
      (ushort) 35696,
      (ushort) 33800,
      (ushort) 38273,
      (ushort) 42778,
      (ushort) 46739,
      (ushort) 49708,
      (ushort) 54181,
      (ushort) 57662,
      (ushort) 61623,
      (ushort) 2112,
      (ushort) 6601,
      (ushort) 11090,
      (ushort) 15067,
      (ushort) 20068,
      (ushort) 24557,
      (ushort) 28022,
      (ushort) 31999,
      (ushort) 38025,
      (ushort) 34048,
      (ushort) 47003,
      (ushort) 42514,
      (ushort) 53933,
      (ushort) 49956,
      (ushort) 61887,
      (ushort) 57398,
      (ushort) 6337,
      (ushort) 2376,
      (ushort) 15315,
      (ushort) 10842,
      (ushort) 24293,
      (ushort) 20332,
      (ushort) 32247,
      (ushort) 27774,
      (ushort) 42250,
      (ushort) 46211,
      (ushort) 34328,
      (ushort) 38801,
      (ushort) 58158,
      (ushort) 62119,
      (ushort) 49212,
      (ushort) 53685,
      (ushort) 10562,
      (ushort) 14539,
      (ushort) 2640,
      (ushort) 7129,
      (ushort) 28518,
      (ushort) 32495,
      (ushort) 19572,
      (ushort) 24061,
      (ushort) 46475,
      (ushort) 41986,
      (ushort) 38553,
      (ushort) 34576,
      (ushort) 62383,
      (ushort) 57894,
      (ushort) 53437,
      (ushort) 49460,
      (ushort) 14787,
      (ushort) 10314,
      (ushort) 6865,
      (ushort) 2904,
      (ushort) 32743,
      (ushort) 28270,
      (ushort) 23797,
      (ushort) 19836,
      (ushort) 50700,
      (ushort) 55173,
      (ushort) 58654,
      (ushort) 62615,
      (ushort) 32808,
      (ushort) 37281,
      (ushort) 41786,
      (ushort) 45747,
      (ushort) 19012,
      (ushort) 23501,
      (ushort) 26966,
      (ushort) 30943,
      (ushort) 3168,
      (ushort) 7657,
      (ushort) 12146,
      (ushort) 16123,
      (ushort) 54925,
      (ushort) 50948,
      (ushort) 62879,
      (ushort) 58390,
      (ushort) 37033,
      (ushort) 33056,
      (ushort) 46011,
      (ushort) 41522,
      (ushort) 23237,
      (ushort) 19276,
      (ushort) 31191,
      (ushort) 26718,
      (ushort) 7393,
      (ushort) 3432,
      (ushort) 16371,
      (ushort) 11898,
      (ushort) 59150,
      (ushort) 63111,
      (ushort) 50204,
      (ushort) 54677,
      (ushort) 41258,
      (ushort) 45219,
      (ushort) 33336,
      (ushort) 37809,
      (ushort) 27462,
      (ushort) 31439,
      (ushort) 18516,
      (ushort) 23005,
      (ushort) 11618,
      (ushort) 15595,
      (ushort) 3696,
      (ushort) 8185,
      (ushort) 63375,
      (ushort) 58886,
      (ushort) 54429,
      (ushort) 50452,
      (ushort) 45483,
      (ushort) 40994,
      (ushort) 37561,
      (ushort) 33584,
      (ushort) 31687,
      (ushort) 27214,
      (ushort) 22741,
      (ushort) 18780,
      (ushort) 15843,
      (ushort) 11370,
      (ushort) 7921,
      (ushort) 3960
    };
    private static byte NK_ANFUEHRER_MAX = 65;
    private static byte[,] NK_ANFUEHRER = new byte[65, 8]
    {
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 1
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 2
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 4
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 8
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 16
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 32
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 64
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 128
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 1,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 2,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 4,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 8,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 16,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 32,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 64,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 128,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 1,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 2,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 4,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 8,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 16,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 32,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 64,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 128,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 1,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 2,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 4,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 8,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 16,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 32,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 64,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 128,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 1,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 2,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 4,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 8,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 16,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 32,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 64,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 128,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 1,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 2,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 4,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 8,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 16,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 32,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 64,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 128,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 1,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 2,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 4,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 8,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 16,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 32,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 64,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 128,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 1,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 2,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 4,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 8,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 16,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 32,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 64,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 128,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      }
    };
    private static ushort[] syndrom = CRC.initSyndrom();
    private static ushort[] syndromReversed = CRC.initSyncdromReversed();

    private static ushort[] initSyndrom()
    {
      ushort[] numArray = new ushort[(int) CRC.NK_ANFUEHRER_MAX];
      for (int index1 = 0; index1 < (int) CRC.NK_ANFUEHRER_MAX; ++index1)
      {
        byte[] adr = new byte[8];
        for (int index2 = 0; index2 < 8; ++index2)
          adr[index2] = CRC.NK_ANFUEHRER[index1, index2];
        numArray[index1] = CRC.calculateChecksum(ref adr, (ushort) 8, 0U);
      }
      return numArray;
    }

    private static ushort[] initSyncdromReversed()
    {
      ushort[] numArray = new ushort[(int) CRC.NK_ANFUEHRER_MAX];
      for (int index1 = 0; index1 < (int) CRC.NK_ANFUEHRER_MAX; ++index1)
      {
        byte[] adr = new byte[8];
        for (int index2 = 0; index2 < 8; ++index2)
          adr[index2] = CRC.NK_ANFUEHRER[index1, index2];
        numArray[index1] = CRC.calculateChecksumReversed(ref adr, 8U, 0U);
      }
      return numArray;
    }

    public static ushort calculateChecksum(ref byte[] adr, ushort len, uint index)
    {
      ushort checksum = 0;
      while (len-- > (ushort) 0)
        checksum = (ushort) ((uint) CRC.CRC_TABLE[((int) checksum >> 8 ^ (int) adr[(int) index++]) & (int) byte.MaxValue] ^ (uint) checksum << 8);
      return checksum;
    }

    public static ushort CalculateCRC(byte[] buffer, int start, int end, ushort seed)
    {
      ushort crc = seed;
      for (int index1 = start; index1 < end; ++index1)
      {
        int index2 = (int) (byte) ((uint) crc & (uint) byte.MaxValue) ^ (int) buffer[index1];
        crc = (ushort) ((uint) (ushort) ((uint) crc >> 8) ^ (uint) CRC.CRC_TABLE_REVERSED[index2]);
      }
      return crc;
    }

    public static ushort calculateChecksumReversed(byte[] adr, uint len, uint index)
    {
      ushort checksumReversed = 0;
      while (len-- > 0U)
        checksumReversed = (ushort) ((uint) CRC.CRC_TABLE_REVERSED[((int) checksumReversed ^ (int) adr[(int) index++]) & (int) byte.MaxValue] ^ (uint) checksumReversed >> 8);
      return checksumReversed;
    }

    public static ushort calculateChecksumReversed(ref byte[] adr, uint len, uint index)
    {
      ushort checksumReversed = 0;
      while (len-- > 0U)
        checksumReversed = (ushort) ((uint) CRC.CRC_TABLE_REVERSED[((int) checksumReversed ^ (int) adr[(int) index++]) & (int) byte.MaxValue] ^ (uint) checksumReversed >> 8);
      return checksumReversed;
    }

    public static bool correctError(ref byte[] adr, uint len, uint index) => true;

    public static bool correctErrorReversed(ref byte[] adr, uint len, uint index)
    {
      ushort checksumReversed = CRC.calculateChecksumReversed(ref adr, len, index);
      if (checksumReversed <= (ushort) 0)
        return true;
      bool flag1 = false;
      uint index1 = 0;
      for (uint index2 = 0; index2 < (uint) CRC.NK_ANFUEHRER_MAX && !flag1; ++index2)
      {
        if ((int) CRC.syndromReversed[(int) index2] == (int) checksumReversed)
        {
          flag1 = true;
          index1 = index2;
        }
      }
      if (!flag1)
        return false;
      bool flag2 = false;
      for (uint index3 = 0; index3 < len && !flag2; ++index3)
      {
        if (CRC.NK_ANFUEHRER[(int) index1, (int) index3] > (byte) 0)
        {
          index += index3;
          adr[(int) index] = (byte) ((uint) adr[(int) index] ^ (uint) CRC.NK_ANFUEHRER[(int) index1, (int) index3]);
          flag2 = true;
        }
      }
      return CRC.calculateChecksumReversed(ref adr, len, index) == (ushort) 0;
    }
  }
}
