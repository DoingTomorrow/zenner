
--- 1Metertype.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Metertype
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum Metertype
  {
    BASETYPE,
    OverwriteType,
    CustomerType,
    Default,
  }
}


--- _LeapIndicator.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary._LeapIndicator
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum _LeapIndicator
  {
    NoWarning,
    LastMinute61,
    LastMinute59,
    Alarm,
  }
}


--- _Mode.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary._Mode
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum _Mode
  {
    SymmetricActive,
    SymmetricPassive,
    Client,
    Server,
    Broadcast,
    Unknown,
  }
}


--- _Stratum.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary._Stratum
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum _Stratum
  {
    Unspecified,
    PrimaryReference,
    SecondaryReference,
    Reserved,
  }
}


--- AbstractDeviceIOConfiguratorFactory.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.AbstractDeviceIOConfiguratorFactory
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public abstract class AbstractDeviceIOConfiguratorFactory
  {
    public abstract AbstractWaveFlowIOConfigurator CreateWaveFlowIOConfigurator(
      object ReferenceObject);
  }
}


--- AbstractDeviceLoggerConfiguratorFactory.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.AbstractDeviceLoggerConfiguratorFactory
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public abstract class AbstractDeviceLoggerConfiguratorFactory
  {
    public abstract AbstractWaveFlowLoggerConfigurator CreateWaveFlowLoggerConfigurator(
      object ReferenceObject);
  }
}


--- AbstractWaveFlowIOConfigurator.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.AbstractWaveFlowIOConfigurator
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public abstract class AbstractWaveFlowIOConfigurator
  {
    public abstract string GetLastErrorString();

    public abstract bool GetNumberOfIOs(out int IoCount);

    public abstract bool GetIOSettings(int IO, out DeviceIOSettings IOSettings);

    public abstract bool SetIOSettings(int IO, DeviceIOSettings IOSettings);

    public abstract bool WriteSettingsToDevice();

    public abstract bool ReadSettingsFromDevice();
  }
}


--- AbstractWaveFlowLoggerConfigurator.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.AbstractWaveFlowLoggerConfigurator
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections;
using System.Collections.Generic;

#nullable disable
namespace ZR_ClassLibrary
{
  public abstract class AbstractWaveFlowLoggerConfigurator
  {
    public abstract string GetLastErrorString();

    public abstract int GetNumberOfLoggers();

    public abstract bool GetPossibleLoggerTypesForLoggerID(ref ArrayList LoggerTypes, int LoggerID);

    public abstract bool GetPossibleParametersForLoggerType(
      ref ArrayList TypeParameters,
      int LoggerID,
      string LoggerType);

    public abstract bool GetPossibleParametersSettings(
      ref ArrayList ParameterSettings,
      int LoggerID,
      string LoggerType,
      string Parameter);

    public abstract bool GetActualParameterValuesForLoggerIDAndLoggerType(
      int LoggerID,
      string LoggerType,
      ref SortedList<string, string> ParameterSettings);

    public abstract bool GetActualLoggerTypeForLoggerID(int LoggerID, out string LoggerType);

    public abstract bool SetLoggerTypeAndParameterValuesForLoggerID(
      int LoggerID,
      string LoggerType,
      SortedList<string, string> ParameterSettings);

    public abstract bool WriteSettingsToDevice();

    public abstract bool ReadSettingsFromDevice();

    public abstract bool ReadLoggerDataFromDevice(
      int LoggerID,
      ref SortedList<DateTime, List<double>> LoggerValues,
      ref List<MeterDBAccess.ValueTypes> TheValueTypes,
      ref List<string> InputNumbers,
      ref List<string> SerialNumbers);
  }
}


--- AccessDeniedException.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.AccessDeniedException
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Runtime.Serialization;

#nullable disable
namespace ZR_ClassLibrary
{
  [Serializable]
  public sealed class AccessDeniedException : Exception
  {
    public AccessDeniedException(string message)
      : base(message)
    {
    }

    public AccessDeniedException(SerializationInfo info, StreamingContext context)
      : base(info, context)
    {
    }
  }
}


--- AddImagesForm.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.AddImagesForm
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class AddImagesForm : Form
  {
    private int? currentImageID;
    private IContainer components = (IContainer) null;
    private Button btnOK;
    private Panel panel1;
    private Label label2;
    private Label label3;
    private Button btnNew;
    private Button btnRemove;
    private Button btnSave;
    private TextBox txtDescriptionEN;
    private Label lblDescriptionEN;
    private TextBox txtDescriptionDE;
    private Label lblDescriptionDE;
    private Button btnAddImage;
    private PictureBox picture;
    private DataGridView tableImages;
    private DataGridViewTextBoxColumn colReadoutDeviceSettings;
    private ErrorProvider error;

    public AddImagesForm() => this.InitializeComponent();

    public static void Show() => AddImagesForm.Show((Form) null);

    public static void Show(Form owner)
    {
      using (AddImagesForm addImagesForm = new AddImagesForm())
      {
        if (owner != null)
          addImagesForm.Owner = owner;
        int num = (int) addImagesForm.ShowDialog();
      }
    }

    private void AddImagesForm_Load(object sender, EventArgs e) => this.LoadImages();

    private void tableImages_SelectionChanged(object sender, EventArgs e)
    {
      if (this.tableImages.SelectedRows.Count != 1)
      {
        this.txtDescriptionDE.Text = string.Empty;
        this.txtDescriptionEN.Text = string.Empty;
        this.picture.Image = (Image) null;
        this.currentImageID = new int?();
      }
      else
      {
        if (!(this.tableImages.SelectedRows[0].Tag is GMMImage tag))
          return;
        this.currentImageID = new int?(tag.ImageID);
        this.picture.Image = tag.ImageSmall;
      }
    }

    private void btnNew_Click(object sender, EventArgs e)
    {
      this.tableImages.ClearSelection();
      this.error.Clear();
      this.txtDescriptionDE.Text = string.Empty;
      this.txtDescriptionEN.Text = string.Empty;
      this.picture.Image = (Image) null;
      this.currentImageID = new int?();
    }

    private void btnSave_Click(object sender, EventArgs e)
    {
    }

    private void btnRemove_Click(object sender, EventArgs e)
    {
    }

    private void btnAddImage_Click(object sender, EventArgs e)
    {
      try
      {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
          if (openFileDialog.ShowDialog() != DialogResult.OK)
            return;
          this.picture.Image = (Image) new Bitmap(openFileDialog.FileName);
          this.txtDescriptionDE.Text = Path.GetFileNameWithoutExtension(openFileDialog.FileName);
          this.txtDescriptionEN.Text = Path.GetFileNameWithoutExtension(openFileDialog.FileName);
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, this.Name, MessageBoxButtons.OK);
      }
    }

    private void SelectImage(int? idToSelect)
    {
      this.tableImages.ClearSelection();
      if (!idToSelect.HasValue)
        return;
      foreach (DataGridViewRow row in (IEnumerable) this.tableImages.Rows)
      {
        if ((row.Tag as GMMImage).ImageID == idToSelect.Value)
        {
          row.Selected = true;
          break;
        }
      }
    }

    private void LoadImages()
    {
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (AddImagesForm));
      this.btnOK = new Button();
      this.panel1 = new Panel();
      this.label2 = new Label();
      this.label3 = new Label();
      this.btnNew = new Button();
      this.btnRemove = new Button();
      this.btnSave = new Button();
      this.txtDescriptionEN = new TextBox();
      this.lblDescriptionEN = new Label();
      this.txtDescriptionDE = new TextBox();
      this.lblDescriptionDE = new Label();
      this.btnAddImage = new Button();
      this.picture = new PictureBox();
      this.tableImages = new DataGridView();
      this.colReadoutDeviceSettings = new DataGridViewTextBoxColumn();
      this.error = new ErrorProvider(this.components);
      this.panel1.SuspendLayout();
      ((ISupportInitialize) this.picture).BeginInit();
      ((ISupportInitialize) this.tableImages).BeginInit();
      ((ISupportInitialize) this.error).BeginInit();
      this.SuspendLayout();
      this.btnOK.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnOK.DialogResult = DialogResult.Cancel;
      this.btnOK.Image = (Image) componentResourceManager.GetObject("btnOK.Image");
      this.btnOK.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnOK.ImeMode = ImeMode.NoControl;
      this.btnOK.Location = new Point(654, 451);
      this.btnOK.Name = "btnOK";
      this.btnOK.Size = new Size(76, 27);
      this.btnOK.TabIndex = 6;
      this.btnOK.Text = "OK";
      this.panel1.BackColor = Color.White;
      this.panel1.Controls.Add((Control) this.label2);
      this.panel1.Controls.Add((Control) this.label3);
      this.panel1.Dock = DockStyle.Top;
      this.panel1.Location = new Point(0, 0);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(739, 64);
      this.panel1.TabIndex = 35;
      this.label2.AutoSize = true;
      this.label2.Font = new Font("Microsoft Sans Serif", 9f);
      this.label2.ImeMode = ImeMode.NoControl;
      this.label2.Location = new Point(40, 32);
      this.label2.Name = "label2";
      this.label2.Size = new Size(182, 15);
      this.label2.TabIndex = 1;
      this.label2.Text = "Tool to add images to database.";
      this.label3.AutoSize = true;
      this.label3.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold);
      this.label3.ImeMode = ImeMode.NoControl;
      this.label3.Location = new Point(23, 13);
      this.label3.Name = "label3";
      this.label3.Size = new Size(59, 16);
      this.label3.TabIndex = 0;
      this.label3.Text = "Images";
      this.btnNew.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.btnNew.Image = (Image) componentResourceManager.GetObject("btnNew.Image");
      this.btnNew.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnNew.ImeMode = ImeMode.NoControl;
      this.btnNew.Location = new Point(12, 451);
      this.btnNew.Name = "btnNew";
      this.btnNew.Size = new Size(76, 27);
      this.btnNew.TabIndex = 3;
      this.btnNew.Text = "New";
      this.btnNew.TextAlign = ContentAlignment.MiddleRight;
      this.btnNew.UseVisualStyleBackColor = true;
      this.btnNew.Click += new System.EventHandler(this.btnNew_Click);
      this.btnRemove.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.btnRemove.Image = (Image) componentResourceManager.GetObject("btnRemove.Image");
      this.btnRemove.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnRemove.ImeMode = ImeMode.NoControl;
      this.btnRemove.Location = new Point(210, 451);
      this.btnRemove.Name = "btnRemove";
      this.btnRemove.Size = new Size(76, 27);
      this.btnRemove.TabIndex = 5;
      this.btnRemove.Text = "Remove";
      this.btnRemove.TextAlign = ContentAlignment.MiddleRight;
      this.btnRemove.UseVisualStyleBackColor = true;
      this.btnRemove.Click += new System.EventHandler(this.btnRemove_Click);
      this.btnSave.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.btnSave.Image = (Image) componentResourceManager.GetObject("btnSave.Image");
      this.btnSave.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSave.ImeMode = ImeMode.NoControl;
      this.btnSave.Location = new Point(94, 451);
      this.btnSave.Name = "btnSave";
      this.btnSave.Size = new Size(76, 27);
      this.btnSave.TabIndex = 4;
      this.btnSave.Text = "Save";
      this.btnSave.TextAlign = ContentAlignment.MiddleRight;
      this.btnSave.UseVisualStyleBackColor = true;
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.txtDescriptionEN.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtDescriptionEN.Location = new Point(9, 411);
      this.txtDescriptionEN.MaxLength = (int) byte.MaxValue;
      this.txtDescriptionEN.Multiline = true;
      this.txtDescriptionEN.Name = "txtDescriptionEN";
      this.txtDescriptionEN.Size = new Size(721, 21);
      this.txtDescriptionEN.TabIndex = 2;
      this.lblDescriptionEN.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.lblDescriptionEN.AutoSize = true;
      this.lblDescriptionEN.Location = new Point(9, 395);
      this.lblDescriptionEN.Name = "lblDescriptionEN";
      this.lblDescriptionEN.Size = new Size(78, 13);
      this.lblDescriptionEN.TabIndex = 43;
      this.lblDescriptionEN.Text = "Description EN";
      this.txtDescriptionDE.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtDescriptionDE.Location = new Point(9, 371);
      this.txtDescriptionDE.MaxLength = (int) byte.MaxValue;
      this.txtDescriptionDE.Multiline = true;
      this.txtDescriptionDE.Name = "txtDescriptionDE";
      this.txtDescriptionDE.Size = new Size(721, 21);
      this.txtDescriptionDE.TabIndex = 1;
      this.lblDescriptionDE.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.lblDescriptionDE.AutoSize = true;
      this.lblDescriptionDE.Location = new Point(9, 355);
      this.lblDescriptionDE.Name = "lblDescriptionDE";
      this.lblDescriptionDE.Size = new Size(78, 13);
      this.lblDescriptionDE.TabIndex = 45;
      this.lblDescriptionDE.Text = "Description DE";
      this.btnAddImage.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnAddImage.Location = new Point(688, 325);
      this.btnAddImage.Name = "btnAddImage";
      this.btnAddImage.Size = new Size(38, 23);
      this.btnAddImage.TabIndex = 0;
      this.btnAddImage.Text = "...";
      this.btnAddImage.UseVisualStyleBackColor = true;
      this.btnAddImage.Click += new System.EventHandler(this.btnAddImage_Click);
      this.picture.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.picture.BackColor = Color.White;
      this.picture.BorderStyle = BorderStyle.FixedSingle;
      this.picture.Location = new Point(460, 74);
      this.picture.Name = "picture";
      this.picture.Size = new Size(270, 278);
      this.picture.TabIndex = 50;
      this.picture.TabStop = false;
      this.tableImages.AllowUserToAddRows = false;
      this.tableImages.AllowUserToDeleteRows = false;
      this.tableImages.AllowUserToResizeRows = false;
      this.tableImages.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left;
      this.tableImages.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
      this.tableImages.BackgroundColor = Color.White;
      this.tableImages.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.tableImages.ColumnHeadersVisible = false;
      this.tableImages.Columns.AddRange((DataGridViewColumn) this.colReadoutDeviceSettings);
      this.tableImages.Location = new Point(9, 74);
      this.tableImages.MultiSelect = false;
      this.tableImages.Name = "tableImages";
      this.tableImages.ReadOnly = true;
      this.tableImages.RowHeadersVisible = false;
      this.tableImages.ScrollBars = ScrollBars.Vertical;
      this.tableImages.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
      this.tableImages.Size = new Size(445, 278);
      this.tableImages.TabIndex = 51;
      this.tableImages.SelectionChanged += new System.EventHandler(this.tableImages_SelectionChanged);
      this.colReadoutDeviceSettings.HeaderText = "ReadoutDeviceSettings";
      this.colReadoutDeviceSettings.Name = "colReadoutDeviceSettings";
      this.colReadoutDeviceSettings.ReadOnly = true;
      this.error.ContainerControl = (ContainerControl) this;
      this.AcceptButton = (IButtonControl) this.btnOK;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.CancelButton = (IButtonControl) this.btnOK;
      this.ClientSize = new Size(739, 490);
      this.Controls.Add((Control) this.btnAddImage);
      this.Controls.Add((Control) this.tableImages);
      this.Controls.Add((Control) this.picture);
      this.Controls.Add((Control) this.txtDescriptionDE);
      this.Controls.Add((Control) this.lblDescriptionDE);
      this.Controls.Add((Control) this.txtDescriptionEN);
      this.Controls.Add((Control) this.lblDescriptionEN);
      this.Controls.Add((Control) this.btnSave);
      this.Controls.Add((Control) this.btnNew);
      this.Controls.Add((Control) this.btnRemove);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.btnOK);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (AddImagesForm);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Add Images";
      this.Load += new System.EventHandler(this.AddImagesForm_Load);
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      ((ISupportInitialize) this.picture).EndInit();
      ((ISupportInitialize) this.tableImages).EndInit();
      ((ISupportInitialize) this.error).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- AddReadoutSettingsForm.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.AddReadoutSettingsForm
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class AddReadoutSettingsForm : Form
  {
    private GMMSettings currentSettings;
    private int? currentReadoutSettingsID;
    private IContainer components = (IContainer) null;
    private DataGridView tableReadoutSettings;
    private Button btnNew;
    private Button btnSave;
    private Button btnRemove;
    private Panel panel1;
    private Label label2;
    private Label label3;
    private Button btnOK;
    private GroupBox groupBox1;
    private Label lblDescriptionDE;
    private TextBox txtDescriptionDE;
    private Label lblDescriptionEN;
    private Button btnGoToAsyncCom;
    private Label lblAsyncComSettings;
    private TextBox txtDescriptionEN;
    private TextBox txtAsyncComSettings;
    private TextBox txtDeviceCollectorSettings;
    private Label lblDeviceCollectorSettings;
    private Button btnGoToDeviceCollector;
    private Label label7;
    private DataGridViewTextBoxColumn colReadoutDeviceSettings;
    private ErrorProvider error;

    public AddReadoutSettingsForm() => this.InitializeComponent();

    public static void Show() => AddReadoutSettingsForm.Show((Form) null);

    public static void Show(Form owner)
    {
      using (AddReadoutSettingsForm readoutSettingsForm = new AddReadoutSettingsForm())
      {
        if (owner != null)
          readoutSettingsForm.Owner = owner;
        int num = (int) readoutSettingsForm.ShowDialog();
      }
    }

    private void AddReadoutSettingsForm_Load(object sender, EventArgs e)
    {
      this.LoadReadoutSettings();
    }

    private void tableReadoutSettings_SelectionChanged(object sender, EventArgs e)
    {
      if (this.tableReadoutSettings.SelectedRows.Count != 1)
      {
        this.txtDescriptionDE.Text = string.Empty;
        this.txtDescriptionEN.Text = string.Empty;
        this.txtAsyncComSettings.Text = string.Empty;
        this.txtDeviceCollectorSettings.Text = string.Empty;
        this.currentSettings = (GMMSettings) null;
        this.currentReadoutSettingsID = new int?();
      }
      else
      {
        if (!(this.tableReadoutSettings.SelectedRows[0].Tag is ReadoutGmmSettings tag))
          return;
        this.currentSettings = new GMMSettings();
        this.currentSettings.SetSettings(tag.Settings);
        this.currentReadoutSettingsID = new int?(tag.ReadoutSettingsID);
        this.UpdateSelectedSettings();
      }
    }

    private void btnGoToAsyncCom_Click(object sender, EventArgs e)
    {
      ZR_Component.CommonGmmInterface.GarantComponentLoaded(GMM_Components.AsyncCom);
      if (!(ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.AsyncCom] is IWindow loadedComponents) || !(loadedComponents.ShowWindow((object) this.txtAsyncComSettings.Text) is SortedList<AsyncComSettings, object> newAsyncComSettings))
        return;
      if (this.currentSettings == null)
        this.currentSettings = new GMMSettings();
      this.currentSettings.SetAsyncComSettings(newAsyncComSettings);
      this.UpdateSelectedSettings();
    }

    private void btnGoToDeviceCollector_Click(object sender, EventArgs e)
    {
      ZR_Component.CommonGmmInterface.GarantComponentLoaded(GMM_Components.DeviceCollector);
      if (!(ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.DeviceCollector] is IWindow loadedComponents) || !(loadedComponents.ShowWindow((object) this.txtDeviceCollectorSettings.Text) is SortedList<DeviceCollectorSettings, object> deviceCollectorSettings))
        return;
      if (this.currentSettings == null)
        this.currentSettings = new GMMSettings();
      this.currentSettings.SetDeviceCollectorSettings(deviceCollectorSettings);
      this.UpdateSelectedSettings();
    }

    private void btnSave_Click(object sender, EventArgs e)
    {
      this.error.Clear();
      bool flag = true;
      if (this.currentSettings == null)
      {
        this.error.SetError((Control) this.lblAsyncComSettings, "Can not be empty!");
        this.error.SetError((Control) this.lblDeviceCollectorSettings, "Can not be empty!");
        flag = false;
      }
      if (string.IsNullOrEmpty(this.txtDescriptionDE.Text))
      {
        this.error.SetError((Control) this.lblDescriptionDE, "Can not be empty!");
        flag = false;
      }
      if (string.IsNullOrEmpty(this.txtDescriptionEN.Text))
      {
        this.error.SetError((Control) this.lblDescriptionEN, "Can not be empty!");
        flag = false;
      }
      if (!flag)
        return;
      string communicationSettings = this.currentSettings.GetCommunicationSettings();
      if (string.IsNullOrEmpty(communicationSettings))
        return;
      if (!this.currentReadoutSettingsID.HasValue)
      {
        ReadoutGmmSettings readoutGmmSettings = MeterDatabase.AddReadoutSettings(communicationSettings);
        if (readoutGmmSettings != null)
        {
          this.currentReadoutSettingsID = new int?(readoutGmmSettings.ReadoutSettingsID);
        }
        else
        {
          ZR_ClassLibMessages.ShowAndClearErrors();
          return;
        }
      }
      else
        MeterDatabase.UpdateReadoutSettings(this.currentReadoutSettingsID.Value, communicationSettings);
      if (!this.currentReadoutSettingsID.HasValue)
        ;
      int? readoutSettingsId = this.currentReadoutSettingsID;
      this.LoadReadoutSettings();
      this.SelectReadoutSettings(readoutSettingsId);
    }

    private void btnNew_Click(object sender, EventArgs e)
    {
      this.tableReadoutSettings.ClearSelection();
      this.error.Clear();
      this.txtDescriptionDE.Text = string.Empty;
      this.txtDescriptionEN.Text = string.Empty;
      this.txtAsyncComSettings.Text = string.Empty;
      this.txtDeviceCollectorSettings.Text = string.Empty;
      this.currentSettings = (GMMSettings) null;
      this.currentReadoutSettingsID = new int?();
    }

    private void btnRemove_Click(object sender, EventArgs e)
    {
      if (!this.currentReadoutSettingsID.HasValue || DialogResult.Yes != MessageBox.Show((IWin32Window) this, this.GetTranslatedLanguageText("MeterInstaller", "ConfirmReally"), this.GetTranslatedLanguageText("MeterReader", "Delete"), MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2))
        return;
      MeterDatabase.DeleteReadoutTypeBySettingsID(this.currentReadoutSettingsID.Value);
      MeterDatabase.DeleteReadoutSettings(this.currentReadoutSettingsID.Value);
      ZR_ClassLibMessages.ShowAndClearErrors();
      this.LoadReadoutSettings();
    }

    private void LoadReadoutSettings()
    {
      this.tableReadoutSettings.Rows.Clear();
      List<ReadoutGmmSettings> readoutGmmSettingsList = MeterDatabase.LoadReadoutSettings();
      ZR_ClassLibMessages.ShowAndClearErrors();
      if (readoutGmmSettingsList == null || readoutGmmSettingsList.Count == 0)
        return;
      foreach (ReadoutGmmSettings readoutGmmSettings in readoutGmmSettingsList)
        this.tableReadoutSettings.Rows[this.tableReadoutSettings.Rows.Add(new object[1]
        {
          (object) this.GetTranslatedLanguageText("ReadoutSettingsID", readoutGmmSettings.ReadoutSettingsID.ToString())
        })].Tag = (object) readoutGmmSettings;
      this.tableReadoutSettings.ClearSelection();
    }

    private void UpdateSelectedSettings()
    {
      this.txtAsyncComSettings.Text = string.Empty;
      this.txtDeviceCollectorSettings.Text = string.Empty;
      if (!this.currentReadoutSettingsID.HasValue)
        ;
      if (this.currentSettings == null)
        return;
      this.txtAsyncComSettings.Text = this.currentSettings.GetAsyncComSettingsString();
      this.txtDeviceCollectorSettings.Text = this.currentSettings.GetDeviceCollectorSettingsString();
    }

    private void SelectReadoutSettings(int? readoutSettingsID)
    {
      this.tableReadoutSettings.ClearSelection();
      if (!readoutSettingsID.HasValue)
        return;
      foreach (DataGridViewRow row in (IEnumerable) this.tableReadoutSettings.Rows)
      {
        if ((row.Tag as ReadoutGmmSettings).ReadoutSettingsID == readoutSettingsID.Value)
        {
          row.Selected = true;
          break;
        }
      }
    }

    private string GetTranslatedLanguageText(string GmmModule, string TextKey)
    {
      string str = GmmModule + TextKey;
      return Ot.Gtt(Tg.Common, str, str);
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (AddReadoutSettingsForm));
      this.tableReadoutSettings = new DataGridView();
      this.colReadoutDeviceSettings = new DataGridViewTextBoxColumn();
      this.btnNew = new Button();
      this.btnSave = new Button();
      this.btnRemove = new Button();
      this.panel1 = new Panel();
      this.label2 = new Label();
      this.label3 = new Label();
      this.btnOK = new Button();
      this.groupBox1 = new GroupBox();
      this.lblDescriptionDE = new Label();
      this.txtDescriptionDE = new TextBox();
      this.lblDescriptionEN = new Label();
      this.btnGoToAsyncCom = new Button();
      this.lblAsyncComSettings = new Label();
      this.txtDescriptionEN = new TextBox();
      this.txtAsyncComSettings = new TextBox();
      this.txtDeviceCollectorSettings = new TextBox();
      this.lblDeviceCollectorSettings = new Label();
      this.btnGoToDeviceCollector = new Button();
      this.label7 = new Label();
      this.error = new ErrorProvider(this.components);
      ((ISupportInitialize) this.tableReadoutSettings).BeginInit();
      this.panel1.SuspendLayout();
      this.groupBox1.SuspendLayout();
      ((ISupportInitialize) this.error).BeginInit();
      this.SuspendLayout();
      this.tableReadoutSettings.AllowUserToAddRows = false;
      this.tableReadoutSettings.AllowUserToDeleteRows = false;
      this.tableReadoutSettings.AllowUserToResizeRows = false;
      this.tableReadoutSettings.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
      this.tableReadoutSettings.BackgroundColor = Color.White;
      this.tableReadoutSettings.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.tableReadoutSettings.ColumnHeadersVisible = false;
      this.tableReadoutSettings.Columns.AddRange((DataGridViewColumn) this.colReadoutDeviceSettings);
      this.tableReadoutSettings.Dock = DockStyle.Fill;
      this.tableReadoutSettings.Location = new Point(3, 16);
      this.tableReadoutSettings.MultiSelect = false;
      this.tableReadoutSettings.Name = "tableReadoutSettings";
      this.tableReadoutSettings.ReadOnly = true;
      this.tableReadoutSettings.RowHeadersVisible = false;
      this.tableReadoutSettings.ScrollBars = ScrollBars.Vertical;
      this.tableReadoutSettings.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
      this.tableReadoutSettings.Size = new Size(621, 166);
      this.tableReadoutSettings.TabIndex = 28;
      this.tableReadoutSettings.SelectionChanged += new System.EventHandler(this.tableReadoutSettings_SelectionChanged);
      this.colReadoutDeviceSettings.HeaderText = "ReadoutDeviceSettings";
      this.colReadoutDeviceSettings.Name = "colReadoutDeviceSettings";
      this.colReadoutDeviceSettings.ReadOnly = true;
      this.btnNew.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.btnNew.Image = (Image) componentResourceManager.GetObject("btnNew.Image");
      this.btnNew.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnNew.ImeMode = ImeMode.NoControl;
      this.btnNew.Location = new Point(13, 500);
      this.btnNew.Name = "btnNew";
      this.btnNew.Size = new Size(76, 27);
      this.btnNew.TabIndex = 7;
      this.btnNew.Text = "New";
      this.btnNew.TextAlign = ContentAlignment.MiddleRight;
      this.btnNew.UseVisualStyleBackColor = true;
      this.btnNew.Click += new System.EventHandler(this.btnNew_Click);
      this.btnSave.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.btnSave.Image = (Image) componentResourceManager.GetObject("btnSave.Image");
      this.btnSave.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSave.ImeMode = ImeMode.NoControl;
      this.btnSave.Location = new Point(95, 500);
      this.btnSave.Name = "btnSave";
      this.btnSave.Size = new Size(76, 27);
      this.btnSave.TabIndex = 8;
      this.btnSave.Text = "Save";
      this.btnSave.TextAlign = ContentAlignment.MiddleRight;
      this.btnSave.UseVisualStyleBackColor = true;
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnRemove.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.btnRemove.Image = (Image) componentResourceManager.GetObject("btnRemove.Image");
      this.btnRemove.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnRemove.ImeMode = ImeMode.NoControl;
      this.btnRemove.Location = new Point(211, 500);
      this.btnRemove.Name = "btnRemove";
      this.btnRemove.Size = new Size(76, 27);
      this.btnRemove.TabIndex = 9;
      this.btnRemove.Text = "Remove";
      this.btnRemove.TextAlign = ContentAlignment.MiddleRight;
      this.btnRemove.UseVisualStyleBackColor = true;
      this.btnRemove.Click += new System.EventHandler(this.btnRemove_Click);
      this.panel1.BackColor = Color.White;
      this.panel1.Controls.Add((Control) this.label2);
      this.panel1.Controls.Add((Control) this.label3);
      this.panel1.Dock = DockStyle.Top;
      this.panel1.Location = new Point(0, 0);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(646, 64);
      this.panel1.TabIndex = 32;
      this.label2.AutoSize = true;
      this.label2.Font = new Font("Microsoft Sans Serif", 9f);
      this.label2.ImeMode = ImeMode.NoControl;
      this.label2.Location = new Point(40, 32);
      this.label2.Name = "label2";
      this.label2.Size = new Size(218, 15);
      this.label2.TabIndex = 1;
      this.label2.Text = "Tool to create default read-out settings.";
      this.label3.AutoSize = true;
      this.label3.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold);
      this.label3.ImeMode = ImeMode.NoControl;
      this.label3.Location = new Point(23, 13);
      this.label3.Name = "label3";
      this.label3.Size = new Size(179, 16);
      this.label3.TabIndex = 0;
      this.label3.Text = "Default read-out Settings";
      this.btnOK.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnOK.DialogResult = DialogResult.Cancel;
      this.btnOK.Image = (Image) componentResourceManager.GetObject("btnOK.Image");
      this.btnOK.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnOK.ImeMode = ImeMode.NoControl;
      this.btnOK.Location = new Point(561, 500);
      this.btnOK.Name = "btnOK";
      this.btnOK.Size = new Size(76, 27);
      this.btnOK.TabIndex = 10;
      this.btnOK.Text = "OK";
      this.groupBox1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.groupBox1.Controls.Add((Control) this.tableReadoutSettings);
      this.groupBox1.Location = new Point(10, 70);
      this.groupBox1.Name = "groupBox1";
      this.groupBox1.Size = new Size(627, 185);
      this.groupBox1.TabIndex = 35;
      this.groupBox1.TabStop = false;
      this.groupBox1.Text = "Type";
      this.lblDescriptionDE.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.lblDescriptionDE.AutoSize = true;
      this.lblDescriptionDE.Location = new Point(9, 258);
      this.lblDescriptionDE.Name = "lblDescriptionDE";
      this.lblDescriptionDE.Size = new Size(78, 13);
      this.lblDescriptionDE.TabIndex = 36;
      this.lblDescriptionDE.Text = "Description DE";
      this.txtDescriptionDE.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtDescriptionDE.Location = new Point(12, 274);
      this.txtDescriptionDE.MaxLength = (int) byte.MaxValue;
      this.txtDescriptionDE.Multiline = true;
      this.txtDescriptionDE.Name = "txtDescriptionDE";
      this.txtDescriptionDE.Size = new Size(625, 21);
      this.txtDescriptionDE.TabIndex = 1;
      this.lblDescriptionEN.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.lblDescriptionEN.AutoSize = true;
      this.lblDescriptionEN.Location = new Point(7, 300);
      this.lblDescriptionEN.Name = "lblDescriptionEN";
      this.lblDescriptionEN.Size = new Size(78, 13);
      this.lblDescriptionEN.TabIndex = 38;
      this.lblDescriptionEN.Text = "Description EN";
      this.btnGoToAsyncCom.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnGoToAsyncCom.Location = new Point(600, 430);
      this.btnGoToAsyncCom.Name = "btnGoToAsyncCom";
      this.btnGoToAsyncCom.Size = new Size(37, 23);
      this.btnGoToAsyncCom.TabIndex = 6;
      this.btnGoToAsyncCom.Text = "...";
      this.btnGoToAsyncCom.UseVisualStyleBackColor = true;
      this.btnGoToAsyncCom.Click += new System.EventHandler(this.btnGoToAsyncCom_Click);
      this.lblAsyncComSettings.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.lblAsyncComSettings.AutoSize = true;
      this.lblAsyncComSettings.Location = new Point(7, 416);
      this.lblAsyncComSettings.Name = "lblAsyncComSettings";
      this.lblAsyncComSettings.Size = new Size(98, 13);
      this.lblAsyncComSettings.TabIndex = 41;
      this.lblAsyncComSettings.Text = "AsyncCom Settings";
      this.txtDescriptionEN.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtDescriptionEN.Location = new Point(10, 316);
      this.txtDescriptionEN.MaxLength = (int) byte.MaxValue;
      this.txtDescriptionEN.Multiline = true;
      this.txtDescriptionEN.Name = "txtDescriptionEN";
      this.txtDescriptionEN.Size = new Size(627, 21);
      this.txtDescriptionEN.TabIndex = 2;
      this.txtAsyncComSettings.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtAsyncComSettings.Location = new Point(10, 432);
      this.txtAsyncComSettings.Multiline = true;
      this.txtAsyncComSettings.Name = "txtAsyncComSettings";
      this.txtAsyncComSettings.Size = new Size(584, 53);
      this.txtAsyncComSettings.TabIndex = 5;
      this.txtDeviceCollectorSettings.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtDeviceCollectorSettings.Location = new Point(10, 360);
      this.txtDeviceCollectorSettings.Multiline = true;
      this.txtDeviceCollectorSettings.Name = "txtDeviceCollectorSettings";
      this.txtDeviceCollectorSettings.Size = new Size(584, 53);
      this.txtDeviceCollectorSettings.TabIndex = 3;
      this.lblDeviceCollectorSettings.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.lblDeviceCollectorSettings.AutoSize = true;
      this.lblDeviceCollectorSettings.Location = new Point(7, 344);
      this.lblDeviceCollectorSettings.Name = "lblDeviceCollectorSettings";
      this.lblDeviceCollectorSettings.Size = new Size(123, 13);
      this.lblDeviceCollectorSettings.TabIndex = 45;
      this.lblDeviceCollectorSettings.Text = "DeviceCollector Settings";
      this.btnGoToDeviceCollector.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnGoToDeviceCollector.Location = new Point(600, 358);
      this.btnGoToDeviceCollector.Name = "btnGoToDeviceCollector";
      this.btnGoToDeviceCollector.Size = new Size(37, 23);
      this.btnGoToDeviceCollector.TabIndex = 4;
      this.btnGoToDeviceCollector.Text = "...";
      this.btnGoToDeviceCollector.UseVisualStyleBackColor = true;
      this.btnGoToDeviceCollector.Click += new System.EventHandler(this.btnGoToDeviceCollector_Click);
      this.label7.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label7.AutoSize = true;
      this.label7.Location = new Point(158, 257);
      this.label7.Name = "label7";
      this.label7.Size = new Size(198, 13);
      this.label7.TabIndex = 47;
      this.label7.Text = "( BusMode + Transponder + Equipment )";
      this.error.ContainerControl = (ContainerControl) this;
      this.AcceptButton = (IButtonControl) this.btnOK;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.CancelButton = (IButtonControl) this.btnOK;
      this.ClientSize = new Size(646, 539);
      this.Controls.Add((Control) this.txtDeviceCollectorSettings);
      this.Controls.Add((Control) this.lblDeviceCollectorSettings);
      this.Controls.Add((Control) this.txtAsyncComSettings);
      this.Controls.Add((Control) this.txtDescriptionEN);
      this.Controls.Add((Control) this.btnGoToDeviceCollector);
      this.Controls.Add((Control) this.lblAsyncComSettings);
      this.Controls.Add((Control) this.btnGoToAsyncCom);
      this.Controls.Add((Control) this.lblDescriptionEN);
      this.Controls.Add((Control) this.txtDescriptionDE);
      this.Controls.Add((Control) this.lblDescriptionDE);
      this.Controls.Add((Control) this.groupBox1);
      this.Controls.Add((Control) this.btnOK);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.btnNew);
      this.Controls.Add((Control) this.btnSave);
      this.Controls.Add((Control) this.btnRemove);
      this.Controls.Add((Control) this.label7);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (AddReadoutSettingsForm);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Default Read-out Settings";
      this.Load += new System.EventHandler(this.AddReadoutSettingsForm_Load);
      ((ISupportInitialize) this.tableReadoutSettings).EndInit();
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.groupBox1.ResumeLayout(false);
      ((ISupportInitialize) this.error).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- AddReadoutTypeForm.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.AddReadoutTypeForm
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class AddReadoutTypeForm : Form
  {
    private IContainer components = (IContainer) null;
    private Button btnCancel;
    private TextBox txtName;
    private Label label2;
    private Button btnOK;

    public AddReadoutTypeForm() => this.InitializeComponent();

    public static string Show() => AddReadoutTypeForm.Show((Form) null, (string) null);

    public static string Show(Form owner) => AddReadoutTypeForm.Show(owner, (string) null);

    public static string Show(Form owner, string name)
    {
      using (AddReadoutTypeForm addReadoutTypeForm = new AddReadoutTypeForm())
      {
        if (owner != null)
          addReadoutTypeForm.Owner = owner;
        if (name != null)
          addReadoutTypeForm.txtName.Text = name;
        return addReadoutTypeForm.ShowDialog() != DialogResult.OK ? (string) null : addReadoutTypeForm.txtName.Text;
      }
    }

    private void AddReadoutTypeForm_Load(object sender, EventArgs e) => this.txtName.Focus();

    private void btnOK_Click(object sender, EventArgs e)
    {
      this.DialogResult = DialogResult.OK;
      this.Close();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (AddReadoutTypeForm));
      this.btnCancel = new Button();
      this.txtName = new TextBox();
      this.label2 = new Label();
      this.btnOK = new Button();
      this.SuspendLayout();
      this.btnCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnCancel.DialogResult = DialogResult.Cancel;
      this.btnCancel.Image = (Image) componentResourceManager.GetObject("btnCancel.Image");
      this.btnCancel.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnCancel.ImeMode = ImeMode.NoControl;
      this.btnCancel.Location = new Point(141, 71);
      this.btnCancel.Name = "btnCancel";
      this.btnCancel.Size = new Size(75, 23);
      this.btnCancel.TabIndex = 3;
      this.btnCancel.Text = "Cancel";
      this.btnCancel.TextAlign = ContentAlignment.MiddleRight;
      this.btnCancel.UseVisualStyleBackColor = true;
      this.txtName.Location = new Point(12, 35);
      this.txtName.MaxLength = 50;
      this.txtName.Name = "txtName";
      this.txtName.Size = new Size(231, 20);
      this.txtName.TabIndex = 1;
      this.label2.AutoSize = true;
      this.label2.ImeMode = ImeMode.NoControl;
      this.label2.Location = new Point(12, 18);
      this.label2.Name = "label2";
      this.label2.Size = new Size(35, 13);
      this.label2.TabIndex = 8;
      this.label2.Text = "Name";
      this.btnOK.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnOK.Image = (Image) componentResourceManager.GetObject("btnOK.Image");
      this.btnOK.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnOK.ImeMode = ImeMode.NoControl;
      this.btnOK.Location = new Point(42, 71);
      this.btnOK.Name = "btnOK";
      this.btnOK.Size = new Size(75, 23);
      this.btnOK.TabIndex = 2;
      this.btnOK.Text = "OK";
      this.btnOK.UseVisualStyleBackColor = true;
      this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
      this.AcceptButton = (IButtonControl) this.btnOK;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.CancelButton = (IButtonControl) this.btnCancel;
      this.ClientSize = new Size((int) byte.MaxValue, 106);
      this.Controls.Add((Control) this.txtName);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.btnOK);
      this.Controls.Add((Control) this.btnCancel);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (AddReadoutTypeForm);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Readout Type";
      this.Load += new System.EventHandler(this.AddReadoutTypeForm_Load);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- AES.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.AES
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.Security.Cryptography;

#nullable disable
namespace ZR_ClassLibrary
{
  public static class AES
  {
    public const string KEYOFF_NAME = "OFF";
    public const string USRKEY_NAME = "**********";
    public const string RNG_NAME = "RANDOM KEY";
    public const string ZDK_NAME = "ZENNER DEFAULT KEY";
    public const string ZDK = "5A8470C4806F4A87CEF4D5F2D985AB18";
    public const string AES_OFF_KEY = "00000000000000000000000000000000";

    public static string AesKeyToString(byte[] key)
    {
      if (key == null)
        return (string) null;
      string str = key.Length == 16 ? Util.ByteArrayToHexString(key) : throw new Exception("The length of the key is not valid: " + Util.ByteArrayToHexString(key));
      switch (str)
      {
        case "5A8470C4806F4A87CEF4D5F2D985AB18":
          return "ZENNER DEFAULT KEY";
        case "00000000000000000000000000000000":
          return "OFF";
        default:
          return str;
      }
    }

    public static string AesKeyToString(uint Key0, uint Key1, uint Key2, uint Key3)
    {
      byte[] bytes1 = BitConverter.GetBytes(Key0);
      byte[] bytes2 = BitConverter.GetBytes(Key1);
      byte[] bytes3 = BitConverter.GetBytes(Key2);
      byte[] bytes4 = BitConverter.GetBytes(Key3);
      List<byte> byteList = new List<byte>();
      byteList.AddRange((IEnumerable<byte>) bytes1);
      byteList.AddRange((IEnumerable<byte>) bytes2);
      byteList.AddRange((IEnumerable<byte>) bytes3);
      byteList.AddRange((IEnumerable<byte>) bytes4);
      return AES.AesKeyToString(byteList.ToArray());
    }

    public static byte[] StringToAesKey(string keyName)
    {
      if (string.IsNullOrEmpty(keyName))
        return (byte[]) null;
      switch (keyName)
      {
        case "OFF":
          return (byte[]) null;
        case "ZENNER DEFAULT KEY":
          return Util.HexStringToByteArray("5A8470C4806F4A87CEF4D5F2D985AB18");
        case "RANDOM KEY":
          return AES.GenerateRandomNumber(16);
        default:
          keyName = keyName.Trim();
          if (keyName.Length != 32)
            throw new Exception("Length of the key is invalid: " + keyName);
          try
          {
            return Util.HexStringToByteArray(keyName);
          }
          catch (Exception ex)
          {
            throw new Exception("Key is invalid: " + keyName, ex);
          }
      }
    }

    public static List<string> AllowedKeys()
    {
      return new List<string>()
      {
        "OFF",
        "ZENNER DEFAULT KEY"
      };
    }

    private static byte[] GenerateRandomNumber(int bytes)
    {
      byte[] data = new byte[bytes];
      bool flag = true;
      do
      {
        new RNGCryptoServiceProvider().GetBytes(data);
        for (int index = 0; index < data.Length; ++index)
        {
          if (index != 0)
          {
            flag = false;
            break;
          }
        }
      }
      while (flag);
      return data;
    }
  }
}


--- API_Access.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.API_Access
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Runtime.InteropServices;
using System.Text;

#nullable disable
namespace ZR_ClassLibrary
{
  public class API_Access
  {
    private static int METHOD_BUFFERED = 0;
    private static int FILE_ANY_ACCESS = 0;
    private static int FILE_DEVICE_HAL = 257;
    private const int ERROR_NOT_SUPPORTED = 50;
    private const int ERROR_INSUFFICIENT_BUFFER = 122;
    private static int IOCTL_HAL_GET_DEVICEID = API_Access.FILE_DEVICE_HAL << 16 | API_Access.FILE_ANY_ACCESS << 14 | 84 | API_Access.METHOD_BUFFERED;

    [DllImport("coredll.dll", SetLastError = true)]
    private static extern bool KernelIoControl(
      int dwIoControlCode,
      IntPtr lpInBuf,
      int nInBufSize,
      byte[] lpOutBuf,
      int nOutBufSize,
      ref int lpBytesReturned);

    public static string GetDeviceID()
    {
      byte[] lpOutBuf = new byte[256];
      bool flag = false;
      int nOutBufSize = lpOutBuf.Length;
      BitConverter.GetBytes(nOutBufSize).CopyTo((Array) lpOutBuf, 0);
      int lpBytesReturned = 0;
      while (!flag)
      {
        if (API_Access.KernelIoControl(API_Access.IOCTL_HAL_GET_DEVICEID, IntPtr.Zero, 0, lpOutBuf, nOutBufSize, ref lpBytesReturned))
        {
          flag = true;
        }
        else
        {
          switch (Marshal.GetLastWin32Error())
          {
            case 50:
              throw new NotSupportedException("IOCTL_HAL_GET_DEVICEID nicht unsterstützt");
            case 122:
              nOutBufSize = BitConverter.ToInt32(lpOutBuf, 0);
              lpOutBuf = new byte[nOutBufSize];
              BitConverter.GetBytes(nOutBufSize).CopyTo((Array) lpOutBuf, 0);
              break;
            default:
              throw new SystemException("Fehler beim Auslesen der DeviceID");
          }
        }
      }
      int int32_1 = BitConverter.ToInt32(lpOutBuf, 4);
      int int32_2 = BitConverter.ToInt32(lpOutBuf, 12);
      int int32_3 = BitConverter.ToInt32(lpOutBuf, 16);
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(string.Format("{0:X8}-{1:X4}-{2:X4}-{3:X4}-", (object) BitConverter.ToInt32(lpOutBuf, int32_1), (object) BitConverter.ToInt16(lpOutBuf, int32_1 + 4), (object) BitConverter.ToInt16(lpOutBuf, int32_1 + 6), (object) BitConverter.ToInt16(lpOutBuf, int32_1 + 8)));
      for (int index = int32_2; index < int32_2 + int32_3; ++index)
        stringBuilder.Append(string.Format("{0:X2}", (object) lpOutBuf[index]));
      return stringBuilder.ToString();
    }
  }
}


--- AsyncComSettings.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.AsyncComSettings
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum AsyncComSettings
  {
    Type,
    Baudrate,
    COMserver,
    Port,
    Parity,
    UseBreak,
    EchoOn,
    TestEcho,
    RecTime_BeforFirstByte,
    RecTime_OffsetPerByte,
    RecTime_GlobalOffset,
    TransTime_GlobalOffset,
    RecTransTime,
    TransTime_BreakTime,
    TransTime_AfterBreak,
    WaitBeforeRepeatTime,
    BreakIntervalTime,
    MinoConnectTestFor,
    MinoConnectPowerOffTime,
    Wakeup,
    TransceiverDevice,
    ForceMinoConnectState,
    IrDaSelection,
    HardwareHandshake,
    MinoConnectIsUSB,
    MinoConnectIrDaPulseTime,
    RecTime_OffsetPerBlock,
    MinoConnectBaseState,
  }
}


--- BaseConfigID.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.BaseConfigID
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum BaseConfigID
  {
    HSrL,
    HSrH,
    HdrL,
    HEnL,
    CSrL,
    CSrH,
    CdrL,
    CEnL,
    OSrL,
    OSrH,
    OdrL,
    OEnL,
    FSrL,
    FSrH,
    FdrL,
    FEnL,
    nil,
  }
}


--- BaseTypeCheck.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.BaseTypeCheck
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using CorporateDesign;
using GmmDbLib;
using System;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class BaseTypeCheck : Form
  {
    private string SQL;
    private string errorMsg;
    private DataTable MeterInfoTab = new DataTable("MeterInfo");
    private DataGrid dataGrid1;
    private Button OkButton;
    private Label label1;
    private Label InfoTextLabel;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private Button ZRCancelButton;
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;

    public BaseTypeCheck(string InfoText, int theMeterInfoID)
    {
      this.InitializeComponent();
      DbBasis primaryDb = DbBasis.PrimaryDB;
      try
      {
        this.InfoTextLabel.Text = InfoText;
        this.SQL = "select * from MeterInfo where MeterTypeID = (select MeterTypeID from MeterInfo where MeterInfoID = " + theMeterInfoID.ToString() + ")";
        using (IDbConnection dbConnection = primaryDb.GetDbConnection())
        {
          dbConnection.Open();
          primaryDb.ZRDataAdapter(this.SQL, dbConnection).Fill(this.MeterInfoTab);
          dbConnection.Close();
        }
        this.dataGrid1.DataSource = (object) this.MeterInfoTab;
      }
      catch (Exception ex)
      {
        this.errorMsg = ex.ToString();
        int num = (int) MessageBox.Show(this.errorMsg);
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (BaseTypeCheck));
      this.dataGrid1 = new DataGrid();
      this.OkButton = new Button();
      this.ZRCancelButton = new Button();
      this.label1 = new Label();
      this.InfoTextLabel = new Label();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.dataGrid1.BeginInit();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.dataGrid1, "dataGrid1");
      this.dataGrid1.DataMember = "";
      this.dataGrid1.HeaderForeColor = SystemColors.ControlText;
      this.dataGrid1.Name = "dataGrid1";
      componentResourceManager.ApplyResources((object) this.OkButton, "OkButton");
      this.OkButton.DialogResult = DialogResult.OK;
      this.OkButton.Name = "OkButton";
      componentResourceManager.ApplyResources((object) this.ZRCancelButton, "ZRCancelButton");
      this.ZRCancelButton.DialogResult = DialogResult.Cancel;
      this.ZRCancelButton.Name = "ZRCancelButton";
      componentResourceManager.ApplyResources((object) this.label1, "label1");
      this.label1.Name = "label1";
      componentResourceManager.ApplyResources((object) this.InfoTextLabel, "InfoTextLabel");
      this.InfoTextLabel.Name = "InfoTextLabel";
      componentResourceManager.ApplyResources((object) this.zennerCoroprateDesign1, "zennerCoroprateDesign1");
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      componentResourceManager.ApplyResources((object) this, "$this");
      this.Controls.Add((Control) this.InfoTextLabel);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.ZRCancelButton);
      this.Controls.Add((Control) this.OkButton);
      this.Controls.Add((Control) this.dataGrid1);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Name = nameof (BaseTypeCheck);
      this.dataGrid1.EndInit();
      this.ResumeLayout(false);
    }

    public bool checkIfBaseType(int theMeterInfoID)
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      try
      {
        DataTable dataTable = new DataTable();
        this.SQL = "select MeterInfoID from MeterInfo where MeterInfoID = " + theMeterInfoID.ToString() + " and PPSArtikelNr = 'BASETYPE'";
        using (IDbConnection dbConnection = primaryDb.GetDbConnection())
        {
          dbConnection.Open();
          primaryDb.ZRDataAdapter(this.SQL, dbConnection).Fill(dataTable);
          dbConnection.Close();
        }
        return dataTable.Rows.Count > 0;
      }
      catch (Exception ex)
      {
        this.errorMsg = ex.ToString();
        return false;
      }
    }

    public int getBaseTypeMeterInfoID(
      int childMeterInfoID,
      out int baseTypeMeterInfoID,
      out string ErrorMsg)
    {
      ErrorMsg = "";
      DataTable dataTable = new DataTable();
      baseTypeMeterInfoID = -1;
      DbBasis primaryDb = DbBasis.PrimaryDB;
      try
      {
        string SqlCommand = "select MeterInfoID from MeterInfo where MeterTypeID = (select MeterTypeID from MeterInfo where MeterInfoID = " + childMeterInfoID.ToString() + ") and HardwareTypeID = (select HardwareTypeID from MeterInfo where MeterInfoID = " + childMeterInfoID.ToString() + ") and MeterHardwareID = (select MeterHardwareID from MeterInfo where MeterInfoID = " + childMeterInfoID.ToString() + ") and DefaultFunctionNr = (select DefaultFunctionNr from MeterInfo where MeterInfoID = " + childMeterInfoID.ToString() + ") and PPSArtikelNr = 'BASETYPE'";
        using (IDbConnection dbConnection = primaryDb.GetDbConnection())
        {
          dbConnection.Open();
          primaryDb.ZRDataAdapter(SqlCommand, dbConnection).Fill(dataTable);
          dbConnection.Close();
        }
        int baseTypeMeterInfoId;
        if (dataTable.Rows.Count > 0)
        {
          baseTypeMeterInfoID = int.Parse(dataTable.Rows[0]["MeterInfoID"].ToString());
          baseTypeMeterInfoId = 0;
        }
        else
        {
          ErrorMsg = "Can not find a BASETYPE of the MeterinfoType: " + childMeterInfoID.ToString();
          baseTypeMeterInfoId = 1024;
        }
        return baseTypeMeterInfoId;
      }
      catch
      {
        return 2;
      }
    }
  }
}


--- BATTERIE_TYP.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.BATTERIE_TYP
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum BATTERIE_TYP
  {
    NONE,
    A_CELL,
    C_CELL,
    D_CELL,
  }
}


--- BATTERIE_TYP_PDC.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.BATTERIE_TYP_PDC
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum BATTERIE_TYP_PDC
  {
    NONE,
    A_3_6V,
    AA_23_3V,
    AA_23_3_6V,
  }
}


--- BusMode.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.BusMode
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum BusMode
  {
    MBusPointToPoint,
    MBus,
    WaveFlowRadio,
    MinomatV2,
    MinomatV3,
    MinomatV4,
    MinomatRadioTest,
    Minol_Device,
    RelayDevice,
    Radio2,
    Radio3,
    Radio4,
    wMBusS1,
    wMBusS1M,
    wMBusS2,
    wMBusT1,
    wMBusT2_meter,
    wMBusT2_other,
    wMBusC1A,
    wMBusC1B,
    Radio3_868_95_RUSSIA,
    RadioMS,
    SmokeDetector,
    NFC,
    unknown,
  }
}


--- ByteField.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ByteField
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Collections.Generic;
using System.Text;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ByteField
  {
    public byte[] Data;
    public int Count;

    public ByteField()
    {
      this.Data = new byte[270];
      this.Count = 0;
    }

    public ByteField(int Size)
    {
      this.Data = new byte[Size];
      this.Count = 0;
    }

    public ByteField(byte[] ByteArray)
    {
      this.Data = ByteArray;
      this.Count = ByteArray.Length;
    }

    public ByteField(List<byte> theList)
    {
      this.Data = theList.ToArray();
      this.Count = theList.Count;
    }

    public void Add(byte Byte) => this.Data[this.Count++] = Byte;

    public void Add(int IntToByte) => this.Data[this.Count++] = (byte) IntToByte;

    public void Add(ref ByteField FieldToAdd)
    {
      for (int index = 0; index < FieldToAdd.Count; ++index)
        this.Data[this.Count++] = FieldToAdd.Data[index];
    }

    public void Add(ByteField FieldToAdd)
    {
      for (int index = 0; index < FieldToAdd.Count; ++index)
        this.Data[this.Count++] = FieldToAdd.Data[index];
    }

    public void Add(byte[] buffer)
    {
      for (int index = 0; index < buffer.Length; ++index)
        this.Data[this.Count++] = buffer[index];
    }

    public void Add(string StringToAdd)
    {
      for (int index = 0; index < StringToAdd.Length; ++index)
        this.Data[this.Count++] = (byte) StringToAdd[index];
    }

    public void ToHexString(ref string DataString)
    {
      for (int index = 0; index < this.Count; ++index)
        DataString = DataString + "0x" + this.Data[index].ToString("x2") + " ";
    }

    public void GetOptimalField(out byte[] DataOut)
    {
      DataOut = new byte[this.Count];
      for (int index = 0; index < this.Count; ++index)
        DataOut[index] = this.Data[index];
    }

    public string GetTraceString()
    {
      StringBuilder stringBuilder = new StringBuilder(" ");
      for (int index = 0; index < this.Count; ++index)
        stringBuilder.Append(this.Data[index].ToString("x02"));
      return stringBuilder.ToString();
    }

    public byte[] GetByteArray()
    {
      byte[] byteArray = new byte[this.Count];
      for (int index = 0; index < this.Count; ++index)
        byteArray[index] = this.Data[index];
      return byteArray;
    }
  }
}


--- CachedIDAtom.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.CachedIDAtom
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  internal class CachedIDAtom
  {
    internal string TableName;
    internal string FieldName;
    internal long NextID;
    internal long LastID;

    internal CachedIDAtom(
      string theTableName,
      string theFieldName,
      long theFirstID,
      long theLastID)
    {
      this.TableName = theTableName;
      this.FieldName = theFieldName;
      this.NextID = theFirstID;
      this.LastID = theLastID;
    }

    internal bool getActualID(out long newID)
    {
      bool actualId = false;
      newID = -1L;
      if (this.NextID <= this.LastID)
      {
        actualId = true;
        newID = this.NextID++;
      }
      return actualId;
    }
  }
}


--- CalDate.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.CalDate
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public class CalDate
  {
    public uint Day;
    public uint Month;
    public uint Year;
  }
}


--- CalStruct.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.CalStruct
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public class CalStruct
  {
    public uint Secound;
    public uint Minute;
    public uint Hour;
    public uint Day;
    public uint Month;
    public uint Year;
  }
}


--- CalTime.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.CalTime
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public class CalTime
  {
    public uint Secound;
    public uint Minute;
    public uint Hour;
  }
}


--- ChoiceDeviceList.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ChoiceDeviceList
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  [Flags]
  public enum ChoiceDeviceList
  {
    Readout = 0,
    Config = 1,
  }
}


--- COMPLETION.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.COMPLETION
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum COMPLETION
  {
    STANDALONE,
    WATER_METER,
  }
}


--- ConfigurationGroup.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ConfigurationGroup
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum ConfigurationGroup
  {
    DeviceInformation,
    Battery,
    MeasurementSetup,
    Default,
    Radio,
    Input,
    MenuDefinition,
    VolumeCalibration,
    TemperatureCalibration,
    SmartFunctions,
  }
}


--- ConfigurationLevel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ConfigurationLevel
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  [Flags]
  public enum ConfigurationLevel
  {
    Native = 1,
    Standard = 2,
    Advanced = 4,
    Huge = 8,
  }
}


--- ConfigurationParameter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ConfigurationParameter
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using NLog;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ConfigurationParameter : IComparable<ConfigurationParameter>
  {
    private static Logger ConfigParamLogger = LogManager.GetLogger(nameof (ConfigurationParameter));
    public static ConfigurationLevel ActiveConfigurationLevel = ConfigurationLevel.Native;
    public readonly OverrideID ParameterID;
    private object _parameterValue;
    public object MinParameterValue = (object) null;
    public object MaxParameterValue = (object) null;
    public int SubDevice;
    protected Decimal TrueDivisor;
    private ConfigurationParameter.MeterStringFormater MyStringFormater;
    public static SortedList<OverrideID, ConfigurationParameter.ConPaInfo> ConfigParametersByOverrideID = new SortedList<OverrideID, ConfigurationParameter.ConPaInfo>();
    private static ConfigurationParameter.StringMSF StringMSF_fun = new ConfigurationParameter.StringMSF();
    private static ConfigurationParameter.BoolMSF BoolMSF_fun = new ConfigurationParameter.BoolMSF();
    private static ConfigurationParameter.UlongMSF UlongMSF_fun = new ConfigurationParameter.UlongMSF();
    private static ConfigurationParameter.IntMSF intMSF_fun = new ConfigurationParameter.IntMSF();
    private static ConfigurationParameter.UIntMSF uintMSF_fun = new ConfigurationParameter.UIntMSF();
    private static ConfigurationParameter.doubleMSF doubleMSF_fun = new ConfigurationParameter.doubleMSF();
    private static ConfigurationParameter.DecimalMSF DecimalMSF_fun = new ConfigurationParameter.DecimalMSF();
    private static ConfigurationParameter.DateTimeMSF DateTimeMSF_fun = new ConfigurationParameter.DateTimeMSF();
    private static ConfigurationParameter.YearMSF YearMSF_fun = new ConfigurationParameter.YearMSF();
    private static ConfigurationParameter.TemperatureMSF TemperatureMSF_fun = new ConfigurationParameter.TemperatureMSF();
    private static ConfigurationParameter.MinolMeterDeviceListMSF MinolMeterDeviceListMSF_fun = new ConfigurationParameter.MinolMeterDeviceListMSF();
    private static ConfigurationParameter.UShortMSF UshortMSF_fun = new ConfigurationParameter.UShortMSF();
    private static ConfigurationParameter.ShortMSF ShortMSF_fun = new ConfigurationParameter.ShortMSF();
    private static ConfigurationParameter.ByteMSF byteMSF_fun = new ConfigurationParameter.ByteMSF();
    private static ConfigurationParameter.FloatMSF floatMSF_fun = new ConfigurationParameter.FloatMSF();
    private static ConfigurationParameter.UintHexKey8 uintHexKey8_fun = new ConfigurationParameter.UintHexKey8();
    private static ConfigurationParameter.UlongHexKey16 ulongHexKey16_fun = new ConfigurationParameter.UlongHexKey16();
    private static ConfigurationParameter.ByteArrayHexKey32 byteArrayHexKey32_fun = new ConfigurationParameter.ByteArrayHexKey32();
    private static ConfigurationParameter.Enum_MSF Enum_MSF_fun = new ConfigurationParameter.Enum_MSF();
    private static ConfigurationParameter.SelectListMSF SelectListMSF_fun = new ConfigurationParameter.SelectListMSF();

    public string ParameterKey { get; set; }

    public object ParameterValue
    {
      get => this._parameterValue;
      set
      {
        try
        {
          object defaultValue = this.ParameterInfo.DefaultValue;
          if (value != null)
          {
            Type type = defaultValue.GetType();
            if (value.GetType() != type)
            {
              string message = "Illegal type for ConfigurationParameter " + this.ParameterID.ToString() + Environment.NewLine + "Required Type: " + ConfigurationParameter.ConfigParametersByOverrideID[this.ParameterID].DefaultValue.GetType().ToString() + Environment.NewLine + "Used Type: " + value.GetType().ToString();
              if (this.ParameterInfo.FormatControlled)
                throw new ArgumentException(message);
              ConfigurationParameter.ConfigParamLogger.Trace(message);
            }
            else if (type == typeof (byte[]) && ((byte[]) defaultValue).Length != ((byte[]) value).Length)
            {
              string[] strArray = new string[8]
              {
                "Illegal byte[] length for ConfigurationParameter ",
                this.ParameterID.ToString(),
                Environment.NewLine,
                "Required byte[] length: ",
                null,
                null,
                null,
                null
              };
              int length = ((byte[]) defaultValue).Length;
              strArray[4] = length.ToString();
              strArray[5] = Environment.NewLine;
              strArray[6] = "Used byte[] length: : ";
              length = ((byte[]) value).Length;
              strArray[7] = length.ToString();
              string message = string.Concat(strArray);
              if (this.ParameterInfo.FormatControlled)
                throw new ArgumentException(message);
              ConfigurationParameter.ConfigParamLogger.Trace(message);
            }
          }
        }
        catch (Exception ex)
        {
          throw new ArgumentException("ParameterValue check error on ConfigurationParameter " + this.ParameterID.ToString() + Environment.NewLine + ex.Message);
        }
        this._parameterValue = value;
      }
    }

    public Type ParameterType => this.ParameterInfo.DefaultValue.GetType();

    public string Unit { get; set; }

    public string Format { get; set; }

    public bool HasWritePermission { get; set; }

    public bool IsEditable { get; set; }

    public bool IsFunction { get; set; }

    public string[] AllowedValues { get; set; }

    public ConfigurationParameter.ConPaInfo ParameterInfo { get; private set; }

    public override string ToString() => this.GetStringValueWin();

    public void Pars(string StringValue) => this.SetValueFromStringWin(StringValue);

    public string GetStringValueDb() => this.MyStringFormater.GetStringValueDb(this);

    public virtual string GetStringValueWin() => this.MyStringFormater.GetStringValueWin(this);

    public void SetValueFromStringDb(string StringValue)
    {
      this.MyStringFormater.SetValueFromStringDb(StringValue, this);
    }

    public virtual void SetValueFromStringWin(string StringValue)
    {
      this.MyStringFormater.SetValueFromStringWin(StringValue, this);
    }

    static ConfigurationParameter()
    {
      ConfigurationParameter.AddCoPaInfo(OverrideID.PrintedSerialNumber, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.DeviceInformation, 1, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MBusAddress, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SerialNumber, false, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.DeviceInformation, 2, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MeterID, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 3, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.BaseTypeID, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.NominalFlow, true, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Flow, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DeviceName, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.DeviceInformation, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Medium, true, OverrideID.Unknown, 0, false, (object) MBusDeviceType.UNKNOWN, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_MBusMediumMSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Manufacturer, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CustomID, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MBusIdentificationNo, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.FactoryTypeID, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SerialNumberFull, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SapNumber, true, OverrideID.Unknown, 0, false, (object) 0U, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.uintMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.OrderNumber, true, OverrideID.Unknown, 0, false, (object) 0L, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MBusGeneration, true, OverrideID.Unknown, 0, false, (object) (byte) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.byteMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SerialNumberSecondary, true, OverrideID.Unknown, 0, false, (object) 0U, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.uintMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.FirmwareVersion, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.LoRaWanVersion, true, OverrideID.Unknown, 0, true, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.LoRaVersion, true, OverrideID.Unknown, 0, true, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioVersion, true, OverrideID.Unknown, 0, true, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Signature, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ModuleType, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Protected, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.NumberOfSubDevices, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ErrorDate, true, OverrideID.Unknown, 0, false, (object) DateTime.MinValue, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DiagnosticString, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DeviceHasError, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.LastErrorDate, true, OverrideID.Unknown, 0, false, (object) DateTime.MinValue, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Manipulation, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ManipulationDate, true, OverrideID.Unknown, 0, false, (object) DateTime.MinValue, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.OperatingHours, true, OverrideID.Unknown, 0, false, (object) 0L, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.OperatingHours, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioTechnology, true, OverrideID.Unknown, 0, false, (object) RadioTechnology.None, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.Enum_MSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Radio, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioFrequence, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_RadioFrequence_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Frequence, true, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioSendInterval, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioSendOffset, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioProtocol, true, OverrideID.Unknown, 0, false, (object) RadioProtocol.Undefined, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_RadioMode_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioEnabled, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioEpsilonOffsetEnabled, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioActiveMonday, true, OverrideID.Unknown, 0, false, (object) true, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Radio, 1, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioActiveTuesday, true, OverrideID.Unknown, 0, false, (object) true, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Radio, 2, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioActiveWednesday, true, OverrideID.Unknown, 0, false, (object) true, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Radio, 3, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioActiveThursday, true, OverrideID.Unknown, 0, false, (object) true, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Radio, 4, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioActiveFriday, true, OverrideID.Unknown, 0, false, (object) true, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Radio, 5, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioActiveSaturday, true, OverrideID.Unknown, 0, false, (object) true, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Radio, 6, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioActiveSunday, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Radio, 7, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioActiveStartTime, true, OverrideID.Unknown, 0, false, (object) (byte) 5, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.byteMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Radio, 8, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioActiveStopTime, true, OverrideID.Unknown, 0, false, (object) (byte) 23, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.byteMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Radio, 9, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.JoinEUI, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.ulongHexKey16_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DevEUI, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.ulongHexKey16_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.AppKey, true, OverrideID.Unknown, 0, false, (object) new byte[16], (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.byteArrayHexKey32_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.NwkSKey, true, OverrideID.Unknown, 0, false, (object) new byte[16], (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.byteArrayHexKey32_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.AppSKey, true, OverrideID.Unknown, 0, false, (object) new byte[16], (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.byteArrayHexKey32_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DevAddr, true, OverrideID.Unknown, 0, false, (object) 0U, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.uintHexKey8_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.NetID, true, OverrideID.Unknown, 0, false, (object) 0U, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.uintHexKey8_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TransmissionScenario, true, OverrideID.Unknown, 0, false, (object) (byte) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.byteMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioScenario, true, OverrideID.Unknown, 0, false, (object) RadioScenario.Scenario_201_LoRaMonthly, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.Enum_MSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CommunicationScenario, true, OverrideID.Unknown, 0, false, (object) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.intMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CommunicationScenarioLoRa, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CommunicationScenarioWmbus, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ADR, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Region, true, OverrideID.Unknown, 0, false, (object) Region.EU_863_870, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_Region_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalVolMaxFlowLiterPerHour, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Flow, ConfigurationGroup.VolumeCalibration, 1000, ConfigurationLevel.Native | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalVolMaxErrorPercent, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Percent, ConfigurationGroup.VolumeCalibration, 1010, ConfigurationLevel.Native | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalVolNominalFlowLiterPerHour, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Flow, ConfigurationGroup.VolumeCalibration, 2000, ConfigurationLevel.Native | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalVolNominalErrorPercent, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Percent, ConfigurationGroup.VolumeCalibration, 2010, ConfigurationLevel.Native | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalVolMinFlowLiterPerHour, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Flow, ConfigurationGroup.VolumeCalibration, 3000, ConfigurationLevel.Native | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalVolMinErrorPercent, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Percent, ConfigurationGroup.VolumeCalibration, 3010, ConfigurationLevel.Native | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalFlowTempMinGrad, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Temperature, ConfigurationGroup.TemperatureCalibration, 1000, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalFlowTempMinErrorPercent, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Percent, ConfigurationGroup.TemperatureCalibration, 1010, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalFlowTempMiddleGrad, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Temperature, ConfigurationGroup.TemperatureCalibration, 1020, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalFlowTempMiddleErrorPercent, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Percent, ConfigurationGroup.TemperatureCalibration, 1030, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalFlowTempMaxGrad, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Temperature, ConfigurationGroup.TemperatureCalibration, 1040, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalFlowTempMaxErrorPercent, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Percent, ConfigurationGroup.TemperatureCalibration, 1050, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalReturnTempMinGrad, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Temperature, ConfigurationGroup.TemperatureCalibration, 2000, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalReturnTempMinErrorPercent, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Percent, ConfigurationGroup.TemperatureCalibration, 2010, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalReturnTempMiddleGrad, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Temperature, ConfigurationGroup.TemperatureCalibration, 2020, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalReturnTempMiddleErrorPercent, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Percent, ConfigurationGroup.TemperatureCalibration, 2030, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalReturnTempMaxGrad, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Temperature, ConfigurationGroup.TemperatureCalibration, 2040, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalReturnTempMaxErrorPercent, true, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Percent, ConfigurationGroup.TemperatureCalibration, 2050, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TestVolumeSimulation, false, OverrideID.Unknown, 0, false, (object) double.NaN, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Volume, ConfigurationGroup.TemperatureCalibration, 2050, ConfigurationLevel.Native | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView01, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 1000, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView02, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 2000, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView03, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 3000, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView04, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 4000, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView05, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 5000, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView06, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 6000, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView07, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 7000, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView08, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 8000, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView09, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 9000, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView10, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 10000, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView01_Sel, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 1010, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView02_Sel, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 2010, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView03_Sel, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 3010, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView04_Sel, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 4010, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView05_Sel, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 5010, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView06_Sel, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 6010, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView07_Sel, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 7010, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView08_Sel, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 8010, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView09_Sel, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 9010, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView10_Sel, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 10010, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView01_Time, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 1020, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView02_Time, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 2020, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView03_Time, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 3020, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView04_Time, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 4020, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView05_Time, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 5020, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView06_Time, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 6020, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView07_Time, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 7020, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView08_Time, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 8020, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView09_Time, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 9020, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MenuView10_Time, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MenuDefinition, 10020, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DisplayMenu, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.VolumeResolution, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.VolumePulsValue, true, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.LiterPerImpuls, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseMultiplier, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.InputSampleTime, true, OverrideID.Unknown, 0, false, (object) 0U, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.uintMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.InputMode, true, OverrideID.Unknown, 0, false, (object) VolumeInputModes.Impulse_10Hz, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_VolumeInputModes_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.IO_Functions, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseBlockLimit, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseLeakLimit, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseUnleakLimit, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseLeakLower, true, OverrideID.Unknown, 0, false, (object) (short) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.ShortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseLeakUpper, true, OverrideID.Unknown, 0, false, (object) (short) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.ShortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseBackLimit, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseUnbackLimit, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.InputResolution, true, OverrideID.Unknown, 0, false, (object) InputUnitsIndex.ImpUnit_0, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_InputUnit_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.InputPulsValue, true, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.LiterPerImpuls, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.InputActualValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.InputDueDateValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.InputDueDateLastValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.InputDeviceType, true, OverrideID.Unknown, 0, false, (object) MBusDeviceType.WATER, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_MBusDeviceType_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.InputOutputFunction, true, OverrideID.Unknown, 0, false, (object) InputOutputFunctions.BusControlled, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_InputOutputFunctions_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.InputResolutionStr, true, OverrideID.Unknown, 0, false, (object) "m\u00B3", (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.UniversalUnit_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseoutMode, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseoutWidth, true, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseoutResolution, true, OverrideID.Unknown, 0, false, (object) (short) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.ShortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TimeZone, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DeviceClock, true, OverrideID.Unknown, 0, false, (object) DateTime.MinValue, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.DeviceInformation, 50, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CycleTimeFast, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CycleTimeStandard, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CycleTimeDynamic, true, OverrideID.Unknown, 0, false, (object) CycleTimeChangeMethode.OFF, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_CycleTimeChangeMethode_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DueDate, true, OverrideID.Unknown, 0, false, (object) DateTime.MinValue, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ReadingDate, true, OverrideID.Unknown, 0, false, (object) DateTime.MinValue, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DueDateMonth, true, OverrideID.Unknown, 0, false, (object) 1L, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SummerOff, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.WinterStart, true, OverrideID.Unknown, 0, false, (object) DateTime.MinValue, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SummerStart, true, OverrideID.Unknown, 0, false, (object) DateTime.MinValue, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.EndOfBattery, true, OverrideID.Unknown, 0, false, (object) new DateTime(1980, 1, 1), (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Battery, 1, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true).SpecialDisplayFormat = "d";
      ConfigurationParameter.AddCoPaInfo(OverrideID.EndOfCalibration, true, OverrideID.Unknown, 0, false, (object) DateTime.MinValue, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.YearMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Battery, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.EndOfBatteryDate, true, OverrideID.Unknown, 0, false, (object) DateTime.MinValue, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Battery, 2, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MaxEndOfBatteryDate, true, OverrideID.Unknown, 0, false, (object) DateTime.MinValue, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Battery, 3, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true).SpecialDisplayFormat = "d";
      ConfigurationParameter.ConPaInfo conPaInfo = ConfigurationParameter.AddCoPaInfo(OverrideID.BatteryDurabilityMonths, true, OverrideID.Unknown, 0, false, (object) 0U, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.uintMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Battery, 3, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      conPaInfo = ConfigurationParameter.AddCoPaInfo(OverrideID.BatteryPreWarningMonths, true, OverrideID.Unknown, 0, false, (object) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.intMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Battery, 3, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.BatteryCapacity_mAh, true, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Battery, 4, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RemainingDiagnosticMessages, true, OverrideID.Unknown, 0, false, (object) 0U, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.uintMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Battery, 5, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PossibleHourDiagnosticYears, true, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Battery, 6, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true).SpecialDisplayFormat = "F2";
      ConfigurationParameter.AddCoPaInfo(OverrideID.WarmerPipe, true, OverrideID.Unknown, 0, false, (object) ConfigurationParameter.WormerPipeValues.FLOW, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_WormerPipeValues_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.EnergyResolution, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ChangeOver, true, OverrideID.Unknown, 0, false, (object) ConfigurationParameter.ChangeOverValues.Heating, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_ChangeOverValues_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.BaseConfig, true, OverrideID.Unknown, 0, false, (object) ConfigurationParameter.BaseConfigSettings.HSrL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.Enum_MSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CycleTimeVolume, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ShowGCAL, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Glycol, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.EnergyActualValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Energy, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.EnergyDueDateValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Energy, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.EnergyDueDateLastValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Energy, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.VolumeActualValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Volume, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.VolumeDueDateValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Volume, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.VolumeDueDateLastValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Volume, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CEnergyActualValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.CoolingEnergy, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CEnergyDueDateValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.CoolingEnergy, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CEnergyDueDateLastValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.CoolingEnergy, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TotalVolumePulses, true, OverrideID.Unknown, 0, false, (object) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.intMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TotalTestPulses, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TarifFunction, true, OverrideID.Unknown, 0, false, (object) TarifSetup.OFF, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_TarifSetup_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TarifRefTemp, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.TemperatureMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TarifEnergy0, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TarifEnergy1, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.HeatThresholdTemp, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.TemperatureMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Temperature, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.HCA_Factor_Weighting, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.HCA_SensorMode, true, OverrideID.Unknown, 0, false, (object) HCA_SensorMode.Single, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_HCA_SensorMode_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.HCA_Scale, true, OverrideID.Unknown, 0, false, (object) HCA_Scale.Uniform, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_HCA_Scale_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.HCA_Factor_CH, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.HCA_Factor_CHR, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.FixedTempSetup, true, OverrideID.Unknown, 0, false, (object) FixedTempSetup.OFF, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_FixedTempSetup_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Temperature, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.FixedTempValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.TemperatureMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Temperature, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MimTempDiffSetup, true, OverrideID.Unknown, 0, false, (object) MinimalTempDiffSetup.OFF, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_MinimalTempDiffSetup_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.TempDiff, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MinTempDiffPlusTemp, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.MinTempDiffPlusTemp_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.TempDiff, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MinTempDiffMinusTemp, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.MinTempDiffMinusTemp_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.TempDiff, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Baudrate, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.HCA_ActualValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SleepMode, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ExitSleep, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DeviceUnit, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DaKonSerialNumber, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DaKonRegisterNumber, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.InitDevice, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.StartHKVEReceptionWindow, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RegisterHKVE, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DeregisterHKVE, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RegisteredHKVE, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.UnregisteredHKVE, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseCorrectionEnabled, true, OverrideID.Unknown, 0, false, (object) true, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseCorrectionValue, true, OverrideID.Unknown, 0, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Coefficient, true, OverrideID.Unknown, 0, false, (object) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.intMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.StartDate, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.VolMeterFlowPosition, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MBusThirdPartySupport, true, OverrideID.Unknown, 0, false, (object) true, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ClearNotProtectedValues, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ClearProtectedValues, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SetSleepMode, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SetWriteProtection, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ResetAllValues, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ClearAllLoggers, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SetPcTime, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SetTimeForTimeZoneFromPcTime, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SetMbusPrimAdrFromSerialNumber, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.VirtualDeviceOff, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CompactMBusList, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MinolSerialNumber, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RegisterDigits, true, OverrideID.Unknown, 0, false, (object) 0UL, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UlongMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.LongHeader, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Encryption, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.OversizeDiff, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.OversizeLimit, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.UndersizeDiff, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.UndersizeLimit, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.BurstDiff, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.BurstLimit, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ShowVolumeAsMass, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TempRangeUpperLimit, true, OverrideID.Unknown, 0, false, (object) 110M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.TemperatureMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Temperature, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TempRangeLowerLimit, true, OverrideID.Unknown, 0, false, (object) -0.5M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.TemperatureMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Temperature, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ErrorCode, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Standby, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RadioMode, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ListType, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ClearWarnings, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.WarningInfo, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SelectedRadioList, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.AESKey, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ShowEnergyChecker, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CycleTimeRadio, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ClearManipulation, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MediumSecondary, true, OverrideID.Unknown, 0, false, (object) MBusDeviceType.UNKNOWN, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_MBusMediumMSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ManufacturerSecondary, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PulseEnabled, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TotalPulse, true, OverrideID.Unknown, 0, false, (object) 0U, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.uintMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MaxFlow, true, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.StartCalibration, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CalibrationValues, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Calibrated, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TemperaturRadiator, true, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TemperaturRoom, true, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Radio3RussianMode, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.VolMeterFlowPositionByUser, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MeasurementSetup, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.OutletTempSensorInVolumeMeter, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.MeasurementSetup, 0, ConfigurationLevel.Native | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SetToDelivery, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DateOfFirstActivation, true, OverrideID.Unknown, 0, false, (object) DateTime.MinValue, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DateTimeMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.CurrentEvents, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PushButtonError, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.HornDriveLevel, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.RemovingDetection, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.NumberSmokeAlarms, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.NumberTestAlarms, true, OverrideID.Unknown, 0, false, (object) (ushort) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.UshortMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ObstructionDetection, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SurroundingProximity, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.LedFailure, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.StatusOfInterlinkedDevices, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.TotalVolumePulsesNegativ, true, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.DeviceMode, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SendJoinRequest, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SetOperatingMode, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Activation, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.HCA_Metrology, true, OverrideID.Unknown, 0, true, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.LeakDetectionOn, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.BackflowDetectionOn, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.BurstDetectionOn, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.StandstillDetectionOn, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.UndersizeDetectionOn, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.OversizeDetectionOn, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SmartFunctions, true, OverrideID.Unknown, 0, false, (object) new string[0], (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.SelectListMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.SmartFunctions, 0, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ActiveSmartFunctions, true, OverrideID.Unknown, 0, false, (object) new string[0], (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.SelectListMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.SmartFunctions, 0, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SmartFunctionConfig, true, OverrideID.Unknown, 0, false, (object) new string[0], (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.SelectListMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.SmartFunctions, 0, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SmartFunctionGroup, true, OverrideID.Unknown, 0, false, (object) new string[0], (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.SelectListMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.SmartFunctions, 0, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.MinimumFlowQ1, false, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Flow, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.PermanentFlowQ3, false, OverrideID.Unknown, 0, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Flow, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input1PulsValue, true, OverrideID.VolumePulsValue, 1, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input1Unit, true, OverrideID.InputPulsValue, 1, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input2PulsValue, true, OverrideID.VolumePulsValue, 2, false, (object) 0.0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.doubleMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input2Unit, true, OverrideID.InputPulsValue, 2, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Output1Function, true, OverrideID.Unknown, 0, false, (object) ConfigurationParameter.OutputFunctions.KEINE, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_OutputFunctions_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Output2Function, true, OverrideID.Unknown, 0, false, (object) ConfigurationParameter.OutputFunctions.KEINE, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_OutputFunctions_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input1ActualValue, true, OverrideID.InputActualValue, 1, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input1DueDateValue, true, OverrideID.InputDueDateValue, 1, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input1DueDateLastValue, true, OverrideID.InputDueDateLastValue, 1, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input2ActualValue, true, OverrideID.InputActualValue, 2, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input2DueDateValue, true, OverrideID.InputDueDateValue, 2, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input2DueDateLastValue, true, OverrideID.InputDueDateLastValue, 2, false, (object) 0M, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.DecimalMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input1IdNumber, true, OverrideID.SerialNumber, 1, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input2IdNumber, true, OverrideID.SerialNumber, 2, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input1Type, true, OverrideID.InputDeviceType, 1, false, (object) MBusDeviceType.WATER, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_MBusDeviceType_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Input2Type, true, OverrideID.InputDeviceType, 2, false, (object) MBusDeviceType.WATER, (ConfigurationParameter.MeterStringFormater) new ConfigurationParameter.Enum_MBusDeviceType_MSF(), ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      conPaInfo = ConfigurationParameter.AddCoPaInfo(OverrideID.MAC_Address, false, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 1, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      conPaInfo = ConfigurationParameter.AddCoPaInfo(OverrideID.CCID, false, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 1, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      conPaInfo = ConfigurationParameter.AddCoPaInfo(OverrideID.IMEI, false, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 1, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      conPaInfo = ConfigurationParameter.AddCoPaInfo(OverrideID.IMSI, false, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 1, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      conPaInfo = ConfigurationParameter.AddCoPaInfo(OverrideID.FirmwareTimestamp, false, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 1, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      conPaInfo = ConfigurationParameter.AddCoPaInfo(OverrideID.LteModemVersion, false, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 1, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      conPaInfo = ConfigurationParameter.AddCoPaInfo(OverrideID.LteModemModel, false, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 1, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      conPaInfo = ConfigurationParameter.AddCoPaInfo(OverrideID.CpuID, false, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 1, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      conPaInfo = ConfigurationParameter.AddCoPaInfo(OverrideID.LteAPN, false, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 1, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, true);
      ConfigurationParameter.AddCoPaInfo(OverrideID.ActivateSmartFunctions, true, OverrideID.Unknown, 0, true, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.SmartFunctionsActivated, true, OverrideID.Unknown, 0, false, (object) false, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.BoolMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.VIF, true, OverrideID.Unknown, 0, false, (object) (byte) 0, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.byteMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
      ConfigurationParameter.AddCoPaInfo(OverrideID.Unknown, true, OverrideID.Unknown, 0, false, (object) string.Empty, (ConfigurationParameter.MeterStringFormater) ConfigurationParameter.StringMSF_fun, ValueIdent.ValueIdPart_PhysicalQuantity.Any, ConfigurationGroup.Default, 0, ConfigurationLevel.Native | ConfigurationLevel.Standard | ConfigurationLevel.Advanced | ConfigurationLevel.Huge, false);
    }

    private static ConfigurationParameter.ConPaInfo AddCoPaInfo(
      OverrideID TheOverrideID,
      bool EnabledAsDefaultInOldLicense,
      OverrideID NewOverrideId,
      int SubdeviceNumber,
      bool IsFunction,
      object DefaultValue,
      ConfigurationParameter.MeterStringFormater StringFormater,
      ValueIdent.ValueIdPart_PhysicalQuantity CorrespondetValieIdent,
      ConfigurationGroup configGroup,
      int configOrder,
      ConfigurationLevel defaultConfigurationLevels,
      bool formatControlled)
    {
      ConfigurationParameter.ConPaInfo conPaInfo = new ConfigurationParameter.ConPaInfo(TheOverrideID, NewOverrideId, SubdeviceNumber, IsFunction, DefaultValue, StringFormater, CorrespondetValieIdent, EnabledAsDefaultInOldLicense, configGroup, configOrder, defaultConfigurationLevels, formatControlled);
      ConfigurationParameter.ConfigParametersByOverrideID.Add(TheOverrideID, conPaInfo);
      return conPaInfo;
    }

    public ConfigurationParameter(OverrideID TheID)
    {
      this.ParameterID = TheID;
      ConfigurationParameter.ConPaInfo conPaInfo = ConfigurationParameter.ConfigParametersByOverrideID[TheID];
      this.ParameterInfo = conPaInfo;
      this.MyStringFormater = conPaInfo.StringFormater;
      this.Format = conPaInfo.SpecialDisplayFormat;
      this.Unit = this.GetUnitStringFromOverrideId(TheID);
      this.IsFunction = conPaInfo.IsFunction;
      this.IsEditable = false;
      this.ParameterValue = conPaInfo.DefaultValue;
    }

    public ConfigurationParameter(OverrideID TheID, object ParameterValue)
      : this(TheID)
    {
      this.ParameterValue = ParameterValue;
    }

    public ConfigurationParameter(OverrideID TheID, string StringValue, bool DbString)
      : this(TheID)
    {
      if (DbString)
        this.SetValueFromStringDb(StringValue);
      else
        this.SetValueFromStringWin(StringValue);
    }

    public ConfigurationParameter(ConfigurationParameter BaseObject)
    {
      this.ParameterID = BaseObject.ParameterID;
      this.ParameterInfo = BaseObject.ParameterInfo;
      this.ParameterValue = this.GetParameterValueClone(BaseObject.ParameterValue);
      this.Format = BaseObject.Format;
      this.HasWritePermission = BaseObject.HasWritePermission;
      this.MinParameterValue = BaseObject.MinParameterValue;
      this.MaxParameterValue = BaseObject.MaxParameterValue;
      this.AllowedValues = BaseObject.AllowedValues;
      this.TrueDivisor = BaseObject.TrueDivisor;
      this.MyStringFormater = BaseObject.MyStringFormater;
      this.SubDevice = BaseObject.SubDevice;
      this.Unit = BaseObject.Unit;
      this.ParameterKey = BaseObject.ParameterKey;
      this.IsEditable = BaseObject.IsEditable;
    }

    public ConfigurationParameter Clone()
    {
      return new ConfigurationParameter(this.ParameterID)
      {
        ParameterValue = this.GetParameterValueClone(this.ParameterValue),
        Format = this.Format,
        HasWritePermission = this.HasWritePermission,
        MinParameterValue = this.MinParameterValue,
        MaxParameterValue = this.MaxParameterValue,
        AllowedValues = this.AllowedValues,
        TrueDivisor = this.TrueDivisor,
        MyStringFormater = this.MyStringFormater,
        SubDevice = this.SubDevice,
        ParameterKey = this.ParameterKey,
        Unit = this.Unit,
        IsEditable = this.IsEditable,
        ParameterInfo = this.ParameterInfo
      };
    }

    public ConfigurationParameter CloneWithNewId(OverrideID NewId)
    {
      return new ConfigurationParameter(NewId)
      {
        ParameterValue = this.GetParameterValueClone(this.ParameterValue),
        Format = this.Format,
        HasWritePermission = this.HasWritePermission,
        MinParameterValue = this.MinParameterValue,
        MaxParameterValue = this.MaxParameterValue,
        AllowedValues = this.AllowedValues,
        TrueDivisor = this.TrueDivisor,
        MyStringFormater = this.MyStringFormater,
        SubDevice = this.SubDevice,
        ParameterKey = this.ParameterKey,
        Unit = this.GetUnitStringFromOverrideId(NewId),
        IsEditable = this.IsEditable
      };
    }

    private object GetParameterValueClone(object parameterValue)
    {
      if (parameterValue == null)
        return (object) null;
      if (!(parameterValue.GetType() == typeof (byte[])))
        return parameterValue;
      byte[] parameterValueClone = new byte[((byte[]) parameterValue).Length];
      ((Array) parameterValue).CopyTo((Array) parameterValueClone, 0);
      return (object) parameterValueClone;
    }

    public string GetUnitStringFromOverrideId(OverrideID theId)
    {
      ValueIdent.ValueIdPart_PhysicalQuantity correspondetValueIdent = ConfigurationParameter.ConfigParametersByOverrideID[theId].CorrespondetValueIdent;
      return correspondetValueIdent != 0 ? ValueIdent.GetUnit(correspondetValueIdent) : string.Empty;
    }

    public static SortedList GetListClone(SortedList ConfigList)
    {
      SortedList listClone = new SortedList();
      for (int index = 0; index < ConfigList.Count; ++index)
      {
        ConfigurationParameter configurationParameter = ((ConfigurationParameter) ConfigList.GetByIndex(index)).Clone();
        listClone.Add((object) configurationParameter.ParameterID, (object) configurationParameter);
      }
      return listClone;
    }

    public bool IsParameterValueEqual(ConfigurationParameter compareParameter)
    {
      if (compareParameter == null || this.ParameterValue == null || compareParameter.ParameterValue == null || this.ParameterValue.GetType() != compareParameter.ParameterValue.GetType())
        return false;
      if (this.ParameterType == typeof (byte[]))
      {
        if (((byte[]) this.ParameterValue).Length != ((byte[]) compareParameter.ParameterValue).Length)
          return false;
        for (int index = 0; index < ((byte[]) this.ParameterValue).Length; ++index)
        {
          if ((int) ((byte[]) this.ParameterValue)[index] != (int) ((byte[]) compareParameter.ParameterValue)[index])
            return false;
        }
        return true;
      }
      return this.ParameterValue == compareParameter.ParameterValue;
    }

    public int CompareTo(ConfigurationParameter compareParameter)
    {
      int num1 = this.IsFunction.CompareTo(compareParameter.IsFunction);
      if (num1 != 0)
        return num1;
      int num2 = this.HasWritePermission.CompareTo(compareParameter.HasWritePermission);
      if (num2 != 0)
        return num2;
      int num3 = this.ParameterInfo.ConfigurationGroup.CompareTo((object) compareParameter.ParameterInfo.ConfigurationGroup);
      if (num3 != 0)
        return num3;
      int num4 = this.ParameterInfo.ConfigurationOrder.CompareTo(compareParameter.ParameterInfo.ConfigurationOrder);
      if (num4 != 0)
        return num4;
      OverrideID parameterId = this.ParameterID;
      string str = parameterId.ToString();
      parameterId = compareParameter.ParameterID;
      string strB = parameterId.ToString();
      return str.CompareTo(strB);
    }

    public static List<ConfigurationParameter> GetOrderdList(
      SortedList<OverrideID, ConfigurationParameter> ConfigList)
    {
      List<ConfigurationParameter> orderdList = new List<ConfigurationParameter>((IEnumerable<ConfigurationParameter>) ConfigList.Values);
      orderdList.Sort();
      return orderdList;
    }

    public static void ChangeOrAddOverrideParameter(
      SortedList TheList,
      ConfigurationParameter TheConfigParameter)
    {
      int index = TheList.IndexOfKey((object) TheConfigParameter.ParameterID);
      if (index < 0)
        TheList.Add((object) TheConfigParameter.ParameterID, (object) TheConfigParameter);
      else
        TheList.SetByIndex(index, (object) TheConfigParameter);
    }

    public static void DeleteConfigParameter(SortedList TheList, OverrideID TheId)
    {
      int index = TheList.IndexOfKey((object) TheId);
      if (index < 0)
        return;
      TheList.RemoveAt(index);
    }

    public class ConPaInfo
    {
      public string SpecialDisplayFormat;
      public bool FormatControlled;
      public OverrideID NewOverrideId;
      public int SubdeviceNumber;
      public bool EnabledAsDefaultInOldLicense;

      public OverrideID OverrideId { get; internal set; }

      public bool IsFunction { get; internal set; }

      public object DefaultValue { get; internal set; }

      public ConfigurationParameter.MeterStringFormater StringFormater { get; internal set; }

      public ValueIdent.ValueIdPart_PhysicalQuantity CorrespondetValueIdent { get; internal set; }

      public ConfigurationGroup ConfigurationGroup { get; internal set; }

      public int ConfigurationOrder { get; internal set; }

      public ConfigurationLevel DefaultConfigurationLevels { get; internal set; }

      public ConPaInfo(
        OverrideID OverrideId,
        OverrideID NewOverrideId,
        int SubdeviceNumber,
        bool IsFunction,
        object DefaultValue,
        ConfigurationParameter.MeterStringFormater StringFormater,
        ValueIdent.ValueIdPart_PhysicalQuantity CorrespondetValueIdent,
        bool EnabledAsDefaultInOldLicense,
        ConfigurationGroup ConfigurationGroup,
        int ConfigurationOrder,
        ConfigurationLevel defaultConfigurationLevels,
        bool FormatControlled)
      {
        this.OverrideId = OverrideId;
        this.NewOverrideId = NewOverrideId;
        this.SubdeviceNumber = SubdeviceNumber;
        this.IsFunction = IsFunction;
        this.DefaultValue = DefaultValue;
        this.StringFormater = StringFormater;
        this.CorrespondetValueIdent = CorrespondetValueIdent;
        this.EnabledAsDefaultInOldLicense = EnabledAsDefaultInOldLicense;
        this.ConfigurationGroup = ConfigurationGroup;
        this.ConfigurationOrder = ConfigurationOrder;
        this.DefaultConfigurationLevels = defaultConfigurationLevels;
        this.FormatControlled = FormatControlled;
      }
    }

    [Flags]
    public enum ValueType
    {
      Ident = 0,
      Direct = 1,
      Complete = 2,
      Factory = Complete | Direct, // 0x00000003
    }

    public enum OutputFunctions
    {
      KEINE,
      ENERGIE,
      VOLUMEN,
      KÄLTE,
    }

    public enum WormerPipeValues
    {
      RETURN,
      FLOW,
    }

    public enum ChangeOverValues
    {
      Heating,
      ChangeOver,
      Cooling,
      None,
    }

    public enum BaseConfigSettings
    {
      HSrL,
      HSrH,
      HdrL,
      HEnL,
      CSrL,
      CSrH,
      CdrL,
      CEnL,
      OSrL,
      OSrH,
      OdrL,
      OEnL,
      FSrL,
      FSrH,
      FdrL,
      FEnL,
    }

    public abstract class MeterStringFormater
    {
      public abstract string GetStringValueDb(ConfigurationParameter TheParameter);

      public abstract string GetStringValueWin(ConfigurationParameter TheParameter);

      public abstract void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter);

      public abstract void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter);
    }

    private class StringMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return Util.ToString(TheParameter.ParameterValue);
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return Util.ToString(TheParameter.ParameterValue);
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) StringValue;
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) StringValue;
      }
    }

    private class BoolMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) bool.Parse(StringValue);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) bool.Parse(StringValue);
      }
    }

    private class UlongMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) ulong.Parse(StringValue);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) ulong.Parse(StringValue);
      }
    }

    private class IntMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) int.Parse(StringValue);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) int.Parse(StringValue);
      }
    }

    private class UIntMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) uint.Parse(StringValue);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) uint.Parse(StringValue);
      }
    }

    private class ByteMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) byte.Parse(StringValue);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) byte.Parse(StringValue);
      }
    }

    private class UShortMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return this.GetStringValueWin(TheParameter);
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return !string.IsNullOrEmpty(TheParameter.Format) ? ((ushort) TheParameter.ParameterValue).ToString(TheParameter.Format) : TheParameter.ParameterValue.ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) ushort.Parse(StringValue);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) ushort.Parse(StringValue);
      }
    }

    private class ShortMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) short.Parse(StringValue);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) short.Parse(StringValue);
      }
    }

    private class doubleMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((double) TheParameter.ParameterValue).ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat);
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        if (TheParameter.ParameterValue == null)
          return string.Empty;
        return string.IsNullOrEmpty(TheParameter.Format) ? Convert.ToDouble(TheParameter.ParameterValue).ToString() : Convert.ToDouble(TheParameter.ParameterValue).ToString(TheParameter.Format);
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) double.Parse(StringValue, (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) double.Parse(StringValue);
      }
    }

    private class DecimalMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((Decimal) TheParameter.ParameterValue).ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat);
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return string.IsNullOrEmpty(TheParameter.Format) ? ((Decimal) TheParameter.ParameterValue).ToString() : ((Decimal) TheParameter.ParameterValue).ToString(TheParameter.Format);
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        if (string.IsNullOrEmpty(StringValue))
          return;
        TheParameter.ParameterValue = (object) Decimal.Parse(StringValue, (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        if (string.IsNullOrEmpty(StringValue))
          return;
        TheParameter.ParameterValue = (object) Decimal.Parse(StringValue);
      }
    }

    private class FloatMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((float) TheParameter.ParameterValue).ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat);
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return string.IsNullOrEmpty(TheParameter.Format) ? ((float) TheParameter.ParameterValue).ToString() : ((float) TheParameter.ParameterValue).ToString(TheParameter.Format);
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) float.Parse(StringValue, (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) float.Parse(StringValue);
      }
    }

    private class UintHexKey8 : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return !(TheParameter.ParameterValue.GetType() != typeof (uint)) ? ((uint) TheParameter.ParameterValue).ToString("x08") : throw new ArgumentException("Illegal data type for ParameterValue");
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return this.GetStringValueDb(TheParameter);
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        if (string.IsNullOrEmpty(StringValue))
          throw new ArgumentException("Value not defined. Exact 8 hex digits required");
        if (StringValue.Trim().Length != 8)
          throw new ArgumentException("Illegal number of characters. Exact 8 hex digits required");
        uint result;
        if (!uint.TryParse(StringValue, NumberStyles.HexNumber, (IFormatProvider) null, out result))
          throw new ArgumentException("Illegal hex value");
        TheParameter.ParameterValue = (object) result;
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class UlongHexKey16 : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        if (TheParameter.ParameterValue == null)
          return string.Empty;
        return !(TheParameter.ParameterValue.GetType() != typeof (ulong)) ? ((ulong) TheParameter.ParameterValue).ToString("x016") : throw new ArgumentException("Illegal data type for ParameterValue");
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return this.GetStringValueDb(TheParameter);
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        if (string.IsNullOrEmpty(StringValue))
          throw new ArgumentException("Value not defined. Exact 16 hex digits required");
        if (StringValue.Trim().Length != 16)
          throw new ArgumentException("Illegal number of characters. Exact 16 hex digits required");
        ulong result;
        if (!ulong.TryParse(StringValue, NumberStyles.HexNumber, (IFormatProvider) null, out result))
          throw new ArgumentException("Illegal hex value");
        TheParameter.ParameterValue = (object) result;
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class ByteArrayHexKey32 : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        if (TheParameter.ParameterValue == null)
          return string.Empty;
        return !(TheParameter.ParameterValue.GetType() != typeof (byte[])) ? Util.ByteArrayToHexString((byte[]) TheParameter.ParameterValue) : throw new ArgumentException("Illegal data type for ParameterValue");
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return this.GetStringValueDb(TheParameter);
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        string hex = !string.IsNullOrEmpty(StringValue) ? StringValue.Trim() : throw new ArgumentException("Value not defined. Exact 32 hex digits required");
        byte[] numArray = hex.Length == 32 ? Util.HexStringToByteArray(hex) : throw new ArgumentException("Illegal number of characters. Exact 32 hex digits required");
        TheParameter.ParameterValue = (object) numArray;
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class DateTimeMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((DateTime) TheParameter.ParameterValue).ToString((IFormatProvider) FixedFormates.TheFormates.DateTimeFormat);
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        if (TheParameter.ParameterValue == null)
          return string.Empty;
        return string.IsNullOrEmpty(TheParameter.Format) ? ((DateTime) TheParameter.ParameterValue).ToString() : ((DateTime) TheParameter.ParameterValue).ToString(TheParameter.Format);
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) DateTime.Parse(StringValue, (IFormatProvider) FixedFormates.TheFormates.DateTimeFormat);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        if (string.IsNullOrEmpty(TheParameter.Format))
        {
          TheParameter.ParameterValue = (object) DateTime.Parse(StringValue);
        }
        else
        {
          try
          {
            TheParameter.ParameterValue = (object) DateTime.ParseExact(StringValue, TheParameter.Format, (IFormatProvider) null);
          }
          catch
          {
            TheParameter.ParameterValue = (object) DateTime.Parse(StringValue);
          }
        }
      }
    }

    private class YearMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) this.YearValue(StringValue);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        TheParameter.ParameterValue = (object) this.YearValue(StringValue);
      }

      private int YearValue(string StringValue)
      {
        int num = int.Parse(StringValue);
        if (num > 0 && num < 20)
          return num + DateTime.Now.Year;
        return num >= 1980 && num < 2050 ? num : throw new ArgumentException("End of date");
      }
    }

    private class MinolMeterDeviceListMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter) => string.Empty;

      public override string GetStringValueWin(ConfigurationParameter TheParameter) => string.Empty;

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
      }
    }

    private class SelectListMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        StringBuilder stringBuilder = new StringBuilder();
        foreach (string str in (string[]) TheParameter._parameterValue)
        {
          if (stringBuilder.Length > 0)
            stringBuilder.Append(';');
          stringBuilder.Append(str);
        }
        return stringBuilder.ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return this.GetStringValueDb(TheParameter);
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        string[] strArray = StringValue.Split(new char[1]
        {
          ';'
        }, StringSplitOptions.RemoveEmptyEntries);
        ConfigurationParameter.ConfigParametersByOverrideID[TheParameter.ParameterID].DefaultValue.GetType();
        TheParameter.ParameterValue = (object) strArray;
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return TheParameter.ParameterValue.ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        Type type = ConfigurationParameter.ConfigParametersByOverrideID[TheParameter.ParameterID].DefaultValue.GetType();
        TheParameter.ParameterValue = Enum.Parse(type, StringValue, true);
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_WormerPipeValues_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return (bool) TheParameter.ParameterValue ? ConfigurationParameter.WormerPipeValues.FLOW.ToString() : ConfigurationParameter.WormerPipeValues.RETURN.ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return this.GetStringValueDb(TheParameter);
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        if (StringValue == ConfigurationParameter.WormerPipeValues.RETURN.ToString())
        {
          TheParameter.ParameterValue = (object) false;
        }
        else
        {
          if (!(StringValue == ConfigurationParameter.WormerPipeValues.FLOW.ToString()))
            throw new ArgumentException("Illegal WarmerPipe value");
          TheParameter.ParameterValue = (object) true;
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_ChangeOverValues_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((ConfigurationParameter.ChangeOverValues) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return this.GetStringValueDb(TheParameter);
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (ConfigurationParameter.ChangeOverValues) Enum.Parse(typeof (ConfigurationParameter.ChangeOverValues), StringValue, true);
        }
        catch
        {
          ZR_ClassLibMessages.AddErrorDescriptionAndException(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal ChangeOver value");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_OutputFunctions_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((ConfigurationParameter.OutputFunctions) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((ConfigurationParameter.OutputFunctions) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (ConfigurationParameter.OutputFunctions) Enum.Parse(typeof (ConfigurationParameter.OutputFunctions), StringValue, true);
        }
        catch
        {
          throw new ArgumentException("Illegal output function");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_MinimalTempDiffSetup_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((MinimalTempDiffSetup) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((MinimalTempDiffSetup) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (MinimalTempDiffSetup) Enum.Parse(typeof (MinimalTempDiffSetup), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal MinimalTempDiffSetup parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_FixedTempSetup_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((FixedTempSetup) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((FixedTempSetup) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (FixedTempSetup) Enum.Parse(typeof (FixedTempSetup), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal FixedTempSetup parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_CycleTimeChangeMethode_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((CycleTimeChangeMethode) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((CycleTimeChangeMethode) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (CycleTimeChangeMethode) Enum.Parse(typeof (CycleTimeChangeMethode), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal CycleTimeChangeMethode parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_TarifSetup_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((TarifSetup) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((TarifSetup) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (TarifSetup) Enum.Parse(typeof (TarifSetup), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal TarifSetup parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_HCA_SensorMode_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((HCA_SensorMode) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((HCA_SensorMode) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (HCA_SensorMode) Enum.Parse(typeof (HCA_SensorMode), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal HCA_SensorMode parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_MBusMediumMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return this.GetStringValueWin(TheParameter);
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        if (TheParameter == null)
          throw new ArgumentNullException("ConfigurationParameter MBusMedium not defined");
        return (TheParameter.ParameterValue != null && Enum.IsDefined(typeof (MBusDeviceType), TheParameter.ParameterValue) ? (MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), TheParameter.ParameterValue.ToString(), true) : (MBusDeviceType) ConfigurationParameter.ConfigParametersByOverrideID[TheParameter.ParameterID].DefaultValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal MBusDeviceType parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_HCA_Scale_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((HCA_Scale) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((HCA_Scale) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (HCA_Scale) Enum.Parse(typeof (HCA_Scale), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal HCA_Scale parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_InputUnit_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((InputUnitsIndex) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((InputUnitsIndex) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (InputUnitsIndex) Enum.Parse(typeof (InputUnitsIndex), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal input unit parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_RadioMode_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((RadioProtocol) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((RadioProtocol) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (RadioProtocol) Enum.Parse(typeof (RadioProtocol), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal RadioMode parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_Region_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((Region) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((Region) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (Region) Enum.Parse(typeof (Region), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal Region parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_InputOutputFunctions_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return this.GetStringValueWin(TheParameter);
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return TheParameter == null || TheParameter.ParameterValue == null || !Enum.IsDefined(typeof (InputOutputFunctions), TheParameter.ParameterValue) ? (string) null : Enum.Parse(typeof (InputOutputFunctions), TheParameter.ParameterValue.ToString(), true).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (InputOutputFunctions) Enum.Parse(typeof (InputOutputFunctions), StringValue, false);
        }
        catch (Exception ex)
        {
          ZR_ClassLibMessages.AddErrorDescription("Exception: " + ex.ToString(), ConfigurationParameter.ConfigParamLogger);
          ZR_ClassLibMessages.AddErrorDescriptionAndException(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal InputOutputFunctions parameter", ConfigurationParameter.ConfigParamLogger);
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class UniversalUnit_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return (string) TheParameter.ParameterValue;
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return (string) TheParameter.ParameterValue;
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          if (TheParameter.AllowedValues != null)
          {
            int index = 0;
            while (index < TheParameter.AllowedValues.Length && !(TheParameter.AllowedValues[index] == StringValue))
              ++index;
            if (index >= TheParameter.AllowedValues.Length)
              ZR_ClassLibMessages.AddErrorDescriptionAndException(ZR_ClassLibMessages.LastErrors.IllegalData, "Parameter unit not available", ConfigurationParameter.ConfigParamLogger);
          }
          TheParameter.ParameterValue = (object) StringValue;
        }
        catch (Exception ex)
        {
          ZR_ClassLibMessages.AddErrorDescription("Exception: " + ex.ToString(), ConfigurationParameter.ConfigParamLogger);
          ZR_ClassLibMessages.AddErrorDescriptionAndException(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal unit parameter", ConfigurationParameter.ConfigParamLogger);
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_MBusDeviceType_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((MBusDeviceType) (ulong) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((MBusDeviceType) (ulong) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (ulong) (MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal MBusDeviceType parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_RadioFrequence_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((RadioFrequence) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((RadioFrequence) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (RadioFrequence) Enum.Parse(typeof (RadioFrequence), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal RadioFrequence parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class Enum_VolumeInputModes_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((VolumeInputModes) TheParameter.ParameterValue).ToString();
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((VolumeInputModes) TheParameter.ParameterValue).ToString();
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          TheParameter.ParameterValue = (object) (VolumeInputModes) Enum.Parse(typeof (VolumeInputModes), StringValue, false);
        }
        catch
        {
          throw new ArgumentException("Illegal VolumeInputModes parameter");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        this.SetValueFromStringDb(StringValue, TheParameter);
      }
    }

    private class TemperatureMSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((Decimal) TheParameter.ParameterValue).ToString("0.00", (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((Decimal) TheParameter.ParameterValue).ToString("0.00");
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          Decimal num = Decimal.Parse(StringValue, (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
          TheParameter.ParameterValue = !(num > 300M) && !(num < -30M) ? (object) num : throw new ArgumentException("Illegal temperature");
        }
        catch
        {
          throw new ArgumentException("Illegal temperature");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          Decimal num = Decimal.Parse(StringValue);
          TheParameter.ParameterValue = !(num > 300M) && !(num < -30M) ? (object) num : throw new ArgumentException("Illegal temperature");
        }
        catch
        {
          throw new ArgumentException("Illegal temperature");
        }
      }
    }

    private class MinTempDiffMinusTemp_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((Decimal) TheParameter.ParameterValue).ToString("0.00", (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((Decimal) TheParameter.ParameterValue).ToString("0.00");
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          Decimal num = Decimal.Parse(StringValue, (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
          if (num > 0M)
            num *= -1M;
          TheParameter.ParameterValue = !(num < -300M) ? (object) num : throw new ArgumentException("Illegal temperature");
        }
        catch
        {
          throw new ArgumentException("Illegal temperature");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          Decimal num = Decimal.Parse(StringValue);
          if (num > 0M)
            num *= -1M;
          TheParameter.ParameterValue = !(num < -300M) ? (object) num : throw new ArgumentException("Illegal temperature");
        }
        catch
        {
          throw new ArgumentException("Illegal temperature");
        }
      }
    }

    private class MinTempDiffPlusTemp_MSF : ConfigurationParameter.MeterStringFormater
    {
      public override string GetStringValueDb(ConfigurationParameter TheParameter)
      {
        return ((Decimal) TheParameter.ParameterValue).ToString("0.00", (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
      }

      public override string GetStringValueWin(ConfigurationParameter TheParameter)
      {
        return ((Decimal) TheParameter.ParameterValue).ToString("0.00");
      }

      public override void SetValueFromStringDb(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          Decimal num = Decimal.Parse(StringValue, (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
          if (num < 0M)
            num *= -1M;
          TheParameter.ParameterValue = !(num > 300M) ? (object) num : throw new ArgumentException("Illegal temperature");
        }
        catch
        {
          throw new ArgumentException("Illegal temperature");
        }
      }

      public override void SetValueFromStringWin(
        string StringValue,
        ConfigurationParameter TheParameter)
      {
        try
        {
          Decimal num = Decimal.Parse(StringValue);
          if (num < 0M)
            num *= -1M;
          TheParameter.ParameterValue = !(num > 300M) ? (object) num : throw new ArgumentException("Illegal temperature");
        }
        catch
        {
          throw new ArgumentException("Illegal temperature");
        }
      }
    }
  }
}


--- COpenMeter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.COpenMeter
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using CorporateDesign;
using GmmDbLib;
using System;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class COpenMeter : Form
  {
    private Button btOK;
    private Button btCancel;
    private Button btSeek;
    private Label label1;
    private TextBox txtbxSuchstring;
    private DataGrid dtagrdSerial;
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;
    private string ErrorMsg;
    private DataTable dtatblMeter;
    private DataTable MeterDataTable;
    public int m_iMeterID;
    public int m_iMeterInfoID;
    public string m_sSerialNr;
    private DataGrid MeterDataDataGrid;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private Button btSeekMeterID;
    private DataGridTableStyle dataGridTableStyle1;
    private DataGridTextBoxColumn dataGridTextBoxTimePoint;
    private Label label2;
    private Label label3;
    private Button buttonSeachType;
    private Label labelLoadStatus;
    public DateTime DataTimePoint;
    private Button buttonSearchDay;
    public string DeviceFilter;

    public COpenMeter()
    {
      this.InitializeComponent();
      this.MeterDataTable = new DataTable("MeterData");
      this.m_iMeterID = 0;
      this.m_iMeterInfoID = 0;
      this.m_sSerialNr = "0";
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (COpenMeter));
      this.btOK = new Button();
      this.btCancel = new Button();
      this.btSeek = new Button();
      this.txtbxSuchstring = new TextBox();
      this.label1 = new Label();
      this.btSeekMeterID = new Button();
      this.dtagrdSerial = new DataGrid();
      this.dtatblMeter = new DataTable();
      this.MeterDataDataGrid = new DataGrid();
      this.dataGridTableStyle1 = new DataGridTableStyle();
      this.dataGridTextBoxTimePoint = new DataGridTextBoxColumn();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.label2 = new Label();
      this.label3 = new Label();
      this.buttonSeachType = new Button();
      this.labelLoadStatus = new Label();
      this.buttonSearchDay = new Button();
      this.dtagrdSerial.BeginInit();
      this.dtatblMeter.BeginInit();
      this.MeterDataDataGrid.BeginInit();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.btOK, "btOK");
      this.btOK.DialogResult = DialogResult.OK;
      this.btOK.Name = "btOK";
      componentResourceManager.ApplyResources((object) this.btCancel, "btCancel");
      this.btCancel.DialogResult = DialogResult.Cancel;
      this.btCancel.Name = "btCancel";
      componentResourceManager.ApplyResources((object) this.btSeek, "btSeek");
      this.btSeek.Name = "btSeek";
      this.btSeek.Click += new System.EventHandler(this.btSuchen_Click);
      componentResourceManager.ApplyResources((object) this.txtbxSuchstring, "txtbxSuchstring");
      this.txtbxSuchstring.Name = "txtbxSuchstring";
      this.txtbxSuchstring.KeyDown += new KeyEventHandler(this.txtbxSuchstring_KeyDown);
      componentResourceManager.ApplyResources((object) this.label1, "label1");
      this.label1.Name = "label1";
      componentResourceManager.ApplyResources((object) this.btSeekMeterID, "btSeekMeterID");
      this.btSeekMeterID.Name = "btSeekMeterID";
      this.btSeekMeterID.Click += new System.EventHandler(this.btSeekMeterID_Click);
      componentResourceManager.ApplyResources((object) this.dtagrdSerial, "dtagrdSerial");
      this.dtagrdSerial.HeaderForeColor = SystemColors.ControlText;
      this.dtagrdSerial.Name = "dtagrdSerial";
      this.dtagrdSerial.ReadOnly = true;
      this.dtagrdSerial.CurrentCellChanged += new System.EventHandler(this.dtagrdSerial_CurrentCellChanged);
      this.MeterDataDataGrid.AllowSorting = false;
      componentResourceManager.ApplyResources((object) this.MeterDataDataGrid, "MeterDataDataGrid");
      this.MeterDataDataGrid.HeaderForeColor = SystemColors.ControlText;
      this.MeterDataDataGrid.Name = "MeterDataDataGrid";
      this.MeterDataDataGrid.ReadOnly = true;
      this.MeterDataDataGrid.TableStyles.AddRange(new DataGridTableStyle[1]
      {
        this.dataGridTableStyle1
      });
      this.MeterDataDataGrid.DoubleClick += new System.EventHandler(this.MeterDataDataGrid_DoubleClick);
      this.MeterDataDataGrid.Click += new System.EventHandler(this.MeterDataDataGrid_Click);
      this.dataGridTableStyle1.DataGrid = this.MeterDataDataGrid;
      this.dataGridTableStyle1.GridColumnStyles.AddRange(new DataGridColumnStyle[1]
      {
        (DataGridColumnStyle) this.dataGridTextBoxTimePoint
      });
      this.dataGridTableStyle1.HeaderForeColor = SystemColors.ControlText;
      this.dataGridTableStyle1.MappingName = "MeterData";
      this.dataGridTableStyle1.ReadOnly = true;
      this.dataGridTextBoxTimePoint.Format = "dd.MM.yyyy HH:mm:ss";
      this.dataGridTextBoxTimePoint.FormatInfo = (IFormatProvider) null;
      componentResourceManager.ApplyResources((object) this.dataGridTextBoxTimePoint, "dataGridTextBoxTimePoint");
      componentResourceManager.ApplyResources((object) this.zennerCoroprateDesign1, "zennerCoroprateDesign1");
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      componentResourceManager.ApplyResources((object) this.label2, "label2");
      this.label2.Name = "label2";
      componentResourceManager.ApplyResources((object) this.label3, "label3");
      this.label3.Name = "label3";
      componentResourceManager.ApplyResources((object) this.buttonSeachType, "buttonSeachType");
      this.buttonSeachType.Name = "buttonSeachType";
      this.buttonSeachType.Click += new System.EventHandler(this.buttonSeachType_Click);
      componentResourceManager.ApplyResources((object) this.labelLoadStatus, "labelLoadStatus");
      this.labelLoadStatus.Name = "labelLoadStatus";
      componentResourceManager.ApplyResources((object) this.buttonSearchDay, "buttonSearchDay");
      this.buttonSearchDay.Name = "buttonSearchDay";
      this.buttonSearchDay.Click += new System.EventHandler(this.buttonSearchDay_Click);
      componentResourceManager.ApplyResources((object) this, "$this");
      this.Controls.Add((Control) this.labelLoadStatus);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.MeterDataDataGrid);
      this.Controls.Add((Control) this.dtagrdSerial);
      this.Controls.Add((Control) this.buttonSeachType);
      this.Controls.Add((Control) this.buttonSearchDay);
      this.Controls.Add((Control) this.btSeekMeterID);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.txtbxSuchstring);
      this.Controls.Add((Control) this.btSeek);
      this.Controls.Add((Control) this.btCancel);
      this.Controls.Add((Control) this.btOK);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Name = nameof (COpenMeter);
      this.dtagrdSerial.EndInit();
      this.dtatblMeter.EndInit();
      this.MeterDataDataGrid.EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private void btSuchen_Click(object sender, EventArgs e) => this.SearchOnSerialNumber();

    private void txtbxSuchstring_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyData != Keys.Return)
        return;
      this.SearchOnSerialNumber();
      e.Handled = true;
    }

    private void SearchOnSerialNumber()
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      try
      {
        if (this.txtbxSuchstring.Text.Length <= 0)
          return;
        string SqlCommand = this.DeviceFilter != null ? "SELECT Meter.MeterID, Meter.SerialNr AS SerialNr, Meter.MeterInfoID AS MeterInfoId, Meter.ProductionDate AS ProductionDate, Meter.ApprovalDate AS ApprovalDate, Meter.OrderNr AS OrderNr FROM Meter,MeterInfo WHERE Meter.SerialNr LIKE '" + this.txtbxSuchstring.Text + "' AND Meter.MeterInfoID = MeterInfo.MeterInfoID  AND MeterInfo.PPSArtikelNr = 'MinolDevice' ORDER by Meter.SerialNr" : "select * from Meter where SerialNr like '" + this.txtbxSuchstring.Text + "' order by SerialNr";
        this.dtatblMeter = new DataTable();
        using (IDbConnection dbConnection = primaryDb.GetDbConnection())
        {
          dbConnection.Open();
          primaryDb.ZRDataAdapter(SqlCommand, dbConnection).Fill(this.dtatblMeter);
          dbConnection.Close();
        }
        this.dtagrdSerial.DataSource = (object) this.dtatblMeter;
        this.showBackups();
      }
      catch (Exception ex)
      {
        this.ErrorMsg = ex.ToString();
        int num = (int) MessageBox.Show(this.ErrorMsg);
      }
    }

    private void btSeekMeterID_Click(object sender, EventArgs e)
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      try
      {
        if (this.txtbxSuchstring.Text.Length <= 0)
          return;
        string SqlCommand = "select * from Meter where MeterID like '" + this.txtbxSuchstring.Text + "' order by MeterID";
        this.dtatblMeter.Clear();
        using (IDbConnection dbConnection = primaryDb.GetDbConnection())
        {
          dbConnection.Open();
          primaryDb.ZRDataAdapter(SqlCommand, dbConnection).Fill(this.dtatblMeter);
          dbConnection.Close();
        }
        this.dtagrdSerial.DataSource = (object) this.dtatblMeter;
        this.showBackups();
      }
      catch (Exception ex)
      {
        this.ErrorMsg = ex.ToString();
        int num = (int) MessageBox.Show(this.ErrorMsg);
      }
    }

    private void buttonSeachType_Click(object sender, EventArgs e)
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      try
      {
        if (this.txtbxSuchstring.Text.Length <= 0)
          return;
        string SqlCommand = "select * from Meter,MeterInfo where MeterInfo.PPSArtikelNr = '" + this.txtbxSuchstring.Text + "' AND Meter.MeterInfoID = MeterInfo.MeterInfoID ORDER BY Meter.SerialNr";
        this.dtatblMeter.Clear();
        using (IDbConnection dbConnection = primaryDb.GetDbConnection())
        {
          dbConnection.Open();
          primaryDb.ZRDataAdapter(SqlCommand, dbConnection).Fill(this.dtatblMeter);
          dbConnection.Close();
        }
        this.dtagrdSerial.DataSource = (object) this.dtatblMeter;
        this.showBackups();
      }
      catch (Exception ex)
      {
        this.ErrorMsg = ex.ToString();
        int num = (int) MessageBox.Show(this.ErrorMsg);
      }
    }

    private void dtaGrdMenueViewItemMouseUp(object sender, MouseEventArgs e)
    {
      if (this.dtatblMeter.Rows.Count <= 0)
        return;
      DataRow rowInDtatblMeter = this.getDataRowInDtatblMeter();
      if (rowInDtatblMeter != null)
      {
        this.m_iMeterID = int.Parse(rowInDtatblMeter["MeterID"].ToString());
        this.m_sSerialNr = rowInDtatblMeter["SerialNr"].ToString();
      }
    }

    private void btCancel_Click(object sender, EventArgs e)
    {
      this.m_iMeterID = 0;
      this.m_iMeterInfoID = 0;
      this.m_sSerialNr = "0";
    }

    private void dtagrdSerial_DoubleClick(object sender, EventArgs e) => this.showBackups();

    private void buttonShowBackupData_Click(object sender, EventArgs e) => this.showBackups();

    private void showBackups()
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      try
      {
        this.labelLoadStatus.Text = this.dtatblMeter.Rows.Count.ToString() + " devices";
        if (this.dtatblMeter.Rows.Count > 0)
        {
          DataRow rowInDtatblMeter = this.getDataRowInDtatblMeter();
          if (rowInDtatblMeter != null)
          {
            this.m_iMeterID = int.Parse(rowInDtatblMeter["MeterID"].ToString());
            this.m_iMeterInfoID = int.Parse(rowInDtatblMeter["MeterInfoID"].ToString());
            this.m_sSerialNr = rowInDtatblMeter["SerialNr"].ToString();
          }
          this.Cursor = Cursors.WaitCursor;
          string SqlCommand = "SELECT * from MeterData WHERE MeterID = " + this.m_iMeterID.ToString() + " AND PValueID = " + 1.ToString() + " ORDER BY TimePoint DESC";
          this.MeterDataTable.Clear();
          using (IDbConnection dbConnection = primaryDb.GetDbConnection())
          {
            dbConnection.Open();
            primaryDb.ZRDataAdapter(SqlCommand, dbConnection).Fill(this.MeterDataTable);
            dbConnection.Close();
          }
          this.MeterDataDataGrid.DataSource = (object) this.MeterDataTable;
          if (this.MeterDataTable.Rows.Count > 0)
          {
            this.MeterDataDataGrid.Select(0);
            this.DataTimePoint = DateTime.Parse(this.getDataRowInMeterDataTable()["TimePoint"].ToString());
          }
          this.Cursor = Cursors.Default;
        }
        else
        {
          this.MeterDataTable.Clear();
          this.MeterDataDataGrid.DataSource = (object) this.MeterDataTable;
        }
      }
      catch (Exception ex)
      {
        this.ErrorMsg = ex.ToString();
        int num = (int) MessageBox.Show(this.ErrorMsg);
      }
    }

    private DataRow getDataRowInDtatblMeter()
    {
      return ((DataRowView) this.dtagrdSerial.BindingContext[(object) this.dtatblMeter].Current).Row;
    }

    private DataRow getDataRowInMeterDataTable()
    {
      BindingManagerBase bindingManagerBase = this.MeterDataDataGrid.BindingContext[(object) this.MeterDataTable];
      return bindingManagerBase.Position == -1 ? (DataRow) null : ((DataRowView) bindingManagerBase.Current).Row;
    }

    private void MeterDataDataGrid_DoubleClick(object sender, EventArgs e)
    {
      DataRow inMeterDataTable = this.getDataRowInMeterDataTable();
      if (inMeterDataTable == null)
        return;
      this.DataTimePoint = DateTime.Parse(inMeterDataTable["TimePoint"].ToString());
      this.DialogResult = DialogResult.OK;
    }

    private void MeterDataDataGrid_Click(object sender, EventArgs e)
    {
      DataRow inMeterDataTable = this.getDataRowInMeterDataTable();
      if (inMeterDataTable == null)
        return;
      this.DataTimePoint = DateTime.Parse(inMeterDataTable["TimePoint"].ToString());
    }

    private void dtagrdSerial_CurrentCellChanged(object sender, EventArgs e) => this.showBackups();

    private void buttonSearchDay_Click(object sender, EventArgs e)
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      try
      {
        if (this.txtbxSuchstring.Text.Length <= 0)
          return;
        DateTime result;
        if (!DateTime.TryParse(this.txtbxSuchstring.Text, out result))
        {
          TextBox txtbxSuchstring = this.txtbxSuchstring;
          DateTime dateTime = DateTime.Now;
          dateTime = dateTime.Date;
          string shortDateString = dateTime.ToShortDateString();
          txtbxSuchstring.Text = shortDateString;
        }
        else
        {
          DateTime date = result.Date;
          DateTime dateTime = date.AddDays(1.0);
          string SqlCommand = "SELECT Meter.MeterID, Meter.SerialNr AS SerialNr, Meter.MeterInfoID AS MeterInfoId, Meter.ProductionDate AS ProductionDate, Meter.ApprovalDate AS ApprovalDate, Meter.OrderNr AS OrderNr FROM Meter,MeterInfo,MeterType WHERE Meter.MeterInfoID = MeterInfo.MeterInfoID AND MeterInfo.MeterTypeID = MeterType.MeterTypeID AND MeterType.MTypeTableName = 'MTypeZelsius' AND ProductionDate >= @ProductionDay AND ProductionDate <= @NextDay ORDER BY ProductionDate DESC";
          this.dtatblMeter.Clear();
          using (IDbConnection dbConnection = primaryDb.GetDbConnection())
          {
            dbConnection.Open();
            ZRDataAdapter zrDataAdapter = primaryDb.ZRDataAdapter(SqlCommand, dbConnection);
            DbParameter parameter1 = zrDataAdapter.SelectCommand.CreateParameter();
            parameter1.DbType = DbType.DateTime;
            parameter1.ParameterName = "@ProductionDay";
            parameter1.Value = (object) date;
            zrDataAdapter.SelectCommand.Parameters.Add((object) parameter1);
            DbParameter parameter2 = zrDataAdapter.SelectCommand.CreateParameter();
            parameter2.DbType = DbType.DateTime;
            parameter2.ParameterName = "@NextDay";
            parameter2.Value = (object) dateTime;
            zrDataAdapter.SelectCommand.Parameters.Add((object) parameter2);
            zrDataAdapter.Fill(this.dtatblMeter);
            dbConnection.Close();
          }
          this.dtagrdSerial.DataSource = (object) this.dtatblMeter;
          this.showBackups();
        }
      }
      catch (Exception ex)
      {
        this.ErrorMsg = ex.ToString();
        int num = (int) MessageBox.Show(this.ErrorMsg);
      }
    }
  }
}


--- COpenTypeDlg.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.COpenTypeDlg
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using CorporateDesign;
using GmmDbLib;
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Printing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class COpenTypeDlg : Form
  {
    private Button btSuchen;
    private DataGrid dataGrid1;
    private Button btOk;
    private Button btCancel;
    private TextBox txtbx;
    public bool getTypeList = false;
    public ArrayList TypeList;
    private DataTable tov = new DataTable("TypeOverwriteParameter");
    private int pageNr;
    public string FirmwareVersion;
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;
    private DataTable dtatblMeterInfo;
    private Button btExtendedSeek;
    private DataGridTableStyle dataGridTableStyle1;
    private DataGridTextBoxColumn dataGridColPPSArtikelNr;
    private DataGridTextBoxColumn dataGridColHardwareName;
    private DataGridTextBoxColumn dataGridColFirmwareVersion;
    private DataGridTextBoxColumn dataGridColMeterInfoID;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private DataGridTextBoxColumn dataGridColMTDescription;
    private Button SelectBaseTypeButton;
    private Panel panel1;
    private TextBox textBoxMeterType;
    private TextBox textBoxHardwareType;
    private TextBox textBoxMeterHardware;
    private Label label2;
    private Label label3;
    private Label label4;
    private DataGrid dataGridTypeOverWriteParameter;
    private DataGridTableStyle dataGridTableStyle2;
    private DataGridTextBoxColumn dataGridTextBoxParameterValue;
    private TextBox textBoxMeterinfoDescription;
    private Label label1;
    private DataGridTextBoxColumn dataGridTextBoxMeterHardwareID;
    private DataGridTextBoxColumn dataGridTextBoxMeterTypeID;
    private DataGridTextBoxColumn dataGridTextBoxHardwareTypeID;
    private DataGridTextBoxColumn dataGridTextBoxDefaultFunction;
    private Button buttonPrint;
    private PrintDialog printDialog;
    private PrintDocument printDocument;
    public int m_nMeterInfoID;
    public int m_nMeterTypeID;
    private Button buttonDeleteType;
    private string m_sPPSNr;

    public string FilterByPPSArtikelNr
    {
      set => this.txtbx.Text = value;
    }

    public string MeterTypeDescription { get; private set; }

    public COpenTypeDlg()
    {
      this.InitializeComponent();
      this.m_nMeterInfoID = int.MaxValue;
      this.m_sPPSNr = "";
      this.FirmwareVersion = "";
      this.initEnviromentOnUser();
    }

    public COpenTypeDlg(bool ingetTypeList)
    {
      this.InitializeComponent();
      this.Text = "Developer special Function extractor";
      this.getTypeList = ingetTypeList;
      if (this.getTypeList)
        this.TypeList = new ArrayList();
      this.m_nMeterInfoID = int.MaxValue;
      this.m_sPPSNr = "";
      this.FirmwareVersion = "";
      this.initEnviromentOnUser();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (COpenTypeDlg));
      this.txtbx = new TextBox();
      this.btSuchen = new Button();
      this.dataGrid1 = new DataGrid();
      this.dataGridTableStyle1 = new DataGridTableStyle();
      this.dataGridColPPSArtikelNr = new DataGridTextBoxColumn();
      this.dataGridColMTDescription = new DataGridTextBoxColumn();
      this.dataGridColMeterInfoID = new DataGridTextBoxColumn();
      this.dataGridColHardwareName = new DataGridTextBoxColumn();
      this.dataGridColFirmwareVersion = new DataGridTextBoxColumn();
      this.dataGridTextBoxMeterHardwareID = new DataGridTextBoxColumn();
      this.dataGridTextBoxMeterTypeID = new DataGridTextBoxColumn();
      this.dataGridTextBoxHardwareTypeID = new DataGridTextBoxColumn();
      this.dataGridTextBoxDefaultFunction = new DataGridTextBoxColumn();
      this.btOk = new Button();
      this.btCancel = new Button();
      this.dtatblMeterInfo = new DataTable();
      this.btExtendedSeek = new Button();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.SelectBaseTypeButton = new Button();
      this.panel1 = new Panel();
      this.label1 = new Label();
      this.textBoxMeterinfoDescription = new TextBox();
      this.label4 = new Label();
      this.label3 = new Label();
      this.label2 = new Label();
      this.dataGridTypeOverWriteParameter = new DataGrid();
      this.dataGridTableStyle2 = new DataGridTableStyle();
      this.dataGridTextBoxParameterValue = new DataGridTextBoxColumn();
      this.textBoxMeterHardware = new TextBox();
      this.textBoxHardwareType = new TextBox();
      this.textBoxMeterType = new TextBox();
      this.buttonPrint = new Button();
      this.printDialog = new PrintDialog();
      this.printDocument = new PrintDocument();
      this.buttonDeleteType = new Button();
      this.dataGrid1.BeginInit();
      this.dtatblMeterInfo.BeginInit();
      this.panel1.SuspendLayout();
      this.dataGridTypeOverWriteParameter.BeginInit();
      this.SuspendLayout();
      this.txtbx.AcceptsReturn = true;
      componentResourceManager.ApplyResources((object) this.txtbx, "txtbx");
      this.txtbx.Name = "txtbx";
      this.txtbx.KeyDown += new KeyEventHandler(this.txtbx_KeyDown);
      componentResourceManager.ApplyResources((object) this.btSuchen, "btSuchen");
      this.btSuchen.Name = "btSuchen";
      this.btSuchen.Click += new System.EventHandler(this.btSuchen_Click);
      componentResourceManager.ApplyResources((object) this.dataGrid1, "dataGrid1");
      this.dataGrid1.HeaderForeColor = SystemColors.ControlText;
      this.dataGrid1.Name = "dataGrid1";
      this.dataGrid1.ReadOnly = true;
      this.dataGrid1.TableStyles.AddRange(new DataGridTableStyle[1]
      {
        this.dataGridTableStyle1
      });
      this.dataGrid1.DoubleClick += new System.EventHandler(this.dataGrid1_DoubleClick);
      this.dataGrid1.MouseUp += new MouseEventHandler(this.dtaGrdMenueViewItemMouseUp);
      this.dataGrid1.Navigate += new NavigateEventHandler(this.dataGrid1_Navigate);
      this.dataGridTableStyle1.DataGrid = this.dataGrid1;
      this.dataGridTableStyle1.GridColumnStyles.AddRange(new DataGridColumnStyle[9]
      {
        (DataGridColumnStyle) this.dataGridColPPSArtikelNr,
        (DataGridColumnStyle) this.dataGridColMTDescription,
        (DataGridColumnStyle) this.dataGridColMeterInfoID,
        (DataGridColumnStyle) this.dataGridColHardwareName,
        (DataGridColumnStyle) this.dataGridColFirmwareVersion,
        (DataGridColumnStyle) this.dataGridTextBoxMeterHardwareID,
        (DataGridColumnStyle) this.dataGridTextBoxMeterTypeID,
        (DataGridColumnStyle) this.dataGridTextBoxHardwareTypeID,
        (DataGridColumnStyle) this.dataGridTextBoxDefaultFunction
      });
      this.dataGridTableStyle1.HeaderForeColor = SystemColors.ControlText;
      this.dataGridColPPSArtikelNr.FormatInfo = (IFormatProvider) null;
      componentResourceManager.ApplyResources((object) this.dataGridColPPSArtikelNr, "dataGridColPPSArtikelNr");
      this.dataGridColPPSArtikelNr.ReadOnly = true;
      this.dataGridColMTDescription.FormatInfo = (IFormatProvider) null;
      componentResourceManager.ApplyResources((object) this.dataGridColMTDescription, "dataGridColMTDescription");
      this.dataGridColMTDescription.ReadOnly = true;
      this.dataGridColMeterInfoID.FormatInfo = (IFormatProvider) null;
      componentResourceManager.ApplyResources((object) this.dataGridColMeterInfoID, "dataGridColMeterInfoID");
      this.dataGridColMeterInfoID.ReadOnly = true;
      this.dataGridColHardwareName.FormatInfo = (IFormatProvider) null;
      componentResourceManager.ApplyResources((object) this.dataGridColHardwareName, "dataGridColHardwareName");
      this.dataGridColHardwareName.ReadOnly = true;
      this.dataGridColFirmwareVersion.FormatInfo = (IFormatProvider) null;
      componentResourceManager.ApplyResources((object) this.dataGridColFirmwareVersion, "dataGridColFirmwareVersion");
      this.dataGridColFirmwareVersion.ReadOnly = true;
      this.dataGridTextBoxMeterHardwareID.FormatInfo = (IFormatProvider) null;
      componentResourceManager.ApplyResources((object) this.dataGridTextBoxMeterHardwareID, "dataGridTextBoxMeterHardwareID");
      this.dataGridTextBoxMeterHardwareID.ReadOnly = true;
      this.dataGridTextBoxMeterTypeID.FormatInfo = (IFormatProvider) null;
      componentResourceManager.ApplyResources((object) this.dataGridTextBoxMeterTypeID, "dataGridTextBoxMeterTypeID");
      this.dataGridTextBoxMeterTypeID.ReadOnly = true;
      this.dataGridTextBoxHardwareTypeID.FormatInfo = (IFormatProvider) null;
      componentResourceManager.ApplyResources((object) this.dataGridTextBoxHardwareTypeID, "dataGridTextBoxHardwareTypeID");
      this.dataGridTextBoxHardwareTypeID.ReadOnly = true;
      this.dataGridTextBoxDefaultFunction.FormatInfo = (IFormatProvider) null;
      componentResourceManager.ApplyResources((object) this.dataGridTextBoxDefaultFunction, "dataGridTextBoxDefaultFunction");
      this.dataGridTextBoxDefaultFunction.ReadOnly = true;
      componentResourceManager.ApplyResources((object) this.btOk, "btOk");
      this.btOk.DialogResult = DialogResult.OK;
      this.btOk.Name = "btOk";
      this.btOk.Click += new System.EventHandler(this.btOk_Click);
      componentResourceManager.ApplyResources((object) this.btCancel, "btCancel");
      this.btCancel.DialogResult = DialogResult.Cancel;
      this.btCancel.Name = "btCancel";
      this.btCancel.Click += new System.EventHandler(this.btCancel_Click);
      componentResourceManager.ApplyResources((object) this.btExtendedSeek, "btExtendedSeek");
      this.btExtendedSeek.Name = "btExtendedSeek";
      this.btExtendedSeek.Click += new System.EventHandler(this.btExtendedSeek_Click);
      componentResourceManager.ApplyResources((object) this.zennerCoroprateDesign1, "zennerCoroprateDesign1");
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      componentResourceManager.ApplyResources((object) this.SelectBaseTypeButton, "SelectBaseTypeButton");
      this.SelectBaseTypeButton.DialogResult = DialogResult.OK;
      this.SelectBaseTypeButton.Name = "SelectBaseTypeButton";
      this.SelectBaseTypeButton.Click += new System.EventHandler(this.SelectBaseTypeButton_Click);
      componentResourceManager.ApplyResources((object) this.panel1, "panel1");
      this.panel1.Controls.Add((Control) this.label1);
      this.panel1.Controls.Add((Control) this.textBoxMeterinfoDescription);
      this.panel1.Controls.Add((Control) this.label4);
      this.panel1.Controls.Add((Control) this.label3);
      this.panel1.Controls.Add((Control) this.label2);
      this.panel1.Controls.Add((Control) this.dataGridTypeOverWriteParameter);
      this.panel1.Controls.Add((Control) this.textBoxMeterHardware);
      this.panel1.Controls.Add((Control) this.textBoxHardwareType);
      this.panel1.Controls.Add((Control) this.textBoxMeterType);
      this.panel1.Name = "panel1";
      componentResourceManager.ApplyResources((object) this.label1, "label1");
      this.label1.Name = "label1";
      componentResourceManager.ApplyResources((object) this.textBoxMeterinfoDescription, "textBoxMeterinfoDescription");
      this.textBoxMeterinfoDescription.Name = "textBoxMeterinfoDescription";
      this.textBoxMeterinfoDescription.ReadOnly = true;
      componentResourceManager.ApplyResources((object) this.label4, "label4");
      this.label4.Name = "label4";
      componentResourceManager.ApplyResources((object) this.label3, "label3");
      this.label3.Name = "label3";
      componentResourceManager.ApplyResources((object) this.label2, "label2");
      this.label2.Name = "label2";
      this.dataGridTypeOverWriteParameter.AllowNavigation = false;
      componentResourceManager.ApplyResources((object) this.dataGridTypeOverWriteParameter, "dataGridTypeOverWriteParameter");
      this.dataGridTypeOverWriteParameter.ColumnHeadersVisible = false;
      this.dataGridTypeOverWriteParameter.HeaderForeColor = SystemColors.ControlText;
      this.dataGridTypeOverWriteParameter.Name = "dataGridTypeOverWriteParameter";
      this.dataGridTypeOverWriteParameter.PreferredColumnWidth = 150;
      this.dataGridTypeOverWriteParameter.ReadOnly = true;
      this.dataGridTypeOverWriteParameter.RowHeadersVisible = false;
      this.dataGridTypeOverWriteParameter.TableStyles.AddRange(new DataGridTableStyle[1]
      {
        this.dataGridTableStyle2
      });
      this.dataGridTableStyle2.ColumnHeadersVisible = false;
      this.dataGridTableStyle2.DataGrid = this.dataGridTypeOverWriteParameter;
      this.dataGridTableStyle2.GridColumnStyles.AddRange(new DataGridColumnStyle[1]
      {
        (DataGridColumnStyle) this.dataGridTextBoxParameterValue
      });
      this.dataGridTableStyle2.HeaderForeColor = SystemColors.ControlText;
      this.dataGridTableStyle2.MappingName = "TypeOverwriteParameters";
      componentResourceManager.ApplyResources((object) this.dataGridTableStyle2, "dataGridTableStyle2");
      this.dataGridTableStyle2.ReadOnly = true;
      this.dataGridTextBoxParameterValue.FormatInfo = (IFormatProvider) null;
      componentResourceManager.ApplyResources((object) this.dataGridTextBoxParameterValue, "dataGridTextBoxParameterValue");
      this.dataGridTextBoxParameterValue.ReadOnly = true;
      componentResourceManager.ApplyResources((object) this.textBoxMeterHardware, "textBoxMeterHardware");
      this.textBoxMeterHardware.Name = "textBoxMeterHardware";
      this.textBoxMeterHardware.ReadOnly = true;
      componentResourceManager.ApplyResources((object) this.textBoxHardwareType, "textBoxHardwareType");
      this.textBoxHardwareType.Name = "textBoxHardwareType";
      this.textBoxHardwareType.ReadOnly = true;
      componentResourceManager.ApplyResources((object) this.textBoxMeterType, "textBoxMeterType");
      this.textBoxMeterType.Name = "textBoxMeterType";
      this.textBoxMeterType.ReadOnly = true;
      componentResourceManager.ApplyResources((object) this.buttonPrint, "buttonPrint");
      this.buttonPrint.Name = "buttonPrint";
      this.buttonPrint.Click += new System.EventHandler(this.buttonPrint_Click);
      this.printDialog.Document = this.printDocument;
      this.printDocument.PrintPage += new PrintPageEventHandler(this.printDocument_PrintPage);
      componentResourceManager.ApplyResources((object) this.buttonDeleteType, "buttonDeleteType");
      this.buttonDeleteType.Name = "buttonDeleteType";
      this.buttonDeleteType.Click += new System.EventHandler(this.buttonDeleteType_Click);
      componentResourceManager.ApplyResources((object) this, "$this");
      this.Controls.Add((Control) this.buttonDeleteType);
      this.Controls.Add((Control) this.buttonPrint);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.SelectBaseTypeButton);
      this.Controls.Add((Control) this.btOk);
      this.Controls.Add((Control) this.btCancel);
      this.Controls.Add((Control) this.btExtendedSeek);
      this.Controls.Add((Control) this.btSuchen);
      this.Controls.Add((Control) this.txtbx);
      this.Controls.Add((Control) this.dataGrid1);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Name = nameof (COpenTypeDlg);
      this.Load += new System.EventHandler(this.COpenTypeDlg_Load);
      this.dataGrid1.EndInit();
      this.dtatblMeterInfo.EndInit();
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.dataGridTypeOverWriteParameter.EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private void initEnviromentOnUser()
    {
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Developer))
      {
        this.buttonPrint.Visible = true;
        this.SelectBaseTypeButton.Visible = true;
        this.btExtendedSeek.Visible = true;
      }
      else
      {
        this.buttonPrint.Visible = false;
        this.SelectBaseTypeButton.Visible = false;
        this.btExtendedSeek.Visible = false;
      }
    }

    private void btSuchen_Click(object sender, EventArgs e) => this.SearchType();

    private void SearchType()
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      try
      {
        if (this.txtbx.Text.Length <= 0)
          return;
        string str = "SELECT  MeterInfo.PPSArtikelNr,HardwareType.FirmwareVersion,HardwareType.HardwareName,Meterinfo.Description as MeterInfoDescription,MeterType.Description as MeterTypeDescription,HardwareType.Description as HardwareTypeDescription,MeterHardware.Description as MeterHardwareDescription,MeterType.Typename,MeterInfo.HardwareTypeID,Meterinfo.MeterTypeID,MeterInfo.DefaultFunctionNr,MeterInfo.MeterHardwareID,MeterInfo.MeterInfoID FROM MeterType, HardwareType, MeterInfo, MeterHardware WHERE MeterInfo.PPSArtikelNr LIKE '" + this.txtbx.Text + "'";
        if (!UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Developer))
          str += " AND MeterInfo.MeterInfoID >= 99000";
        if (this.FirmwareVersion != "")
          str = str + " AND HardwareType.FirmwareVersion = " + this.FirmwareVersion;
        string SqlCommand = str + " AND MeterInfo.HardwareTypeID = HardwareType.HardwareTypeID AND MeterInfo.MeterHardwareID = MeterHardware.MeterHardwareID AND MeterInfo.MeterTypeID = MeterType.MeterTypeID ORDER BY MeterInfo.MeterInfoID DESC";
        this.dtatblMeterInfo.Clear();
        using (IDbConnection dbConnection = primaryDb.GetDbConnection())
        {
          dbConnection.Open();
          primaryDb.ZRDataAdapter(SqlCommand, dbConnection).Fill(this.dtatblMeterInfo);
          dbConnection.Close();
        }
        this.dataGrid1.DataSource = (object) this.dtatblMeterInfo;
        try
        {
          this.dataGrid1.Select(0);
          this.selectTheType();
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.ToString());
      }
    }

    private void dtaGrdMenueViewItemMouseUp(object sender, MouseEventArgs e)
    {
      this.selectTheType();
    }

    private void selectTheType()
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      try
      {
        if (this.dtatblMeterInfo.Rows.Count <= 0)
          return;
        DataRow inDtatblMeterInfo = this.getDataRowInDtatblMeterInfo();
        if (inDtatblMeterInfo != null)
        {
          this.m_nMeterInfoID = int.Parse(inDtatblMeterInfo["MeterInfoID"].ToString());
          this.m_nMeterTypeID = int.Parse(inDtatblMeterInfo["MeterTypeID"].ToString());
          this.m_sPPSNr = inDtatblMeterInfo["PPSArtikelNr"].ToString();
          this.textBoxHardwareType.Text = inDtatblMeterInfo["HardwareTypeDescription"].ToString();
          this.textBoxMeterHardware.Text = inDtatblMeterInfo["MeterHardwareDescription"].ToString();
          this.textBoxMeterType.Text = inDtatblMeterInfo["MeterTypeDescription"].ToString();
          this.MeterTypeDescription = this.textBoxMeterType.Text;
          this.textBoxMeterinfoDescription.Text = inDtatblMeterInfo["MeterInfoDescription"].ToString();
          this.tov.Clear();
          string SqlCommand = "Select ParameterValue from TypeOverwriteParameters where MeterInfoID = " + this.m_nMeterInfoID.ToString();
          using (IDbConnection dbConnection = primaryDb.GetDbConnection())
          {
            dbConnection.Open();
            primaryDb.ZRDataAdapter(SqlCommand, dbConnection).Fill(this.tov);
            dbConnection.Close();
          }
          this.dataGridTypeOverWriteParameter.DataSource = (object) this.tov;
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.ToString());
      }
    }

    private void btCancel_Click(object sender, EventArgs e) => this.m_nMeterInfoID = int.MaxValue;

    private void btExtendedSeek_Click(object sender, EventArgs e)
    {
      int num = (int) MessageBox.Show("Funnktion nicht mehr verfügbar!", "Extended seek", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
    }

    private void dataGrid1_DoubleClick(object sender, EventArgs e)
    {
      if (this.dtatblMeterInfo.Rows.Count > 0)
      {
        DataRow inDtatblMeterInfo = this.getDataRowInDtatblMeterInfo();
        this.m_nMeterInfoID = 5;
        if (inDtatblMeterInfo != null)
          this.m_nMeterInfoID = int.Parse(inDtatblMeterInfo["MeterInfoID"].ToString());
      }
      this.DialogResult = DialogResult.OK;
    }

    private DataRow getDataRowInDtatblMeterInfo()
    {
      return ((DataRowView) this.dataGrid1.BindingContext[(object) this.dtatblMeterInfo].Current).Row;
    }

    private void txtbx_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      sender = new object();
      EventArgs e1 = new EventArgs();
      this.btSuchen_Click(sender, e1);
    }

    internal int getBaseTypeMeterInfoID(
      int childMeterInfoID,
      out int baseTypeMeterInfoID,
      out string ErrorMsg)
    {
      return new BaseTypeCheck("", childMeterInfoID).getBaseTypeMeterInfoID(childMeterInfoID, out baseTypeMeterInfoID, out ErrorMsg);
    }

    private void SelectBaseTypeButton_Click(object sender, EventArgs e)
    {
      string ErrorMsg;
      if (this.getBaseTypeMeterInfoID(this.m_nMeterInfoID, out this.m_nMeterInfoID, out ErrorMsg) == 0)
      {
        if (MessageBox.Show("You want to open a BASETYPE!\r\nAttention! A manipulation on this type will change many other client-types!\r\nContinue?", "Attention", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
          return;
        this.Close();
      }
      else
      {
        int num = (int) MessageBox.Show(ErrorMsg);
      }
    }

    private void dataGrid1_Navigate(object sender, NavigateEventArgs ne)
    {
    }

    private void buttonPrint_Click(object sender, EventArgs e)
    {
      this.printDocument.PrinterSettings.FromPage = 1;
      this.printDocument.PrinterSettings.ToPage = 1;
      if (this.printDialog.ShowDialog() != DialogResult.OK)
        return;
      this.printDocument.DocumentName = "MeterInfoType";
      this.pageNr = 1;
      this.printDocument.Print();
    }

    private void printDocument_PrintPage(object sender, PrintPageEventArgs ppea)
    {
      Graphics graphics1 = ppea.Graphics;
      Font fntTitle = new Font("Times New Roman", 16f);
      Font font1 = new Font("Times New Roman", 10f);
      Pen pen1 = new Pen(Color.Black);
      Pen pen2 = new Pen(Color.Black);
      bool flag = this.printMeterInfoTypeData(graphics1, fntTitle, ppea);
      Graphics graphics2 = graphics1;
      string s = "Seite " + this.pageNr.ToString();
      Font font2 = font1;
      Brush black1 = Brushes.Black;
      Rectangle pageBounds = ppea.PageBounds;
      double x1 = (double) (pageBounds.Width / 2 - 60);
      pageBounds = ppea.PageBounds;
      double y1 = (double) (pageBounds.Height - 100);
      graphics2.DrawString(s, font2, black1, (float) x1, (float) y1);
      graphics1.DrawString("ZENNER GmbH & Co.KGaA", font1, Brushes.Black, 10f, (float) (ppea.PageBounds.Height - 100));
      SizeF sizeF = graphics1.MeasureString("www.zenner.de", font1);
      Graphics graphics3 = graphics1;
      Font font3 = font1;
      Brush black2 = Brushes.Black;
      Rectangle rectangle = ppea.PageBounds;
      int width = rectangle.Width;
      rectangle = ppea.MarginBounds;
      int left = rectangle.Left;
      double x2 = (double) (width - left) - (double) sizeF.Width;
      rectangle = ppea.PageBounds;
      double y2 = (double) (rectangle.Height - 100);
      graphics3.DrawString("www.zenner.de", font3, black2, (float) x2, (float) y2);
      ++this.pageNr;
      ppea.HasMorePages = flag;
    }

    private bool printMeterInfoTypeData(Graphics grfx, Font fntTitle, PrintPageEventArgs ppea)
    {
      Font font1 = new Font("Times New Roman", 14f);
      Font font2 = new Font("Times New Roman", 8f);
      Point point1;
      ref Point local = ref point1;
      Rectangle rectangle = ppea.PageBounds;
      int width = rectangle.Width;
      rectangle = ppea.MarginBounds;
      int left = rectangle.Left;
      int x = width - left;
      rectangle = ppea.PageBounds;
      int height = rectangle.Height;
      rectangle = ppea.MarginBounds;
      int top = rectangle.Top;
      int y = height - top;
      local = new Point(x, y);
      string[] strArray1 = new string[50];
      Pen pen1 = new Pen(Color.Black);
      Pen pen2 = new Pen(Color.Black);
      string[] strArray2 = new string[10];
      int num1 = 20;
      int num2 = (int) font2.GetHeight() + 2;
      bool flag = false;
      Point point2 = new Point(30, 40);
      grfx.DrawString("MeterType", fntTitle, Brushes.Black, (float) point2.X, 27f - fntTitle.GetHeight());
      point2.Y += num2;
      string s1 = "PPS-Nr : " + this.m_sPPSNr;
      grfx.DrawString(s1, fntTitle, Brushes.Black, (float) point2.X, (float) point2.Y);
      point2.Y += num2 * 2;
      DateTime dateTime = DateTime.Now;
      dateTime = dateTime.Date;
      string s2 = "Datum : " + dateTime.ToString();
      grfx.DrawString(s2, font2, Brushes.Black, (float) point2.X, (float) point2.Y);
      point2.Y += num2 * 2;
      string s3 = "MeterInfoID : " + this.m_nMeterInfoID.ToString();
      grfx.DrawString(s3, font2, Brushes.Black, (float) point2.X, (float) point2.Y);
      point2.Y += num2 * 2;
      int baseTypeMeterInfoID;
      this.getBaseTypeMeterInfoID(this.m_nMeterInfoID, out baseTypeMeterInfoID, out string _);
      string s4 = "MeterInfo-BASE-ID: " + baseTypeMeterInfoID.ToString();
      grfx.DrawString(s4, font2, Brushes.Black, (float) point2.X, (float) point2.Y);
      point2.Y += num2 * 2;
      string s5 = "MeterInfo-Description : ";
      grfx.DrawString(s5, font2, Brushes.Black, (float) point2.X, (float) point2.Y);
      point2.Y += num2;
      string[] outstr1 = new string[50];
      int strCount;
      this.reformatString(this.textBoxMeterinfoDescription.Text, ref outstr1, out strCount, grfx, font2, grfx.DpiX - (float) point2.X - (float) num1);
      for (int index = 0; index < strCount; ++index)
      {
        grfx.DrawString(outstr1[index], font2, Brushes.Black, (float) (point2.X + num1), (float) point2.Y);
        point2.Y += num2;
      }
      point2.Y += num2 * 2;
      string s6 = "MeterType-Description : ";
      grfx.DrawString(s6, font2, Brushes.Black, (float) point2.X, (float) point2.Y);
      point2.Y += num2;
      string[] outstr2 = new string[50];
      this.reformatString(this.textBoxMeterType.Text, ref outstr2, out strCount, grfx, font2, grfx.DpiX - (float) point2.X - (float) num1);
      for (int index = 0; index < strCount; ++index)
      {
        grfx.DrawString(outstr2[index], font2, Brushes.Black, (float) (point2.X + num1), (float) point2.Y);
        point2.Y += num2;
      }
      point2.Y += num2 * 2;
      string s7 = "HardwareType-Description : ";
      grfx.DrawString(s7, font2, Brushes.Black, (float) point2.X, (float) point2.Y);
      point2.Y += num2;
      string[] outstr3 = new string[50];
      this.reformatString(this.textBoxHardwareType.Text, ref outstr3, out strCount, grfx, font2, grfx.DpiX - (float) point2.X - (float) num1);
      for (int index = 0; index < strCount; ++index)
      {
        grfx.DrawString(outstr3[index], font2, Brushes.Black, (float) (point2.X + num1), (float) point2.Y);
        point2.Y += num2;
      }
      point2.Y += num2 * 2;
      string s8 = "MeterHardware : ";
      grfx.DrawString(s8, font2, Brushes.Black, (float) point2.X, (float) point2.Y);
      point2.Y += num2;
      string[] outstr4 = new string[50];
      this.reformatString(this.textBoxMeterHardware.Text, ref outstr4, out strCount, grfx, font2, grfx.DpiX - (float) point2.X - (float) num1);
      for (int index = 0; index < strCount; ++index)
      {
        grfx.DrawString(outstr4[index], font2, Brushes.Black, (float) (point2.X + num1), (float) point2.Y);
        point2.Y += num2;
      }
      point2.Y += num2 * 4;
      string s9 = "Overwriteparameter:";
      grfx.DrawString(s9, font1, Brushes.Black, (float) point2.X, (float) point2.Y);
      foreach (DataRow row in (InternalDataCollectionBase) this.tov.Rows)
      {
        point2.Y += num2 * 2;
        grfx.DrawString(row["ParameterValue"].ToString(), font2, Brushes.Black, (float) (point2.X + num1), (float) point2.Y);
      }
      return flag;
    }

    private void reformatString(
      string strLine,
      ref string[] outstr,
      out int strCount,
      Graphics grfx,
      Font fntTitle,
      float fWidth)
    {
      SizeF sizeF1 = grfx.MeasureString(strLine, fntTitle);
      strCount = 0;
      if ((double) sizeF1.Width >= (double) fWidth)
      {
        string[] strArray1 = strLine.Split(' ');
        int index1 = 0;
        SizeF sizeF2;
        SizeF sizeF3;
        while (index1 < strArray1.GetLength(0) && strCount < outstr.GetLength(0))
        {
          string text = "";
          bool flag = false;
          while (index1 < strArray1.GetLength(0) && !flag)
          {
            sizeF2 = grfx.MeasureString(strArray1[index1] + " ", fntTitle);
            sizeF3 = grfx.MeasureString(text, fntTitle);
            if ((double) sizeF3.Width + (double) sizeF2.Width > (double) fWidth)
            {
              flag = true;
            }
            else
            {
              text = text + strArray1[index1] + " ";
              ++index1;
            }
          }
          outstr[strCount] = text;
          ++strCount;
        }
        foreach (string text1 in outstr)
        {
          sizeF3 = grfx.MeasureString(text1, fntTitle);
          if ((double) sizeF3.Width >= (double) fWidth)
          {
            string[] strArray2 = strLine.Split(';');
            int index2 = 0;
            while (index2 < strArray2.GetLength(0) && strCount < outstr.GetLength(0))
            {
              string text2 = "";
              bool flag = false;
              while (index2 < strArray2.GetLength(0) && !flag)
              {
                sizeF2 = grfx.MeasureString(strArray2[index2] + " ", fntTitle);
                sizeF3 = grfx.MeasureString(text2, fntTitle);
                if ((double) sizeF3.Width + (double) sizeF2.Width > (double) fWidth)
                {
                  flag = true;
                }
                else
                {
                  text2 = text2 + strArray2[index2] + " ";
                  ++index2;
                }
              }
              outstr[strCount] = text2;
              ++strCount;
            }
          }
        }
      }
      else
      {
        outstr[strCount] = strLine;
        ++strCount;
      }
    }

    private void btOk_Click(object sender, EventArgs e)
    {
      int row1 = 0;
      if (!this.getTypeList)
        return;
      this.TypeList.Clear();
      foreach (DataRow row2 in (InternalDataCollectionBase) this.dtatblMeterInfo.Rows)
      {
        if (this.dataGrid1.IsSelected(row1))
          this.TypeList.Add((object) int.Parse(row2["MeterInfoID"].ToString()));
        ++row1;
      }
    }

    private void COpenTypeDlg_Load(object sender, EventArgs e)
    {
      if (this.txtbx.Text.Trim().Length <= 0)
        return;
      this.SearchType();
    }

    private void buttonDeleteType_Click(object sender, EventArgs e)
    {
      int num = (int) MessageBox.Show("Function not available!");
    }
  }
}


--- CRC.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.CRC
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public static class CRC
  {
    private static ushort[] CRC_TABLE = new ushort[256]
    {
      (ushort) 0,
      (ushort) 4129,
      (ushort) 8258,
      (ushort) 12387,
      (ushort) 16516,
      (ushort) 20645,
      (ushort) 24774,
      (ushort) 28903,
      (ushort) 33032,
      (ushort) 37161,
      (ushort) 41290,
      (ushort) 45419,
      (ushort) 49548,
      (ushort) 53677,
      (ushort) 57806,
      (ushort) 61935,
      (ushort) 4657,
      (ushort) 528,
      (ushort) 12915,
      (ushort) 8786,
      (ushort) 21173,
      (ushort) 17044,
      (ushort) 29431,
      (ushort) 25302,
      (ushort) 37689,
      (ushort) 33560,
      (ushort) 45947,
      (ushort) 41818,
      (ushort) 54205,
      (ushort) 50076,
      (ushort) 62463,
      (ushort) 58334,
      (ushort) 9314,
      (ushort) 13379,
      (ushort) 1056,
      (ushort) 5121,
      (ushort) 25830,
      (ushort) 29895,
      (ushort) 17572,
      (ushort) 21637,
      (ushort) 42346,
      (ushort) 46411,
      (ushort) 34088,
      (ushort) 38153,
      (ushort) 58862,
      (ushort) 62927,
      (ushort) 50604,
      (ushort) 54669,
      (ushort) 13907,
      (ushort) 9842,
      (ushort) 5649,
      (ushort) 1584,
      (ushort) 30423,
      (ushort) 26358,
      (ushort) 22165,
      (ushort) 18100,
      (ushort) 46939,
      (ushort) 42874,
      (ushort) 38681,
      (ushort) 34616,
      (ushort) 63455,
      (ushort) 59390,
      (ushort) 55197,
      (ushort) 51132,
      (ushort) 18628,
      (ushort) 22757,
      (ushort) 26758,
      (ushort) 30887,
      (ushort) 2112,
      (ushort) 6241,
      (ushort) 10242,
      (ushort) 14371,
      (ushort) 51660,
      (ushort) 55789,
      (ushort) 59790,
      (ushort) 63919,
      (ushort) 35144,
      (ushort) 39273,
      (ushort) 43274,
      (ushort) 47403,
      (ushort) 23285,
      (ushort) 19156,
      (ushort) 31415,
      (ushort) 27286,
      (ushort) 6769,
      (ushort) 2640,
      (ushort) 14899,
      (ushort) 10770,
      (ushort) 56317,
      (ushort) 52188,
      (ushort) 64447,
      (ushort) 60318,
      (ushort) 39801,
      (ushort) 35672,
      (ushort) 47931,
      (ushort) 43802,
      (ushort) 27814,
      (ushort) 31879,
      (ushort) 19684,
      (ushort) 23749,
      (ushort) 11298,
      (ushort) 15363,
      (ushort) 3168,
      (ushort) 7233,
      (ushort) 60846,
      (ushort) 64911,
      (ushort) 52716,
      (ushort) 56781,
      (ushort) 44330,
      (ushort) 48395,
      (ushort) 36200,
      (ushort) 40265,
      (ushort) 32407,
      (ushort) 28342,
      (ushort) 24277,
      (ushort) 20212,
      (ushort) 15891,
      (ushort) 11826,
      (ushort) 7761,
      (ushort) 3696,
      (ushort) 65439,
      (ushort) 61374,
      (ushort) 57309,
      (ushort) 53244,
      (ushort) 48923,
      (ushort) 44858,
      (ushort) 40793,
      (ushort) 36728,
      (ushort) 37256,
      (ushort) 33193,
      (ushort) 45514,
      (ushort) 41451,
      (ushort) 53516,
      (ushort) 49453,
      (ushort) 61774,
      (ushort) 57711,
      (ushort) 4224,
      (ushort) 161,
      (ushort) 12482,
      (ushort) 8419,
      (ushort) 20484,
      (ushort) 16421,
      (ushort) 28742,
      (ushort) 24679,
      (ushort) 33721,
      (ushort) 37784,
      (ushort) 41979,
      (ushort) 46042,
      (ushort) 49981,
      (ushort) 54044,
      (ushort) 58239,
      (ushort) 62302,
      (ushort) 689,
      (ushort) 4752,
      (ushort) 8947,
      (ushort) 13010,
      (ushort) 16949,
      (ushort) 21012,
      (ushort) 25207,
      (ushort) 29270,
      (ushort) 46570,
      (ushort) 42443,
      (ushort) 38312,
      (ushort) 34185,
      (ushort) 62830,
      (ushort) 58703,
      (ushort) 54572,
      (ushort) 50445,
      (ushort) 13538,
      (ushort) 9411,
      (ushort) 5280,
      (ushort) 1153,
      (ushort) 29798,
      (ushort) 25671,
      (ushort) 21540,
      (ushort) 17413,
      (ushort) 42971,
      (ushort) 47098,
      (ushort) 34713,
      (ushort) 38840,
      (ushort) 59231,
      (ushort) 63358,
      (ushort) 50973,
      (ushort) 55100,
      (ushort) 9939,
      (ushort) 14066,
      (ushort) 1681,
      (ushort) 5808,
      (ushort) 26199,
      (ushort) 30326,
      (ushort) 17941,
      (ushort) 22068,
      (ushort) 55628,
      (ushort) 51565,
      (ushort) 63758,
      (ushort) 59695,
      (ushort) 39368,
      (ushort) 35305,
      (ushort) 47498,
      (ushort) 43435,
      (ushort) 22596,
      (ushort) 18533,
      (ushort) 30726,
      (ushort) 26663,
      (ushort) 6336,
      (ushort) 2273,
      (ushort) 14466,
      (ushort) 10403,
      (ushort) 52093,
      (ushort) 56156,
      (ushort) 60223,
      (ushort) 64286,
      (ushort) 35833,
      (ushort) 39896,
      (ushort) 43963,
      (ushort) 48026,
      (ushort) 19061,
      (ushort) 23124,
      (ushort) 27191,
      (ushort) 31254,
      (ushort) 2801,
      (ushort) 6864,
      (ushort) 10931,
      (ushort) 14994,
      (ushort) 64814,
      (ushort) 60687,
      (ushort) 56684,
      (ushort) 52557,
      (ushort) 48554,
      (ushort) 44427,
      (ushort) 40424,
      (ushort) 36297,
      (ushort) 31782,
      (ushort) 27655,
      (ushort) 23652,
      (ushort) 19525,
      (ushort) 15522,
      (ushort) 11395,
      (ushort) 7392,
      (ushort) 3265,
      (ushort) 61215,
      (ushort) 65342,
      (ushort) 53085,
      (ushort) 57212,
      (ushort) 44955,
      (ushort) 49082,
      (ushort) 36825,
      (ushort) 40952,
      (ushort) 28183,
      (ushort) 32310,
      (ushort) 20053,
      (ushort) 24180,
      (ushort) 11923,
      (ushort) 16050,
      (ushort) 3793,
      (ushort) 7920
    };
    private static ushort[] CRC_TABLE_REVERSED = new ushort[256]
    {
      (ushort) 0,
      (ushort) 4489,
      (ushort) 8978,
      (ushort) 12955,
      (ushort) 17956,
      (ushort) 22445,
      (ushort) 25910,
      (ushort) 29887,
      (ushort) 35912,
      (ushort) 40385,
      (ushort) 44890,
      (ushort) 48851,
      (ushort) 51820,
      (ushort) 56293,
      (ushort) 59774,
      (ushort) 63735,
      (ushort) 4225,
      (ushort) 264,
      (ushort) 13203,
      (ushort) 8730,
      (ushort) 22181,
      (ushort) 18220,
      (ushort) 30135,
      (ushort) 25662,
      (ushort) 40137,
      (ushort) 36160,
      (ushort) 49115,
      (ushort) 44626,
      (ushort) 56045,
      (ushort) 52068,
      (ushort) 63999,
      (ushort) 59510,
      (ushort) 8450,
      (ushort) 12427,
      (ushort) 528,
      (ushort) 5017,
      (ushort) 26406,
      (ushort) 30383,
      (ushort) 17460,
      (ushort) 21949,
      (ushort) 44362,
      (ushort) 48323,
      (ushort) 36440,
      (ushort) 40913,
      (ushort) 60270,
      (ushort) 64231,
      (ushort) 51324,
      (ushort) 55797,
      (ushort) 12675,
      (ushort) 8202,
      (ushort) 4753,
      (ushort) 792,
      (ushort) 30631,
      (ushort) 26158,
      (ushort) 21685,
      (ushort) 17724,
      (ushort) 48587,
      (ushort) 44098,
      (ushort) 40665,
      (ushort) 36688,
      (ushort) 64495,
      (ushort) 60006,
      (ushort) 55549,
      (ushort) 51572,
      (ushort) 16900,
      (ushort) 21389,
      (ushort) 24854,
      (ushort) 28831,
      (ushort) 1056,
      (ushort) 5545,
      (ushort) 10034,
      (ushort) 14011,
      (ushort) 52812,
      (ushort) 57285,
      (ushort) 60766,
      (ushort) 64727,
      (ushort) 34920,
      (ushort) 39393,
      (ushort) 43898,
      (ushort) 47859,
      (ushort) 21125,
      (ushort) 17164,
      (ushort) 29079,
      (ushort) 24606,
      (ushort) 5281,
      (ushort) 1320,
      (ushort) 14259,
      (ushort) 9786,
      (ushort) 57037,
      (ushort) 53060,
      (ushort) 64991,
      (ushort) 60502,
      (ushort) 39145,
      (ushort) 35168,
      (ushort) 48123,
      (ushort) 43634,
      (ushort) 25350,
      (ushort) 29327,
      (ushort) 16404,
      (ushort) 20893,
      (ushort) 9506,
      (ushort) 13483,
      (ushort) 1584,
      (ushort) 6073,
      (ushort) 61262,
      (ushort) 65223,
      (ushort) 52316,
      (ushort) 56789,
      (ushort) 43370,
      (ushort) 47331,
      (ushort) 35448,
      (ushort) 39921,
      (ushort) 29575,
      (ushort) 25102,
      (ushort) 20629,
      (ushort) 16668,
      (ushort) 13731,
      (ushort) 9258,
      (ushort) 5809,
      (ushort) 1848,
      (ushort) 65487,
      (ushort) 60998,
      (ushort) 56541,
      (ushort) 52564,
      (ushort) 47595,
      (ushort) 43106,
      (ushort) 39673,
      (ushort) 35696,
      (ushort) 33800,
      (ushort) 38273,
      (ushort) 42778,
      (ushort) 46739,
      (ushort) 49708,
      (ushort) 54181,
      (ushort) 57662,
      (ushort) 61623,
      (ushort) 2112,
      (ushort) 6601,
      (ushort) 11090,
      (ushort) 15067,
      (ushort) 20068,
      (ushort) 24557,
      (ushort) 28022,
      (ushort) 31999,
      (ushort) 38025,
      (ushort) 34048,
      (ushort) 47003,
      (ushort) 42514,
      (ushort) 53933,
      (ushort) 49956,
      (ushort) 61887,
      (ushort) 57398,
      (ushort) 6337,
      (ushort) 2376,
      (ushort) 15315,
      (ushort) 10842,
      (ushort) 24293,
      (ushort) 20332,
      (ushort) 32247,
      (ushort) 27774,
      (ushort) 42250,
      (ushort) 46211,
      (ushort) 34328,
      (ushort) 38801,
      (ushort) 58158,
      (ushort) 62119,
      (ushort) 49212,
      (ushort) 53685,
      (ushort) 10562,
      (ushort) 14539,
      (ushort) 2640,
      (ushort) 7129,
      (ushort) 28518,
      (ushort) 32495,
      (ushort) 19572,
      (ushort) 24061,
      (ushort) 46475,
      (ushort) 41986,
      (ushort) 38553,
      (ushort) 34576,
      (ushort) 62383,
      (ushort) 57894,
      (ushort) 53437,
      (ushort) 49460,
      (ushort) 14787,
      (ushort) 10314,
      (ushort) 6865,
      (ushort) 2904,
      (ushort) 32743,
      (ushort) 28270,
      (ushort) 23797,
      (ushort) 19836,
      (ushort) 50700,
      (ushort) 55173,
      (ushort) 58654,
      (ushort) 62615,
      (ushort) 32808,
      (ushort) 37281,
      (ushort) 41786,
      (ushort) 45747,
      (ushort) 19012,
      (ushort) 23501,
      (ushort) 26966,
      (ushort) 30943,
      (ushort) 3168,
      (ushort) 7657,
      (ushort) 12146,
      (ushort) 16123,
      (ushort) 54925,
      (ushort) 50948,
      (ushort) 62879,
      (ushort) 58390,
      (ushort) 37033,
      (ushort) 33056,
      (ushort) 46011,
      (ushort) 41522,
      (ushort) 23237,
      (ushort) 19276,
      (ushort) 31191,
      (ushort) 26718,
      (ushort) 7393,
      (ushort) 3432,
      (ushort) 16371,
      (ushort) 11898,
      (ushort) 59150,
      (ushort) 63111,
      (ushort) 50204,
      (ushort) 54677,
      (ushort) 41258,
      (ushort) 45219,
      (ushort) 33336,
      (ushort) 37809,
      (ushort) 27462,
      (ushort) 31439,
      (ushort) 18516,
      (ushort) 23005,
      (ushort) 11618,
      (ushort) 15595,
      (ushort) 3696,
      (ushort) 8185,
      (ushort) 63375,
      (ushort) 58886,
      (ushort) 54429,
      (ushort) 50452,
      (ushort) 45483,
      (ushort) 40994,
      (ushort) 37561,
      (ushort) 33584,
      (ushort) 31687,
      (ushort) 27214,
      (ushort) 22741,
      (ushort) 18780,
      (ushort) 15843,
      (ushort) 11370,
      (ushort) 7921,
      (ushort) 3960
    };
    private static byte NK_ANFUEHRER_MAX = 65;
    private static byte[,] NK_ANFUEHRER = new byte[65, 8]
    {
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 1
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 2
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 4
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 8
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 16
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 32
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 64
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 128
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 1,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 2,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 4,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 8,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 16,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 32,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 64,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 128,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 1,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 2,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 4,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 8,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 16,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 32,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 64,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 128,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 1,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 2,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 4,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 8,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 16,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 32,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 64,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 128,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 1,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 2,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 4,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 8,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 16,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 32,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 64,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 128,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 1,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 2,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 4,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 8,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 16,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 32,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 64,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 0,
        (byte) 128,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 1,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 2,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 4,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 8,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 16,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 32,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 64,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 0,
        (byte) 128,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 1,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 2,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 4,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 8,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 16,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 32,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 64,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      },
      {
        (byte) 128,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0
      }
    };
    private static ushort[] syndrom = CRC.initSyndrom();
    private static ushort[] syndromReversed = CRC.initSyncdromReversed();

    private static ushort[] initSyndrom()
    {
      ushort[] numArray = new ushort[(int) CRC.NK_ANFUEHRER_MAX];
      for (int index1 = 0; index1 < (int) CRC.NK_ANFUEHRER_MAX; ++index1)
      {
        byte[] adr = new byte[8];
        for (int index2 = 0; index2 < 8; ++index2)
          adr[index2] = CRC.NK_ANFUEHRER[index1, index2];
        numArray[index1] = CRC.calculateChecksum(ref adr, (ushort) 8, 0U);
      }
      return numArray;
    }

    private static ushort[] initSyncdromReversed()
    {
      ushort[] numArray = new ushort[(int) CRC.NK_ANFUEHRER_MAX];
      for (int index1 = 0; index1 < (int) CRC.NK_ANFUEHRER_MAX; ++index1)
      {
        byte[] adr = new byte[8];
        for (int index2 = 0; index2 < 8; ++index2)
          adr[index2] = CRC.NK_ANFUEHRER[index1, index2];
        numArray[index1] = CRC.calculateChecksumReversed(ref adr, 8U, 0U);
      }
      return numArray;
    }

    public static ushort calculateChecksum(ref byte[] adr, ushort len, uint index)
    {
      ushort checksum = 0;
      while (len-- > (ushort) 0)
        checksum = (ushort) ((uint) CRC.CRC_TABLE[((int) checksum >> 8 ^ (int) adr[(int) index++]) & (int) byte.MaxValue] ^ (uint) checksum << 8);
      return checksum;
    }

    public static ushort CalculateCRC(byte[] buffer, int start, int end, ushort seed)
    {
      ushort crc = seed;
      for (int index1 = start; index1 < end; ++index1)
      {
        int index2 = (int) (byte) ((uint) crc & (uint) byte.MaxValue) ^ (int) buffer[index1];
        crc = (ushort) ((uint) (ushort) ((uint) crc >> 8) ^ (uint) CRC.CRC_TABLE_REVERSED[index2]);
      }
      return crc;
    }

    public static ushort calculateChecksumReversed(byte[] adr, uint len, uint index)
    {
      ushort checksumReversed = 0;
      while (len-- > 0U)
        checksumReversed = (ushort) ((uint) CRC.CRC_TABLE_REVERSED[((int) checksumReversed ^ (int) adr[(int) index++]) & (int) byte.MaxValue] ^ (uint) checksumReversed >> 8);
      return checksumReversed;
    }

    public static ushort calculateChecksumReversed(ref byte[] adr, uint len, uint index)
    {
      ushort checksumReversed = 0;
      while (len-- > 0U)
        checksumReversed = (ushort) ((uint) CRC.CRC_TABLE_REVERSED[((int) checksumReversed ^ (int) adr[(int) index++]) & (int) byte.MaxValue] ^ (uint) checksumReversed >> 8);
      return checksumReversed;
    }

    public static bool correctError(ref byte[] adr, uint len, uint index) => true;

    public static bool correctErrorReversed(ref byte[] adr, uint len, uint index)
    {
      ushort checksumReversed = CRC.calculateChecksumReversed(ref adr, len, index);
      if (checksumReversed <= (ushort) 0)
        return true;
      bool flag1 = false;
      uint index1 = 0;
      for (uint index2 = 0; index2 < (uint) CRC.NK_ANFUEHRER_MAX && !flag1; ++index2)
      {
        if ((int) CRC.syndromReversed[(int) index2] == (int) checksumReversed)
        {
          flag1 = true;
          index1 = index2;
        }
      }
      if (!flag1)
        return false;
      bool flag2 = false;
      for (uint index3 = 0; index3 < len && !flag2; ++index3)
      {
        if (CRC.NK_ANFUEHRER[(int) index1, (int) index3] > (byte) 0)
        {
          index += index3;
          adr[(int) index] = (byte) ((uint) adr[(int) index] ^ (uint) CRC.NK_ANFUEHRER[(int) index1, (int) index3]);
          flag2 = true;
        }
      }
      return CRC.calculateChecksumReversed(ref adr, len, index) == (ushort) 0;
    }
  }
}


--- CsvStyle.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.CsvStyle
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Serialization;

#nullable disable
namespace ZR_ClassLibrary
{
  [Serializable]
  public sealed class CsvStyle
  {
    public const string FILE_EXTENSION = ".sty";

    [XmlElement("Name", typeof (string))]
    public string Name { get; set; }

    [XmlElement("FirstRowContainsColumnNames", typeof (bool))]
    public bool FirstRowContainsColumnNames { get; set; }

    [XmlElement("StyleString", typeof (string))]
    public string StyleString { get; set; }

    public static CsvStyle DefaultStyle1
    {
      get
      {
        return new CsvStyle()
        {
          Name = "Example 1",
          FirstRowContainsColumnNames = true,
          StyleString = "$TimePoint$;$SerialNr$;$NodeName$;$PValueName$;$PValue$;$Unit$"
        };
      }
    }

    public static CsvStyle DefaultStyle2
    {
      get
      {
        return new CsvStyle()
        {
          Name = "Example 2",
          FirstRowContainsColumnNames = true,
          StyleString = "$TimePoint$      $[:d]TimePoint$         $[,-30:D]TimePoint$     $[:ddd, MMM d, yyyy]TimePoint$            $[:hh:mm]TimePoint$       $[,-20:MMMM-yyyy]TimePoint$"
        };
      }
    }

    public static CsvStyle DefaultStyle3
    {
      get
      {
        return new CsvStyle()
        {
          Name = "Example 3",
          FirstRowContainsColumnNames = true,
          StyleString = "|$[,20]SerialNr$|$[,-10]SerialNr$|$[,10]SerialNr$|$[,-20]SerialNr$|"
        };
      }
    }

    public string GenerateFile(DataTable sourceTable)
    {
      if (sourceTable == null)
        return string.Empty;
      if (!sourceTable.Columns.Contains("NodeID"))
        throw new ArgumentException("The column name NodeID does not exist in the target table!");
      if (string.IsNullOrEmpty(this.StyleString))
        throw new ArgumentNullException();
      if (this.StyleString.IndexOfAny(new char[2]
      {
        '{',
        '}'
      }) > 0)
        throw new ArgumentNullException("StyleString contains invalid chars!");
      Dictionary<int, string> fullAdditionalInfos = MeterDatabase.GetFullAdditionalInfos(sourceTable);
      DataTable table = this.PrepareDataTable(sourceTable, fullAdditionalInfos);
      string formatString = this.GenerateFormatString(table);
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        if (this.FirstRowContainsColumnNames)
        {
          List<string> stringList = new List<string>();
          foreach (DataColumn column in (InternalDataCollectionBase) table.Columns)
            stringList.Add(column.ColumnName);
          stringBuilder.AppendFormat((IFormatProvider) FixedFormates.TheFormates, formatString, (object[]) stringList.ToArray());
          stringBuilder.Append(ZR_Constants.SystemNewLine);
        }
        foreach (DataRow row in (InternalDataCollectionBase) table.Rows)
        {
          stringBuilder.AppendFormat((IFormatProvider) FixedFormates.TheFormates, formatString, row.ItemArray);
          stringBuilder.Append(ZR_Constants.SystemNewLine);
        }
      }
      catch
      {
        return string.Empty;
      }
      return stringBuilder.ToString();
    }

    public static List<string> GetAvailableColumns(DataTable table)
    {
      Dictionary<int, string> fullAdditionalInfos = MeterDatabase.GetFullAdditionalInfos(table);
      DataTable dataTable = new CsvStyle().PrepareDataTable(table, fullAdditionalInfos);
      List<string> availableColumns = new List<string>();
      foreach (DataColumn column in (InternalDataCollectionBase) dataTable.Columns)
        availableColumns.Add(column.ColumnName);
      return availableColumns;
    }

    public static string GetPath(CsvStyle style)
    {
      return style == null ? (string) null : Path.Combine(SystemValues.ExportStylesPath, style.Name + ".sty");
    }

    public static void Save(CsvStyle style)
    {
      if (style == null)
        return;
      string fileName = !string.IsNullOrEmpty(style.Name) ? CsvStyle.GetPath(style) : throw new ArgumentNullException("CsvStyle.Name");
      CsvStyle.Save(style, fileName);
    }

    public static void Save(CsvStyle style, string fileName)
    {
      if (style == null)
        return;
      if (string.IsNullOrEmpty(fileName))
        throw new ArgumentNullException(nameof (fileName));
      File.Delete(fileName);
      using (Stream stream = (Stream) File.Open(fileName, FileMode.CreateNew, FileAccess.Write))
        new XmlSerializer(typeof (CsvStyle)).Serialize(stream, (object) style);
    }

    public static List<CsvStyle> Load()
    {
      string[] files = Directory.GetFiles(SystemValues.ExportStylesPath, "*.sty");
      if (files.Length == 0)
        return (List<CsvStyle>) null;
      List<CsvStyle> csvStyleList = new List<CsvStyle>(files.Length);
      foreach (string fileName in files)
      {
        CsvStyle csvStyle = CsvStyle.Load(fileName);
        if (csvStyle != null)
          csvStyleList.Add(csvStyle);
      }
      return csvStyleList;
    }

    public static CsvStyle Load(string fileName)
    {
      using (Stream stream = (Stream) File.Open(fileName, FileMode.Open, FileAccess.Read))
        return (CsvStyle) new XmlSerializer(typeof (CsvStyle)).Deserialize(stream);
    }

    public static void Delete(CsvStyle style)
    {
      if (style == null)
        return;
      File.Delete(Path.Combine(SystemValues.ExportStylesPath, style.Name + ".sty"));
    }

    private DataTable PrepareDataTable(
      DataTable sourceTable,
      Dictionary<int, string> additionalInfos)
    {
      if (additionalInfos == null || additionalInfos.Count <= 0)
        return sourceTable;
      DataTable dataTable = sourceTable.Copy();
      foreach (KeyValuePair<int, string> additionalInfo in additionalInfos)
      {
        foreach (string key in ParameterService.GetKeys(additionalInfo.Value.Trim(';')))
        {
          if (!dataTable.Columns.Contains(key))
            dataTable.Columns.Add(key, typeof (string));
        }
      }
      foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
      {
        int integer = Util.ToInteger(row["NodeID"]);
        if (additionalInfos.ContainsKey(integer))
        {
          string additionalInfo = additionalInfos[integer];
          char[] chArray = new char[1]{ ';' };
          foreach (string key in ParameterService.GetKeys(additionalInfo.Trim(chArray)))
            row[key] = (object) ParameterService.GetParameter(additionalInfos[integer].Trim(';'), key);
        }
      }
      return dataTable;
    }

    private string GenerateFormatString(DataTable table)
    {
      string input = this.StyleString;
      for (int index = 0; index < table.Columns.Count; ++index)
      {
        Regex regex1 = new Regex("\\$" + table.Columns[index].ColumnName + "\\$");
        if (regex1.IsMatch(input))
          input = regex1.Replace(input, "{" + index.ToString() + "}");
        Regex regex2 = new Regex("\\$\\[[^\\[]+\\]" + table.Columns[index].ColumnName + "\\$");
        if (regex2.IsMatch(input))
        {
          foreach (Match match in regex2.Matches(input))
          {
            string str1 = match.Value.Substring(2);
            string str2 = str1.Substring(0, str1.Length - 1).Replace("]" + table.Columns[index].ColumnName, string.Empty);
            input = input.Replace(match.Value, "{" + index.ToString() + str2 + "}");
          }
        }
      }
      return input;
    }
  }
}


--- CycleTimeChangeMethode.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.CycleTimeChangeMethode
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum CycleTimeChangeMethode
  {
    OFF,
    ExtPower,
    Flow,
    ExtPowerFlow,
    Temp,
    ExtPowerTemp,
    FlowTemp,
    ExtPowerFlowTemp,
  }
}


--- DatabaseUpgradeManager.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DatabaseUpgradeManager
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using NLog;
using System;
using System.Collections.Generic;
using System.Data.OleDb;
using System.Data.SQLite;
using System.IO;
using System.IO.Packaging;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class DatabaseUpgradeManager
  {
    private static Logger logger = LogManager.GetLogger(nameof (DatabaseUpgradeManager));
    private const string NAME_OF_SETUP_DATABASE = "MeterDB.set";
    private const string NAME_OF_UPDATE_INFO_FILE = "Database.txt";
    private const string DEFAULT_DATABASE_FILE_NAME = "MeterDB.db3";
    public const string DEFAULT_GMM_DATABASE_CONNECTION_STRING = "Data Source={0};UTF8Encoding=True;Password=meterdbpass;journal mode=wal;synchronous=off;";
    public const string DEFAULT_GMM_DATABASE_CONNECTION_STRING_ACCESS = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source={0};Mode=ReadWrite|Share Deny None;Extended Properties=;Jet OLEDB:System database=;Jet OLEDB:Registry Path=;Jet OLEDB:Database Password=meterdbpass;Jet OLEDB:Engine Type=5;Jet OLEDB:Database Locking Mode=1;Jet OLEDB:Global Partial Bulk Ops=2;Jet OLEDB:Global Bulk Transactions=1;Jet OLEDB:New Database Password=;Jet OLEDB:Create System Database=False;Jet OLEDB:Encrypt Database=False;Jet OLEDB:Don't Copy Locale on Compact=False;Jet OLEDB:Compact Without Replica Repair=False;Jet OLEDB:SFP=False;";
    private DbBasis oldDatabase;
    private DbBasis newDatabase;
    private DbBasis originalDatabase;
    private MeterDatabase manager;

    public DatabaseUpgradeManager(DbBasis oldDatabase, DbBasis newDatabase)
    {
      if (oldDatabase == null)
        throw new ArgumentNullException("Construct parameter 'oldDatabase' can not be null!");
      if (newDatabase == null)
        throw new ArgumentNullException("Construct parameter 'newDatabase' can not be null!");
      this.oldDatabase = oldDatabase;
      this.newDatabase = newDatabase;
      this.IsMergeMode = false;
      this.manager = new MeterDatabase();
    }

    public int? OldDatabaseVersion => MeterDatabase.GetDatabaseVersion(this.oldDatabase);

    public string OldDatabaseVersionDate => MeterDatabase.GetDatabaseVersionDate(this.oldDatabase);

    public int? NewDatabaseVersion => MeterDatabase.GetDatabaseVersion(this.newDatabase);

    public string NewDatabaseVersionDate => MeterDatabase.GetDatabaseVersionDate(this.newDatabase);

    public string PathToCreatedDatabase { get; private set; }

    public string PathToNewDatabaseFile
    {
      get => DatabaseUpgradeManager.GetPathToDatabase(this.newDatabase);
    }

    public string PathToOldDatabaseFile
    {
      get => DatabaseUpgradeManager.GetPathToDatabase(this.oldDatabase);
    }

    public bool IsMergeMode { get; set; }

    public event EventHandler<UpgradeActionEventArgs> OnActionStateChanged;

    public static bool IsUpdate()
    {
      return DatabaseUpgradeManager.ExistPropertyWithValueByDatabaseInfoFile("UPDATE", "TRUE");
    }

    private static bool ExistPropertyWithValueByDatabaseInfoFile(
      string propertyName,
      string propertyValue)
    {
      string path = Path.Combine(SystemValues.DatabasePath, "Database.txt");
      if (!File.Exists(path))
        return false;
      string str = File.ReadAllText(path);
      if (string.IsNullOrEmpty(str))
        return false;
      int startIndex1 = str.IndexOf(propertyName, StringComparison.CurrentCultureIgnoreCase);
      if (startIndex1 < 0)
        return false;
      int startIndex2 = str.IndexOf("=", startIndex1, StringComparison.CurrentCultureIgnoreCase);
      return startIndex2 >= 0 && str.IndexOf(propertyValue, startIndex2, StringComparison.CurrentCultureIgnoreCase) >= 0;
    }

    public static bool IsNewInstalation()
    {
      return DatabaseUpgradeManager.IsNewInstalation(Path.Combine(SystemValues.DatabasePath, "MeterDB.db3"));
    }

    public static bool IsNewInstalation(string pathToDatabase)
    {
      bool flag1 = DatabaseUpgradeManager.ExistPropertyWithValueByDatabaseInfoFile("UPDATE", "TRUE");
      bool flag2 = File.Exists(Path.Combine(SystemValues.DatabasePath, "MeterDB.set"));
      bool flag3 = File.Exists(pathToDatabase);
      return flag1 & flag2 && !flag3;
    }

    public static void DeleteDatabaseInfoFile()
    {
      DatabaseUpgradeManager.logger.Info(nameof (DeleteDatabaseInfoFile));
      File.Delete(Path.Combine(SystemValues.DatabasePath, "Database.txt"));
    }

    public List<UpgradeAction> GetListOfUpgradeActions()
    {
      int? oldDatabaseVersion = this.OldDatabaseVersion;
      int? newDatabaseVersion = this.NewDatabaseVersion;
      List<UpgradeAction> ofUpgradeActions = new List<UpgradeAction>();
      if (!oldDatabaseVersion.HasValue || !newDatabaseVersion.HasValue)
        return ofUpgradeActions;
      ofUpgradeActions.Add(UpgradeAction.VerifyDatabase);
      int? nullable = oldDatabaseVersion;
      int num1 = 2;
      int num2;
      if (nullable.GetValueOrDefault() == num1 & nullable.HasValue)
      {
        nullable = newDatabaseVersion;
        int num3 = 777;
        num2 = nullable.GetValueOrDefault() == num3 & nullable.HasValue ? 1 : 0;
      }
      else
        num2 = 0;
      if (num2 != 0)
      {
        ofUpgradeActions.Add(UpgradeAction.UpgradeFilter);
        ofUpgradeActions.Add(UpgradeAction.UpgradeFilterValue);
        ofUpgradeActions.Add(UpgradeAction.UpgradeGMM_User);
        ofUpgradeActions.Add(UpgradeAction.UpgradeMeterType);
        ofUpgradeActions.Add(UpgradeAction.UpgradeMeterInfo);
        ofUpgradeActions.Add(UpgradeAction.UpgradeMTypeZelsius);
        ofUpgradeActions.Add(UpgradeAction.UpgradeMeter);
        ofUpgradeActions.Add(UpgradeAction.UpgradeNodeList);
        ofUpgradeActions.Add(UpgradeAction.UpgradeNodeLayers);
        ofUpgradeActions.Add(UpgradeAction.UpgradeNodeReferences);
        ofUpgradeActions.Add(UpgradeAction.UpgradeMeterValues);
      }
      else
      {
        nullable = oldDatabaseVersion;
        int num4 = 2;
        int num5;
        if (nullable.GetValueOrDefault() == num4 & nullable.HasValue)
        {
          nullable = newDatabaseVersion;
          int num6 = 2;
          num5 = nullable.GetValueOrDefault() == num6 & nullable.HasValue ? 1 : 0;
        }
        else
          num5 = 0;
        if (num5 != 0)
        {
          if (this.IsMergeMode)
          {
            ofUpgradeActions.Add(UpgradeAction.MergeData);
          }
          else
          {
            ofUpgradeActions.Add(UpgradeAction.CreateCopyOfSetupDB);
            ofUpgradeActions.Add(UpgradeAction.UpgradeFilter);
            ofUpgradeActions.Add(UpgradeAction.UpgradeFilterValue);
            ofUpgradeActions.Add(UpgradeAction.UpgradeGMM_User);
            ofUpgradeActions.Add(UpgradeAction.UpgradeSoftwareUsers);
            ofUpgradeActions.Add(UpgradeAction.UpgradeUserPermissions);
            ofUpgradeActions.Add(UpgradeAction.UpgradeMeterType);
            ofUpgradeActions.Add(UpgradeAction.UpgradeMeterInfo);
            ofUpgradeActions.Add(UpgradeAction.UpgradeMTypeZelsius);
            ofUpgradeActions.Add(UpgradeAction.UpgradeMeter);
            ofUpgradeActions.Add(UpgradeAction.UpgradeNodeList);
            ofUpgradeActions.Add(UpgradeAction.UpgradeNodeLayers);
            ofUpgradeActions.Add(UpgradeAction.UpgradeNodeReferences);
            ofUpgradeActions.Add(UpgradeAction.UpgradeMeterValues);
            ofUpgradeActions.Add(UpgradeAction.BackupOldDatabase);
          }
        }
        else
        {
          nullable = oldDatabaseVersion;
          int num7 = 1;
          int num8;
          if (nullable.GetValueOrDefault() == num7 & nullable.HasValue)
          {
            nullable = newDatabaseVersion;
            int num9 = 2;
            num8 = nullable.GetValueOrDefault() == num9 & nullable.HasValue ? 1 : 0;
          }
          else
            num8 = 0;
          if (num8 != 0)
          {
            if (this.IsMergeMode)
            {
              ofUpgradeActions.Add(UpgradeAction.UseSetupDatabase);
              ofUpgradeActions.Add(UpgradeAction.UpgradeGMM_User);
              ofUpgradeActions.Add(UpgradeAction.UpgradeMeterType);
              ofUpgradeActions.Add(UpgradeAction.UpgradeMeterInfo);
              ofUpgradeActions.Add(UpgradeAction.UpgradeMTypeZelsius);
              ofUpgradeActions.Add(UpgradeAction.UpgradeMeter);
              ofUpgradeActions.Add(UpgradeAction.UpgradeNodeList_1_to_2);
              ofUpgradeActions.Add(UpgradeAction.UpgradeNodeReferences_1_to_2);
              ofUpgradeActions.Add(UpgradeAction.UpgradeSubdevices_1_to_2);
              ofUpgradeActions.Add(UpgradeAction.UpgradeMeterValues_1_to_2);
              ofUpgradeActions.Add(UpgradeAction.UpgradeMeterValues);
              ofUpgradeActions.Add(UpgradeAction.UseWorkDatabase);
              ofUpgradeActions.Add(UpgradeAction.MergeData);
              ofUpgradeActions.Add(UpgradeAction.DeleteTempDatabase);
            }
            else
            {
              ofUpgradeActions.Add(UpgradeAction.CreateCopyOfSetupDB);
              ofUpgradeActions.Add(UpgradeAction.UpgradeGMM_User);
              ofUpgradeActions.Add(UpgradeAction.UpgradeMeterType);
              ofUpgradeActions.Add(UpgradeAction.UpgradeMeterInfo);
              ofUpgradeActions.Add(UpgradeAction.UpgradeMTypeZelsius);
              ofUpgradeActions.Add(UpgradeAction.UpgradeMeter);
              ofUpgradeActions.Add(UpgradeAction.UpgradeNodeList_1_to_2);
              ofUpgradeActions.Add(UpgradeAction.UpgradeNodeReferences_1_to_2);
              ofUpgradeActions.Add(UpgradeAction.UpgradeSubdevices_1_to_2);
              ofUpgradeActions.Add(UpgradeAction.UpgradeMeterValues_1_to_2);
              ofUpgradeActions.Add(UpgradeAction.UpgradeMeterValues);
              if (!(this.oldDatabase is MSSQLDB))
                ofUpgradeActions.Add(UpgradeAction.BackupOldDatabase);
            }
          }
        }
      }
      return ofUpgradeActions;
    }

    private void RaiseEventMessage(UpgradeAction act, MeterDatabase.Progress e)
    {
      this.RaiseEventMessage(act, string.Format("{0} % (success: {1}, error: {2}, count: {3})", (object) e.ProgressValue, (object) e.Successful, (object) e.Failed, (object) e.Count));
    }

    private void RaiseEventMessage(UpgradeAction act, string message)
    {
      if (this.OnActionStateChanged == null)
        return;
      this.OnActionStateChanged((object) this, new UpgradeActionEventArgs()
      {
        Action = act,
        State = message
      });
    }

    public void StartUpgrade()
    {
      List<UpgradeAction> ofUpgradeActions = this.GetListOfUpgradeActions();
      if (ofUpgradeActions == null)
        return;
      foreach (UpgradeAction upgradeAction in ofUpgradeActions)
      {
        bool flag;
        switch ((UpgradeAction) Enum.ToObject(typeof (UpgradeAction), (object) upgradeAction))
        {
          case UpgradeAction.VerifyDatabase:
            flag = this.VerifyDatabase();
            break;
          case UpgradeAction.CreateCopyOfSetupDB:
            flag = this.CreateCopyOfSetupDB();
            break;
          case UpgradeAction.UpgradeFilter:
            flag = this.UpgradeTableFilter();
            break;
          case UpgradeAction.UpgradeFilterValue:
            flag = this.UpgradeTableFilterValue();
            break;
          case UpgradeAction.UpgradeGMM_User:
            flag = this.UpgradeTableGMM_User();
            break;
          case UpgradeAction.UpgradeMeterType:
            flag = this.UpgradeTableMeterType();
            break;
          case UpgradeAction.UpgradeMeterInfo:
            flag = this.UpgradeTableMeterInfo();
            break;
          case UpgradeAction.UpgradeMTypeZelsius:
            flag = this.UpgradeTableMTypeZelsius();
            break;
          case UpgradeAction.UpgradeMeter:
            flag = this.UpgradeTableMeter();
            break;
          case UpgradeAction.UpgradeNodeList:
            flag = this.UpgradeTableNodeList();
            break;
          case UpgradeAction.UpgradeNodeList_1_to_2:
            flag = this.UpgradeTableNodeList_1_to_2();
            break;
          case UpgradeAction.UpgradeSubdevices_1_to_2:
            flag = this.UpgradeSubdevices_1_to_2();
            break;
          case UpgradeAction.UpgradeNodeLayers:
            flag = this.UpgradeTableNodeLayers();
            break;
          case UpgradeAction.UpgradeNodeReferences:
            flag = this.UpgradeTableNodeReferences();
            break;
          case UpgradeAction.UpgradeNodeReferences_1_to_2:
            flag = this.UpgradeTableNodeReferences_1_to_2();
            break;
          case UpgradeAction.UpgradeMeterValues:
            flag = this.UpgradeTableMeterValues();
            break;
          case UpgradeAction.UpgradeMeterValues_1_to_2:
            flag = this.UpgradeTableMeterValues_1_to_2();
            break;
          case UpgradeAction.BackupOldDatabase:
            flag = this.BackupOldDatabase();
            break;
          case UpgradeAction.UseSetupDatabase:
            flag = this.UseSetupDatabase();
            break;
          case UpgradeAction.UseWorkDatabase:
            flag = this.UseWorkDatabase();
            break;
          case UpgradeAction.MergeData:
            flag = this.MergeData();
            break;
          case UpgradeAction.DeleteTempDatabase:
            flag = this.DeleteTempDatabase();
            break;
          case UpgradeAction.UpgradeUserPermissions:
            flag = this.UpgradeTableUserPermissions();
            break;
          case UpgradeAction.UpgradeSoftwareUsers:
            flag = this.UpgradeTableSoftwareUsers();
            break;
          default:
            throw new ArgumentException("Action doesn't implemented! Value: " + upgradeAction.ToString());
        }
        if (flag)
          ;
      }
    }

    private bool VerifyDatabase()
    {
      this.RaiseEventMessage(UpgradeAction.VerifyDatabase, "Please wait...");
      int? oldDatabaseVersion = this.OldDatabaseVersion;
      int? newDatabaseVersion = this.NewDatabaseVersion;
      if (!oldDatabaseVersion.HasValue)
      {
        this.RaiseEventMessage(UpgradeAction.VerifyDatabase, "Old database con not be null!");
        return false;
      }
      if (!newDatabaseVersion.HasValue)
      {
        this.RaiseEventMessage(UpgradeAction.VerifyDatabase, "New database con not be null!");
        return false;
      }
      if (oldDatabaseVersion.Value > newDatabaseVersion.Value)
      {
        this.RaiseEventMessage(UpgradeAction.VerifyDatabase, string.Format("Can not upgrade database from version {0} to {1}!", (object) oldDatabaseVersion, (object) newDatabaseVersion));
        return false;
      }
      this.RaiseEventMessage(UpgradeAction.VerifyDatabase, "OK");
      return true;
    }

    private bool CreateCopyOfSetupDB()
    {
      this.RaiseEventMessage(UpgradeAction.CreateCopyOfSetupDB, "Please wait...");
      File.Copy(this.PathToNewDatabaseFile, this.PathToNewDatabaseFile + ".copy", true);
      this.RaiseEventMessage(UpgradeAction.CreateCopyOfSetupDB, "OK");
      return true;
    }

    private bool UseSetupDatabase()
    {
      this.RaiseEventMessage(UpgradeAction.UseSetupDatabase, "Please wait...");
      string str = Path.Combine(SystemValues.DatabasePath, "MeterDB.set.copy");
      if (!File.Exists(str))
        return false;
      File.Copy(str, str.Replace(".copy", ""));
      string path = Path.Combine(SystemValues.DatabasePath, "MeterDB.set");
      if (!File.Exists(path))
        return false;
      DbBasis dbObject = DbBasis.getDbObject(MeterDbTypes.SQLite, string.Format("Data Source={0};UTF8Encoding=True;Password=meterdbpass;journal mode=wal;synchronous=off;", (object) path));
      this.originalDatabase = this.newDatabase;
      this.newDatabase = dbObject;
      this.RaiseEventMessage(UpgradeAction.UseSetupDatabase, "OK");
      return true;
    }

    private bool UseWorkDatabase()
    {
      this.RaiseEventMessage(UpgradeAction.UseWorkDatabase, "Please wait...");
      this.oldDatabase = this.newDatabase;
      this.newDatabase = this.originalDatabase;
      this.RaiseEventMessage(UpgradeAction.UseWorkDatabase, "OK");
      return true;
    }

    private bool DeleteTempDatabase()
    {
      this.RaiseEventMessage(UpgradeAction.DeleteTempDatabase, "Please wait...");
      File.Delete(this.PathToOldDatabaseFile);
      this.RaiseEventMessage(UpgradeAction.DeleteTempDatabase, "OK");
      return true;
    }

    private bool BackupOldDatabase()
    {
      this.RaiseEventMessage(UpgradeAction.BackupOldDatabase, "Please wait...");
      if (this.oldDatabase is AccessDB || this.oldDatabase is SQLiteDB)
      {
        if (DatabaseUpgradeManager.CreateBackupOfOldDatabase(this.PathToOldDatabaseFile))
        {
          this.RaiseEventMessage(UpgradeAction.BackupOldDatabase, "OK");
        }
        else
        {
          this.RaiseEventMessage(UpgradeAction.BackupOldDatabase, "Failed!");
          return false;
        }
      }
      return true;
    }

    public static bool CreateBackupOfOldDatabase(string pathToOldDatabaseFile)
    {
      if (string.IsNullOrEmpty(pathToOldDatabaseFile))
        throw new ArgumentNullException("Input patrameter 'pathToOldDatabaseFile' can not be null!");
      using (Package package = Package.Open(pathToOldDatabaseFile.Replace(Path.GetExtension(pathToOldDatabaseFile), "_BACKUP_") + string.Format("{0:yyyy-MM-dd_hh-mm-ss}.zip", (object) DateTime.Now), FileMode.OpenOrCreate))
      {
        Uri partUri = PackUriHelper.CreatePartUri(new Uri(".\\" + Path.GetFileName(pathToOldDatabaseFile), UriKind.Relative));
        if (package.PartExists(partUri))
          package.DeletePart(partUri);
        PackagePart part = package.CreatePart(partUri, "", CompressionOption.Maximum);
        using (FileStream inputStream = new FileStream(pathToOldDatabaseFile, FileMode.Open, FileAccess.Read))
        {
          using (Stream stream = part.GetStream())
            DatabaseUpgradeManager.CopyStream(inputStream, stream);
        }
      }
      File.Delete(pathToOldDatabaseFile);
      return true;
    }

    private static void CopyStream(FileStream inputStream, Stream outputStream)
    {
      long length = inputStream.Length < 4096L ? inputStream.Length : 4096L;
      byte[] buffer = new byte[length];
      long num = 0;
      int count;
      while ((count = inputStream.Read(buffer, 0, buffer.Length)) != 0)
      {
        outputStream.Write(buffer, 0, count);
        num += length;
      }
    }

    private bool UpgradeTableFilter()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeFilter, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        return this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "Filter", string.Empty);
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableFilterValue()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeFilterValue, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        return this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "FilterValue", string.Empty);
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableGMM_User()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeGMM_User, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        return this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "GMM_User", "UserName <> 'Administrator'");
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableUserPermissions()
    {
      if (!MeterDatabase.ExistTable(this.oldDatabase, "SoftwareUsers"))
        return true;
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeUserPermissions, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        return this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "UserPermissions", string.Empty);
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableSoftwareUsers()
    {
      if (!MeterDatabase.ExistTable(this.oldDatabase, "SoftwareUsers"))
        return true;
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeSoftwareUsers, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        return this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "SoftwareUsers", string.Empty);
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableMeterInfo()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeMeterInfo, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        if (!this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "MeterInfo", "MeterInfoID > 99999"))
          return false;
        int? nextUniqueId = MeterDatabase.GetNextUniqueID(this.oldDatabase, "MeterInfo", "MeterInfoID");
        if (nextUniqueId.HasValue && !MeterDatabase.UpdateNextUniqueID(this.newDatabase, "MeterInfo", "MeterInfoID", nextUniqueId.Value))
          DatabaseUpgradeManager.logger.Error<int?>("Can not update NextUniqueID! Table: MeterInfo, Field: MeterInfoID, Value: {0}", nextUniqueId);
        return true;
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableMeterType()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeMeterType, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        if (!this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "MeterType", "MeterTypeID > 99999"))
          return false;
        int? nextUniqueId = MeterDatabase.GetNextUniqueID(this.oldDatabase, "MeterType", "MeterTypeID");
        if (nextUniqueId.HasValue && !MeterDatabase.UpdateNextUniqueID(this.newDatabase, "MeterType", "MeterTypeID", nextUniqueId.Value))
          DatabaseUpgradeManager.logger.Error<int?>("Can not update NextUniqueID! Table: MeterType, Field: MeterTypeID, Value: {0}", nextUniqueId);
        return true;
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableMTypeZelsius()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeMTypeZelsius, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        return this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "MTypeZelsius", "MeterTypeID > 99999");
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableMeter()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeMeter, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        if (!this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "Meter", string.Empty))
          return false;
        int? nextUniqueId = MeterDatabase.GetNextUniqueID(this.oldDatabase, "Meter", "MeterID");
        if (nextUniqueId.HasValue && !MeterDatabase.UpdateNextUniqueID(this.newDatabase, "Meter", "MeterID", nextUniqueId.Value))
          DatabaseUpgradeManager.logger.Error<int?>("Can not update NextUniqueID! Table: Meter, Field: MeterID, Value: {0}", nextUniqueId);
        return true;
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableNodeList()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeNodeList, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        if (!this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "NodeList", string.Empty))
          return false;
        int? nextUniqueId = MeterDatabase.GetNextUniqueID(this.oldDatabase, "NodeList", "NodeID");
        if (nextUniqueId.HasValue && !MeterDatabase.UpdateNextUniqueID(this.newDatabase, "NodeList", "NodeID", nextUniqueId.Value))
          DatabaseUpgradeManager.logger.Error<int?>("Can not update NextUniqueID! Table: NodeList, Field: NodeID, Value: {0}", nextUniqueId);
        return true;
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableNodeLayers()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeNodeLayers, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        return this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "NodeLayers", string.Empty);
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableNodeReferences()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeNodeReferences, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        return this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "NodeReferences", string.Empty);
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableMeterValues()
    {
      this.RaiseEventMessage(UpgradeAction.UpgradeMeterValues, "Please wait...");
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeMeterValues, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        return this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "MeterValues", string.Empty);
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableNodeList_1_to_2()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeNodeList_1_to_2, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        if (!this.manager.TransferTableNodeList_1_to_2(this.oldDatabase, this.newDatabase))
          return false;
        int? nextUniqueId = MeterDatabase.GetNextUniqueID(this.oldDatabase, "NodeList", "NodeID");
        if (nextUniqueId.HasValue && !MeterDatabase.UpdateNextUniqueID(this.newDatabase, "NodeList", "NodeID", nextUniqueId.Value))
          DatabaseUpgradeManager.logger.Error<int?>("Can not update NextUniqueID! Table: NodeList, Field: NodeID, Value: {0}", nextUniqueId);
        return true;
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeSubdevices_1_to_2()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeSubdevices_1_to_2, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        List<StructureTreeNode> structureTreeNodeList = MeterDatabase.LoadMeterInstallerTreesByLayerID(this.newDatabase, 0);
        if (structureTreeNodeList == null || structureTreeNodeList.Count == 0)
          return true;
        foreach (StructureTreeNode root in structureTreeNodeList)
        {
          foreach (StructureTreeNode tree in StructureTreeNode.ForEach(root))
          {
            bool flag = tree.NodeTyp == StructureNodeType.Meter && tree.Parent != null && tree.Parent.NodeTyp == StructureNodeType.Meter;
            string nodeSettings = tree.NodeSettings;
            ParameterService.DeleteParameter(ref nodeSettings, "ExternalIOs");
            ParameterService.DeleteParameter(ref nodeSettings, "VALUE_REQ_ID");
            tree.NodeSettings = nodeSettings;
            if (flag)
            {
              string parameter1 = ParameterService.GetParameter(tree.NodeSettings, "MED");
              string parameter2 = ParameterService.GetParameter(tree.NodeSettings, "SID");
              string parameter3 = ParameterService.GetParameter(tree.NodeSettings, "MeterTypeTranslation");
              int result = 1;
              if (string.IsNullOrEmpty(parameter3) || !int.TryParse(parameter3, out result))
              {
                string parameter4 = ParameterService.GetParameter(tree.Parent.NodeSettings, "SID[1]");
                string parameter5 = ParameterService.GetParameter(tree.Parent.NodeSettings, "SID[2]");
                if (!string.IsNullOrEmpty(parameter4) && parameter4 == parameter2)
                  result = 1;
                else if (!string.IsNullOrEmpty(parameter5) && parameter5 == parameter2)
                  result = 2;
                else
                  continue;
              }
              tree.NodeSettings = tree.Parent.NodeSettings;
              tree.SubDeviceIndex = result;
              if (!string.IsNullOrEmpty(parameter1) && Enum.IsDefined(typeof (MBusDeviceType), (object) parameter1))
                tree.Medium = (MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), parameter1);
              tree.SerialNumber = parameter2;
            }
            int num1;
            if (tree.MeterID.HasValue)
            {
              int? meterId = tree.MeterID;
              int num2 = 0;
              num1 = meterId.GetValueOrDefault() == num2 & meterId.HasValue ? 1 : 0;
            }
            else
              num1 = 1;
            if (num1 != 0)
              tree.ReadEnabled = false;
            MeterDatabase.SaveTreeNode(this.newDatabase, tree);
          }
        }
        return true;
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableNodeReferences_1_to_2()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeNodeReferences_1_to_2, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        return this.manager.TransferDataToEmptyDatabase(this.oldDatabase, this.newDatabase, "NodeReferences", "LayerID > -1");
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private bool UpgradeTableMeterValues_1_to_2()
    {
      this.RaiseEventMessage(UpgradeAction.UpgradeMeterValues_1_to_2, "Please wait...");
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.UpgradeMeterValues_1_to_2, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        return this.manager.TransferTableMeterValues_1_to_2(this.oldDatabase, this.newDatabase);
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }

    private static string GetPathToDatabase(DbBasis db)
    {
      if (db == null)
        return string.Empty;
      string connectionString = db.ConnectionString;
      if (string.IsNullOrEmpty(connectionString))
        return string.Empty;
      switch (db)
      {
        case AccessDB _:
          return new OleDbConnectionStringBuilder(connectionString).DataSource;
        case SQLiteDB _:
          return new SQLiteConnectionStringBuilder(connectionString).DataSource;
        default:
          return string.Empty;
      }
    }

    private bool MergeData()
    {
      EventHandler<MeterDatabase.Progress> eventHandler = (EventHandler<MeterDatabase.Progress>) ((sender, e) => this.RaiseEventMessage(UpgradeAction.MergeData, e));
      this.manager.OnProgress += eventHandler;
      try
      {
        return true;
      }
      finally
      {
        this.manager.OnProgress -= eventHandler;
      }
    }
  }
}


--- DatabaseUpgradeWindow.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DatabaseUpgradeWindow
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class DatabaseUpgradeWindow : Form
  {
    private DatabaseUpgradeManager manager;
    private IContainer components = (IContainer) null;
    private Button btnStart;
    private Button btnCancel;
    private Panel panel1;
    private Label label2;
    private Label label1;
    private ListViewDoubledBuffered listView;
    private ColumnHeader colAction;
    private ColumnHeader colStatus;
    private Label label3;
    private Label label4;
    private Label lblOldDatabaseVersion;
    private Label lblNewDatabaseVersion;

    public DatabaseUpgradeWindow(Form owner, DatabaseUpgradeManager manager)
    {
      this.Owner = owner;
      this.InitializeComponent();
      this.manager = manager;
      this.manager.OnActionStateChanged += new EventHandler<UpgradeActionEventArgs>(this.Manager_OnActionStateChanged);
    }

    private void DatabaseUpgradeWindow_Load(object sender, EventArgs e)
    {
      this.lblOldDatabaseVersion.Text = string.Format("{0} ({1})", (object) this.manager.OldDatabaseVersion, (object) this.manager.OldDatabaseVersionDate);
      this.lblNewDatabaseVersion.Text = string.Format("{0} ({1})", (object) this.manager.NewDatabaseVersion, (object) this.manager.NewDatabaseVersionDate);
      List<UpgradeAction> ofUpgradeActions = this.manager.GetListOfUpgradeActions();
      if (ofUpgradeActions != null)
      {
        this.listView.Items.Clear();
        foreach (UpgradeAction upgradeAction in ofUpgradeActions)
          this.listView.Items.Add(new ListViewItem(upgradeAction.ToString())
          {
            SubItems = {
              ""
            }
          });
      }
      this.TopMost = true;
      this.TopMost = false;
    }

    private void btnStart_Click(object sender, EventArgs e)
    {
      try
      {
        this.btnStart.Enabled = false;
        this.btnCancel.Enabled = false;
        this.manager.StartUpgrade();
        this.DialogResult = DialogResult.OK;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
        this.DialogResult = DialogResult.Abort;
      }
      finally
      {
        this.btnStart.Enabled = true;
        this.btnCancel.Enabled = true;
      }
    }

    private void Manager_OnActionStateChanged(object sender, UpgradeActionEventArgs e)
    {
      ListViewItem itemWithText = this.listView.FindItemWithText(e.Action.ToString(), false, 0, false);
      if (itemWithText == null)
        return;
      itemWithText.SubItems[1].Text = e.State;
      Application.DoEvents();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (DatabaseUpgradeWindow));
      this.btnStart = new Button();
      this.btnCancel = new Button();
      this.panel1 = new Panel();
      this.label2 = new Label();
      this.label1 = new Label();
      this.listView = new ListViewDoubledBuffered();
      this.colAction = new ColumnHeader();
      this.colStatus = new ColumnHeader();
      this.label3 = new Label();
      this.label4 = new Label();
      this.lblOldDatabaseVersion = new Label();
      this.lblNewDatabaseVersion = new Label();
      this.panel1.SuspendLayout();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.btnStart, "btnStart");
      this.btnStart.Name = "btnStart";
      this.btnStart.UseVisualStyleBackColor = true;
      this.btnStart.Click += new System.EventHandler(this.btnStart_Click);
      componentResourceManager.ApplyResources((object) this.btnCancel, "btnCancel");
      this.btnCancel.DialogResult = DialogResult.Cancel;
      this.btnCancel.Name = "btnCancel";
      this.btnCancel.UseVisualStyleBackColor = true;
      componentResourceManager.ApplyResources((object) this.panel1, "panel1");
      this.panel1.BackColor = Color.White;
      this.panel1.Controls.Add((Control) this.label2);
      this.panel1.Controls.Add((Control) this.label1);
      this.panel1.Name = "panel1";
      componentResourceManager.ApplyResources((object) this.label2, "label2");
      this.label2.Name = "label2";
      componentResourceManager.ApplyResources((object) this.label1, "label1");
      this.label1.Name = "label1";
      componentResourceManager.ApplyResources((object) this.listView, "listView");
      this.listView.Columns.AddRange(new ColumnHeader[2]
      {
        this.colAction,
        this.colStatus
      });
      this.listView.GridLines = true;
      this.listView.Name = "listView";
      this.listView.UseCompatibleStateImageBehavior = false;
      this.listView.View = View.Details;
      componentResourceManager.ApplyResources((object) this.colAction, "colAction");
      componentResourceManager.ApplyResources((object) this.colStatus, "colStatus");
      componentResourceManager.ApplyResources((object) this.label3, "label3");
      this.label3.Name = "label3";
      componentResourceManager.ApplyResources((object) this.label4, "label4");
      this.label4.Name = "label4";
      componentResourceManager.ApplyResources((object) this.lblOldDatabaseVersion, "lblOldDatabaseVersion");
      this.lblOldDatabaseVersion.ForeColor = Color.Blue;
      this.lblOldDatabaseVersion.Name = "lblOldDatabaseVersion";
      componentResourceManager.ApplyResources((object) this.lblNewDatabaseVersion, "lblNewDatabaseVersion");
      this.lblNewDatabaseVersion.ForeColor = Color.Blue;
      this.lblNewDatabaseVersion.Name = "lblNewDatabaseVersion";
      componentResourceManager.ApplyResources((object) this, "$this");
      this.AutoScaleMode = AutoScaleMode.Font;
      this.Controls.Add((Control) this.lblNewDatabaseVersion);
      this.Controls.Add((Control) this.lblOldDatabaseVersion);
      this.Controls.Add((Control) this.label4);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.listView);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.btnCancel);
      this.Controls.Add((Control) this.btnStart);
      this.Name = nameof (DatabaseUpgradeWindow);
      this.Load += new System.EventHandler(this.DatabaseUpgradeWindow_Load);
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- DataGridViewColumnSelector.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DataGridViewColumnSelector
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class DataGridViewColumnSelector : Form
  {
    private DataGridView dataGrid;
    private MenuItem menu;
    private DataGridViewColumnSelector.DataGridViewSettings settings;
    private Dictionary<string, bool> oldSettings;
    public const string ROOT_DIRECTORY = "DataGridViews";
    private IContainer components = (IContainer) null;
    private CheckedListBox listBoxColumns;
    private Button btnOk;
    private TableLayoutPanel tableLayoutPanel1;

    public DataGridViewColumnSelector() => this.InitializeComponent();

    public DataGridViewColumnSelector(DataGridView dataGrid, MenuItem menu)
      : this()
    {
      this.settings = new DataGridViewColumnSelector.DataGridViewSettings();
      this.dataGrid = dataGrid;
      this.dataGrid.DataSourceChanged += new System.EventHandler(this.DataGrid_DataSourceChanged);
      this.menu = menu;
      this.menu.Click += new System.EventHandler(this.Menu_Click);
      this.oldSettings = new Dictionary<string, bool>();
    }

    public string[] ColumnsShowAlways { get; set; }

    private void Menu_Click(object sender, EventArgs e)
    {
      if (this.dataGrid == null || this.dataGrid.Columns.Count == 0)
        return;
      this.Location = this.PointToClient(Cursor.Position);
      this.listBoxColumns.Items.Clear();
      this.oldSettings.Clear();
      foreach (DataGridViewColumn column in (BaseCollection) this.dataGrid.Columns)
      {
        if (!this.IsAllowedHideThisColumn(column.Name))
          this.listBoxColumns.Items.Add((object) column.Name, CheckState.Indeterminate);
        else
          this.listBoxColumns.Items.Add((object) column.Name, column.Visible);
        this.oldSettings.Add(column.Name, column.Visible);
      }
      this.DialogResult = DialogResult.None;
      int num = (int) this.ShowDialog();
    }

    private void btnOk_Click(object sender, EventArgs e)
    {
      this.DialogResult = DialogResult.OK;
      this.Close();
    }

    private void listBoxColumns_ItemCheck(object sender, ItemCheckEventArgs e)
    {
      if (!this.IsAllowedHideThisColumn(this.listBoxColumns.Items[e.Index].ToString()))
        e.NewValue = CheckState.Indeterminate;
      else
        this.dataGrid.Columns[e.Index].Visible = e.NewValue == CheckState.Checked;
    }

    private void DataGrid_DataSourceChanged(object sender, EventArgs e)
    {
      if (this.dataGrid.Columns.Count == 0)
        return;
      this.LoadSettings();
      if (this.settings == null || this.settings.HidedColumns == null)
        return;
      foreach (string hidedColumn in this.settings.HidedColumns)
      {
        if (this.dataGrid.Columns.Contains(hidedColumn))
          this.dataGrid.Columns[hidedColumn].Visible = false;
      }
    }

    private void DataGridViewColumnSelector_FormClosing(object sender, FormClosingEventArgs e)
    {
      if (this.DialogResult != DialogResult.OK)
      {
        foreach (KeyValuePair<string, bool> oldSetting in this.oldSettings)
        {
          if (this.dataGrid.Columns.Contains(oldSetting.Key))
            this.dataGrid.Columns[oldSetting.Key].Visible = oldSetting.Value;
        }
      }
      else
      {
        List<string> stringList = new List<string>();
        foreach (DataGridViewColumn column in (BaseCollection) this.dataGrid.Columns)
        {
          if (!column.Visible)
            stringList.Add(column.Name);
        }
        this.settings.HidedColumns = stringList.ToArray();
        this.SaveSettings();
      }
    }

    private void SaveSettings()
    {
      if (this.settings == null || this.settings.HidedColumns == null || this.settings.HidedColumns.Length == 0)
        return;
      try
      {
        string str = Path.Combine(SystemValues.SettingsPath, "DataGridViews");
        if (!Directory.Exists(str))
          Directory.CreateDirectory(str);
        using (Stream serializationStream = (Stream) File.Open(Path.Combine(str, this.GetSettingsFileName()), FileMode.Create))
          new BinaryFormatter().Serialize(serializationStream, (object) this.settings);
      }
      catch
      {
      }
    }

    private void LoadSettings()
    {
      try
      {
        string str = Path.Combine(SystemValues.SettingsPath, "DataGridViews");
        if (!Directory.Exists(str))
          return;
        string path = Path.Combine(str, this.GetSettingsFileName());
        if (!File.Exists(path))
          return;
        using (Stream serializationStream = (Stream) File.Open(path, FileMode.Open))
          this.settings = (DataGridViewColumnSelector.DataGridViewSettings) new BinaryFormatter().Deserialize(serializationStream);
      }
      catch
      {
      }
    }

    private string GetSettingsFileName()
    {
      StringBuilder stringBuilder = new StringBuilder(this.dataGrid.Name);
      for (Control parent = this.dataGrid.Parent; parent != null; parent = parent.Parent)
        stringBuilder.Append(parent.Name);
      foreach (DataGridViewColumn column in (BaseCollection) this.dataGrid.Columns)
        stringBuilder.Append(column.Name);
      return DataGridViewColumnSelector.GetSHA1Hash(stringBuilder.ToString());
    }

    public static string GetSHA1Hash(string text)
    {
      SHA1CryptoServiceProvider cryptoServiceProvider = new SHA1CryptoServiceProvider();
      string shA1Hash = (string) null;
      byte[] bytes = Encoding.ASCII.GetBytes(text);
      foreach (byte num in cryptoServiceProvider.ComputeHash(bytes))
      {
        string str = Convert.ToString(num, 16);
        if (str.Length == 1)
          str = "0" + str;
        shA1Hash += str;
      }
      return shA1Hash;
    }

    private bool IsAllowedHideThisColumn(string columnName)
    {
      if (this.ColumnsShowAlways != null && this.ColumnsShowAlways.Length != 0)
      {
        foreach (string columnsShowAlway in this.ColumnsShowAlways)
        {
          if (columnName == columnsShowAlway)
            return false;
        }
      }
      return true;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (DataGridViewColumnSelector));
      this.listBoxColumns = new CheckedListBox();
      this.btnOk = new Button();
      this.tableLayoutPanel1 = new TableLayoutPanel();
      this.tableLayoutPanel1.SuspendLayout();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.listBoxColumns, "listBoxColumns");
      this.listBoxColumns.BorderStyle = BorderStyle.FixedSingle;
      this.listBoxColumns.CheckOnClick = true;
      this.listBoxColumns.FormattingEnabled = true;
      this.listBoxColumns.Name = "listBoxColumns";
      this.listBoxColumns.ItemCheck += new ItemCheckEventHandler(this.listBoxColumns_ItemCheck);
      componentResourceManager.ApplyResources((object) this.btnOk, "btnOk");
      this.btnOk.Name = "btnOk";
      this.btnOk.UseVisualStyleBackColor = true;
      this.btnOk.Click += new System.EventHandler(this.btnOk_Click);
      componentResourceManager.ApplyResources((object) this.tableLayoutPanel1, "tableLayoutPanel1");
      this.tableLayoutPanel1.Controls.Add((Control) this.btnOk, 1, 0);
      this.tableLayoutPanel1.GrowStyle = TableLayoutPanelGrowStyle.FixedSize;
      this.tableLayoutPanel1.Name = "tableLayoutPanel1";
      this.AcceptButton = (IButtonControl) this.btnOk;
      componentResourceManager.ApplyResources((object) this, "$this");
      this.AutoScaleMode = AutoScaleMode.Font;
      this.Controls.Add((Control) this.tableLayoutPanel1);
      this.Controls.Add((Control) this.listBoxColumns);
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (DataGridViewColumnSelector);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.FormClosing += new FormClosingEventHandler(this.DataGridViewColumnSelector_FormClosing);
      this.tableLayoutPanel1.ResumeLayout(false);
      this.ResumeLayout(false);
    }

    [Serializable]
    private sealed class DataGridViewSettings
    {
      public string[] HidedColumns { get; set; }
    }
  }
}


--- DataGridViewDoubleBuffered.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DataGridViewDoubleBuffered
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class DataGridViewDoubleBuffered : DataGridView
  {
    public DataGridViewDoubleBuffered() => this.DoubleBuffered = true;
  }
}


--- Datenbankverbindung.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Datenbankverbindung
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using System;
using System.Data.Common;
using System.IO;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class Datenbankverbindung
  {
    public static MeterDBAccess MainDBAccess;
    public static MeterDBAccess SecDBAccess;
    internal const string PasswordReplace = "***PASSWORD***";
    public const string MainDatabaseNamespaceName = "MainDataBase";
    public const string SecDatabaseNamespaceName = "SecDataBase";
    private GMMConfig opConfig;
    internal MeterDbTypes DataBaseTypePrivate;
    internal string DataBaseTypeNamePrivate;
    internal bool IsDeveloper;
    internal string sDataBaseKey;
    public bool ConnectionOk = false;
    public MeterDbTypes DataBaseType;
    public string DataBaseTypeName;
    public string connectString;
    public DbConnectionInfo ConnectionInfo;
    private string ErrorMsg;
    internal string dbFileName;
    internal string dbPassword;
    internal string dbUser;
    internal string dbDataSource;
    internal string dbServer;
    internal string dbPort;
    internal string dbProviderString;

    public static void Dispose()
    {
      Datenbankverbindung.MainDBAccess = (MeterDBAccess) null;
      Datenbankverbindung.SecDBAccess = (MeterDBAccess) null;
    }

    public string SelectedConnection { get; set; }

    public Datenbankverbindung(string titel)
    {
      this.initall();
      this.setDatabaseTypeFromName();
    }

    public Datenbankverbindung(string dataBase, GMMConfig MyConfig)
    {
      this.opConfig = MyConfig;
      this.sDataBaseKey = dataBase;
      this.initall();
    }

    public void ChangeToDeveloperMode() => this.IsDeveloper = true;

    internal void initall()
    {
      try
      {
        this.ConnectionInfo = new DbConnectionInfo();
        string strInhalt;
        if (this.sDataBaseKey == "MainDataBase")
        {
          strInhalt = this.opConfig.GetValue("Startup", "DbConfigPrimary");
          if (string.IsNullOrEmpty(strInhalt))
          {
            string path = Path.Combine(Path.GetDirectoryName(Application.ExecutablePath), "Database", "MeterDB_New.mdb");
            if (File.Exists(path))
            {
              strInhalt = "DbType=Access;DbInstance=Primary;UrlOrPath=" + path + ";DatabaseName=MeterDB_New";
              this.opConfig.SetOrUpdateValue("Startup", "DbConfigPrimary", strInhalt);
            }
          }
        }
        else
        {
          strInhalt = this.opConfig.GetValue("Startup", "DbConfigSecundary");
          this.ConnectionInfo.DbInstance = DbInstances.Secundary;
        }
        bool flag = "DbType=Access;DbInstance=Primary;UrlOrPath=" == strInhalt;
        if (!string.IsNullOrEmpty(strInhalt) && !flag)
        {
          this.ConnectionInfo.SetupString = strInhalt;
        }
        else
        {
          OldDbConfigInfo oldDbConfigInfo = new OldDbConfigInfo(this.sDataBaseKey, this.opConfig);
          this.DataBaseTypeNamePrivate = oldDbConfigInfo.DataBaseTypeName;
          this.setDatabaseTypeFromName();
          this.dbFileName = oldDbConfigInfo.dbFileName;
          this.dbPassword = oldDbConfigInfo.dbPassword;
          this.dbUser = oldDbConfigInfo.dbUser;
          this.dbDataSource = oldDbConfigInfo.dbDataSource;
          this.dbServer = oldDbConfigInfo.dbServer;
          this.dbPort = oldDbConfigInfo.dbPort;
          this.dbProviderString = oldDbConfigInfo.dbProviderString;
          this.ConnectionInfo.DbType = oldDbConfigInfo.dbType;
          this.ConnectionInfo.ConnectionString = this.connectString;
          if (!string.IsNullOrEmpty(this.dbPassword))
            this.ConnectionInfo.Password = this.dbPassword;
          this.AddConnectionInfoFromConnectionString(this.ConnectionInfo, oldDbConfigInfo.dbProviderString);
          this.saveDBInfo();
        }
      }
      catch
      {
        int num = (int) MessageBox.Show("No info for the database connection found\r\nPlease go to Settings/Primary database and Settings/Secondary database!");
        return;
      }
      this.DataBaseType = this.DataBaseTypePrivate;
      this.DataBaseTypeName = this.DataBaseTypeNamePrivate;
    }

    private void AddConnectionInfoFromConnectionString(
      DbConnectionInfo connectionInfo,
      string connectionString)
    {
      if (string.IsNullOrEmpty(connectionString))
        return;
      try
      {
        DbConnectionStringBuilder connectionStringBuilder = new DbConnectionStringBuilder();
        connectionStringBuilder.ConnectionString = connectionString;
        switch (connectionInfo.DbType)
        {
          case MeterDbTypes.Access:
            object obj1;
            if (connectionStringBuilder.TryGetValue("Data Source", out obj1))
            {
              connectionInfo.UrlOrPath = (string) obj1;
              goto case MeterDbTypes.NPGSQL;
            }
            else
              goto case MeterDbTypes.NPGSQL;
          case MeterDbTypes.NPGSQL:
          case MeterDbTypes.DBISAM:
            if (!string.IsNullOrEmpty(this.ConnectionInfo.DatabaseName))
              break;
            try
            {
              this.ConnectionInfo.DatabaseName = Path.GetFileNameWithoutExtension(this.ConnectionInfo.UrlOrPath);
            }
            catch
            {
            }
            break;
          case MeterDbTypes.SQLite:
            object obj2;
            if (connectionStringBuilder.TryGetValue("Data Source", out obj2))
            {
              connectionInfo.UrlOrPath = (string) obj2;
              goto case MeterDbTypes.NPGSQL;
            }
            else
              goto case MeterDbTypes.NPGSQL;
          case MeterDbTypes.MSSQL:
            object obj3;
            if (connectionStringBuilder.TryGetValue("Data Source", out obj3))
              connectionInfo.UrlOrPath = (string) obj3;
            if (connectionStringBuilder.TryGetValue("Database", out obj3))
              connectionInfo.DatabaseName = (string) obj3;
            if (connectionStringBuilder.TryGetValue("User Id", out obj3))
            {
              connectionInfo.UserName = (string) obj3;
              goto case MeterDbTypes.NPGSQL;
            }
            else
              goto case MeterDbTypes.NPGSQL;
          case MeterDbTypes.LocalDB:
            object obj4;
            if (connectionStringBuilder.TryGetValue("AttachDbFilename", out obj4))
            {
              connectionInfo.UrlOrPath = (string) obj4;
              goto case MeterDbTypes.NPGSQL;
            }
            else
              goto case MeterDbTypes.NPGSQL;
          case MeterDbTypes.Microsoft_SQL_Compact:
            object obj5;
            if (connectionStringBuilder.TryGetValue("Data Source", out obj5))
            {
              connectionInfo.UrlOrPath = (string) obj5;
              goto case MeterDbTypes.NPGSQL;
            }
            else
              goto case MeterDbTypes.NPGSQL;
          default:
            throw new Exception("Database type not available");
        }
      }
      catch (Exception ex)
      {
        throw new Exception("Load database connection error.", ex);
      }
    }

    private void addErrorText(string inErrorMsg)
    {
      this.ErrorMsg = this.ErrorMsg + inErrorMsg + "\r\n";
    }

    public string getErrorText()
    {
      string errorMsg = this.ErrorMsg;
      this.ErrorMsg = "";
      return errorMsg;
    }

    public static MeterDbTypes DatabaseTypeFromName(string DataBaseTypeName)
    {
      switch (DataBaseTypeName)
      {
        case "ACCESS":
          return MeterDbTypes.Access;
        case "NPGSQL":
          return MeterDbTypes.NPGSQL;
        case "SQLITE":
          return MeterDbTypes.SQLite;
        case "DBISAM":
          return MeterDbTypes.DBISAM;
        case "MSSQL":
          return MeterDbTypes.MSSQL;
        default:
          return MeterDbTypes.Undefined;
      }
    }

    internal void setDatabaseTypeFromName()
    {
      this.DataBaseTypePrivate = Datenbankverbindung.DatabaseTypeFromName(this.DataBaseTypeNamePrivate);
    }

    public static string scrable(string inpassword)
    {
      string str = "";
      for (int index = 0; index < inpassword.Length; ++index)
      {
        char ch = (char) ((uint) inpassword[index] + 12U);
        str += ch.ToString();
      }
      return str;
    }

    internal void saveDBInfo()
    {
      if (this.ConnectionInfo.DbInstance == DbInstances.Primary)
        this.opConfig.SetOrUpdateValue("Startup", "DbConfigPrimary", this.ConnectionInfo.SetupString);
      else
        this.opConfig.SetOrUpdateValue("Startup", "DbConfigSecundary", this.ConnectionInfo.SetupString);
      this.opConfig.WriteConfigFile();
    }
  }
}


--- DatenbankverbindungForm.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DatenbankverbindungForm
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using CorporateDesign;
using GmmDbLib;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class DatenbankverbindungForm : Form
  {
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;
    private Button OkBtn;
    private Button cancelBtn;
    private GroupBox groupBox1;
    private TextBox ProviderStrTextBox;
    private Label label2;
    private Label label3;
    private Button DateiSuchBtn;
    private Label label1;
    private RadioButton AccessDB_RadioButton;
    private TextBox UserTextBox;
    private TextBox FileNameTextBox;
    private Label FileNameLabel;
    private TextBox PasswordTextBox;
    private Label DataSourceLabel;
    private TextBox DataSourceTextBox;
    private Button buttonTestConnection;
    private OpenFileDialog openFileDialog1;
    private TextBox ServerTextBox;
    private TextBox PortTextBox;
    private Label ServerLabel;
    private Label PortLabel;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private Label label5;
    private ZennerCoroprateDesign zennerCoroprateDesign2;
    private RadioButton radioButtonDBISAM;
    private RadioButton radioButtonSQLite;
    private RadioButton radioButtonMSSQL;
    private RadioButton NPGSqlRadioButton;
    private bool initialising = false;
    private string ErrorMsg;
    private Datenbankverbindung myDatenbankverbindung;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (DatenbankverbindungForm));
      this.OkBtn = new Button();
      this.cancelBtn = new Button();
      this.AccessDB_RadioButton = new RadioButton();
      this.groupBox1 = new GroupBox();
      this.radioButtonMSSQL = new RadioButton();
      this.radioButtonDBISAM = new RadioButton();
      this.radioButtonSQLite = new RadioButton();
      this.NPGSqlRadioButton = new RadioButton();
      this.ProviderStrTextBox = new TextBox();
      this.UserTextBox = new TextBox();
      this.FileNameTextBox = new TextBox();
      this.label2 = new Label();
      this.label3 = new Label();
      this.FileNameLabel = new Label();
      this.DateiSuchBtn = new Button();
      this.label1 = new Label();
      this.PasswordTextBox = new TextBox();
      this.DataSourceLabel = new Label();
      this.DataSourceTextBox = new TextBox();
      this.buttonTestConnection = new Button();
      this.openFileDialog1 = new OpenFileDialog();
      this.ServerLabel = new Label();
      this.ServerTextBox = new TextBox();
      this.PortLabel = new Label();
      this.PortTextBox = new TextBox();
      this.label5 = new Label();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.zennerCoroprateDesign2 = new ZennerCoroprateDesign();
      this.groupBox1.SuspendLayout();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.OkBtn, "OkBtn");
      this.OkBtn.BackColor = SystemColors.Control;
      this.OkBtn.DialogResult = DialogResult.OK;
      this.OkBtn.Name = "OkBtn";
      this.OkBtn.UseVisualStyleBackColor = false;
      this.OkBtn.Click += new System.EventHandler(this.OkBtn_Click);
      componentResourceManager.ApplyResources((object) this.cancelBtn, "cancelBtn");
      this.cancelBtn.BackColor = SystemColors.Control;
      this.cancelBtn.DialogResult = DialogResult.Cancel;
      this.cancelBtn.Name = "cancelBtn";
      this.cancelBtn.UseVisualStyleBackColor = false;
      this.cancelBtn.Click += new System.EventHandler(this.cancelBtn_Click);
      this.AccessDB_RadioButton.Checked = true;
      componentResourceManager.ApplyResources((object) this.AccessDB_RadioButton, "AccessDB_RadioButton");
      this.AccessDB_RadioButton.Name = "AccessDB_RadioButton";
      this.AccessDB_RadioButton.TabStop = true;
      this.AccessDB_RadioButton.CheckedChanged += new System.EventHandler(this.AccessDB_RadioButton_CheckedChanged);
      this.groupBox1.BackColor = Color.Transparent;
      this.groupBox1.Controls.Add((Control) this.radioButtonMSSQL);
      this.groupBox1.Controls.Add((Control) this.radioButtonDBISAM);
      this.groupBox1.Controls.Add((Control) this.radioButtonSQLite);
      this.groupBox1.Controls.Add((Control) this.NPGSqlRadioButton);
      this.groupBox1.Controls.Add((Control) this.AccessDB_RadioButton);
      this.groupBox1.ForeColor = SystemColors.ControlText;
      componentResourceManager.ApplyResources((object) this.groupBox1, "groupBox1");
      this.groupBox1.Name = "groupBox1";
      this.groupBox1.TabStop = false;
      componentResourceManager.ApplyResources((object) this.radioButtonMSSQL, "radioButtonMSSQL");
      this.radioButtonMSSQL.Name = "radioButtonMSSQL";
      this.radioButtonMSSQL.CheckedChanged += new System.EventHandler(this.radioButtonMSSQL_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.radioButtonDBISAM, "radioButtonDBISAM");
      this.radioButtonDBISAM.Name = "radioButtonDBISAM";
      this.radioButtonDBISAM.CheckedChanged += new System.EventHandler(this.radioButtonDBISAM_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.radioButtonSQLite, "radioButtonSQLite");
      this.radioButtonSQLite.Name = "radioButtonSQLite";
      this.radioButtonSQLite.CheckedChanged += new System.EventHandler(this.radioButtonSQLite_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.NPGSqlRadioButton, "NPGSqlRadioButton");
      this.NPGSqlRadioButton.Name = "NPGSqlRadioButton";
      this.NPGSqlRadioButton.CheckedChanged += new System.EventHandler(this.NPGSqlRadioButton_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.ProviderStrTextBox, "ProviderStrTextBox");
      this.ProviderStrTextBox.BackColor = SystemColors.Window;
      this.ProviderStrTextBox.Name = "ProviderStrTextBox";
      componentResourceManager.ApplyResources((object) this.UserTextBox, "UserTextBox");
      this.UserTextBox.BackColor = SystemColors.Window;
      this.UserTextBox.Name = "UserTextBox";
      componentResourceManager.ApplyResources((object) this.FileNameTextBox, "FileNameTextBox");
      this.FileNameTextBox.BackColor = SystemColors.Window;
      this.FileNameTextBox.Name = "FileNameTextBox";
      this.label2.BackColor = Color.Transparent;
      this.label2.ForeColor = SystemColors.ControlText;
      componentResourceManager.ApplyResources((object) this.label2, "label2");
      this.label2.Name = "label2";
      componentResourceManager.ApplyResources((object) this.label3, "label3");
      this.label3.BackColor = Color.Transparent;
      this.label3.ForeColor = SystemColors.ControlText;
      this.label3.Name = "label3";
      componentResourceManager.ApplyResources((object) this.FileNameLabel, "FileNameLabel");
      this.FileNameLabel.BackColor = Color.Transparent;
      this.FileNameLabel.ForeColor = SystemColors.ControlText;
      this.FileNameLabel.Name = "FileNameLabel";
      componentResourceManager.ApplyResources((object) this.DateiSuchBtn, "DateiSuchBtn");
      this.DateiSuchBtn.BackColor = SystemColors.Control;
      this.DateiSuchBtn.Name = "DateiSuchBtn";
      this.DateiSuchBtn.UseVisualStyleBackColor = false;
      this.DateiSuchBtn.Click += new System.EventHandler(this.DateiSuchBtn_Click);
      componentResourceManager.ApplyResources((object) this.label1, "label1");
      this.label1.BackColor = Color.Transparent;
      this.label1.ForeColor = SystemColors.ControlText;
      this.label1.Name = "label1";
      componentResourceManager.ApplyResources((object) this.PasswordTextBox, "PasswordTextBox");
      this.PasswordTextBox.BackColor = SystemColors.Window;
      this.PasswordTextBox.Name = "PasswordTextBox";
      componentResourceManager.ApplyResources((object) this.DataSourceLabel, "DataSourceLabel");
      this.DataSourceLabel.BackColor = Color.Transparent;
      this.DataSourceLabel.ForeColor = SystemColors.ControlText;
      this.DataSourceLabel.Name = "DataSourceLabel";
      componentResourceManager.ApplyResources((object) this.DataSourceTextBox, "DataSourceTextBox");
      this.DataSourceTextBox.BackColor = SystemColors.Window;
      this.DataSourceTextBox.Name = "DataSourceTextBox";
      componentResourceManager.ApplyResources((object) this.buttonTestConnection, "buttonTestConnection");
      this.buttonTestConnection.BackColor = SystemColors.Control;
      this.buttonTestConnection.Name = "buttonTestConnection";
      this.buttonTestConnection.UseVisualStyleBackColor = false;
      this.buttonTestConnection.Click += new System.EventHandler(this.buttonTestConnection_Click);
      componentResourceManager.ApplyResources((object) this.ServerLabel, "ServerLabel");
      this.ServerLabel.Name = "ServerLabel";
      componentResourceManager.ApplyResources((object) this.ServerTextBox, "ServerTextBox");
      this.ServerTextBox.BackColor = SystemColors.Window;
      this.ServerTextBox.Name = "ServerTextBox";
      componentResourceManager.ApplyResources((object) this.PortLabel, "PortLabel");
      this.PortLabel.Name = "PortLabel";
      componentResourceManager.ApplyResources((object) this.PortTextBox, "PortTextBox");
      this.PortTextBox.Name = "PortTextBox";
      componentResourceManager.ApplyResources((object) this.label5, "label5");
      this.label5.BackColor = Color.Transparent;
      this.label5.ForeColor = SystemColors.ControlText;
      this.label5.Name = "label5";
      componentResourceManager.ApplyResources((object) this.zennerCoroprateDesign1, "zennerCoroprateDesign1");
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      componentResourceManager.ApplyResources((object) this.zennerCoroprateDesign2, "zennerCoroprateDesign2");
      this.zennerCoroprateDesign2.Name = "zennerCoroprateDesign2";
      componentResourceManager.ApplyResources((object) this, "$this");
      this.Controls.Add((Control) this.PortTextBox);
      this.Controls.Add((Control) this.DataSourceTextBox);
      this.Controls.Add((Control) this.PasswordTextBox);
      this.Controls.Add((Control) this.FileNameTextBox);
      this.Controls.Add((Control) this.UserTextBox);
      this.Controls.Add((Control) this.ProviderStrTextBox);
      this.Controls.Add((Control) this.ServerTextBox);
      this.Controls.Add((Control) this.PortLabel);
      this.Controls.Add((Control) this.ServerLabel);
      this.Controls.Add((Control) this.buttonTestConnection);
      this.Controls.Add((Control) this.DataSourceLabel);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.DateiSuchBtn);
      this.Controls.Add((Control) this.FileNameLabel);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.groupBox1);
      this.Controls.Add((Control) this.cancelBtn);
      this.Controls.Add((Control) this.OkBtn);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Controls.Add((Control) this.label5);
      this.Controls.Add((Control) this.zennerCoroprateDesign2);
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (DatenbankverbindungForm);
      this.ShowInTaskbar = false;
      this.Load += new System.EventHandler(this.Datenbankverbindung_Load);
      this.groupBox1.ResumeLayout(false);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    public DatenbankverbindungForm(Datenbankverbindung myDatenbankverbindung)
    {
      this.InitializeComponent();
      this.myDatenbankverbindung = myDatenbankverbindung;
      this.Text = "Database settings : " + this.myDatenbankverbindung.sDataBaseKey;
    }

    private void Datenbankverbindung_Load(object sender, EventArgs e) => this.initall();

    private void initall()
    {
      try
      {
        this.windowDataFromObject();
      }
      catch
      {
        int num = (int) MessageBox.Show("No info for the database connection found\r\nPlease go to Settings/Primary database and Settings/Secondary database!");
      }
    }

    private void addErrorText(string inErrorMsg)
    {
      this.ErrorMsg = this.ErrorMsg + inErrorMsg + "\r\n";
    }

    public string getErrorText()
    {
      string errorMsg = this.ErrorMsg;
      this.ErrorMsg = "";
      return errorMsg;
    }

    private void OkBtn_Click(object sender, EventArgs e)
    {
      this.windowDataToObject();
      this.myDatenbankverbindung.saveDBInfo();
      this.DialogResult = DialogResult.Yes;
      if (!this.IsHandleCreated)
        return;
      this.Close();
    }

    private void cancelBtn_Click(object sender, EventArgs e) => this.Close();

    private void showDBControls(MeterDbTypes inDataBaseType)
    {
      this.ServerLabel.Visible = false;
      this.ServerLabel.Text = "ServerPrivate";
      this.PortLabel.Visible = false;
      this.PortTextBox.Visible = false;
      this.ServerTextBox.Visible = false;
      this.FileNameLabel.Visible = false;
      this.FileNameTextBox.Visible = false;
      this.DateiSuchBtn.Visible = false;
      this.DataSourceLabel.Visible = false;
      this.DataSourceTextBox.Visible = false;
      this.UserTextBox.Visible = false;
      this.label3.Visible = false;
      this.label1.Visible = false;
      this.PasswordTextBox.Visible = false;
      switch (inDataBaseType)
      {
        case MeterDbTypes.Access:
          this.FileNameLabel.Visible = true;
          this.FileNameTextBox.Visible = true;
          this.DateiSuchBtn.Visible = true;
          this.FileNameLabel.Text = "AccessDB";
          this.PasswordTextBox.Visible = true;
          this.label1.Visible = true;
          break;
        case MeterDbTypes.NPGSQL:
          this.ServerLabel.Visible = true;
          this.PortLabel.Visible = true;
          this.ServerTextBox.Visible = true;
          this.PortTextBox.Visible = true;
          this.DataSourceLabel.Visible = true;
          this.DataSourceTextBox.Visible = true;
          this.UserTextBox.Visible = true;
          this.label3.Visible = true;
          this.label1.Visible = true;
          this.PasswordTextBox.Visible = true;
          break;
        case MeterDbTypes.SQLite:
          this.FileNameLabel.Visible = true;
          this.FileNameTextBox.Visible = true;
          this.DateiSuchBtn.Visible = true;
          this.FileNameLabel.Text = "SQLiteDB";
          this.PasswordTextBox.Visible = true;
          this.label1.Visible = true;
          break;
        case MeterDbTypes.DBISAM:
          this.ServerLabel.Visible = true;
          this.PortLabel.Visible = true;
          this.ServerTextBox.Visible = true;
          this.PortTextBox.Visible = true;
          this.DataSourceLabel.Visible = true;
          this.DataSourceTextBox.Visible = true;
          this.UserTextBox.Visible = true;
          this.label3.Visible = true;
          this.label1.Visible = true;
          this.PasswordTextBox.Visible = true;
          break;
        case MeterDbTypes.MSSQL:
          this.ServerLabel.Visible = true;
          this.PortLabel.Visible = false;
          this.ServerTextBox.Visible = true;
          this.PortTextBox.Visible = false;
          this.DataSourceLabel.Visible = true;
          this.DataSourceTextBox.Visible = true;
          this.UserTextBox.Visible = true;
          this.label3.Visible = true;
          this.label1.Visible = true;
          this.PasswordTextBox.Visible = true;
          break;
      }
    }

    private void buttonTestConnection_Click(object sender, EventArgs e)
    {
      try
      {
        this.windowDataToObject();
        DbBasis db;
        Datenbankverbindung.MainDBAccess = new MeterDBAccess(this.myDatenbankverbindung.ConnectionInfo, out db);
        db.BaseDbConnection.ConnectDatabase();
        int num = (int) GMM_MessageBox.ShowMessage("Db connection", "Connection is ok");
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("Db connection", "Connection error" + ex.ToString(), true);
      }
    }

    private void DateiSuchBtn_Click(object sender, EventArgs e)
    {
      if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
        return;
      this.FileNameTextBox.Text = this.openFileDialog1.FileName;
    }

    private void AccessDB_RadioButton_CheckedChanged(object sender, EventArgs e)
    {
      if (this.initialising || !this.AccessDB_RadioButton.Checked)
        return;
      this.dbTypeFromButtons();
      this.RadioButtonChanged();
    }

    private void NPGSqlRadioButton_CheckedChanged(object sender, EventArgs e)
    {
      if (this.initialising || !this.NPGSqlRadioButton.Checked)
        return;
      this.dbTypeFromButtons();
      this.ServerLabel.Text = "NPGSQL-Source";
      this.PortTextBox.Text = "5432";
      this.ServerTextBox.Text = "172.16.3.250";
      this.DataSourceTextBox.Text = "meterdb";
      this.RadioButtonChanged();
    }

    private void radioButtonSQLite_CheckedChanged(object sender, EventArgs e)
    {
      if (this.initialising || !this.radioButtonSQLite.Checked)
        return;
      this.dbTypeFromButtons();
      this.RadioButtonChanged();
    }

    private void radioButtonDBISAM_CheckedChanged(object sender, EventArgs e)
    {
      if (this.initialising || !this.radioButtonDBISAM.Checked)
        return;
      this.dbTypeFromButtons();
      this.ServerLabel.Text = "DBISAM-Source";
      this.PortTextBox.Text = "10005";
      this.ServerTextBox.Text = "10.40.22.6";
      this.DataSourceTextBox.Text = "Hydraulik";
      this.RadioButtonChanged();
    }

    private void radioButtonMSSQL_CheckedChanged(object sender, EventArgs e)
    {
      if (this.initialising || !this.radioButtonMSSQL.Checked)
        return;
      this.dbTypeFromButtons();
      this.ServerLabel.Text = "MSSQL-Source";
      this.PortTextBox.Text = "";
      this.ServerTextBox.Text = "srv-sql-03.minol.org";
      this.DataSourceTextBox.Text = "MeterDB";
      this.RadioButtonChanged();
    }

    private void windowDataToObject()
    {
      this.dbTypeFromButtons();
      this.myDatenbankverbindung.ConnectionInfo.ConnectionString = string.Empty;
      if (this.radioButtonSQLite.Checked || this.AccessDB_RadioButton.Checked)
      {
        this.myDatenbankverbindung.ConnectionInfo.UrlOrPath = this.FileNameTextBox.Text;
      }
      else
      {
        this.myDatenbankverbindung.ConnectionInfo.UserName = this.UserTextBox.Text;
        this.myDatenbankverbindung.ConnectionInfo.DatabaseName = this.DataSourceTextBox.Text;
        this.myDatenbankverbindung.ConnectionInfo.UrlOrPath = this.ServerTextBox.Text;
        this.myDatenbankverbindung.ConnectionInfo.Password = this.PasswordTextBox.Text;
      }
    }

    private void windowDataFromObject()
    {
      this.initialising = true;
      if (this.myDatenbankverbindung.ConnectionInfo.DbType == MeterDbTypes.Access)
        this.AccessDB_RadioButton.Checked = true;
      else if (this.myDatenbankverbindung.ConnectionInfo.DbType == MeterDbTypes.NPGSQL)
        this.NPGSqlRadioButton.Checked = true;
      else if (this.myDatenbankverbindung.ConnectionInfo.DbType == MeterDbTypes.SQLite)
        this.radioButtonSQLite.Checked = true;
      else if (this.myDatenbankverbindung.ConnectionInfo.DbType == MeterDbTypes.DBISAM)
        this.radioButtonDBISAM.Checked = true;
      else if (this.myDatenbankverbindung.ConnectionInfo.DbType == MeterDbTypes.MSSQL)
        this.radioButtonMSSQL.Checked = true;
      if (this.radioButtonSQLite.Checked || this.AccessDB_RadioButton.Checked)
      {
        this.FileNameTextBox.Text = this.myDatenbankverbindung.ConnectionInfo.UrlOrPath;
      }
      else
      {
        this.UserTextBox.Text = this.myDatenbankverbindung.ConnectionInfo.UserName;
        this.DataSourceTextBox.Text = this.myDatenbankverbindung.ConnectionInfo.DatabaseName;
        this.ServerTextBox.Text = this.myDatenbankverbindung.ConnectionInfo.UrlOrPath;
        this.PasswordTextBox.Text = this.myDatenbankverbindung.ConnectionInfo.Password;
      }
      this.showDBControls(this.myDatenbankverbindung.ConnectionInfo.DbType);
      this.initialising = false;
    }

    private void dbTypeFromButtons()
    {
      if (this.AccessDB_RadioButton.Checked)
        this.myDatenbankverbindung.ConnectionInfo.DbType = MeterDbTypes.Access;
      else if (this.NPGSqlRadioButton.Checked)
        this.myDatenbankverbindung.ConnectionInfo.DbType = MeterDbTypes.NPGSQL;
      else if (this.radioButtonSQLite.Checked)
        this.myDatenbankverbindung.ConnectionInfo.DbType = MeterDbTypes.SQLite;
      else if (this.radioButtonDBISAM.Checked)
      {
        this.myDatenbankverbindung.ConnectionInfo.DbType = MeterDbTypes.DBISAM;
      }
      else
      {
        if (!this.radioButtonMSSQL.Checked)
          return;
        this.myDatenbankverbindung.ConnectionInfo.DbType = MeterDbTypes.MSSQL;
      }
    }

    private void RadioButtonChanged()
    {
      this.UserTextBox.Text = "";
      this.windowDataToObject();
      this.windowDataFromObject();
      this.Refresh();
    }
  }
}


--- DbCloner.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DbCloner
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Odbc;
using System.Drawing;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using ZR_ClassLibrary.Schema_Access;

#nullable disable
namespace ZR_ClassLibrary
{
  public class DbCloner : Form
  {
    private bool CancelTimepointStart;
    private int StundeFuerStartUnterbrechung = 21;
    private int StundeFuerWeiterNachUnterbrechung = 1;
    private string SpecialTableIndex = string.Empty;
    private bool IsSpecialTable = false;
    private string TheStartLine = string.Empty;
    private static SortedList<string, SortedList<string, string>> TableGroups;
    private DbBasis SourceDB;
    private DbBasis TargetDB;
    private string OdbcConnectionString = "DSN=PostgreSQL35W";
    private List<DbCloner.SpecialTableClass> TheSpecialTables;
    private IContainer components = (IContainer) null;
    private Button cmdStartClone;
    private Label lblTables;
    private Label lblDatarows;
    private Label lblDuration;
    private Label lblMinutes;
    private TextBox txtLog;
    private CheckBox chkStructure;
    private CheckBox chkContent;
    private ListBox lstBoxTables;
    private ListBox listBoxSpecialGroup;
    private Button buttonWriteXSD;
    private TextBox textBoxWhereConditions;
    private Label label1;
    private CheckBox checkBoxVacuum;
    private GroupBox groupBox2;
    private ComboBox comboBoxSingleTableUpdate;
    private GroupBox groupBox3;
    private Label label2;
    private GroupBox groupBox5;
    private GroupBox groupBox4;
    private CheckBox checkBoxUpdateSingleTable;
    private ProgressBar progressBarCloner;
    private Label labelDatabaseName;
    private Label labelDatabaseLocation;
    private Label label3;
    private Label label4;
    private Button buttonStartSingleTableUpdate;
    private GroupBox groupBox1;
    private TextBox TableLog;
    private CheckBox checkBoxUseOdbcConnection;
    private DateTimePicker StartTimePicker;
    private Label labelTimepoint;
    private CheckBox checkBoxEnableStartTime;
    private Button buttonCancelTimePointStart;
    private Button buttonSetAll;
    private Button buttonClearAll;

    public DbCloner() => this.InitializeComponent();

    public bool Init()
    {
      CheckBox useOdbcConnection = this.checkBoxUseOdbcConnection;
      useOdbcConnection.Text = useOdbcConnection.Text + " (" + this.OdbcConnectionString + ")";
      this.TheSpecialTables = new List<DbCloner.SpecialTableClass>();
      this.TheSpecialTables.Add(new DbCloner.SpecialTableClass("Meter", 3000, "MeterID"));
      this.TheSpecialTables.Add(new DbCloner.SpecialTableClass("PartList", 3000, "MeterID"));
      this.TheSpecialTables.Add(new DbCloner.SpecialTableClass("MeterData", 1000, "MeterID"));
      this.TheSpecialTables.Add(new DbCloner.SpecialTableClass("Test", 3000, "TestID"));
      this.TheSpecialTables.Add(new DbCloner.SpecialTableClass("TestEquipment", 3000, "TestID"));
      this.TheSpecialTables.Add(new DbCloner.SpecialTableClass("TestResult", 3000, "TestResultID"));
      this.TheSpecialTables.Add(new DbCloner.SpecialTableClass("TestResultExtended", 3000, "TestResultID"));
      this.TheSpecialTables.Add(new DbCloner.SpecialTableClass("TestbenchActualValues", 3000, "TestID"));
      this.textBoxWhereConditions.Text = string.Empty;
      DbCloner.TableGroups = new SortedList<string, SortedList<string, string>>();
      DbCloner.TableGroups.Add("BaseInfos", new SortedList<string, string>()
      {
        {
          "MeterInfo",
          "MeterInfoID < 50000"
        },
        {
          "MeterType",
          "MeterTypeID < 50000"
        },
        {
          "MTypeZelsius",
          "MeterTypeID < 50000"
        }
      });
      DbCloner.TableGroups.Add("Handler", new SortedList<string, string>()
      {
        {
          "ZRFunction",
          ""
        },
        {
          "ZRFunctionCompiled",
          ""
        },
        {
          "Menu",
          ""
        },
        {
          "DisplayCode",
          ""
        },
        {
          "RuntimeCode",
          ""
        },
        {
          "MBusCode",
          ""
        },
        {
          "Code",
          ""
        },
        {
          "ZRParameter",
          ""
        },
        {
          "Datalogger",
          ""
        },
        {
          "MinolDeviceData",
          ""
        },
        {
          "S3_FunctionParameter",
          ""
        },
        {
          "S3_Parameter",
          ""
        },
        {
          "OnlineTranslation",
          ""
        },
        {
          "EnumTranslation",
          ""
        }
      });
      DbCloner.TableGroups.Add("Hardware", new SortedList<string, string>()
      {
        {
          "BlockNames",
          ""
        },
        {
          "HardwareType",
          ""
        },
        {
          "MeterHardware",
          ""
        },
        {
          "LinkerTable",
          ""
        },
        {
          "MapBase",
          ""
        },
        {
          "MapDef",
          ""
        },
        {
          "IncludeDef",
          ""
        },
        {
          "ProgFiles",
          ""
        }
      });
      DbCloner.TableGroups.Add("SmokeDetector", new SortedList<string, string>()
      {
        {
          "MeterInfo",
          "MeterInfoID < 50000"
        },
        {
          "HardwareType",
          ""
        }
      });
      DbCloner.TableGroups.Add("ReadoutConfiguration", new SortedList<string, string>()
      {
        {
          "ConnectionItems",
          ""
        },
        {
          "ConnectionItemParameters",
          ""
        },
        {
          "ConnectionProfiles",
          ""
        },
        {
          "ConnectionProfileParameters",
          ""
        },
        {
          "ConnectionProfileFilters",
          ""
        },
        {
          "ConnectionSettings",
          ""
        },
        {
          "ChangeableParameters",
          ""
        },
        {
          "GmmImages",
          ""
        }
      });
      DataSet dataSet = (DataSet) new Schema();
      SortedList<string, string> sortedList = new SortedList<string, string>();
      foreach (DataTable table in (InternalDataCollectionBase) dataSet.Tables)
        sortedList.Add(table.TableName, (string) null);
      this.lstBoxTables.Items.Clear();
      foreach (object key in (IEnumerable<string>) sortedList.Keys)
        this.lstBoxTables.Items.Add(key);
      this.listBoxSpecialGroup.Items.Clear();
      for (int index = 0; index < DbCloner.TableGroups.Count; ++index)
        this.listBoxSpecialGroup.Items.Add((object) DbCloner.TableGroups.Keys[index]);
      try
      {
        if (Datenbankverbindung.MainDBAccess.GetDatabaseInfo("") == Datenbankverbindung.SecDBAccess.GetDatabaseInfo(""))
        {
          int num = (int) MessageBox.Show("The source and target database are the same. Please check you connection settings.");
          this.Close();
        }
        this.SourceDB = DbBasis.PrimaryDB;
        this.TargetDB = DbBasis.SecondaryDB;
      }
      catch
      {
        int num = (int) MessageBox.Show("Faild to connect to you database. Please check you connection settings.");
        return false;
      }
      this.labelDatabaseName.Text = "Database Name: " + this.TargetDB.GetDbConnection().Database;
      Schema.DatabaseIdentificationDataTable identificationDataTable = new Schema.DatabaseIdentificationDataTable();
      try
      {
        this.TargetDB.ZRDataAdapter("SELECT * FROM DatabaseIdentification", this.TargetDB.GetDbConnection()).Fill((DataTable) identificationDataTable);
      }
      catch
      {
      }
      if (identificationDataTable.Rows.Count == 0)
      {
        int num = (int) MessageBox.Show("There is no information about the target database available.");
        return false;
      }
      this.labelDatabaseLocation.Text = identificationDataTable.FindByInfoName("DatabaseLocationName").InfoData;
      this.labelDatabaseName.Text = identificationDataTable.FindByInfoName("DatabaseName").InfoData;
      return true;
    }

    private void cmdStartClone_Click(object sender, EventArgs e)
    {
      DateTime now1 = DateTime.Now;
      this.CancelTimepointStart = false;
      DateTime dateTime = this.StartTimePicker.Value;
      bool flag1 = this.checkBoxEnableStartTime.CheckState == CheckState.Checked;
      long num1 = 0;
      this.txtLog.Text = string.Empty;
      this.TableLog.Text = string.Empty;
      this.buttonWriteXSD.Enabled = false;
      this.cmdStartClone.Enabled = false;
      DateTime now2 = DateTime.Now;
      this.TheStartLine = "[" + now2.ToLongTimeString() + "] Process started.";
      this.AppendLogText(this.TheStartLine);
      this.AppendTableLogText(this.TheStartLine);
      bool flag2 = this.checkBoxUseOdbcConnection.CheckState == CheckState.Checked;
      if (flag1)
      {
        int num2 = 0;
        DateTime now3;
        do
        {
          now3 = DateTime.Now;
          ++num2;
          if (num2 == 10)
          {
            this.AppendLogText("Waiting for Starttime point! ActualTime = " + now3.ToLongTimeString());
            num2 = 0;
            this.Refresh();
          }
          Application.DoEvents();
          Thread.Sleep(100);
        }
        while (!(now3 >= dateTime) && !this.CancelTimepointStart);
      }
      if (!this.CancelTimepointStart)
      {
        this.Cursor = Cursors.WaitCursor;
        this.txtLog.ForeColor = Color.Black;
        Application.DoEvents();
        List<string> Tables = new List<string>();
        List<string> stringList1 = new List<string>();
        foreach (object selectedItem in this.lstBoxTables.SelectedItems)
        {
          Tables.Add(selectedItem.ToString());
          stringList1.Add(selectedItem.ToString());
        }
        List<string> stringList2 = new List<string>();
        for (int index = 0; index < this.textBoxWhereConditions.Lines.Length; ++index)
        {
          string[] strArray = this.textBoxWhereConditions.Lines[index].Split(';');
          Tables.Remove(strArray[0]);
          stringList2.Add(strArray[0]);
        }
        if (this.chkStructure.Checked)
        {
          if (Tables.Count > 0 && !this.TargetDB.CreateTableStructure(Tables))
          {
            this.txtLog.ForeColor = Color.Red;
            this.AppendLogText("[" + DateTime.Now.ToLongTimeString() + "] Cloning failed. Could not create Tables.");
            Application.DoEvents();
            goto label_120;
          }
          else
          {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("Tables droped and new created:");
            foreach (string str in Tables)
              stringBuilder.AppendLine(" -> " + str);
            this.AppendLogText(stringBuilder.ToString());
            Application.DoEvents();
          }
        }
        DataSet dataSet = (DataSet) new Schema();
        using (IDbConnection dbConnection1 = this.SourceDB.GetDbConnection())
        {
          using (IDbConnection dbConnection2 = this.TargetDB.GetDbConnection())
          {
            dbConnection1.Open();
            dbConnection2.Open();
            StringBuilder stringBuilder = new StringBuilder();
            foreach (DataTable table in (InternalDataCollectionBase) dataSet.Tables)
            {
              if (stringList1.Contains(table.TableName))
              {
                bool flag3 = true;
                ZRDataAdapter zrDataAdapter = this.SourceDB.ZRDataAdapter("Select * from " + table.TableName + " where (1 = 2)", dbConnection1);
                DataTable dataTable = new DataTable();
                try
                {
                  zrDataAdapter.Fill(dataTable);
                }
                catch
                {
                  stringBuilder.Append("Tabelle: " + table.TableName + ": Konnte nicht geöffnet werden!" + Environment.NewLine);
                  flag3 = false;
                }
                if (flag3 && dataTable.Columns.Count != table.Columns.Count)
                {
                  stringBuilder.Append("Tabelle: " + table.TableName + ": Spaltenzahl stimmt nicht!" + Environment.NewLine);
                  flag3 = false;
                }
                if (flag3)
                {
                  for (int index = 0; index < table.Columns.Count; ++index)
                  {
                    if (table.Columns[index].ColumnName.Trim().ToUpper() != dataTable.Columns[index].ColumnName.Trim().ToUpper())
                    {
                      stringBuilder.Append("Tabelle: " + table.TableName + ": Spalten Reihenfolge stimmt nicht! (" + table.Columns[index].ColumnName.Trim() + ")" + Environment.NewLine);
                      flag3 = false;
                      break;
                    }
                  }
                }
                if (!flag3)
                {
                  if (Tables.Contains(table.TableName))
                  {
                    Tables.Remove(table.TableName);
                    break;
                  }
                  if (stringList2.Contains(table.TableName))
                  {
                    stringList2.Remove(table.TableName);
                    break;
                  }
                  break;
                }
              }
            }
            this.AppendTableLogText(stringBuilder.ToString());
            try
            {
              foreach (DbCloner.SpecialTableClass theSpecialTable in this.TheSpecialTables)
              {
                string tableName = theSpecialTable.TableName;
                if (Tables.Contains(tableName) & flag2)
                {
                  DateTime now4 = DateTime.Now;
                  this.AppendTableLogText("[" + now4.ToLongTimeString() + "] Start table (ODBC): " + tableName);
                  string format = "Delete from " + tableName;
                  string cmdText = "Select * from " + tableName;
                  string SqlCommand = "Select * from " + tableName + " where (1 = 2)";
                  using (OdbcConnection connection = new OdbcConnection(this.OdbcConnectionString))
                  {
                    IDbCommand dbCommand = this.TargetDB.DbCommand(dbConnection2);
                    dbCommand.CommandTimeout = 600;
                    dbCommand.CommandText = string.Format(format);
                    dbCommand.ExecuteNonQuery();
                    OdbcCommand odbcCommand = new OdbcCommand(cmdText, connection);
                    connection.Open();
                    OdbcDataReader odbcDataReader = odbcCommand.ExecuteReader();
                    ZRDataAdapter zrDataAdapter = this.TargetDB.ZRDataAdapter(SqlCommand, dbConnection2);
                    DataTable dataTable = new DataTable();
                    zrDataAdapter.Fill(dataTable);
                    int num3 = 0;
                    while (odbcDataReader.Read())
                    {
                      DataRow row = dataTable.NewRow();
                      for (int index = 0; index < odbcDataReader.FieldCount; ++index)
                        row[index] = odbcDataReader.GetValue(index);
                      dataTable.Rows.Add(row);
                      ++num3;
                      if (num3 % theSpecialTable.StepValue == 0)
                      {
                        zrDataAdapter.Update(dataTable);
                        string[] strArray = new string[7];
                        strArray[0] = "[";
                        now4 = DateTime.Now;
                        strArray[1] = now4.ToLongTimeString();
                        strArray[2] = "]";
                        strArray[3] = tableName;
                        strArray[4] = " -> ";
                        strArray[5] = num3.ToString();
                        strArray[6] = " rows";
                        this.AppendLogText(string.Concat(strArray));
                        Application.DoEvents();
                        this.Refresh();
                        dataTable.Clear();
                        this.UnterbrechnugWennNoetig();
                      }
                    }
                    zrDataAdapter.Update(dataTable);
                    odbcDataReader.Close();
                    string[] strArray1 = new string[7];
                    strArray1[0] = "[";
                    now4 = DateTime.Now;
                    strArray1[1] = now4.ToLongTimeString();
                    strArray1[2] = "] ";
                    strArray1[3] = tableName;
                    strArray1[4] = " Finished ";
                    strArray1[5] = num3.ToString();
                    strArray1[6] = " rows";
                    this.AppendLogText(string.Concat(strArray1));
                    string[] strArray2 = new string[7];
                    strArray2[0] = "[";
                    now4 = DateTime.Now;
                    strArray2[1] = now4.ToLongTimeString();
                    strArray2[2] = "] ";
                    strArray2[3] = tableName;
                    strArray2[4] = " Finished ";
                    strArray2[5] = num3.ToString();
                    strArray2[6] = " rows";
                    this.AppendTableLogText(string.Concat(strArray2));
                    this.Refresh();
                  }
                }
              }
            }
            catch (Exception ex)
            {
              this.AppendTableLogText(ex.ToString());
              goto label_120;
            }
            IDbCommand dbCommand1 = this.SourceDB.DbCommand(dbConnection1);
            dbCommand1.CommandTimeout = 600;
            if (this.chkContent.Checked)
            {
              this.progressBarCloner.Visible = true;
              this.progressBarCloner.Value = 0;
              this.progressBarCloner.Minimum = 0;
              this.progressBarCloner.Maximum = stringList2.Count + Tables.Count;
              foreach (DataTable table in (InternalDataCollectionBase) dataSet.Tables)
              {
                if (Tables.IndexOf(table.TableName) != -1 || stringList2.IndexOf(table.TableName) != -1)
                {
                  this.IsSpecialTable = false;
                  foreach (DbCloner.SpecialTableClass theSpecialTable in this.TheSpecialTables)
                  {
                    if (theSpecialTable.TableName.ToUpper().Trim() == table.TableName.ToUpper().Trim())
                    {
                      this.IsSpecialTable = true;
                      break;
                    }
                  }
                  if (!this.IsSpecialTable)
                  {
                    ++this.progressBarCloner.Value;
                    string str;
                    if (stringList2.IndexOf(table.TableName) != -1)
                    {
                      string[] strArray = this.textBoxWhereConditions.Lines[stringList2.IndexOf(table.TableName)].Split(';');
                      str = string.Format("SELECT * FROM {0} WHERE {1}", (object) table.TableName, (object) strArray[1]);
                      try
                      {
                        IDbCommand dbCommand2 = this.TargetDB.DbCommand(dbConnection2);
                        dbCommand2.CommandTimeout = 600;
                        dbCommand2.CommandText = string.Format("DELETE FROM {0} WHERE {1}", (object) table.TableName, (object) strArray[1]);
                        this.AppendLogText("Delete rows from table " + table.TableName + " conditions: " + strArray[1]);
                        dbCommand2.ExecuteNonQuery();
                      }
                      catch (Exception ex)
                      {
                        this.AppendLogText(ex.Message.ToString());
                      }
                    }
                    else
                    {
                      str = string.Format("SELECT * FROM {0}", (object) table.TableName);
                      if (!this.chkStructure.Checked)
                      {
                        try
                        {
                          IDbCommand dbCommand3 = this.TargetDB.DbCommand(dbConnection2);
                          dbCommand3.CommandTimeout = 600;
                          dbCommand3.CommandText = string.Format("DELETE FROM {0}", (object) table.TableName);
                          this.AppendLogText("Delete all rows from table " + table.TableName);
                          dbCommand3.ExecuteNonQuery();
                        }
                        catch (Exception ex)
                        {
                          this.AppendLogText(ex.Message.ToString());
                        }
                      }
                    }
                    dbCommand1.CommandText = str;
                    try
                    {
                      DateTime now5 = DateTime.Now;
                      this.AppendTableLogText("[" + now5.ToLongTimeString() + "] Start Working on Table: " + table.TableName);
                      dbCommand1.CommandText = str;
                      IDataReader dataReader = dbCommand1.ExecuteReader();
                      if (dataReader.Read())
                      {
                        now5 = DateTime.Now;
                        this.AppendLogText("[" + now5.ToLongTimeString() + "] Working on Table: " + table.TableName);
                        Application.DoEvents();
                        ZRDataAdapter zrDataAdapter = this.TargetDB.ZRDataAdapter("Select * from " + table.TableName + " where (1 = 2)", dbConnection2);
                        DataTable dataTable = new DataTable();
                        zrDataAdapter.Fill(dataTable);
                        do
                        {
                          try
                          {
                            DataRow row = dataTable.NewRow();
                            for (int index = 0; index < dataReader.FieldCount; ++index)
                            {
                              dataReader.GetName(index);
                              dataReader.GetValue(index).GetType();
                              row[index] = dataReader.GetValue(index);
                              row[index].GetType();
                            }
                            dataTable.Rows.Add(row);
                            if (dataTable.Rows.Count % 1000 == 0)
                            {
                              zrDataAdapter.Update(dataTable);
                              this.AppendLogText("[" + DateTime.Now.ToLongTimeString() + "] " + dataTable.Rows.Count.ToString() + " rows on Table " + table.TableName + " copied.");
                              Application.DoEvents();
                            }
                          }
                          catch (Exception ex)
                          {
                            this.txtLog.ForeColor = Color.Red;
                            this.AppendLogText(ex.Message.ToString());
                            goto label_120;
                          }
                          ++num1;
                        }
                        while (dataReader.Read());
                        try
                        {
                          zrDataAdapter.Update(dataTable);
                          DateTime now6 = DateTime.Now;
                          this.AppendLogText("[" + now6.ToLongTimeString() + "] Table Finished " + num1.ToString() + " rows on Table " + table.TableName + ".");
                          this.AppendTableLogText("[" + now6.ToLongTimeString() + "] Table Finished " + num1.ToString() + " rows on Table " + table.TableName + ".");
                          Application.DoEvents();
                        }
                        catch (Exception ex)
                        {
                          this.txtLog.ForeColor = Color.Red;
                          this.AppendLogText(ex.Message.ToString());
                          break;
                        }
                      }
                      dataReader.Close();
                      this.UnterbrechnugWennNoetig();
                      if (!this.checkBoxVacuum.Checked)
                        ;
                    }
                    catch (Exception ex)
                    {
                      this.AppendLogText(ex.Message.ToString());
                      if (!ex.Message.Contains("-204"))
                      {
                        if (MessageBox.Show("Es trat folgender Fehler auf:" + Environment.NewLine + ex.Message, "Fehler beim Clonen", MessageBoxButtons.AbortRetryIgnore) == DialogResult.Abort)
                          break;
                      }
                    }
                    num1 = 0L;
                  }
                }
              }
            }
          }
        }
      }
label_120:
      this.progressBarCloner.Visible = false;
      this.progressBarCloner.Value = 0;
      DateTime now7 = DateTime.Now;
      this.AppendLogText("[" + now7.ToLongTimeString() + "] Process finished. ");
      TimeSpan timeSpan = now7 - now2;
      string[] strArray3 = new string[5]
      {
        "Cloning took ",
        null,
        null,
        null,
        null
      };
      int num4 = timeSpan.Hours;
      strArray3[1] = num4.ToString();
      strArray3[2] = " hours, ";
      num4 = timeSpan.Minutes;
      strArray3[3] = num4.ToString();
      strArray3[4] = " minutes";
      this.AppendLogText(string.Concat(strArray3));
      this.cmdStartClone.Enabled = true;
      this.buttonWriteXSD.Enabled = true;
      this.Cursor = Cursors.Default;
    }

    private void UnterbrechnugWennNoetig()
    {
      if (DateTime.Now.Hour < this.StundeFuerStartUnterbrechung)
        return;
      int num = 0;
      DateTime now;
      do
      {
        if (num == 0)
        {
          this.AppendLogText("[" + DateTime.Now.ToLongTimeString() + "] Unterbrechung ist aktiviert!");
          this.Refresh();
        }
        ++num;
        if (num > 100)
          num = 0;
        now = DateTime.Now;
        Application.DoEvents();
        Thread.Sleep(1000);
      }
      while (now.Hour != this.StundeFuerWeiterNachUnterbrechung);
    }

    private void AppendLogText(string TheLogText)
    {
      if (this.txtLog.TextLength + TheLogText.Length + this.TheStartLine.Length + 10 > this.txtLog.MaxLength)
        this.txtLog.Text = this.TheStartLine;
      if (this.txtLog.Text == string.Empty)
        this.txtLog.Text = TheLogText;
      else
        this.txtLog.AppendText(Environment.NewLine + TheLogText);
    }

    private void AppendTableLogText(string TheLogText)
    {
      if (this.TableLog.TextLength + TheLogText.Length > this.TableLog.MaxLength)
        this.TableLog.Text = string.Empty;
      if (this.TableLog.Text == string.Empty)
        this.TableLog.Text = TheLogText;
      else
        this.TableLog.AppendText(Environment.NewLine + TheLogText);
    }

    private void chkContent_CheckedChanged(object sender, EventArgs e)
    {
    }

    private void buttonWriteXSD_Click(object sender, EventArgs e)
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "xsd files (*.xsd)|*.xsd|All files (*.*)|*.*";
      saveFileDialog.FilterIndex = 1;
      saveFileDialog.RestoreDirectory = true;
      string fileName;
      if (saveFileDialog.ShowDialog() != DialogResult.OK || !((fileName = saveFileDialog.FileName) != ""))
        return;
      new Schema().WriteXmlSchema(fileName);
    }

    private void listBoxSpecialGroup_Click(object sender, EventArgs e)
    {
      for (int index = 0; index < this.lstBoxTables.Items.Count; ++index)
        this.lstBoxTables.SetSelected(index, false);
      SortedList<string, string> tableGroup = DbCloner.TableGroups[this.listBoxSpecialGroup.Text];
      this.textBoxWhereConditions.Text = "";
      for (int index1 = 0; index1 < tableGroup.Count; ++index1)
      {
        if (tableGroup.Values[index1].ToString() != "")
        {
          TextBox boxWhereConditions = this.textBoxWhereConditions;
          boxWhereConditions.Text = boxWhereConditions.Text + tableGroup.Keys[index1].ToString() + ";" + tableGroup.Values[index1].ToString() + Environment.NewLine;
        }
        for (int index2 = 0; index2 < this.lstBoxTables.Items.Count; ++index2)
        {
          if (tableGroup.Keys[index1].ToString() == (string) this.lstBoxTables.Items[index2])
            this.lstBoxTables.SetSelected(index2, true);
        }
      }
    }

    private void checkBoxUpdateSingleTable_CheckedChanged(object sender, EventArgs e)
    {
      if (this.checkBoxUpdateSingleTable.Checked)
      {
        this.chkContent.Checked = false;
        this.chkStructure.Checked = false;
        this.comboBoxSingleTableUpdate.Enabled = true;
        this.cmdStartClone.Enabled = false;
        if (this.comboBoxSingleTableUpdate.SelectedIndex != -1)
          this.buttonStartSingleTableUpdate.Enabled = true;
        else
          this.buttonStartSingleTableUpdate.Enabled = false;
      }
      else
      {
        this.chkStructure.Checked = true;
        this.comboBoxSingleTableUpdate.Enabled = false;
        this.cmdStartClone.Enabled = true;
        this.buttonStartSingleTableUpdate.Enabled = false;
      }
    }

    private void comboBoxSingleTableUpdate_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (this.comboBoxSingleTableUpdate.SelectedIndex != -1)
        this.buttonStartSingleTableUpdate.Enabled = true;
      else
        this.buttonStartSingleTableUpdate.Enabled = false;
    }

    private void buttonStartSingleTableUpdate_Click(object sender, EventArgs e)
    {
      if (this.comboBoxSingleTableUpdate.SelectedItem == null)
        return;
      this.StartSingleTableUpdate(this.comboBoxSingleTableUpdate.SelectedItem.ToString());
    }

    internal void StartSingleTableUpdate(string TableName)
    {
      MeterDBAccess mainDbAccess = Datenbankverbindung.MainDBAccess;
      if (TableName == "ZRGlobalID")
      {
        Schema.ZRGlobalIDDataTable outTab = new Schema.ZRGlobalIDDataTable();
        Schema.ZRGlobalIDDataTable MyDataTable = new Schema.ZRGlobalIDDataTable();
        mainDbAccess.FillTable("Select * from zrglobalid", (DataTable) outTab, out string _);
        ZRDataAdapter zrDataAdapter = this.TargetDB.ZRDataAdapter("Select * from zrglobalid", this.TargetDB.GetDbConnection());
        zrDataAdapter.Fill((DataTable) MyDataTable);
        try
        {
          foreach (Schema.ZRGlobalIDRow row in (TypedTableBase<Schema.ZRGlobalIDRow>) outTab)
          {
            if (!(row.DatabaseLocationName != this.labelDatabaseLocation.Text))
            {
              Schema.ZRGlobalIDRow locationNameZrTableName = MyDataTable.FindByDatabaseLocationNameZRTableName(this.labelDatabaseLocation.Text, row.ZRTableName);
              if (locationNameZrTableName == null)
              {
                row.SetAdded();
                MyDataTable.ImportRow((DataRow) row);
              }
              else
              {
                locationNameZrTableName.ZRFirstNr = row.ZRFirstNr;
                locationNameZrTableName.ZRLastNr = row.ZRLastNr;
              }
            }
          }
          int num = (int) MessageBox.Show(zrDataAdapter.Update((DataTable) MyDataTable).ToString() + " rows have been updated");
        }
        catch
        {
          int num = (int) MessageBox.Show("There was an error while updating that table.");
        }
      }
      else
      {
        int num1 = (int) MessageBox.Show("There is no rule for this table implemented.");
      }
    }

    private void buttonCancelTimePointStart_Click(object sender, EventArgs e)
    {
      this.CancelTimepointStart = true;
    }

    private void lstBoxTables_MouseDoubleClick(object sender, MouseEventArgs e)
    {
      for (int index = 0; index < this.lstBoxTables.Items.Count; ++index)
        this.lstBoxTables.SelectedIndex = index;
    }

    private void buttonClearAll_Click(object sender, EventArgs e)
    {
      this.lstBoxTables.SelectedItems.Clear();
      this.listBoxSpecialGroup.SelectedItems.Clear();
    }

    private void buttonSetAll_Click(object sender, EventArgs e)
    {
      this.lstBoxTables.SelectedItems.Clear();
      for (int index = 0; index < this.lstBoxTables.Items.Count; ++index)
        this.lstBoxTables.SelectedItems.Add(this.lstBoxTables.Items[index]);
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (DbCloner));
      this.cmdStartClone = new Button();
      this.lblTables = new Label();
      this.lblDatarows = new Label();
      this.lblDuration = new Label();
      this.lblMinutes = new Label();
      this.txtLog = new TextBox();
      this.chkStructure = new CheckBox();
      this.chkContent = new CheckBox();
      this.lstBoxTables = new ListBox();
      this.listBoxSpecialGroup = new ListBox();
      this.buttonWriteXSD = new Button();
      this.textBoxWhereConditions = new TextBox();
      this.label1 = new Label();
      this.checkBoxVacuum = new CheckBox();
      this.groupBox2 = new GroupBox();
      this.comboBoxSingleTableUpdate = new ComboBox();
      this.groupBox3 = new GroupBox();
      this.label3 = new Label();
      this.label4 = new Label();
      this.labelDatabaseName = new Label();
      this.labelDatabaseLocation = new Label();
      this.label2 = new Label();
      this.checkBoxUpdateSingleTable = new CheckBox();
      this.groupBox4 = new GroupBox();
      this.buttonCancelTimePointStart = new Button();
      this.StartTimePicker = new DateTimePicker();
      this.labelTimepoint = new Label();
      this.checkBoxEnableStartTime = new CheckBox();
      this.checkBoxUseOdbcConnection = new CheckBox();
      this.groupBox5 = new GroupBox();
      this.buttonSetAll = new Button();
      this.buttonClearAll = new Button();
      this.buttonStartSingleTableUpdate = new Button();
      this.progressBarCloner = new ProgressBar();
      this.groupBox1 = new GroupBox();
      this.TableLog = new TextBox();
      this.groupBox2.SuspendLayout();
      this.groupBox3.SuspendLayout();
      this.groupBox4.SuspendLayout();
      this.groupBox5.SuspendLayout();
      this.groupBox1.SuspendLayout();
      this.SuspendLayout();
      this.cmdStartClone.ForeColor = SystemColors.ControlText;
      this.cmdStartClone.Location = new Point(379, 420);
      this.cmdStartClone.Name = "cmdStartClone";
      this.cmdStartClone.Size = new Size(79, 22);
      this.cmdStartClone.TabIndex = 0;
      this.cmdStartClone.Text = "Start Cloning";
      this.cmdStartClone.UseVisualStyleBackColor = true;
      this.cmdStartClone.Click += new System.EventHandler(this.cmdStartClone_Click);
      this.lblTables.AutoSize = true;
      this.lblTables.Location = new Point(132, 384);
      this.lblTables.Name = "lblTables";
      this.lblTables.Size = new Size(0, 13);
      this.lblTables.TabIndex = 6;
      this.lblDatarows.AutoSize = true;
      this.lblDatarows.Location = new Point(409, 606);
      this.lblDatarows.Name = "lblDatarows";
      this.lblDatarows.Size = new Size(0, 13);
      this.lblDatarows.TabIndex = 9;
      this.lblDuration.AutoSize = true;
      this.lblDuration.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblDuration.Location = new Point(130, 810);
      this.lblDuration.Name = "lblDuration";
      this.lblDuration.Size = new Size(101, 20);
      this.lblDuration.TabIndex = 12;
      this.lblDuration.Text = "Cloning took.";
      this.lblDuration.Visible = false;
      this.lblMinutes.AutoSize = true;
      this.lblMinutes.Location = new Point(388, 619);
      this.lblMinutes.Name = "lblMinutes";
      this.lblMinutes.Size = new Size(55, 13);
      this.lblMinutes.TabIndex = 13;
      this.lblMinutes.Text = "0 minutes.";
      this.lblMinutes.Visible = false;
      this.txtLog.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtLog.ForeColor = SystemColors.ControlText;
      this.txtLog.Location = new Point(6, 19);
      this.txtLog.Multiline = true;
      this.txtLog.Name = "txtLog";
      this.txtLog.ScrollBars = ScrollBars.Vertical;
      this.txtLog.Size = new Size(546, 274);
      this.txtLog.TabIndex = 14;
      this.chkStructure.AutoSize = true;
      this.chkStructure.Location = new Point(7, 19);
      this.chkStructure.Name = "chkStructure";
      this.chkStructure.Size = new Size(345, 17);
      this.chkStructure.TabIndex = 15;
      this.chkStructure.Text = "Table Structure ( Create  new tables. Only tables without conditions)";
      this.chkStructure.UseVisualStyleBackColor = true;
      this.chkContent.AutoSize = true;
      this.chkContent.Checked = true;
      this.chkContent.CheckState = CheckState.Checked;
      this.chkContent.Location = new Point(7, 36);
      this.chkContent.Name = "chkContent";
      this.chkContent.Size = new Size(205, 17);
      this.chkContent.TabIndex = 16;
      this.chkContent.Text = "Table Content (Delete and copy rows)";
      this.chkContent.UseVisualStyleBackColor = true;
      this.chkContent.CheckedChanged += new System.EventHandler(this.chkContent_CheckedChanged);
      this.lstBoxTables.FormattingEnabled = true;
      this.lstBoxTables.Location = new Point(7, 105);
      this.lstBoxTables.Name = "lstBoxTables";
      this.lstBoxTables.SelectionMode = SelectionMode.MultiSimple;
      this.lstBoxTables.Size = new Size(227, 121);
      this.lstBoxTables.TabIndex = 17;
      this.lstBoxTables.MouseDoubleClick += new MouseEventHandler(this.lstBoxTables_MouseDoubleClick);
      this.listBoxSpecialGroup.FormattingEnabled = true;
      this.listBoxSpecialGroup.Location = new Point(240, 105);
      this.listBoxSpecialGroup.Name = "listBoxSpecialGroup";
      this.listBoxSpecialGroup.Size = new Size(219, 121);
      this.listBoxSpecialGroup.TabIndex = 20;
      this.listBoxSpecialGroup.Click += new System.EventHandler(this.listBoxSpecialGroup_Click);
      this.buttonWriteXSD.ForeColor = SystemColors.ControlText;
      this.buttonWriteXSD.Location = new Point(35, 595);
      this.buttonWriteXSD.Name = "buttonWriteXSD";
      this.buttonWriteXSD.Size = new Size(170, 22);
      this.buttonWriteXSD.TabIndex = 22;
      this.buttonWriteXSD.Text = "Write Source Schema to File";
      this.buttonWriteXSD.UseVisualStyleBackColor = true;
      this.buttonWriteXSD.Click += new System.EventHandler(this.buttonWriteXSD_Click);
      this.textBoxWhereConditions.Location = new Point(6, 340);
      this.textBoxWhereConditions.Multiline = true;
      this.textBoxWhereConditions.Name = "textBoxWhereConditions";
      this.textBoxWhereConditions.Size = new Size(452, 77);
      this.textBoxWhereConditions.TabIndex = 23;
      this.label1.AutoSize = true;
      this.label1.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label1.Location = new Point(6, 324);
      this.label1.Name = "label1";
      this.label1.Size = new Size(388, 13);
      this.label1.TabIndex = 24;
      this.label1.Text = "Define special WHERE Conditions below (TABLENAME; WHERE CONDITION):";
      this.checkBoxVacuum.AutoSize = true;
      this.checkBoxVacuum.Location = new Point(7, 19);
      this.checkBoxVacuum.Name = "checkBoxVacuum";
      this.checkBoxVacuum.Size = new Size(95, 17);
      this.checkBoxVacuum.TabIndex = 26;
      this.checkBoxVacuum.Text = "Vaccum Table";
      this.checkBoxVacuum.UseVisualStyleBackColor = true;
      this.groupBox2.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.groupBox2.Controls.Add((Control) this.txtLog);
      this.groupBox2.Location = new Point(499, 11);
      this.groupBox2.Name = "groupBox2";
      this.groupBox2.Size = new Size(558, 299);
      this.groupBox2.TabIndex = 28;
      this.groupBox2.TabStop = false;
      this.groupBox2.Text = "Zeilen Status:";
      this.comboBoxSingleTableUpdate.DropDownStyle = ComboBoxStyle.DropDownList;
      this.comboBoxSingleTableUpdate.FormattingEnabled = true;
      this.comboBoxSingleTableUpdate.Items.AddRange(new object[1]
      {
        (object) "ZRGlobalID"
      });
      this.comboBoxSingleTableUpdate.Location = new Point(140, 448);
      this.comboBoxSingleTableUpdate.Name = "comboBoxSingleTableUpdate";
      this.comboBoxSingleTableUpdate.Size = new Size(233, 21);
      this.comboBoxSingleTableUpdate.TabIndex = 32;
      this.comboBoxSingleTableUpdate.SelectedIndexChanged += new System.EventHandler(this.comboBoxSingleTableUpdate_SelectedIndexChanged);
      this.groupBox3.Controls.Add((Control) this.label3);
      this.groupBox3.Controls.Add((Control) this.label4);
      this.groupBox3.Controls.Add((Control) this.labelDatabaseName);
      this.groupBox3.Controls.Add((Control) this.labelDatabaseLocation);
      this.groupBox3.Location = new Point(12, 12);
      this.groupBox3.Name = "groupBox3";
      this.groupBox3.Size = new Size(469, 58);
      this.groupBox3.TabIndex = 29;
      this.groupBox3.TabStop = false;
      this.groupBox3.Text = "Database Info (Target DB):";
      this.label3.AutoSize = true;
      this.label3.Location = new Point(6, 35);
      this.label3.Name = "label3";
      this.label3.Size = new Size(87, 13);
      this.label3.TabIndex = 38;
      this.label3.Text = "Database Name:";
      this.label4.AutoSize = true;
      this.label4.Location = new Point(6, 22);
      this.label4.Name = "label4";
      this.label4.Size = new Size(100, 13);
      this.label4.TabIndex = 37;
      this.label4.Text = "Database Location:";
      this.labelDatabaseName.AutoSize = true;
      this.labelDatabaseName.Location = new Point(142, 35);
      this.labelDatabaseName.Name = "labelDatabaseName";
      this.labelDatabaseName.Size = new Size(87, 13);
      this.labelDatabaseName.TabIndex = 36;
      this.labelDatabaseName.Text = "Database Name:";
      this.labelDatabaseLocation.AutoSize = true;
      this.labelDatabaseLocation.Location = new Point(142, 22);
      this.labelDatabaseLocation.Name = "labelDatabaseLocation";
      this.labelDatabaseLocation.Size = new Size(100, 13);
      this.labelDatabaseLocation.TabIndex = 35;
      this.labelDatabaseLocation.Text = "Database Location:";
      this.label2.AutoSize = true;
      this.label2.Location = new Point(236, 86);
      this.label2.Name = "label2";
      this.label2.Size = new Size(141, 13);
      this.label2.TabIndex = 34;
      this.label2.Text = "Choose a pre-defined group:";
      this.checkBoxUpdateSingleTable.AutoSize = true;
      this.checkBoxUpdateSingleTable.Location = new Point(6, 450);
      this.checkBoxUpdateSingleTable.Name = "checkBoxUpdateSingleTable";
      this.checkBoxUpdateSingleTable.Size = new Size(130, 17);
      this.checkBoxUpdateSingleTable.TabIndex = 35;
      this.checkBoxUpdateSingleTable.Text = "Update a single Table";
      this.checkBoxUpdateSingleTable.UseVisualStyleBackColor = true;
      this.checkBoxUpdateSingleTable.CheckedChanged += new System.EventHandler(this.checkBoxUpdateSingleTable_CheckedChanged);
      this.groupBox4.Controls.Add((Control) this.buttonCancelTimePointStart);
      this.groupBox4.Controls.Add((Control) this.StartTimePicker);
      this.groupBox4.Controls.Add((Control) this.labelTimepoint);
      this.groupBox4.Controls.Add((Control) this.checkBoxEnableStartTime);
      this.groupBox4.Controls.Add((Control) this.checkBoxUseOdbcConnection);
      this.groupBox4.Controls.Add((Control) this.checkBoxVacuum);
      this.groupBox4.Location = new Point(7, 232);
      this.groupBox4.Name = "groupBox4";
      this.groupBox4.Size = new Size(452, 79);
      this.groupBox4.TabIndex = 36;
      this.groupBox4.TabStop = false;
      this.groupBox4.Text = "Options:";
      this.buttonCancelTimePointStart.AutoEllipsis = true;
      this.buttonCancelTimePointStart.Location = new Point(373, 48);
      this.buttonCancelTimePointStart.Name = "buttonCancelTimePointStart";
      this.buttonCancelTimePointStart.Size = new Size(75, 23);
      this.buttonCancelTimePointStart.TabIndex = 31;
      this.buttonCancelTimePointStart.Text = "Cancel";
      this.buttonCancelTimePointStart.UseVisualStyleBackColor = true;
      this.buttonCancelTimePointStart.Click += new System.EventHandler(this.buttonCancelTimePointStart_Click);
      this.StartTimePicker.CustomFormat = "dd.MM.yyyy HH.mm:ss";
      this.StartTimePicker.Format = DateTimePickerFormat.Custom;
      this.StartTimePicker.Location = new Point(223, 49);
      this.StartTimePicker.Name = "StartTimePicker";
      this.StartTimePicker.Size = new Size(143, 20);
      this.StartTimePicker.TabIndex = 30;
      this.labelTimepoint.AutoSize = true;
      this.labelTimepoint.Location = new Point(165, 53);
      this.labelTimepoint.Name = "labelTimepoint";
      this.labelTimepoint.Size = new Size(56, 13);
      this.labelTimepoint.TabIndex = 29;
      this.labelTimepoint.Text = "Timepoint:";
      this.checkBoxEnableStartTime.AutoSize = true;
      this.checkBoxEnableStartTime.Location = new Point(7, 49);
      this.checkBoxEnableStartTime.Name = "checkBoxEnableStartTime";
      this.checkBoxEnableStartTime.Size = new Size(117, 17);
      this.checkBoxEnableStartTime.TabIndex = 28;
      this.checkBoxEnableStartTime.Text = "Start after timepoint";
      this.checkBoxEnableStartTime.UseVisualStyleBackColor = true;
      this.checkBoxUseOdbcConnection.AutoSize = true;
      this.checkBoxUseOdbcConnection.Location = new Point(118, 19);
      this.checkBoxUseOdbcConnection.Name = "checkBoxUseOdbcConnection";
      this.checkBoxUseOdbcConnection.Size = new Size(150, 17);
      this.checkBoxUseOdbcConnection.TabIndex = 27;
      this.checkBoxUseOdbcConnection.Text = "Use ODBC for large tables";
      this.checkBoxUseOdbcConnection.UseVisualStyleBackColor = true;
      this.groupBox5.Controls.Add((Control) this.buttonSetAll);
      this.groupBox5.Controls.Add((Control) this.buttonClearAll);
      this.groupBox5.Controls.Add((Control) this.buttonStartSingleTableUpdate);
      this.groupBox5.Controls.Add((Control) this.checkBoxUpdateSingleTable);
      this.groupBox5.Controls.Add((Control) this.lblTables);
      this.groupBox5.Controls.Add((Control) this.progressBarCloner);
      this.groupBox5.Controls.Add((Control) this.chkContent);
      this.groupBox5.Controls.Add((Control) this.comboBoxSingleTableUpdate);
      this.groupBox5.Controls.Add((Control) this.groupBox4);
      this.groupBox5.Controls.Add((Control) this.cmdStartClone);
      this.groupBox5.Controls.Add((Control) this.chkStructure);
      this.groupBox5.Controls.Add((Control) this.label1);
      this.groupBox5.Controls.Add((Control) this.textBoxWhereConditions);
      this.groupBox5.Controls.Add((Control) this.label2);
      this.groupBox5.Controls.Add((Control) this.lstBoxTables);
      this.groupBox5.Controls.Add((Control) this.listBoxSpecialGroup);
      this.groupBox5.Location = new Point(12, 76);
      this.groupBox5.Name = "groupBox5";
      this.groupBox5.Size = new Size(469, 497);
      this.groupBox5.TabIndex = 37;
      this.groupBox5.TabStop = false;
      this.groupBox5.Text = "Create Structure and Copy Data ";
      this.buttonSetAll.Location = new Point(125, 76);
      this.buttonSetAll.Name = "buttonSetAll";
      this.buttonSetAll.Size = new Size(109, 23);
      this.buttonSetAll.TabIndex = 39;
      this.buttonSetAll.Text = "Set all";
      this.buttonSetAll.UseVisualStyleBackColor = true;
      this.buttonSetAll.Click += new System.EventHandler(this.buttonSetAll_Click);
      this.buttonClearAll.Location = new Point(6, 76);
      this.buttonClearAll.Name = "buttonClearAll";
      this.buttonClearAll.Size = new Size(113, 23);
      this.buttonClearAll.TabIndex = 39;
      this.buttonClearAll.Text = "Clear all";
      this.buttonClearAll.UseVisualStyleBackColor = true;
      this.buttonClearAll.Click += new System.EventHandler(this.buttonClearAll_Click);
      this.buttonStartSingleTableUpdate.ForeColor = SystemColors.ControlText;
      this.buttonStartSingleTableUpdate.Location = new Point(380, 448);
      this.buttonStartSingleTableUpdate.Name = "buttonStartSingleTableUpdate";
      this.buttonStartSingleTableUpdate.Size = new Size(79, 22);
      this.buttonStartSingleTableUpdate.TabIndex = 38;
      this.buttonStartSingleTableUpdate.Text = "Start Update";
      this.buttonStartSingleTableUpdate.UseVisualStyleBackColor = true;
      this.buttonStartSingleTableUpdate.Click += new System.EventHandler(this.buttonStartSingleTableUpdate_Click);
      this.progressBarCloner.Location = new Point(6, 419);
      this.progressBarCloner.Name = "progressBarCloner";
      this.progressBarCloner.Size = new Size(367, 23);
      this.progressBarCloner.TabIndex = 37;
      this.groupBox1.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.groupBox1.Controls.Add((Control) this.TableLog);
      this.groupBox1.Location = new Point(499, 312);
      this.groupBox1.Name = "groupBox1";
      this.groupBox1.Size = new Size(558, 261);
      this.groupBox1.TabIndex = 38;
      this.groupBox1.TabStop = false;
      this.groupBox1.Text = "Tabellen Status:";
      this.TableLog.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.TableLog.ForeColor = SystemColors.ControlText;
      this.TableLog.Location = new Point(6, 19);
      this.TableLog.Multiline = true;
      this.TableLog.Name = "TableLog";
      this.TableLog.ScrollBars = ScrollBars.Vertical;
      this.TableLog.Size = new Size(546, 229);
      this.TableLog.TabIndex = 14;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(1069, 589);
      this.Controls.Add((Control) this.groupBox1);
      this.Controls.Add((Control) this.groupBox5);
      this.Controls.Add((Control) this.groupBox3);
      this.Controls.Add((Control) this.groupBox2);
      this.Controls.Add((Control) this.lblDatarows);
      this.Controls.Add((Control) this.lblDuration);
      this.Controls.Add((Control) this.lblMinutes);
      this.Controls.Add((Control) this.buttonWriteXSD);
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.Name = nameof (DbCloner);
      this.SizeGripStyle = SizeGripStyle.Hide;
      this.Text = nameof (DbCloner);
      this.groupBox2.ResumeLayout(false);
      this.groupBox2.PerformLayout();
      this.groupBox3.ResumeLayout(false);
      this.groupBox3.PerformLayout();
      this.groupBox4.ResumeLayout(false);
      this.groupBox4.PerformLayout();
      this.groupBox5.ResumeLayout(false);
      this.groupBox5.PerformLayout();
      this.groupBox1.ResumeLayout(false);
      this.groupBox1.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    public class SpecialTableClass
    {
      public string TableName;
      public int StepValue;
      public string Index;

      public SpecialTableClass(string TheTableName, int TheStepValue, string TheIndex)
      {
        this.TableName = TheTableName;
        this.StepValue = TheStepValue;
        this.Index = TheIndex;
      }
    }
  }
}


--- DeviceCollectorSettings.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DeviceCollectorSettings
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum DeviceCollectorSettings
  {
    BusMode,
    FromTime,
    ToTime,
    DaKonId,
    Password,
    MaxRequestRepeat,
    ScanStartAddress,
    ScanStartSerialnumber,
    OrganizeStartAddress,
    CycleTime,
    OnlySecondaryAddressing,
    FastSecondaryAddressing,
    KeepExistingDestinationAddress,
    ChangeInterfaceBaudrateToo,
    UseExternalKeyForReading,
    BeepSignalOnReadResult,
    LogToFileEnabled,
    LogFilePath,
    IsMultiTelegrammEnabled,
    UseREQ_UD2_5B,
    SendFirstApplicationReset,
    SendFirstSND_NKE,
    SelectedDeviceMBusType,
    MinomatV4_MinolID,
    MinomatV4_Challenge,
    MinomatV4_GSM_ID,
    MinomatV4_SessionKey,
    MinomatV4_DurationDueDate,
    MinomatV4_DurationMonth,
    MinomatV4_DurationDay,
    MinomatV4_DurationQuarterHour,
    MinomatV4_SourceAddress,
    SecondaryAddress,
    PrimaryAddress,
  }
}


--- DeviceDB_Data.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DeviceDB_Data
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Collections.Generic;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class DeviceDB_Data
  {
    public readonly string Name;
    public readonly SortedList<string, List<TelegramParameter>> Parameter;
    public readonly int HardwareTypeID;
    public readonly int MapID;

    public DeviceDB_Data(
      int HardwareTypeID,
      int MapID,
      string Name,
      SortedList<string, List<TelegramParameter>> Parameter)
    {
      this.HardwareTypeID = HardwareTypeID;
      this.Name = Name;
      this.Parameter = Parameter;
      this.MapID = MapID;
    }
  }
}


--- DeviceHardwareIdentification.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DeviceHardwareIdentification
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Collections.Generic;

#nullable disable
namespace ZR_ClassLibrary
{
  public class DeviceHardwareIdentification
  {
    public DHI_VolumeMeterType VolumeMeterType = DHI_VolumeMeterType.NONE;
    public DHI_VolumeMeterBounding VolumeMeterBounding = DHI_VolumeMeterBounding.NONE;
    public List<DHI_CommunicationInterface> CommunicationInterfaces = new List<DHI_CommunicationInterface>();
    public DHI_TempSensorType TempSensorType = DHI_TempSensorType.NONE;
    public DHI_DeviceType DeviceType = DHI_DeviceType.NONE;
  }
}


--- DeviceIOSettings.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DeviceIOSettings
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public class DeviceIOSettings
  {
    public double PulseValueInLiterPerPuls = 0.0;
    public double CurrentValueInLiter = 0.0;
    public bool LeakageDetectionEnabled = false;
    public bool LoggerEnabled = false;
  }
}


--- DeviceListStatus.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DeviceListStatus
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public class DeviceListStatus
  {
    public int FoundExpectedDevices;
    public int FoundUnexpectedDevices;
    public int DevicesMissing;
  }
}


--- DeviceParameter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DeviceParameter
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public class DeviceParameter
  {
    public enum ParamType
    {
      HeatEnergie,
      Volume,
      Power,
      Mass,
      VolumeFlow,
      FlowTemperature,
      ReturnTemperature,
      TemperatureDifference,
    }

    public enum ParamCalculation
    {
      Actual,
      Sum,
      Integral,
      Maxvalue,
      Minvalue,
    }

    public enum ParamTimbase
    {
      DeviceLife,
      ApprovalTime,
      Interval,
    }

    public enum ParamUnit
    {
      Wh,
      m,
      qm,
      gradC,
      gradK,
      s,
    }
  }
}


--- DeviceTypes.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DeviceTypes
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum DeviceTypes
  {
    None,
    MBus,
    ZR_Serie1,
    ZR_Serie2,
    ZR_EHCA,
    Ident,
    ZR_RDM,
    WaveFlowDevice,
    Minol_Device,
    MinomatDevice,
    MultipleDevices,
    ZR_Serie3,
    RelayDevice,
    EHCA_M5,
    EHCA_M5p,
    EHCA_M6,
    EHCA_M6_Radio3,
    MinotelContact,
    MinotelContactRadio3,
    Aqua,
    AquaMicro,
    AquaMicroRadio3,
    ISF,
    MinoConnect,
    EDC,
    SmokeDetector,
    PDC,
    TemperatureSensor,
    HumiditySensor,
  }
}


--- DHI_CommunicationInterface.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DHI_CommunicationInterface
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum DHI_CommunicationInterface
  {
    NONE,
    ZVEI,
    IrDA,
    MBus,
    RS485,
    RS232,
    radio3_WMBus_868,
    LoRa,
    wMBus,
  }
}


--- DHI_DeviceType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DHI_DeviceType
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum DHI_DeviceType
  {
    NONE,
    C5,
    WR4,
  }
}


--- DHI_TempSensorType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DHI_TempSensorType
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum DHI_TempSensorType
  {
    NONE,
    PT100,
    PT500,
    PT1000,
  }
}


--- DHI_VolumeMeterBounding.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DHI_VolumeMeterBounding
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum DHI_VolumeMeterBounding
  {
    NONE,
    Compact,
    Combi,
    Split,
  }
}


--- DHI_VolumeMeterType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DHI_VolumeMeterType
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum DHI_VolumeMeterType
  {
    NONE,
    ISF,
    CMF,
    CMF_A1,
    IUF,
    ASF,
  }
}


--- DigitalInputOutput.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.DigitalInputOutput
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum DigitalInputOutput
  {
    None = 0,
    InputLineBreak = 3,
    ImputLineManipulation = 4,
    VolumeCounter2Input = 5,
    VolumeCounter1Input = 6,
    HeatMeterVolumeInput = 7,
  }
}


--- EDC_Hardware.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.EDC_Hardware
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum EDC_Hardware : ushort
  {
    Unknown = 0,
    EDC_Radio = 17, // 0x0011
    EDC_mBus = 18, // 0x0012
    EDC_LoRa868 = 25, // 0x0019
    Micro_LoRa = 29, // 0x001D
    Micro_WmBus = 30, // 0x001E
    EDC_wMBus = 31, // 0x001F
    EDC_LoRa470 = 32, // 0x0020
    EDC_ModBus = 33, // 0x0021
    EDC_LoRa915 = 41, // 0x0029
    EDC_NBIoT = 42, // 0x002A
    EDC_mBus_Modbus = 48, // 0x0030
    EDC_mBus_CJ188 = 51, // 0x0033
    EDC_RS485_Modbus = 52, // 0x0034
    EDC_RS485_CJ188 = 53, // 0x0035
    EDC_NBIoT_LCSW = 54, // 0x0036
    EDC_NBIoT_YJSW = 57, // 0x0039
    EDC_NBIoT_FSNH = 61, // 0x003D
    EDC_NBIoT_XM = 62, // 0x003E
    EDC_NBIoT_Israel = 68, // 0x0044
    EDC_NBIoT_TaiWan = 69, // 0x0045
  }
}


--- EDC_HardwareIdentification.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.EDC_HardwareIdentification
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class EDC_HardwareIdentification
  {
    public KOMMUNIKATION_SCHNITTSTELLE Type { get; set; }

    public MONTAGE_AM_ZAEHLER Mounting { get; set; }

    public BATTERIE_TYP Battery { get; set; }

    public COMPLETION Completion { get; set; }

    public string CreateKey()
    {
      return EDC_HardwareIdentification.CreateKey(this.Type.ToString(), this.Mounting.ToString(), this.Battery.ToString(), this.Completion);
    }

    private static string CreateKey(
      string type,
      string mounting,
      string battery,
      COMPLETION completion)
    {
      return string.Format("EDC;{0};{1};{2};{3}", (object) type, (object) mounting, (object) battery, (object) completion);
    }

    public static EDC_HardwareIdentification ParseKey(
      string type,
      string mounting,
      string battery,
      COMPLETION completion)
    {
      return string.IsNullOrEmpty(type) || string.IsNullOrEmpty(mounting) || string.IsNullOrEmpty(battery) ? (EDC_HardwareIdentification) null : EDC_HardwareIdentification.ParseKey(EDC_HardwareIdentification.CreateKey(type, mounting, battery, completion));
    }

    public static EDC_HardwareIdentification ParseKey(string key)
    {
      string[] strArray = !string.IsNullOrEmpty(key) ? key.Split(';') : throw new ArgumentException(nameof (key));
      if (strArray.Length < 1)
        throw new ArgumentException(nameof (key));
      if (strArray[0] != "EDC")
        throw new ArgumentException(nameof (key));
      if (strArray.Length != 5)
        return (EDC_HardwareIdentification) null;
      return new EDC_HardwareIdentification()
      {
        Type = (KOMMUNIKATION_SCHNITTSTELLE) Enum.Parse(typeof (KOMMUNIKATION_SCHNITTSTELLE), strArray[1], true),
        Mounting = (MONTAGE_AM_ZAEHLER) Enum.Parse(typeof (MONTAGE_AM_ZAEHLER), strArray[2], true),
        Battery = (BATTERIE_TYP) Enum.Parse(typeof (BATTERIE_TYP), strArray[3], true),
        Completion = (COMPLETION) Enum.Parse(typeof (COMPLETION), strArray[4], true)
      };
    }
  }
}


--- EquipmentDestinationFlags.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.EquipmentDestinationFlags
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum EquipmentDestinationFlags
  {
    EQ_Disabled = 1,
    EQ_ZR_Factory = 2,
    EQ_ZR_Development = 3,
    EQ_External = 4,
  }
}


--- EquipmentTypes.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.EquipmentTypes
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum EquipmentTypes
  {
    UnKnown,
    Hardwaretest,
    PruefboxWaermezaehler,
    AbgleichboxWaermezaehler,
    Pruefstelle,
    EnergiePruefadapterZelsius,
    Pruefplatz,
    AbschlussTestEinrichtungZelsius,
    Widerstandspaar,
    Modultest,
    FunkabgleichEHCAII,
    EndtestEHCAII,
    Produktionsort,
    KonfigurationEHCAII,
    KapseltestZelsius,
    WaterSupplyLocation,
    WaterTestbench,
    HydraulikTestbench,
    RelaisPruefboxFuerFunkmodule,
    AutoPruefboxFuerWaermezaehler,
    EnergiePruefadapterWR3,
    AbschlusstesteinrichtungWR3,
    AutoTestBox,
    AirTestBench,
    SerialPortConfiguration,
    MinoMessTestbench,
    PT100Sensor,
    PT500Sensor,
    PT1000Sensor,
    EnergyTestbenchWithBathes,
    C5DeviceTest,
    C5Hardwaretest,
    C5PrintStation,
    EDCHardwareTestbench,
    LaudaBath,
    PicoPT104Card,
    PicoPT104CardChannel,
    ResistanceNormal,
    Multimeter,
    EDCEndTest,
    EDCPCBAdapterRadio,
    EDCPCBAdapterMBusPuls,
    EDCFunctionTestAdapter,
    C5ScanUnitTestbench,
    C5VolumeMeterTestbench,
    C5UsVmFunctionTest,
    TransducerTestTestbench,
    UsVmCheckTestbench,
    SDPCBTest_T1,
    SDFunctionTest_T2,
    SDTunnelTest_T3,
    SDFinalTest_T5,
    SDAgingTest_T4,
    PDCFactoryTest,
    PDCFinalTest,
    EvmRhFactory,
    EdcReferenceWaterMeter,
    TransducerAssemblingTestbench,
    CoverPrinter,
    THFunctionTest,
    WR4Hardwaretest,
    WR4PrintStation,
    M8TestBenchT1,
    M8TestBenchT2,
    M8TestBenchT3,
    M8TestBenchT4,
    M8TestBenchT5,
    WR4DeviceTest,
    NFCCouplerTest,
    TestbenchPC,
    EnergyTestbenchWithTestbox,
    IUWHardwareTest,
    USTouchPad,
    SingleJetQ2Q1,
    SingleJetQ3,
    MultipleJet,
    DeveloperTestbench,
    PloumeterTestBench,
  }
}


--- ErrorNumber.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ErrorNumber
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum ErrorNumber
  {
    None = 0,
    Input_1_frequencyToHigh = 8,
    Input_2_frequencyToHigh = 9,
    Input_3_frequencyToHigh = 10, // 0x0000000A
    SelfTestError = 12, // 0x0000000C
    ReadingDayDataError = 13, // 0x0000000D
    InternalLoopMemoryError = 14, // 0x0000000E
    ExternalLoopMemoryError = 16, // 0x00000010
    ExternalEEPHardwareError = 17, // 0x00000011
    InternalEEPHardwareError = 18, // 0x00000012
    ResetError = 19, // 0x00000013
    ShortCircuitReturnSensor = 34, // 0x00000022
    BrokenReturnSensor = 37, // 0x00000025
    ShortCircuitFlowSensor = 44, // 0x0000002C
    BrokenFlowSensor = 47, // 0x0000002F
    OtherTempMessuringError = 57, // 0x00000039
    ForwardSensorTooSmall = 62, // 0x0000003E
    ForwardSensorTooLarge = 63, // 0x0000003F
    ReturnSensorTooSmall = 64, // 0x00000040
    ReturnSensorTooLarge = 65, // 0x00000041
    FlowReturnSensorWrongWay = 71, // 0x00000047
    BatteryUndervoltage = 77, // 0x0000004D
  }
}


--- EventHandlerEx`1.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.EventHandlerEx`1
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  [Serializable]
  public delegate void EventHandlerEx<TEventArgs>(object sender, TEventArgs e);
}


--- EventLogger.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.EventLogger
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class EventLogger : EventTime
  {
    public int ActiveLoggerEvents;
    public bool ShowTime;
    public int MaxLoggerEvents;
    private int WriteOffset;
    private int ReadOffset;
    private int ReadSize;
    private bool Overrun;
    private long LastEventTicks;
    private EventLogger.EVENT_STRUCT[] LoggerData;

    public EventLogger()
    {
      this.ShowTime = true;
      this.NewLogger(100);
    }

    public void NewLogger(int MaxEvents)
    {
      this.MaxLoggerEvents = MaxEvents;
      this.LoggerData = new EventLogger.EVENT_STRUCT[this.MaxLoggerEvents];
      for (int index = 0; index < this.MaxLoggerEvents; ++index)
      {
        this.LoggerData[index].Event = EventLogger.LoggerEvent.EmptyEvent;
        this.LoggerData[index].EventTicks = 0L;
        this.LoggerData[index].DataBytes = new byte[0];
      }
      this.ActiveLoggerEvents = 0;
      this.WriteOffset = 0;
      this.Overrun = false;
    }

    public void WriteLoggerEvent(EventLogger.LoggerEvent Event)
    {
      if ((Event & (EventLogger.LoggerEvent) this.ActiveLoggerEvents) == EventLogger.LoggerEvent.EmptyEvent)
        return;
      this.LoggerData[this.WriteOffset].Event = Event;
      this.LoggerData[this.WriteOffset].EventTicks = this.GetTimeTicks();
      this.LoggerData[this.WriteOffset].DataBytes = new byte[0];
      ++this.WriteOffset;
      if (this.WriteOffset < this.MaxLoggerEvents)
        return;
      this.WriteOffset = 0;
      this.Overrun = true;
    }

    public void WriteLoggerInfo(EventLogger.LoggerEvent Event, string info)
    {
      if ((Event & (EventLogger.LoggerEvent) this.ActiveLoggerEvents) == EventLogger.LoggerEvent.EmptyEvent)
        return;
      this.LoggerData[this.WriteOffset].Event = Event;
      this.LoggerData[this.WriteOffset].EventTicks = this.GetTimeTicks();
      this.LoggerData[this.WriteOffset].DataBytes = new byte[0];
      this.LoggerData[this.WriteOffset].EventInfo = info;
      ++this.WriteOffset;
      if (this.WriteOffset < this.MaxLoggerEvents)
        return;
      this.WriteOffset = 0;
      this.Overrun = true;
    }

    public void WriteLoggerData(EventLogger.LoggerEvent Event, ref ByteField data)
    {
      if ((Event & (EventLogger.LoggerEvent) this.ActiveLoggerEvents) == EventLogger.LoggerEvent.EmptyEvent)
        return;
      int count = data.Count;
      byte[] DataOut;
      data.GetOptimalField(out DataOut);
      this.LoggerData[this.WriteOffset].EventTicks = this.GetTimeTicks();
      this.LoggerData[this.WriteOffset].Event = Event;
      this.LoggerData[this.WriteOffset].DataBytes = DataOut;
      ++this.WriteOffset;
      if (this.WriteOffset < this.MaxLoggerEvents)
        return;
      this.WriteOffset = 0;
      this.Overrun = true;
    }

    public void StartReadout()
    {
      if (this.Overrun)
      {
        this.ReadSize = this.MaxLoggerEvents;
        this.ReadOffset = this.WriteOffset + 1;
        if (this.ReadOffset >= this.MaxLoggerEvents)
          this.ReadOffset = 0;
      }
      else
      {
        this.ReadSize = this.WriteOffset;
        this.ReadOffset = 0;
      }
      this.LastEventTicks = 0L;
    }

    public bool GetNextLine(out string EventLine)
    {
      if (this.ReadSize == 0 || this.ReadOffset == this.WriteOffset)
      {
        this.ReadSize = 0;
        EventLine = "";
        return false;
      }
      string str1 = this.LoggerData[this.ReadOffset].Event.ToString() + " ";
      while (str1.Length < 30)
        str1 += ".";
      long eventTicks = this.LoggerData[this.ReadOffset].EventTicks;
      if (this.ShowTime)
        str1 = str1 + " " + this.GetEventTime(eventTicks);
      string str2 = str1 + " " + this.GetEventTimeDifferenc(eventTicks - this.LastEventTicks);
      this.LastEventTicks = eventTicks;
      string str3 = str2 + "| ";
      for (int index = 0; index < this.LoggerData[this.ReadOffset].DataBytes.Length; ++index)
      {
        string str4 = str3 + this.LoggerData[this.ReadOffset].DataBytes[index].ToString("x2");
        str3 = index % 8 != 7 ? (index % 8 != 3 ? str4 + " " : str4 + ".") : str4 + "\r\n                                                            | ";
      }
      if (this.LoggerData[this.ReadOffset].EventInfo != null)
        str3 = str3 + "| info: " + this.LoggerData[this.ReadOffset].EventInfo;
      EventLine = str3 + "\r\n";
      --this.ReadSize;
      ++this.ReadOffset;
      if (this.ReadOffset >= this.MaxLoggerEvents)
        this.ReadOffset = 0;
      return true;
    }

    public enum LoggerEvent
    {
      EmptyEvent = 0,
      TestEvent = 1,
      ComOpenCloseBlockAdr = 256, // 0x00000100
      ComOpen = 257, // 0x00000101
      ComClose = 258, // 0x00000102
      ComOpenMinoConnect = 259, // 0x00000103
      ComOpenMinoHead = 260, // 0x00000104
      ComDataBlockAdr = 512, // 0x00000200
      ComTransmitData = 513, // 0x00000201
      ComReceiveData = 514, // 0x00000202
      ComStateBlockAdr = 1024, // 0x00000400
      ComClearReceiver = 1025, // 0x00000401
      ComTransmitDone = 1026, // 0x00000402
      ComTransmitBreak = 1027, // 0x00000403
      ComEchoOk = 1028, // 0x00000404
      ComWaitRepeatTime = 1029, // 0x00000405
      ComWaitSafeMode = 1030, // 0x00000406
      ComWaitTransmitTimeS = 1031, // 0x00000407
      ComWaitTransmitTimeE = 1032, // 0x00000408
      ComErrorsBlockAdr = 2048, // 0x00000800
      ComReceiveFramingError = 2049, // 0x00000801
      ComReceiveTimeout = 2050, // 0x00000802
      ComEchoError = 2051, // 0x00000803
      ComHardwareOverflow = 2052, // 0x00000804
      ComQueueOverflow = 2053, // 0x00000805
      ComParityError = 2054, // 0x00000806
      ComFramingError = 2055, // 0x00000807
      ComBreakeDetected = 2056, // 0x00000808
      ComUnknownError = 2057, // 0x00000809
      ComNoErrorFlags = 2058, // 0x0000080A
      ComIOException = 2059, // 0x0000080B
      ComPollingBlockAdr = 4096, // 0x00001000
      ComReceiverPoll = 4097, // 0x00001001
      ComSendMinoConnectStatusRequest = 4098, // 0x00001002
      ComReceiveMinoConnectStatus = 4099, // 0x00001003
      BusFunctionsBlockAdr = 8192, // 0x00002000
      BusDeviceReset = 8193, // 0x00002001
      BusSendREQ_UD2 = 8194, // 0x00002002
      BusSendREQ_Version = 8195, // 0x00002003
      BusStartReadMemory = 8196, // 0x00002004
      BusStartWriteMemory = 8197, // 0x00002005
      BusSelectDevice = 8198, // 0x00002006
      BusSendSND_NKE = 8199, // 0x00002007
      BusStartUpdateMemory = 8200, // 0x00002008
      BusApplicationReset = 8201, // 0x00002009
      BusSetAllParameters = 8202, // 0x0000200A
      BusStatusBlockAdr = 16384, // 0x00004000
      BusWorkHeader = 16385, // 0x00004001
      BusWorkData = 16386, // 0x00004002
      BusStartReadBlock = 16387, // 0x00004003
      BusStartWriteBlock = 16388, // 0x00004004
      BusStartWriteBit = 16389, // 0x00004005
      BusReceiveOK = 16390, // 0x00004006
      BusErrorsBlockAdr = 32768, // 0x00008000
      BusChecksumError = 32769, // 0x00008001
      BusReceiveNOK = 32770, // 0x00008002
      BusReceiveTimeout = 32771, // 0x00008003
      BusReceiveDataError = 32772, // 0x00008004
      BusReadWrongBlockLength = 32773, // 0x00008005
      BusErrorSecondAnswer = 32774, // 0x00008006
      BusErrorFramingError = 32775, // 0x00008007
      BusSendSynchronizeAction = 32776, // 0x00008008
      LoggerEvent = 32777, // 0x00008009
      WriteDueDateMonth = 32778, // 0x0000800A
    }

    private struct EVENT_STRUCT
    {
      public EventLogger.LoggerEvent Event;
      public long EventTicks;
      public byte[] DataBytes;
      public string EventInfo;
    }
  }
}


--- EventTime.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.EventTime
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public class EventTime
  {
    public string GetEventTime(long Ticks)
    {
      return new DateTime(Ticks).ToString("dd.MM.yy HH:mm:ss.ffff");
    }

    public string GetEventTimeDifferenc(long DifferenceTicks)
    {
      string eventTimeDifferenc = this.GetTimeDifferenc(DifferenceTicks).ToString("d06");
      if (eventTimeDifferenc.Length > 6)
        eventTimeDifferenc = "..new.";
      return eventTimeDifferenc;
    }

    public long GetTimeDifferenc(long DifferenceTicks) => DifferenceTicks / 10000L;

    public long GetEndTicks(long WaitMilliSecounds)
    {
      return DateTime.Now.Ticks + WaitMilliSecounds * 10000L;
    }

    public long GetTicksPlusTime(long FromTicks, long AdditionalMilliSecounds)
    {
      return FromTicks + AdditionalMilliSecounds * 10000L;
    }

    public long GetTimeTicks() => DateTime.Now.Ticks;
  }
}


--- ExcelConnect.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ExcelConnect
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using Microsoft.CSharp.RuntimeBinder;
using Microsoft.Office.Interop.Excel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ExcelConnect
  {
    private _Application MyExcel;
    private _Workbook MyWorkbook;
    private Worksheet MainWorkSheet;
    private Microsoft.Office.Interop.Excel.Range MainWorkSheetRang;
    private object[,] MainWorkSheetArray;
    private int MaxWorkSheetArrayRows;
    private int MaxWorkSheetArrayColumns;
    private int WorksheetIndex = 1;

    public ExcelConnect(string workBookPath)
    {
      this.MyExcel = (_Application) Activator.CreateInstance(Marshal.GetTypeFromCLSID(new Guid("00024500-0000-0000-C000-000000000046")));
      // ISSUE: reference to a compiler-generated method
      this.MyExcel.Workbooks.Open(workBookPath, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__8.\u003C\u003Ep__0 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__8.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, Worksheet>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (Worksheet), typeof (ExcelConnect)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      this.MainWorkSheet = ExcelConnect.\u003C\u003Eo__8.\u003C\u003Ep__0.Target((CallSite) ExcelConnect.\u003C\u003Eo__8.\u003C\u003Ep__0, this.MyExcel.Workbooks[(object) 1].Worksheets[(object) 1]);
      this.MainWorkSheetRang = this.MainWorkSheet.UsedRange;
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__8.\u003C\u003Ep__1 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__8.\u003C\u003Ep__1 = CallSite<Func<CallSite, object, object[,]>>.Create(Binder.Convert(CSharpBinderFlags.ConvertExplicit, typeof (object[,]), typeof (ExcelConnect)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      this.MainWorkSheetArray = ExcelConnect.\u003C\u003Eo__8.\u003C\u003Ep__1.Target((CallSite) ExcelConnect.\u003C\u003Eo__8.\u003C\u003Ep__1, this.MainWorkSheetRang.get_Value((object) XlRangeValueDataType.xlRangeValueDefault));
      this.MaxWorkSheetArrayRows = this.MainWorkSheetArray.GetLength(0);
      this.MaxWorkSheetArrayColumns = this.MainWorkSheetArray.GetLength(1);
    }

    public string[] GetWorkbookRow(int row, int columns)
    {
      if (row >= this.MaxWorkSheetArrayRows)
        return (string[]) null;
      int num = columns;
      if (this.MaxWorkSheetArrayColumns < num)
        num = this.MaxWorkSheetArrayColumns;
      string[] workbookRow = new string[columns];
      for (int index = 0; index < num; ++index)
      {
        object obj = this.MainWorkSheetArray.GetValue(row + 1, index + 1);
        if (obj != null)
          workbookRow[index] = obj.ToString();
      }
      return workbookRow;
    }

    public object[,] GetWorkSheetData(string workSheetName)
    {
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__10.\u003C\u003Ep__0 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__10.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, Worksheet>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (Worksheet), typeof (ExcelConnect)));
      }
      // ISSUE: variable of a compiler-generated type
      Worksheet worksheet1;
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      this.MainWorkSheet = worksheet1 = ExcelConnect.\u003C\u003Eo__10.\u003C\u003Ep__0.Target((CallSite) ExcelConnect.\u003C\u003Eo__10.\u003C\u003Ep__0, this.MyExcel.Workbooks[(object) 1].Worksheets[(object) workSheetName]);
      // ISSUE: variable of a compiler-generated type
      Worksheet worksheet2 = worksheet1;
      // ISSUE: variable of a compiler-generated type
      Microsoft.Office.Interop.Excel.Range usedRange = worksheet2.UsedRange;
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__10.\u003C\u003Ep__1 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__10.\u003C\u003Ep__1 = CallSite<Func<CallSite, object, object[,]>>.Create(Binder.Convert(CSharpBinderFlags.ConvertExplicit, typeof (object[,]), typeof (ExcelConnect)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      return ExcelConnect.\u003C\u003Eo__10.\u003C\u003Ep__1.Target((CallSite) ExcelConnect.\u003C\u003Eo__10.\u003C\u003Ep__1, usedRange.get_Value((object) XlRangeValueDataType.xlRangeValueDefault));
    }

    public ExcelConnect()
    {
      this.MyExcel = (_Application) Activator.CreateInstance(Marshal.GetTypeFromCLSID(new Guid("00024500-0000-0000-C000-000000000046")));
      // ISSUE: reference to a compiler-generated method
      this.MyWorkbook = (_Workbook) this.MyExcel.Workbooks.Add((object) XlWBATemplate.xlWBATWorksheet);
    }

    public void Close()
    {
      try
      {
        // ISSUE: reference to a compiler-generated method
        this.MyWorkbook.Close(Type.Missing, Type.Missing, Type.Missing);
        // ISSUE: reference to a compiler-generated method
        this.MyExcel.Application.Quit();
      }
      catch
      {
      }
    }

    public bool AddTable(DataTable TheTable, string TableName, bool TryParse, bool wrapText = true)
    {
      return this.AddTable(TheTable, TableName, 0, TryParse, wrapText);
    }

    public bool AddTable(
      DataTable TheTable,
      string TableName,
      int TheOffset,
      bool TryParse,
      bool wrapText = true)
    {
      List<int> colIdsToExport = new List<int>();
      for (int index = 0; index < TheTable.Columns.Count; ++index)
        colIdsToExport.Add(index);
      return this.AddTable(TheTable, TableName, TheOffset, colIdsToExport, TryParse, wrapText);
    }

    public bool AddTable(
      DataTable TheTable,
      string TableName,
      List<int> colIdsToExport,
      bool TryParse,
      bool wrapText = true)
    {
      return this.AddTable(TheTable, TableName, 0, colIdsToExport, TryParse, wrapText);
    }

    public bool AddTable(
      DataTable TheTable,
      string TableName,
      int TheOffset,
      List<int> colIdsToExport,
      bool TryParse,
      bool wrapText = true)
    {
      if (this.WorksheetIndex > this.MyWorkbook.Worksheets.Count)
        return false;
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__0 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, _Worksheet>>.Create(Binder.Convert(CSharpBinderFlags.ConvertExplicit, typeof (_Worksheet), typeof (ExcelConnect)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: variable of a compiler-generated type
      _Worksheet worksheet = ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__0.Target((CallSite) ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__0, this.MyWorkbook.Worksheets[(object) this.WorksheetIndex]);
      worksheet.Name = TableName;
      for (int index = 0; index < colIdsToExport.Count; ++index)
        worksheet.Cells[(object) (1 + TheOffset), (object) (1 + index)] = (object) TheTable.Columns[colIdsToExport[index]].ColumnName.ToString();
      object[,] objArray = new object[TheTable.Rows.Count, colIdsToExport.Count];
      for (int index1 = 0; index1 < TheTable.Rows.Count; ++index1)
      {
        for (int index2 = 0; index2 < colIdsToExport.Count; ++index2)
        {
          if (TryParse)
          {
            string s = TheTable.Rows[index1][colIdsToExport[index2]].ToString();
            double result1;
            DateTime result2;
            objArray[index1, index2] = !double.TryParse(s, NumberStyles.AllowDecimalPoint, (IFormatProvider) FixedFormates.TheFormates, out result1) ? (!DateTime.TryParse(s, (IFormatProvider) FixedFormates.TheFormates, DateTimeStyles.None, out result2) ? (object) s : (object) result2.ToString()) : (object) result1;
          }
          else
            objArray[index1, index2] = TheTable.Rows[index1][colIdsToExport[index2]];
        }
      }
      string str = "A" + (TheOffset + 2).ToString();
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      worksheet.get_Range((object) (str + ":" + this.GetExcelColumnName(colIdsToExport.Count) + (TheTable.Rows.Count + 1 + TheOffset).ToString()), Type.Missing).set_Value(Type.Missing, (object) objArray);
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__3 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__3 = CallSite<Func<CallSite, object, bool, object>>.Create(Binder.SetMember(CSharpBinderFlags.None, "WrapText", typeof (ExcelConnect), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
        {
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
        }));
      }
      // ISSUE: reference to a compiler-generated field
      Func<CallSite, object, bool, object> target1 = ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__3.Target;
      // ISSUE: reference to a compiler-generated field
      CallSite<Func<CallSite, object, bool, object>> p3 = ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__3;
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__2 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__2 = CallSite<Func<CallSite, object, object, object, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof (ExcelConnect), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[3]
        {
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
        }));
      }
      // ISSUE: reference to a compiler-generated field
      Func<CallSite, object, object, object, object> target2 = ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__2.Target;
      // ISSUE: reference to a compiler-generated field
      CallSite<Func<CallSite, object, object, object, object>> p2 = ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__2;
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__1 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__1 = CallSite<Func<CallSite, _Worksheet, object>>.Create(Binder.GetMember(CSharpBinderFlags.ResultIndexed, "Range", typeof (ExcelConnect), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
        {
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
        }));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      object obj1 = ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__1.Target((CallSite) ExcelConnect.\u003C\u003Eo__16.\u003C\u003Ep__1, worksheet);
      object cell1 = worksheet.Cells[(object) 1, (object) 1];
      object cell2 = worksheet.Cells[(object) (TheTable.Rows.Count + 1), (object) colIdsToExport.Count];
      object obj2 = target2((CallSite) p2, obj1, cell1, cell2);
      int num = wrapText ? 1 : 0;
      object obj3 = target1((CallSite) p3, obj2, num != 0);
      if (!wrapText)
      {
        // ISSUE: reference to a compiler-generated method
        worksheet.UsedRange.Columns.AutoFit();
      }
      return true;
    }

    public void MarkTable(DataTable TheTable, List<int> TheRowsToMark, Color TheMarkColor)
    {
      this.MarkTable(TheTable, 0, TheRowsToMark, TheMarkColor);
    }

    public void MarkTable(
      DataTable TheTable,
      int TheOffset,
      List<int> TheRowsToMark,
      Color TheMarkColor)
    {
      if (this.WorksheetIndex > this.MyWorkbook.Worksheets.Count)
        throw new ApplicationException("Worksheet index out of range!");
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__0 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, _Worksheet>>.Create(Binder.Convert(CSharpBinderFlags.ConvertExplicit, typeof (_Worksheet), typeof (ExcelConnect)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: variable of a compiler-generated type
      _Worksheet worksheet = ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__0.Target((CallSite) ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__0, this.MyWorkbook.Worksheets[(object) this.WorksheetIndex]);
      for (int index = 0; index < TheTable.Rows.Count; ++index)
      {
        if (TheRowsToMark.Contains(index))
        {
          // ISSUE: reference to a compiler-generated field
          if (ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__3 == null)
          {
            // ISSUE: reference to a compiler-generated field
            ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__3 = CallSite<Func<CallSite, object, Microsoft.Office.Interop.Excel.Range>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (Microsoft.Office.Interop.Excel.Range), typeof (ExcelConnect)));
          }
          // ISSUE: reference to a compiler-generated field
          Func<CallSite, object, Microsoft.Office.Interop.Excel.Range> target1 = ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__3.Target;
          // ISSUE: reference to a compiler-generated field
          CallSite<Func<CallSite, object, Microsoft.Office.Interop.Excel.Range>> p3 = ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__3;
          // ISSUE: reference to a compiler-generated field
          if (ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__2 == null)
          {
            // ISSUE: reference to a compiler-generated field
            ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__2 = CallSite<Func<CallSite, object, object, object, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof (ExcelConnect), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[3]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          Func<CallSite, object, object, object, object> target2 = ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__2.Target;
          // ISSUE: reference to a compiler-generated field
          CallSite<Func<CallSite, object, object, object, object>> p2 = ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__2;
          // ISSUE: reference to a compiler-generated field
          if (ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__1 == null)
          {
            // ISSUE: reference to a compiler-generated field
            ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__1 = CallSite<Func<CallSite, _Worksheet, object>>.Create(Binder.GetMember(CSharpBinderFlags.ResultIndexed, "Range", typeof (ExcelConnect), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated field
          object obj1 = ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__1.Target((CallSite) ExcelConnect.\u003C\u003Eo__18.\u003C\u003Ep__1, worksheet);
          object cell1 = worksheet.Cells[(object) (index + 2 + TheOffset), (object) 1];
          object cell2 = worksheet.Cells[(object) (index + 2 + TheOffset), (object) TheTable.Columns.Count];
          object obj2 = target2((CallSite) p2, obj1, cell1, cell2);
          // ISSUE: variable of a compiler-generated type
          Microsoft.Office.Interop.Excel.Range range = target1((CallSite) p3, obj2);
          range.Rows.Cells.Interior.Color = (object) ColorTranslator.ToOle(Color.LightYellow);
        }
      }
    }

    public void AddCaption(string TheCaption)
    {
      if (this.WorksheetIndex > this.MyWorkbook.Worksheets.Count)
        throw new ApplicationException("Worksheet index out of range!");
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__19.\u003C\u003Ep__0 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__19.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, _Worksheet>>.Create(Binder.Convert(CSharpBinderFlags.ConvertExplicit, typeof (_Worksheet), typeof (ExcelConnect)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: variable of a compiler-generated type
      _Worksheet worksheet = ExcelConnect.\u003C\u003Eo__19.\u003C\u003Ep__0.Target((CallSite) ExcelConnect.\u003C\u003Eo__19.\u003C\u003Ep__0, this.MyWorkbook.Worksheets[(object) this.WorksheetIndex]);
      worksheet.Cells[(object) 1, (object) 1] = (object) TheCaption;
      // ISSUE: reference to a compiler-generated method
      // ISSUE: variable of a compiler-generated type
      Microsoft.Office.Interop.Excel.Range range = worksheet.get_Range((object) "A1", (object) "A1");
      range.Font.Size = (object) 16;
      range.Font.Bold = (object) true;
    }

    public void AddGrid(DataTable TheTable, int TheOffset)
    {
      if (this.WorksheetIndex > this.MyWorkbook.Worksheets.Count)
        throw new ApplicationException("Worksheet index out of range!");
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__0 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, _Worksheet>>.Create(Binder.Convert(CSharpBinderFlags.ConvertExplicit, typeof (_Worksheet), typeof (ExcelConnect)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: variable of a compiler-generated type
      _Worksheet worksheet = ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__0.Target((CallSite) ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__0, this.MyWorkbook.Worksheets[(object) this.WorksheetIndex]);
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__3 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__3 = CallSite<Func<CallSite, object, Microsoft.Office.Interop.Excel.Range>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (Microsoft.Office.Interop.Excel.Range), typeof (ExcelConnect)));
      }
      // ISSUE: reference to a compiler-generated field
      Func<CallSite, object, Microsoft.Office.Interop.Excel.Range> target1 = ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__3.Target;
      // ISSUE: reference to a compiler-generated field
      CallSite<Func<CallSite, object, Microsoft.Office.Interop.Excel.Range>> p3 = ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__3;
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__2 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__2 = CallSite<Func<CallSite, object, object, object, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof (ExcelConnect), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[3]
        {
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
        }));
      }
      // ISSUE: reference to a compiler-generated field
      Func<CallSite, object, object, object, object> target2 = ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__2.Target;
      // ISSUE: reference to a compiler-generated field
      CallSite<Func<CallSite, object, object, object, object>> p2 = ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__2;
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__1 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__1 = CallSite<Func<CallSite, _Worksheet, object>>.Create(Binder.GetMember(CSharpBinderFlags.ResultIndexed, "Range", typeof (ExcelConnect), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
        {
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
        }));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      object obj1 = ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__1.Target((CallSite) ExcelConnect.\u003C\u003Eo__20.\u003C\u003Ep__1, worksheet);
      object cell1 = worksheet.Cells[(object) (1 + TheOffset), (object) 1];
      object cell2 = worksheet.Cells[(object) (TheTable.Rows.Count + 1 + TheOffset), (object) TheTable.Columns.Count];
      object obj2 = target2((CallSite) p2, obj1, cell1, cell2);
      // ISSUE: variable of a compiler-generated type
      Microsoft.Office.Interop.Excel.Range range = target1((CallSite) p3, obj2);
      foreach (Microsoft.Office.Interop.Excel.Range cell3 in range.Cells)
      {
        // ISSUE: reference to a compiler-generated method
        cell3.BorderAround2(Type.Missing, Color: Type.Missing, ThemeColor: Type.Missing);
      }
    }

    public void SetTableHeadersFontBold(DataTable TheTable, int TheOffset)
    {
      if (this.WorksheetIndex > this.MyWorkbook.Worksheets.Count)
        throw new ApplicationException("Worksheet index out of range!");
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__0 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, _Worksheet>>.Create(Binder.Convert(CSharpBinderFlags.ConvertExplicit, typeof (_Worksheet), typeof (ExcelConnect)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: variable of a compiler-generated type
      _Worksheet worksheet = ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__0.Target((CallSite) ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__0, this.MyWorkbook.Worksheets[(object) this.WorksheetIndex]);
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__3 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__3 = CallSite<Func<CallSite, object, Microsoft.Office.Interop.Excel.Range>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (Microsoft.Office.Interop.Excel.Range), typeof (ExcelConnect)));
      }
      // ISSUE: reference to a compiler-generated field
      Func<CallSite, object, Microsoft.Office.Interop.Excel.Range> target1 = ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__3.Target;
      // ISSUE: reference to a compiler-generated field
      CallSite<Func<CallSite, object, Microsoft.Office.Interop.Excel.Range>> p3 = ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__3;
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__2 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__2 = CallSite<Func<CallSite, object, object, object, object>>.Create(Binder.GetIndex(CSharpBinderFlags.None, typeof (ExcelConnect), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[3]
        {
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
        }));
      }
      // ISSUE: reference to a compiler-generated field
      Func<CallSite, object, object, object, object> target2 = ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__2.Target;
      // ISSUE: reference to a compiler-generated field
      CallSite<Func<CallSite, object, object, object, object>> p2 = ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__2;
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__1 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__1 = CallSite<Func<CallSite, _Worksheet, object>>.Create(Binder.GetMember(CSharpBinderFlags.ResultIndexed, "Range", typeof (ExcelConnect), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
        {
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
        }));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      object obj1 = ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__1.Target((CallSite) ExcelConnect.\u003C\u003Eo__21.\u003C\u003Ep__1, worksheet);
      object cell1 = worksheet.Cells[(object) (1 + TheOffset), (object) 1];
      object cell2 = worksheet.Cells[(object) (1 + TheOffset), (object) TheTable.Columns.Count];
      object obj2 = target2((CallSite) p2, obj1, cell1, cell2);
      // ISSUE: variable of a compiler-generated type
      Microsoft.Office.Interop.Excel.Range range = target1((CallSite) p3, obj2);
      range.Font.Bold = (object) true;
      // ISSUE: reference to a compiler-generated method
      worksheet.UsedRange.Columns.AutoFit();
    }

    private string GetExcelColumnName(int columnNumber)
    {
      int num1 = columnNumber;
      string excelColumnName = string.Empty;
      int num2;
      for (; num1 > 0; num1 = (num1 - num2) / 26)
      {
        num2 = (num1 - 1) % 26;
        excelColumnName = Convert.ToChar(65 + num2).ToString() + excelColumnName;
      }
      return excelColumnName;
    }

    public bool AddQ1Q2Q3FormatedTable(DataTable TheTable, string TableName, string format)
    {
      List<int> intList = new List<int>();
      for (int index = 0; index < TheTable.Columns.Count; ++index)
        intList.Add(index);
      if (this.WorksheetIndex > this.MyWorkbook.Worksheets.Count)
        return false;
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__23.\u003C\u003Ep__0 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__23.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, _Worksheet>>.Create(Binder.Convert(CSharpBinderFlags.ConvertExplicit, typeof (_Worksheet), typeof (ExcelConnect)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: variable of a compiler-generated type
      _Worksheet worksheet = ExcelConnect.\u003C\u003Eo__23.\u003C\u003Ep__0.Target((CallSite) ExcelConnect.\u003C\u003Eo__23.\u003C\u003Ep__0, this.MyWorkbook.Worksheets[(object) this.WorksheetIndex]);
      worksheet.Name = TableName;
      for (int index = 0; index < intList.Count; ++index)
        worksheet.Cells[(object) 1, (object) (1 + index)] = (object) TheTable.Columns[intList[index]].ColumnName.ToString();
      object[,] objArray = new object[TheTable.Rows.Count, intList.Count];
      for (int index1 = 0; index1 < TheTable.Rows.Count; ++index1)
      {
        for (int index2 = 0; index2 < intList.Count; ++index2)
          objArray[index1, index2] = TheTable.Rows[index1][intList[index2]];
      }
      // ISSUE: reference to a compiler-generated method
      // ISSUE: variable of a compiler-generated type
      Microsoft.Office.Interop.Excel.Range range = worksheet.get_Range((object) ("A2:" + this.GetExcelColumnName(intList.Count) + (TheTable.Rows.Count + 1).ToString()), Type.Missing);
      // ISSUE: reference to a compiler-generated method
      range.set_Value(Type.Missing, (object) objArray);
      // ISSUE: reference to a compiler-generated method
      worksheet.UsedRange.Columns.AutoFit();
      range.NumberFormat = (object) format;
      return true;
    }

    public bool AddHydraulicFormatedTable(DataTable TheTable)
    {
      List<int> intList = new List<int>();
      for (int index = 0; index < TheTable.Columns.Count; ++index)
        intList.Add(index);
      if (this.WorksheetIndex > this.MyWorkbook.Worksheets.Count)
        return false;
      // ISSUE: reference to a compiler-generated field
      if (ExcelConnect.\u003C\u003Eo__24.\u003C\u003Ep__0 == null)
      {
        // ISSUE: reference to a compiler-generated field
        ExcelConnect.\u003C\u003Eo__24.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, _Worksheet>>.Create(Binder.Convert(CSharpBinderFlags.ConvertExplicit, typeof (_Worksheet), typeof (ExcelConnect)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: variable of a compiler-generated type
      _Worksheet worksheet = ExcelConnect.\u003C\u003Eo__24.\u003C\u003Ep__0.Target((CallSite) ExcelConnect.\u003C\u003Eo__24.\u003C\u003Ep__0, this.MyWorkbook.Worksheets[(object) this.WorksheetIndex]);
      worksheet.Name = "Test results";
      for (int index = 0; index < intList.Count; ++index)
        worksheet.Cells[(object) 1, (object) (1 + index)] = (object) TheTable.Columns[intList[index]].ColumnName.ToString();
      object[,] objArray = new object[TheTable.Rows.Count, intList.Count];
      for (int index1 = 0; index1 < TheTable.Rows.Count; ++index1)
      {
        for (int index2 = 0; index2 < intList.Count; ++index2)
          objArray[index1, index2] = TheTable.Rows[index1][intList[index2]];
      }
      // ISSUE: reference to a compiler-generated method
      // ISSUE: variable of a compiler-generated type
      Microsoft.Office.Interop.Excel.Range range1 = worksheet.get_Range((object) ("A2:" + this.GetExcelColumnName(intList.Count) + (TheTable.Rows.Count + 1).ToString()), Type.Missing);
      // ISSUE: reference to a compiler-generated method
      range1.set_Value(Type.Missing, (object) objArray);
      // ISSUE: reference to a compiler-generated method
      // ISSUE: variable of a compiler-generated type
      Microsoft.Office.Interop.Excel.Range range2 = worksheet.get_Range((object) ("D3:" + this.GetExcelColumnName(intList.Count - 2) + (TheTable.Rows.Count + 1).ToString()), Type.Missing);
      // ISSUE: reference to a compiler-generated method
      worksheet.UsedRange.Columns.AutoFit();
      range2.NumberFormat = (object) "0.00%";
      return true;
    }

    public bool ShowWorkbook()
    {
      this.MyExcel.Visible = true;
      this.MyExcel.UserControl = true;
      this.MyWorkbook = (_Workbook) null;
      this.MyExcel = (_Application) null;
      this.WorksheetIndex = 1;
      return true;
    }
  }
}


--- Filter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Filter
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class Filter
  {
    public int FilterId { get; set; }

    public string Name { get; set; }

    public string Description { get; set; }

    public string DisplayName
    {
      get => string.Format("{0} {1}", (object) this.FilterId, (object) this.Name).Trim();
    }

    public override string ToString() => this.DisplayName;

    public static string Empty => " ";
  }
}


--- FixedFormates.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.FixedFormates
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Globalization;

#nullable disable
namespace ZR_ClassLibrary
{
  public class FixedFormates : IFormatProvider
  {
    public static FixedFormates TheFormates = new FixedFormates();
    public static string CurrentCultureFullDateTimeFormat = CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern + " " + CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern;
    public NumberFormatInfo NumberFormat;
    public DateTimeFormatInfo DateTimeFormat;

    private FixedFormates()
    {
      this.NumberFormat = new NumberFormatInfo();
      this.NumberFormat.CurrencyDecimalSeparator = ".";
      this.DateTimeFormat = new CultureInfo("de-de", false).DateTimeFormat;
      this.DateTimeFormat.FullDateTimePattern = "dd.MM.yyyy HH:mm:ss";
    }

    public object GetFormat(Type argType)
    {
      if (argType == typeof (NumberFormatInfo))
        return (object) this.NumberFormat;
      return argType == typeof (DateTimeFormatInfo) ? (object) this.DateTimeFormat : (object) null;
    }
  }
}


--- FixedTempSetup.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.FixedTempSetup
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum FixedTempSetup
  {
    OFF,
    Flow,
    Return,
  }
}


--- FrameTypes.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.FrameTypes
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum FrameTypes
  {
    None,
    Standard,
    BC,
    Energy,
    Flow,
    InlineRuntime,
    Input1,
    Input1ImpVal,
    Input2,
    Input2ImpVal,
    Power,
    Volume,
    ImpulsValue,
  }
}


--- FullFormates.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.FullFormates
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Globalization;

#nullable disable
namespace ZR_ClassLibrary
{
  public class FullFormates : IFormatProvider
  {
    public static FullFormates TheFormates = new FullFormates();
    public NumberFormatInfo NumberFormat;
    public DateTimeFormatInfo DateTimeFormat;

    private FullFormates()
    {
      this.NumberFormat = new NumberFormatInfo();
      this.DateTimeFormat = CultureInfo.CurrentCulture.DateTimeFormat;
      try
      {
        this.DateTimeFormat.GetAllDateTimePatterns();
        this.DateTimeFormat.FullDateTimePattern = this.DateTimeFormat.ShortDatePattern + " " + this.DateTimeFormat.LongTimePattern;
      }
      catch
      {
      }
    }

    public object GetFormat(Type argType)
    {
      if (argType == typeof (NumberFormatInfo))
        return (object) this.NumberFormat;
      return argType == typeof (DateTimeFormatInfo) ? (object) this.DateTimeFormat : (object) null;
    }
  }
}


--- FunctionFlags.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.FunctionFlags
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum FunctionFlags
  {
    AfterPointFrameOn,
    MaxPowerFrame,
    MaxFlowFrame,
  }
}


--- FunctionPrecompiled.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.FunctionPrecompiled
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  [Serializable]
  public sealed class FunctionPrecompiled
  {
    private const byte DII_CODE_VARIABLE = 5;
    private const byte DII_CODE_EDIT = 2;
    private const byte DII_CODE_CONSTANT = 4;
    private const ushort DII_VARIABLE_FLAG_BYTES = 768;
    private const ushort DII_VARIABLE_FLAG_RUNTIME = 512;
    private const ushort DII_VARIABLE_FLAG_MASK = 1024;
    private const ushort DII_VARIABLE_FLAG_MIN_MAX = 4096;
    private const byte DII_FRAME_SEGS1 = 1;
    private const byte SEGS1_FRAME1 = 8;
    private const byte SEGS1_FRAME2 = 16;
    private const byte SEGS1_FRAME3 = 32;
    public byte[] Codes;

    public int FunctionNumber { get; set; }

    public short RecordOrder { get; set; }

    public FunctionRecordType RecordType { get; set; }

    public string Name { get; set; }

    public int Offset { get; set; }

    public string CodesAsHex { get; set; }

    public int? OffsetOfVariableOrEditFramecode { get; set; }

    public bool? UseVisibleAfterPointFrame { get; set; }

    public FunctionPrecompiled(
      int FunctionNumber,
      short RecordOrder,
      FunctionRecordType RecordType,
      string Name,
      int Offset,
      byte[] Codes)
    {
      this.FunctionNumber = FunctionNumber;
      this.RecordOrder = RecordOrder;
      this.RecordType = RecordType;
      this.Name = Name;
      this.Offset = Offset;
      this.Codes = Codes;
      if (Codes == null || Codes.Length == 0)
        return;
      this.CodesAsHex = BitConverter.ToString(Codes).Replace("-", " ");
      if (RecordType == FunctionRecordType.DisplayCode)
      {
        ushort num1 = (ushort) ((uint) Codes[1] | (uint) Codes[2] << 8);
        if (Codes[0] == (byte) 5)
          this.OffsetOfVariableOrEditFramecode = ((int) num1 & 768) != 512 ? new int?(5) : new int?(3);
        else if (Codes[0] == (byte) 2)
        {
          int num2 = 2;
          int num3 = ((int) num1 & 768) != 512 ? num2 + 3 : num2 + 1;
          if (((uint) num1 & 1024U) > 0U)
            num3 += 9;
          if (((uint) num1 & 4096U) > 0U)
            num3 += 9;
          this.OffsetOfVariableOrEditFramecode = new int?(num3);
        }
        else if (Codes[0] == (byte) 4)
          this.OffsetOfVariableOrEditFramecode = new int?(1);
        int? variableOrEditFramecode = this.OffsetOfVariableOrEditFramecode;
        if (variableOrEditFramecode.HasValue)
        {
          byte[] codes1 = this.Codes;
          variableOrEditFramecode = this.OffsetOfVariableOrEditFramecode;
          int index1 = variableOrEditFramecode.Value;
          if (((uint) codes1[index1] & 1U) > 0U)
          {
            byte[] codes2 = this.Codes;
            variableOrEditFramecode = this.OffsetOfVariableOrEditFramecode;
            int index2 = variableOrEditFramecode.Value + 1;
            this.UseVisibleAfterPointFrame = ((uint) codes2[index2] & 56U) <= 0U ? new bool?(false) : new bool?(true);
          }
        }
      }
    }

    public override string ToString()
    {
      return string.Format("#{0} {1} {2} {3}", (object) this.FunctionNumber, (object) this.RecordOrder, (object) this.Name, (object) this.RecordType);
    }
  }
}


--- FunctionRecordType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.FunctionRecordType
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum FunctionRecordType
  {
    None = -1, // 0xFFFFFFFF
    RuntimeVars = 0,
    DisplayCode = 2,
    ResetRuntimeCode = 3,
    MesurementRuntimeCode = 4,
    CycleRuntimeCode = 5,
    MBusRuntimeCode = 6,
    RuntimeConstants = 7,
    Lable = 8,
    Pointer = 9,
    EnergyFrameCode = 10, // 0x0000000A
    VolumeFrame = 11, // 0x0000000B
    Input1Frame = 12, // 0x0000000C
    Input2Frame = 13, // 0x0000000D
    Input3Frame = 14, // 0x0000000E
    Event_Click = 15, // 0x0000000F
    Event_Press = 16, // 0x00000010
    Event_Hold = 17, // 0x00000011
    Event_Timeout = 18, // 0x00000012
    Event_None = 19, // 0x00000013
    ResourcesRequired = 20, // 0x00000014
    ResourcesSupplied = 21, // 0x00000015
    FlowFrame = 22, // 0x00000016
    PowerFrame = 23, // 0x00000017
    FunctionFlags = 24, // 0x00000018
    BackupRuntimeVars = 25, // 0x00000019
  }
}


--- GlobalDeviceId.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.GlobalDeviceId
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Collections.Generic;
using System.Text;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class GlobalDeviceId
  {
    public ValueIdent.ValueIdPart_MeterType MeterType;
    public string Manufacturer;
    public string Generation;
    public string Serialnumber;
    public int Address = -1;
    public string MeterNumber;
    public string DeviceTypeName;
    public string FirmwareVersion;
    public string DeviceDetails;
    public bool IsRegistered;
    public List<GlobalDeviceId> SubDevices;

    public GlobalDeviceId() => this.SubDevices = new List<GlobalDeviceId>();

    public override string ToString()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(this.Serialnumber);
      stringBuilder.Append(";");
      if (this.Manufacturer != null && this.Manufacturer != "???")
      {
        stringBuilder.Append(this.Manufacturer);
        stringBuilder.Append(";");
      }
      stringBuilder.Append(this.DeviceTypeName);
      if (this.Address >= 0)
      {
        stringBuilder.Append(";");
        stringBuilder.Append(this.Address.ToString());
      }
      return stringBuilder.ToString().Trim(';');
    }
  }
}


--- GMM_Components.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.GMM_Components
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum GMM_Components
  {
    GMM,
    StartWindow,
    KonfigGroup,
    AsyncCom,
    DeviceCollector,
    Designer,
    GMM_Handler,
    MeterReader,
    MeterInstaller,
    MeterData,
    WF_Handler,
    MeterFactory,
    FactoryPrinter,
    MeterProtocol,
    WaterTestbench,
    EnergieTestbench,
    HardwareTest,
    CapsuleTest,
    PDASynchronizer,
    SecondDB,
    MinolHandler,
    Configurator,
    S3_Handler,
    TestComponent,
    MinomatHandler,
    EDC_Handler,
    EDC_Testbench,
    SmokeDetectorHandler,
    PDC_Handler,
    TH_Handler,
  }
}


--- GMM_EventArgs.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.GMM_EventArgs
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.ComponentModel;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class GMM_EventArgs : CancelEventArgs
  {
    public string EventMessage;
    public string InfoText;
    public int InfoNumber;
    public GMM_EventArgs.MessageType TheMessageType;
    public GMM_EventArgs.MessageLevel TheMessageLevel = GMM_EventArgs.MessageLevel.standard;
    public DeviceListStatus deviceListStatus = new DeviceListStatus();

    public int ProgressPercentage { get; set; }

    public GMM_EventArgs(string message)
    {
      this.Cancel = false;
      this.EventMessage = message;
      this.TheMessageType = GMM_EventArgs.MessageType.SimpleMessage;
    }

    public GMM_EventArgs(GMM_EventArgs.MessageType TheMessageType)
    {
      this.Cancel = false;
      this.EventMessage = string.Empty;
      this.InfoNumber = 0;
      this.TheMessageType = TheMessageType;
    }

    public GMM_EventArgs(string EventMessage, int InfoNumber)
    {
      this.Cancel = false;
      this.EventMessage = EventMessage;
      this.InfoNumber = InfoNumber;
      this.TheMessageType = GMM_EventArgs.MessageType.StandardMessage;
    }

    public GMM_EventArgs(string EventMessage, GMM_EventArgs.MessageType TheMessageType)
    {
      this.Cancel = false;
      this.EventMessage = EventMessage;
      this.TheMessageType = TheMessageType;
    }

    public GMM_EventArgs(
      string EventMessage,
      int InfoNumber,
      GMM_EventArgs.MessageType TheMessageType)
    {
      this.Cancel = false;
      this.EventMessage = EventMessage;
      this.InfoNumber = InfoNumber;
      this.TheMessageType = TheMessageType;
    }

    public GMM_EventArgs(
      string EventMessage,
      string EventInfo,
      int InfoNumber,
      GMM_EventArgs.MessageType TheMessageType)
    {
      this.Cancel = false;
      this.EventMessage = EventMessage;
      this.InfoText = EventInfo;
      this.InfoNumber = InfoNumber;
      this.TheMessageType = TheMessageType;
    }

    public GMM_EventArgs(
      string EventMessage,
      int InfoNumber,
      GMM_EventArgs.MessageType TheMessageType,
      GMM_EventArgs.MessageLevel TheMessageLevel)
    {
      this.Cancel = false;
      this.EventMessage = EventMessage;
      this.InfoNumber = InfoNumber;
      this.TheMessageType = TheMessageType;
      this.TheMessageLevel = TheMessageLevel;
    }

    public enum MessageType
    {
      StandardMessage,
      Alive,
      PrimaryAddressMessage,
      ScanAddressMessage,
      EndMessage,
      MinomatErrorMessage,
      MinomatAliveMessage,
      MinomatConnectingMessage,
      KeyReceived,
      StatusError,
      StatusThreadStopped,
      StatusChanged,
      MinoConnectPlugMessage,
      Overload,
      BatteryLow,
      MessageAndProgressPercentage,
      SimpleMessage,
      Wait,
      WalkByPacketReceived,
      TestStepDone,
      LanguageTranslation,
      C5_FirmwareUpdate,
    }

    public enum ConnectionEventParameter
    {
      NotConnected,
      Connected,
    }

    public enum MessageLevel
    {
      standard,
      debug,
      info,
    }
  }
}


--- GMM_Help.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.GMM_Help
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class GMM_Help
  {
    public static GMM_Help TheHelp;
    private Process MyHelpProcess = new Process();
    private string BasicHelpPath;
    private string BasicHelpPathEn;
    private string BasicHelpPathDe;

    public GMM_Help(string Language)
    {
      this.BasicHelpPath = Path.Combine(SystemValues.AppPath, nameof (GMM_Help));
      if (!Directory.Exists(this.BasicHelpPath))
      {
        this.BasicHelpPath = Path.Combine(SystemValues.AppPath, "..\\..\\..\\GMM_Help");
        this.BasicHelpPath = Path.GetFullPath(this.BasicHelpPath);
      }
      this.BasicHelpPathEn = Path.Combine(this.BasicHelpPath, "en");
      this.BasicHelpPathDe = Path.Combine(this.BasicHelpPath, "de");
      this.BasicHelpPath = Path.Combine(this.BasicHelpPath, Language);
    }

    public void ShowHelp(string HelpFilePath)
    {
      string path = Path.Combine(this.BasicHelpPath, HelpFilePath);
      if (!File.Exists(path))
      {
        path = Path.Combine(this.BasicHelpPathEn, HelpFilePath);
        if (!File.Exists(path))
        {
          path = Path.Combine(this.BasicHelpPathDe, HelpFilePath);
          if (!File.Exists(path))
          {
            int num = (int) MessageBox.Show("This help file is not available:\r\n" + path);
            return;
          }
        }
      }
      try
      {
        if (this.MyHelpProcess.StartInfo.FileName.Length != 0)
        {
          try
          {
            Process.GetProcessById(this.MyHelpProcess.Id);
            if (this.MyHelpProcess.StartInfo.FileName == path)
              return;
            this.MyHelpProcess.Kill();
            this.MyHelpProcess.WaitForExit();
          }
          catch
          {
          }
        }
        this.MyHelpProcess.StartInfo.FileName = path;
        this.MyHelpProcess.Start();
        Thread.Sleep(500);
      }
      catch
      {
        int num = (int) MessageBox.Show("Can`t start the HTML viewer");
      }
    }
  }
}


--- GMM_InputBox.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.GMM_InputBox
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using CorporateDesign;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class GMM_InputBox : Form
  {
    private IContainer components = (IContainer) null;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private Panel panel1;
    private Button buttonOk;
    private Button buttonCancel;
    private TextBox textBoxInputText;
    private TextBox textBoxMessage;

    public GMM_InputBox() => this.InitializeComponent();

    public static string GetInput(string ComponentName, string MessageString, string DefaultInput)
    {
      GMM_InputBox gmmInputBox = new GMM_InputBox();
      gmmInputBox.Text = ComponentName;
      gmmInputBox.textBoxMessage.Text = MessageString;
      gmmInputBox.textBoxInputText.Text = DefaultInput;
      return gmmInputBox.ShowDialog() == DialogResult.Cancel ? string.Empty : gmmInputBox.textBoxInputText.Text;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (GMM_InputBox));
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.panel1 = new Panel();
      this.textBoxInputText = new TextBox();
      this.textBoxMessage = new TextBox();
      this.buttonOk = new Button();
      this.buttonCancel = new Button();
      this.panel1.SuspendLayout();
      this.SuspendLayout();
      this.zennerCoroprateDesign1.Dock = DockStyle.Fill;
      this.zennerCoroprateDesign1.Location = new Point(0, 0);
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.zennerCoroprateDesign1.Size = new Size(533, 244);
      this.zennerCoroprateDesign1.TabIndex = 1;
      this.panel1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.panel1.Controls.Add((Control) this.textBoxInputText);
      this.panel1.Controls.Add((Control) this.textBoxMessage);
      this.panel1.Controls.Add((Control) this.buttonOk);
      this.panel1.Controls.Add((Control) this.buttonCancel);
      this.panel1.Location = new Point(12, 41);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(521, 203);
      this.panel1.TabIndex = 2;
      this.textBoxInputText.Location = new Point(13, 130);
      this.textBoxInputText.Multiline = true;
      this.textBoxInputText.Name = "textBoxInputText";
      this.textBoxInputText.Size = new Size(388, 59);
      this.textBoxInputText.TabIndex = 5;
      this.textBoxMessage.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.textBoxMessage.Enabled = false;
      this.textBoxMessage.Location = new Point(12, 12);
      this.textBoxMessage.Multiline = true;
      this.textBoxMessage.Name = "textBoxMessage";
      this.textBoxMessage.Size = new Size(496, 106);
      this.textBoxMessage.TabIndex = 4;
      this.buttonOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonOk.DialogResult = DialogResult.OK;
      this.buttonOk.ImeMode = ImeMode.NoControl;
      this.buttonOk.Location = new Point(429, 167);
      this.buttonOk.Name = "buttonOk";
      this.buttonOk.Size = new Size(80, 23);
      this.buttonOk.TabIndex = 3;
      this.buttonOk.Text = "ok";
      this.buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonCancel.DialogResult = DialogResult.Cancel;
      this.buttonCancel.ImeMode = ImeMode.NoControl;
      this.buttonCancel.Location = new Point(429, 135);
      this.buttonCancel.Name = "buttonCancel";
      this.buttonCancel.Size = new Size(80, 23);
      this.buttonCancel.TabIndex = 2;
      this.buttonCancel.Text = "cancel";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(533, 244);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (GMM_InputBox);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = nameof (GMM_InputBox);
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.ResumeLayout(false);
    }
  }
}


--- GMM_MessageBox.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.GMM_MessageBox
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using CorporateDesign;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class GMM_MessageBox : Form
  {
    private Button button1;
    private TextBox textBoxMessage;
    private Button button2;
    private Label labelError;
    private Button button3;
    private ZennerCoroprateDesign zennerCoroprateDesign2;
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;

    public GMM_MessageBox() => this.InitializeComponent();

    public void ChangeText(string text) => this.textBoxMessage.Text = text;

    private void GMM_MessageBox_Load(object sender, EventArgs e) => this.BringToFront();

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (GMM_MessageBox));
      this.button1 = new Button();
      this.textBoxMessage = new TextBox();
      this.button2 = new Button();
      this.labelError = new Label();
      this.button3 = new Button();
      this.zennerCoroprateDesign2 = new ZennerCoroprateDesign();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.button1, "button1");
      this.button1.Name = "button1";
      componentResourceManager.ApplyResources((object) this.textBoxMessage, "textBoxMessage");
      this.textBoxMessage.BackColor = SystemColors.Control;
      this.textBoxMessage.Name = "textBoxMessage";
      componentResourceManager.ApplyResources((object) this.button2, "button2");
      this.button2.Name = "button2";
      componentResourceManager.ApplyResources((object) this.labelError, "labelError");
      this.labelError.BackColor = Color.Red;
      this.labelError.Name = "labelError";
      componentResourceManager.ApplyResources((object) this.button3, "button3");
      this.button3.Name = "button3";
      componentResourceManager.ApplyResources((object) this.zennerCoroprateDesign2, "zennerCoroprateDesign2");
      this.zennerCoroprateDesign2.Name = "zennerCoroprateDesign2";
      componentResourceManager.ApplyResources((object) this, "$this");
      this.Controls.Add((Control) this.labelError);
      this.Controls.Add((Control) this.textBoxMessage);
      this.Controls.Add((Control) this.button1);
      this.Controls.Add((Control) this.button3);
      this.Controls.Add((Control) this.button2);
      this.Controls.Add((Control) this.zennerCoroprateDesign2);
      this.Name = nameof (GMM_MessageBox);
      this.Load += new System.EventHandler(this.GMM_MessageBox_Load);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    public static DialogResult ShowMessage(
      string ComponentName,
      GMM_MessageBox.StandardMessages TheStandardMessage)
    {
      using (GMM_MessageBox gmmMessageBox = new GMM_MessageBox())
      {
        gmmMessageBox.Text = ComponentName;
        if (TheStandardMessage == GMM_MessageBox.StandardMessages.IgnoreAllChanges)
        {
          gmmMessageBox.textBoxMessage.Text = ZR_ClassLibMessages.ZR_ClassMessage.GetString("IgnoreAllChanges");
          gmmMessageBox.ManageButtons(MessageBoxButtons.YesNo);
        }
        return gmmMessageBox.ShowDialog();
      }
    }

    public static DialogResult ShowMessage(string ComponentName, string MessageString)
    {
      return GMM_MessageBox.ShowMessage(ComponentName, MessageString, MessageBoxButtons.OK, false, (Font) null);
    }

    public static DialogResult ShowMessage(
      string ComponentName,
      string MessageString,
      bool IsError)
    {
      return GMM_MessageBox.ShowMessage(ComponentName, MessageString, MessageBoxButtons.OK, IsError, (Font) null);
    }

    public static DialogResult ShowMessage(
      string ComponentName,
      string MessageString,
      MessageBoxButtons Buttons)
    {
      return GMM_MessageBox.ShowMessage(ComponentName, MessageString, Buttons, false, (Font) null);
    }

    public static DialogResult ShowMessage(
      string ComponentName,
      string MessageString,
      MessageBoxButtons Buttons,
      bool IsError,
      Font TheFont)
    {
      using (GMM_MessageBox gmmMessageBox = new GMM_MessageBox())
      {
        if (TheFont != null)
          gmmMessageBox.Font = TheFont;
        gmmMessageBox.Text = ComponentName;
        gmmMessageBox.textBoxMessage.Text = MessageString;
        gmmMessageBox.ManageButtons(Buttons);
        if (IsError)
          gmmMessageBox.labelError.Visible = true;
        return gmmMessageBox.ShowDialog();
      }
    }

    private void ManageButtons(MessageBoxButtons Buttons)
    {
      switch (Buttons)
      {
        case MessageBoxButtons.OK:
          this.button1.DialogResult = DialogResult.OK;
          break;
        case MessageBoxButtons.OKCancel:
          this.button2.Visible = true;
          this.button1.DialogResult = DialogResult.OK;
          this.button2.DialogResult = DialogResult.Cancel;
          break;
        case MessageBoxButtons.YesNoCancel:
          this.button2.Visible = true;
          this.button3.Visible = true;
          this.button1.DialogResult = DialogResult.Yes;
          this.button2.DialogResult = DialogResult.No;
          this.button3.DialogResult = DialogResult.Cancel;
          this.button1.Text = ZR_ClassLibMessages.ZR_ClassMessage.GetString("Yes");
          this.button2.Text = ZR_ClassLibMessages.ZR_ClassMessage.GetString("No");
          this.button3.Text = ZR_ClassLibMessages.ZR_ClassMessage.GetString("Cancel");
          break;
        case MessageBoxButtons.YesNo:
          this.button2.Visible = true;
          this.button1.DialogResult = DialogResult.Yes;
          this.button2.DialogResult = DialogResult.No;
          this.button1.Text = ZR_ClassLibMessages.ZR_ClassMessage.GetString("Yes");
          this.button2.Text = ZR_ClassLibMessages.ZR_ClassMessage.GetString("No");
          break;
        default:
          throw new ArgumentException("Not supportet button type");
      }
    }

    public enum StandardMessages
    {
      IgnoreAllChanges,
    }
  }
}


--- GMM_User.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.GMM_User
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class GMM_User
  {
    public string UserName;
    public int UserPersonalNumber;
    public string UserRights;
    public string UserKey;
    public string ChangedUserRights;
    public string ChangedUserKey;

    public override string ToString() => this.UserName;
  }
}


--- GMMConfig.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.GMMConfig
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using NLog;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Text;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class GMMConfig
  {
    private static Logger logger = LogManager.GetLogger(nameof (GMMConfig));
    public const string DEFAULT_CONFIG_FILE_NAME = "Defaults.gmm";
    public const string CONFIG_STARTUP_FILE_NAME = "StartUp.gmms";
    private DataSet config;
    private readonly object syncLock = new object();
    private bool DoNotUseStartupFile = false;

    public GMMConfig()
    {
      Type type = typeof (string);
      DataTable table = new DataTable("KonfigTable");
      table.Columns.Add("GroupID", type);
      table.Columns.Add("Namespace", type);
      table.Columns.Add("Variablenname", type);
      table.Columns.Add("Variablenwert", type);
      this.config = new DataSet("KonfigПривет");
      this.config.Tables.Add(table);
      this.StartUpFileName = Path.Combine(SystemValues.DataPath, "StartUp.gmms");
      this.ConfigFileName = Path.Combine(SystemValues.DataPath, "Defaults.gmm");
    }

    public string ConfigFileName { get; set; }

    public string StartUpFileName { get; set; }

    public bool SetOrUpdateValue(string strNamespace, string strVariable, string strInhalt)
    {
      lock (this.syncLock)
      {
        DataTable table = this.config.Tables[0];
        DataRow[] dataRowArray = table.Select("GroupID = '0' and Namespace = '" + strNamespace + "' and Variablenname = '" + strVariable + "'");
        switch (dataRowArray.Length)
        {
          case 0:
            DataRow row = table.NewRow();
            row["GroupID"] = (object) 0;
            row["Namespace"] = (object) strNamespace;
            row["Variablenname"] = (object) strVariable;
            row["Variablenwert"] = (object) strInhalt;
            table.Rows.Add(row);
            table.AcceptChanges();
            return true;
          case 1:
            dataRowArray[0]["Variablenwert"] = (object) strInhalt;
            table.AcceptChanges();
            return true;
          default:
            throw new ArgumentException("Es gibt mehrere Elemente, die die Bedingungen für diese Variable erfüllen");
        }
      }
    }

    public bool RemoveValue(string strNamespace, string strVariable)
    {
      lock (this.syncLock)
      {
        DataTable table = this.config.Tables[0];
        DataRow[] dataRowArray = table.Select("GroupID = '0' and Namespace = '" + strNamespace + "' and Variablenname = '" + strVariable + "'");
        if (dataRowArray.GetLength(0) != 1)
          return false;
        dataRowArray[0].Delete();
        table.AcceptChanges();
        return true;
      }
    }

    public bool RemoveAllVariablesFromNamespace(string strNamespace)
    {
      lock (this.syncLock)
      {
        DataTable table = this.config.Tables[0];
        DataRow[] dataRowArray = table.Select("GroupID = '0' and Namespace = '" + strNamespace + "'");
        if (dataRowArray.Length == 0)
          return false;
        foreach (DataRow dataRow in dataRowArray)
          dataRow.Delete();
        table.AcceptChanges();
        return true;
      }
    }

    public string GetValue(string strNamespace, string strVariable)
    {
      lock (this.syncLock)
      {
        DataRow[] dataRowArray = this.config.Tables[0].Select("GroupID = '0' and Namespace = '" + strNamespace + "' and Variablenname = '" + strVariable + "'");
        return dataRowArray.GetLength(0) == 1 ? dataRowArray[0]["Variablenwert"].ToString() : "";
      }
    }

    public SortedList<string, string> GetValues(string strNamespace)
    {
      lock (this.syncLock)
      {
        DataRow[] dataRowArray = this.config.Tables[0].Select("GroupID = '0' and Namespace = '" + strNamespace + "'");
        if (dataRowArray == null)
          return (SortedList<string, string>) null;
        SortedList<string, string> values = new SortedList<string, string>();
        foreach (DataRow dataRow in dataRowArray)
        {
          string key = dataRow["Variablenname"].ToString();
          string str = dataRow["Variablenwert"].ToString();
          if (!values.ContainsKey(key))
            values.Add(key, str);
        }
        return values;
      }
    }

    public bool ReadConfigFile(string pathToConfigFileName)
    {
      lock (this.syncLock)
      {
        GMMConfig.logger.Info("ReadConfigFile: {0}", pathToConfigFileName);
        try
        {
          this.ConfigFileName = Path.Combine(SystemValues.DataPath, pathToConfigFileName);
          if (!File.Exists(this.ConfigFileName))
            return false;
          this.config.Clear();
          int num = (int) this.config.ReadXml(this.ConfigFileName);
          this.WriteStartFile(this.ConfigFileName);
          return true;
        }
        catch (Exception ex)
        {
          GMMConfig.logger.Error(ex.Message);
          return false;
        }
      }
    }

    public bool ReadConfigForPlugInGmm(string pathToConfigFileName)
    {
      this.DoNotUseStartupFile = true;
      lock (this.syncLock)
      {
        this.ConfigFileName = pathToConfigFileName;
        GMMConfig.logger.Info("ReadConfigFile: " + this.ConfigFileName);
        try
        {
          if (!File.Exists(this.ConfigFileName))
            return false;
          this.config.Clear();
          int num = (int) this.config.ReadXml(this.ConfigFileName);
          this.WriteStartFile(this.ConfigFileName);
          return true;
        }
        catch (Exception ex)
        {
          GMMConfig.logger.Error(ex.Message);
          return false;
        }
      }
    }

    public bool ReadConfigFile() => this.ReadConfigFile(this.ConfigFileName, this.StartUpFileName);

    public bool ReadConfigFile(string configFile, string startFile)
    {
      lock (this.syncLock)
      {
        this.ConfigFileName = configFile;
        this.StartUpFileName = startFile;
        GMMConfig.logger.Info<string, string>("Read ConfigFile: {0}, StartFile: {1}", this.ConfigFileName, this.StartUpFileName);
        try
        {
          if (File.Exists(this.StartUpFileName))
          {
            string path = string.Empty;
            using (StreamReader streamReader = new StreamReader(this.StartUpFileName))
            {
              while (true)
              {
                string str1 = streamReader.ReadLine();
                if (str1 != null)
                {
                  string str2 = str1.Trim();
                  if (str2.Length != 0)
                  {
                    if (str2.StartsWith("#"))
                    {
                      string str3 = str2.Substring(1);
                      if (SystemValues.AppPath == str3)
                        break;
                    }
                    else
                      path = str2;
                  }
                  else
                    break;
                }
                else
                  break;
              }
              streamReader.Close();
            }
            if (path.Length > 0 && File.Exists(path))
              this.ConfigFileName = path;
          }
          else
          {
            string path1 = Path.Combine(SystemValues.DataPath, "Defaults.gmms");
            if (File.Exists(path1))
            {
              string path2 = string.Empty;
              using (StreamReader streamReader = new StreamReader(path1))
              {
                while (true)
                {
                  string str4 = streamReader.ReadLine();
                  if (str4 != null)
                  {
                    string str5 = str4.Trim();
                    if (str5.Length != 0)
                    {
                      if (str5.StartsWith("#"))
                      {
                        string str6 = str5.Substring(1);
                        if (SystemValues.AppPath == str6)
                          break;
                      }
                      else
                        path2 = str5;
                    }
                    else
                      break;
                  }
                  else
                    break;
                }
                streamReader.Close();
              }
              if (path2.Length > 0 && File.Exists(path2))
                this.ConfigFileName = path2;
            }
          }
        }
        catch (Exception ex)
        {
          GMMConfig.logger.Error(ex.Message);
          return false;
        }
        return string.IsNullOrEmpty(this.ConfigFileName) ? this.ReadConfigFile(Path.Combine(SystemValues.DataPath, "Defaults.gmm")) : this.ReadConfigFile(this.ConfigFileName);
      }
    }

    public bool WriteConfigFile()
    {
      lock (this.syncLock)
      {
        try
        {
          if (string.IsNullOrEmpty(this.ConfigFileName))
          {
            this.ConfigFileName = Path.Combine(SystemValues.DataPath, "Defaults.gmm");
            this.WriteStartFile(this.ConfigFileName);
          }
          this.config.WriteXml(this.ConfigFileName);
          return true;
        }
        catch (Exception ex)
        {
          GMMConfig.logger.Error(ex.Message);
          return false;
        }
      }
    }

    public bool WriteConfigFile(string strName)
    {
      lock (this.syncLock)
      {
        try
        {
          this.WriteStartFile(strName);
          this.config.WriteXml(strName, XmlWriteMode.IgnoreSchema);
          this.ConfigFileName = strName;
          return true;
        }
        catch (Exception ex)
        {
          GMMConfig.logger.Error(ex.Message);
          return false;
        }
      }
    }

    public void WriteStartFile(string SetupFileName)
    {
      if (this.DoNotUseStartupFile)
        return;
      this.StartUpFileName = Path.Combine(SystemValues.DataPath, this.StartUpFileName);
      List<string> stringList = new List<string>();
      int num1 = -1;
      try
      {
        if (File.Exists(this.StartUpFileName))
        {
          using (StreamReader streamReader = new StreamReader(this.StartUpFileName))
          {
            int num2 = 0;
            while (true)
            {
              string str1 = streamReader.ReadLine();
              if (str1 != null)
              {
                string str2 = str1.Trim();
                if (str2.Length != 0)
                {
                  stringList.Add(str2);
                  if (str2.StartsWith("#"))
                  {
                    string str3 = str2.Substring(1);
                    if (SystemValues.AppPath == str3)
                      num1 = num2 - 1;
                  }
                  ++num2;
                }
                else
                  break;
              }
              else
                break;
            }
            streamReader.Close();
          }
        }
      }
      catch (Exception ex)
      {
        GMMConfig.logger.Error(ex.Message);
      }
      if (num1 < 0)
        num1 = stringList.Count != 1 ? stringList.Count : 0;
      using (StreamWriter streamWriter = new StreamWriter((Stream) new FileStream(this.StartUpFileName, FileMode.OpenOrCreate, FileAccess.ReadWrite), Encoding.UTF8))
      {
        for (int index = 0; index < stringList.Count || index == num1; ++index)
        {
          if (index == num1)
          {
            streamWriter.WriteLine(SetupFileName);
            streamWriter.WriteLine("#" + SystemValues.AppPath);
            ++index;
          }
          else
            streamWriter.WriteLine(stringList[index]);
        }
        streamWriter.Close();
      }
    }
  }
}


--- GMMImage.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.GMMImage
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using System.Drawing;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class GMMImage
  {
    public int ImageID { get; set; }

    public Image ImageSmall { get; set; }

    public override string ToString()
    {
      return Ot.GetTranslatedLanguageText("ImageID", this.ImageID.ToString());
    }
  }
}


--- GMMSettings.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.GMMSettings
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using NLog;
using System;
using System.Collections.Generic;
using System.Text;
using System.Xml.Serialization;

#nullable disable
namespace ZR_ClassLibrary
{
  [Serializable]
  public class GMMSettings
  {
    private static Logger logger = LogManager.GetLogger(nameof (GMMSettings));

    public GMMSettingsName Name { get; set; }

    public List<string> AsyncComSettingsList { get; set; }

    public List<string> DeviceCollectorSettingsList { get; set; }

    public List<string> ExpectedDevicesList { get; set; }

    public ReadoutType ReadoutType { get; set; }

    public bool IsMBusSettings
    {
      get
      {
        SortedList<ZR_ClassLibrary.DeviceCollectorSettings, object> collectorSettings = this.DeviceCollectorSettings;
        if (collectorSettings == null || !collectorSettings.ContainsKey(ZR_ClassLibrary.DeviceCollectorSettings.BusMode))
          return false;
        BusMode busMode = (BusMode) Enum.Parse(typeof (BusMode), collectorSettings[ZR_ClassLibrary.DeviceCollectorSettings.BusMode].ToString(), true);
        return busMode == BusMode.MBus || busMode == BusMode.MBusPointToPoint;
      }
    }

    public BusMode Mode
    {
      get
      {
        switch (this.Name)
        {
          case GMMSettingsName.None:
            return BusMode.MBus;
          case GMMSettingsName.MinolDevice_IrMinoHead:
          case GMMSettingsName.MinolDevice_IrCombiHeadDoveTailSide_MinoConnect:
            return BusMode.Minol_Device;
          case GMMSettingsName.Radio2_MinoHead:
          case GMMSettingsName.Radio2_MinoConnect:
            return BusMode.Radio2;
          case GMMSettingsName.Radio3_MinoHead:
          case GMMSettingsName.Radio3_MinoConnect:
            return BusMode.Radio3;
          case GMMSettingsName.MinomatV2_IrCombiHeadDoveTailSide_MinoConnect:
          case GMMSettingsName.MinomatV2_IrMinoHead:
            return BusMode.MinomatV2;
          case GMMSettingsName.MinomatV3_IrMinoHead:
          case GMMSettingsName.MinomatV3_IrCombiHeadRoundSide_MinoConnect:
            return BusMode.MinomatV3;
          case GMMSettingsName.MinomatV4_IrMinoHead:
          case GMMSettingsName.MinomatV4_IrCombiHeadDoveTailSide_MinoConnect:
            return BusMode.MinomatV4;
          case GMMSettingsName.RelayDevice_MinoConnect:
            return BusMode.RelayDevice;
          case GMMSettingsName.MBusP2P_IrCombiHeadRoundSide_ZVEI_Break_MinoConnect:
          case GMMSettingsName.MBusP2P_IrCombiHeadRoundSide_ZVEI_MinoConnect:
          case GMMSettingsName.MBusP2P_IrCombiHeadRoundSide_IrDa_MinoConnect:
          case GMMSettingsName.MBusP2P_IrCombiHeadRoundSide_IrDa_MinoConnect_EDC:
            return BusMode.MBusPointToPoint;
          case GMMSettingsName.Wavenis:
            return BusMode.WaveFlowRadio;
          case GMMSettingsName.WirelessMBusModeS1_MinoConnect:
            return BusMode.wMBusS1;
          case GMMSettingsName.WirelessMBusModeC1A_MinoConnect:
            return BusMode.wMBusC1A;
          case GMMSettingsName.WirelessMBusModeC1B_MinoConnect:
            return BusMode.wMBusC1B;
          case GMMSettingsName.WirelessMBusModeS1M_MinoConnect:
            return BusMode.wMBusS1M;
          case GMMSettingsName.WirelessMBusModeS2_MinoConnect:
            return BusMode.wMBusS2;
          case GMMSettingsName.WirelessMBusModeT1_MinoConnect:
            return BusMode.wMBusT1;
          case GMMSettingsName.WirelessMBusModeT2_meter_MinoConnect:
            return BusMode.wMBusT2_meter;
          case GMMSettingsName.WirelessMBusModeT2_other_MinoConnect:
            return BusMode.wMBusT2_other;
          case GMMSettingsName.Radio3_868_95_RUSSIA_MinoConnect:
            return BusMode.Radio3_868_95_RUSSIA;
          case GMMSettingsName.ModeMinomatRadioTest_MinoConnect:
            return BusMode.MinomatRadioTest;
          case GMMSettingsName.ModeRadioMS_MinoConnect:
            return BusMode.RadioMS;
          case GMMSettingsName.SmokeDetector_IrCombiHeadDoveTailSide_MinoConnect:
            return BusMode.SmokeDetector;
          default:
            throw new ArgumentException("Not supported bus mode: " + this.Name.ToString());
        }
      }
    }

    public TransceiverDevice Transceiver
    {
      get
      {
        switch (this.Name)
        {
          case GMMSettingsName.None:
          case GMMSettingsName.MBus_MeterVPN:
            return TransceiverDevice.None;
          case GMMSettingsName.MinolDevice_IrMinoHead:
          case GMMSettingsName.Radio2_MinoHead:
          case GMMSettingsName.Radio3_MinoHead:
          case GMMSettingsName.MinomatV2_IrMinoHead:
          case GMMSettingsName.MinomatV3_IrMinoHead:
          case GMMSettingsName.MinomatV4_IrMinoHead:
            return TransceiverDevice.MinoHead;
          case GMMSettingsName.Radio2_MinoConnect:
          case GMMSettingsName.Radio3_MinoConnect:
          case GMMSettingsName.MinolDevice_IrCombiHeadDoveTailSide_MinoConnect:
          case GMMSettingsName.MinomatV2_IrCombiHeadDoveTailSide_MinoConnect:
          case GMMSettingsName.MinomatV3_IrCombiHeadRoundSide_MinoConnect:
          case GMMSettingsName.MinomatV4_IrCombiHeadDoveTailSide_MinoConnect:
          case GMMSettingsName.RelayDevice_MinoConnect:
          case GMMSettingsName.MBusP2P_IrCombiHeadRoundSide_ZVEI_Break_MinoConnect:
          case GMMSettingsName.MBusP2P_IrCombiHeadRoundSide_ZVEI_MinoConnect:
          case GMMSettingsName.MBusP2P_IrCombiHeadRoundSide_IrDa_MinoConnect:
          case GMMSettingsName.MBusP2P_IrCombiHeadRoundSide_IrDa_MinoConnect_EDC:
          case GMMSettingsName.WirelessMBusModeS1_MinoConnect:
          case GMMSettingsName.WirelessMBusModeC1A_MinoConnect:
          case GMMSettingsName.WirelessMBusModeC1B_MinoConnect:
          case GMMSettingsName.WirelessMBusModeS1M_MinoConnect:
          case GMMSettingsName.WirelessMBusModeS2_MinoConnect:
          case GMMSettingsName.WirelessMBusModeT1_MinoConnect:
          case GMMSettingsName.WirelessMBusModeT2_meter_MinoConnect:
          case GMMSettingsName.WirelessMBusModeT2_other_MinoConnect:
          case GMMSettingsName.Radio3_868_95_RUSSIA_MinoConnect:
          case GMMSettingsName.ModeMinomatRadioTest_MinoConnect:
          case GMMSettingsName.ModeRadioMS_MinoConnect:
          case GMMSettingsName.SmokeDetector_IrCombiHeadDoveTailSide_MinoConnect:
            return TransceiverDevice.MinoConnect;
          case GMMSettingsName.Wavenis:
            return TransceiverDevice.Wavenis;
          default:
            throw new ArgumentException("Unknown Transceiver type. Value: " + this.Name.ToString());
        }
      }
    }

    public GMMSettings()
    {
      this.AsyncComSettingsList = new List<string>();
      this.DeviceCollectorSettingsList = new List<string>();
      this.ExpectedDevicesList = new List<string>();
      this.Name = GMMSettingsName.None;
    }

    public GMMSettings(string settings)
      : this()
    {
      Dictionary<string, string> parametersAsList = ParameterService.GetAllParametersAsList(settings, ';');
      List<string> stringList1 = new List<string>((IEnumerable<string>) Util.GetNamesOfEnum(typeof (ZR_ClassLibrary.DeviceCollectorSettings)));
      List<string> stringList2 = new List<string>((IEnumerable<string>) Util.GetNamesOfEnum(typeof (ZR_ClassLibrary.AsyncComSettings)));
      foreach (KeyValuePair<string, string> keyValuePair in parametersAsList)
      {
        if (stringList1.Contains(keyValuePair.Key))
          this.DeviceCollectorSettingsList.Add(keyValuePair.Key + "=" + keyValuePair.Value);
        if (stringList2.Contains(keyValuePair.Key))
          this.AsyncComSettingsList.Add(keyValuePair.Key + "=" + keyValuePair.Value);
      }
    }

    public GMMSettings(
      SortedList<string, string> asyncComSettings,
      SortedList<ZR_ClassLibrary.DeviceCollectorSettings, object> deviceCollectorSettings)
      : this()
    {
      this.SetAsyncComSettings(asyncComSettings);
      this.SetDeviceCollectorSettings(deviceCollectorSettings);
    }

    public static GMMSettings Default_MinolDevice_IrCombiHeadDoveTailSide_MinoConnect
    {
      get
      {
        GMMSettings tailSideMinoConnect = new GMMSettings();
        tailSideMinoConnect.Name = GMMSettingsName.MinolDevice_IrCombiHeadDoveTailSide_MinoConnect;
        tailSideMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=0;ForceMinoConnectState=IrCombiHead;IrDaSelection=DoveTailSide;Parity=even;Port=COM1;MinoConnectPowerOffTime=3600;RecTime_BeforFirstByte=500;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=0;RecTransTime=10;TestEcho=False;EchoOn=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=200;TransTime_BreakTime=0;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=100;Wakeup=None;MinoConnectIrDaPulseTime=55;RecTime_OffsetPerBlock=50".Split(';'));
        tailSideMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=Minol_Device;FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=3;".Split(';'));
        return tailSideMinoConnect;
      }
    }

    public static GMMSettings Default_MinomatV2_IrCombiHeadDoveTailSide_MinoConnect
    {
      get
      {
        GMMSettings tailSideMinoConnect = new GMMSettings();
        tailSideMinoConnect.Name = GMMSettingsName.MinomatV2_IrCombiHeadDoveTailSide_MinoConnect;
        tailSideMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=38400;BreakIntervalTime=1500;EchoOn=False;ForceMinoConnectState=IrCombiHead;HardwareHandshake=True;IrDaSelection=DoveTailSide;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=2000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=600;TransTime_BreakTime=1400;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=100;Wakeup=None;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=150".Split(';'));
        tailSideMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=MinomatV2;FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;DaKonId=48000066;MaxRequestRepeat=3;".Split(';'));
        return tailSideMinoConnect;
      }
    }

    public static GMMSettings Default_MinomatV4_IrCombiHeadDoveTailSide_MinoConnect
    {
      get
      {
        GMMSettings tailSideMinoConnect = new GMMSettings();
        tailSideMinoConnect.Name = GMMSettingsName.MinomatV4_IrCombiHeadDoveTailSide_MinoConnect;
        tailSideMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=38400;BreakIntervalTime=0;EchoOn=False;ForceMinoConnectState=IrCombiHead;HardwareHandshake=True;IrDaSelection=DoveTailSide;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=2000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=0;RecTransTime=0;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=0;TransTime_BreakTime=0;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=0;Wakeup=None;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=500;".Split(';'));
        tailSideMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=MinomatV4;FromTime=2011-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=4;".Split(';'));
        return tailSideMinoConnect;
      }
    }

    public static GMMSettings Default_MinomatV3_IrCombiHeadRoundSide_MinoConnect
    {
      get
      {
        GMMSettings roundSideMinoConnect = new GMMSettings();
        roundSideMinoConnect.Name = GMMSettingsName.MinomatV3_IrCombiHeadRoundSide_MinoConnect;
        roundSideMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=38400;BreakIntervalTime=0;BusMode=MinomatV3;EchoOn=False;ForceMinoConnectState=IrCombiHead;HardwareHandshake=True;IrDaSelection=RoundSide;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=2000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=0;RecTransTime=0;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=0;TransTime_BreakTime=0;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=0;Wakeup=None;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=500".Split(';'));
        roundSideMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=MinomatV3;FromTime=2011-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=4;".Split(';'));
        return roundSideMinoConnect;
      }
    }

    public static GMMSettings Default_MinomatV2_IrMinoHead
    {
      get
      {
        GMMSettings minomatV2IrMinoHead = new GMMSettings();
        minomatV2IrMinoHead.Name = GMMSettingsName.MinomatV2_IrMinoHead;
        minomatV2IrMinoHead.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=38400;BreakIntervalTime=10000;EchoOn=False;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=2000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoHead;TransTime_AfterBreak=600;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=150".Split(';'));
        minomatV2IrMinoHead.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=MinomatV2;FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;DaKonId=48000066;MaxRequestRepeat=3;".Split(';'));
        return minomatV2IrMinoHead;
      }
    }

    public static GMMSettings Default_MinomatV3_IrMinoHead
    {
      get
      {
        GMMSettings minomatV3IrMinoHead = new GMMSettings();
        minomatV3IrMinoHead.Name = GMMSettingsName.MinomatV3_IrMinoHead;
        minomatV3IrMinoHead.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=38400;BreakIntervalTime=0;EchoOn=False;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=2000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoHead;TransTime_AfterBreak=600;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=None;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=500".Split(';'));
        minomatV3IrMinoHead.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=MinomatV3;FromTime=2011-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=4;".Split(';'));
        return minomatV3IrMinoHead;
      }
    }

    public static GMMSettings Default_MinomatV4_IrMinoHead
    {
      get
      {
        GMMSettings minomatV4IrMinoHead = new GMMSettings();
        minomatV4IrMinoHead.Name = GMMSettingsName.MinomatV4_IrMinoHead;
        minomatV4IrMinoHead.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=38400;BreakIntervalTime=0;EchoOn=False;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=2000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoHead;TransTime_AfterBreak=600;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=None;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=500".Split(';'));
        minomatV4IrMinoHead.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=MinomatV4;FromTime=2011-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=4;".Split(';'));
        return minomatV4IrMinoHead;
      }
    }

    public static GMMSettings Default_RelayDevice_MinoConnect
    {
      get
      {
        GMMSettings deviceMinoConnect = new GMMSettings();
        deviceMinoConnect.Name = GMMSettingsName.RelayDevice_MinoConnect;
        deviceMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=8000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=False;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=1000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=20;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=300;TransTime_BreakTime=800;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=600;Wakeup=None;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=150".Split(';'));
        deviceMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=RelayDevice;FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=2;".Split(';'));
        return deviceMinoConnect;
      }
    }

    public static GMMSettings Default_Radio2_MinoHead
    {
      get
      {
        GMMSettings defaultRadio2MinoHead = new GMMSettings();
        defaultRadio2MinoHead.Name = GMMSettingsName.Radio2_MinoHead;
        defaultRadio2MinoHead.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=38400;BreakIntervalTime=0;EchoOn=False;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoHead;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        defaultRadio2MinoHead.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.Radio2.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return defaultRadio2MinoHead;
      }
    }

    public static GMMSettings Default_Radio3_MinoHead
    {
      get
      {
        GMMSettings defaultRadio3MinoHead = new GMMSettings();
        defaultRadio3MinoHead.Name = GMMSettingsName.Radio3_MinoHead;
        defaultRadio3MinoHead.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=38400;BreakIntervalTime=0;EchoOn=False;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoHead;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        defaultRadio3MinoHead.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.Radio3.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return defaultRadio3MinoHead;
      }
    }

    public static GMMSettings Default_MinolDevice_IrMinoHead
    {
      get
      {
        GMMSettings deviceIrMinoHead = new GMMSettings();
        deviceIrMinoHead.Name = GMMSettingsName.MinolDevice_IrMinoHead;
        deviceIrMinoHead.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=38400;BreakIntervalTime=10000;EchoOn=False;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=3100;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoHead;TransTime_AfterBreak=400;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=400;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=50".Split(';'));
        deviceIrMinoHead.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=Minol_Device;FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=3;".Split(';'));
        return deviceIrMinoHead;
      }
    }

    public static GMMSettings Default_Radio2_MinoConnect
    {
      get
      {
        GMMSettings radio2MinoConnect = new GMMSettings();
        radio2MinoConnect.Name = GMMSettingsName.Radio2_MinoConnect;
        radio2MinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        radio2MinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.Radio2.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return radio2MinoConnect;
      }
    }

    public static GMMSettings Default_Radio3_MinoConnect
    {
      get
      {
        GMMSettings radio3MinoConnect = new GMMSettings();
        radio3MinoConnect.Name = GMMSettingsName.Radio3_MinoConnect;
        radio3MinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        radio3MinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.Radio3.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return radio3MinoConnect;
      }
    }

    public static GMMSettings Default_Radio3_868_95_RUSSIA_MinoConnect
    {
      get
      {
        GMMSettings russiaMinoConnect = new GMMSettings();
        russiaMinoConnect.Name = GMMSettingsName.Radio3_868_95_RUSSIA_MinoConnect;
        russiaMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        russiaMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.Radio3_868_95_RUSSIA.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return russiaMinoConnect;
      }
    }

    public static GMMSettings Default_MBusP2P_IrCombiHeadRoundSide_ZVEI_Break_MinoConnect
    {
      get
      {
        GMMSettings breakMinoConnect = new GMMSettings();
        breakMinoConnect.Name = GMMSettingsName.MBusP2P_IrCombiHeadRoundSide_ZVEI_Break_MinoConnect;
        breakMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Type=COM;Baudrate=2400;COMserver=-;Port=COM1;Parity=even;EchoOn=False;TestEcho=True;RecTime_BeforFirstByte=3000;RecTime_OffsetPerByte=0;RecTime_GlobalOffset=0;TransTime_GlobalOffset=0;RecTransTime=10;TransTime_BreakTime=700;TransTime_AfterBreak=200;WaitBeforeRepeatTime=200;BreakIntervalTime=10000;MinoConnectPowerOffTime=3600;Wakeup=Break;TransceiverDevice=MinoConnect;ForceMinoConnectState=IrCombiHead;IrDaSelection=None;HardwareHandshake=True;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=150;MinoConnectBaseState=IrCombiHead".Split(';'));
        breakMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=MBusPointToPoint;SelectedDeviceMBusType=MBus;FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=3;".Split(';'));
        return breakMinoConnect;
      }
    }

    public static GMMSettings Default_MBusP2P_IrCombiHeadRoundSide_ZVEI_MinoConnect
    {
      get
      {
        GMMSettings sideZveiMinoConnect = new GMMSettings();
        sideZveiMinoConnect.Name = GMMSettingsName.MBusP2P_IrCombiHeadRoundSide_ZVEI_MinoConnect;
        sideZveiMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Type=COM;Baudrate=2400;COMserver=-;Port=COM1;Parity=even;EchoOn=False;TestEcho=False;RecTime_BeforFirstByte=1600;RecTime_OffsetPerByte=0;RecTime_GlobalOffset=0;TransTime_GlobalOffset=0;RecTransTime=10;TransTime_BreakTime=700;TransTime_AfterBreak=200;WaitBeforeRepeatTime=200;BreakIntervalTime=10000;MinoConnectPowerOffTime=3600;Wakeup=None;TransceiverDevice=MinoConnect;ForceMinoConnectState=IrCombiHead;IrDaSelection=None;HardwareHandshake=True;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=150;MinoConnectBaseState=IrCombiHead".Split(';'));
        sideZveiMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=MBusPointToPoint;SelectedDeviceMBusType=ZR_Serie2;FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=2;".Split(';'));
        return sideZveiMinoConnect;
      }
    }

    public static GMMSettings Default_MBusP2P_IrCombiHeadRoundSide_IrDa_MinoConnect
    {
      get
      {
        GMMSettings sideIrDaMinoConnect = new GMMSettings();
        sideIrDaMinoConnect.Name = GMMSettingsName.MBusP2P_IrCombiHeadRoundSide_IrDa_MinoConnect;
        sideIrDaMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Type=COM;Baudrate=115200;COMserver=-;Port=COM1;Parity=even;EchoOn=False;TestEcho=False;RecTime_BeforFirstByte=500;RecTime_OffsetPerByte=0;RecTime_GlobalOffset=0;TransTime_GlobalOffset=0;RecTransTime=10;TransTime_BreakTime=700;TransTime_AfterBreak=200;WaitBeforeRepeatTime=200;BreakIntervalTime=10000;MinoConnectPowerOffTime=3600;Wakeup=BaudrateCarrier;TransceiverDevice=MinoConnect;ForceMinoConnectState=IrCombiHead;IrDaSelection=RoundSide;HardwareHandshake=True;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=150;MinoConnectBaseState=IrCombiHead".Split(';'));
        sideIrDaMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=MBusPointToPoint;SelectedDeviceMBusType=ZR_Serie3;IsMultiTelegrammEnabled=True;SendFirstSND_NKE=True;FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=3;".Split(';'));
        return sideIrDaMinoConnect;
      }
    }

    public static GMMSettings Default_MBus_MeterVPN
    {
      get
      {
        GMMSettings defaultMbusMeterVpn = new GMMSettings();
        defaultMbusMeterVpn.Name = GMMSettingsName.MBus_MeterVPN;
        defaultMbusMeterVpn.AsyncComSettingsList.AddRange((IEnumerable<string>) "Type=Remote_VPN;Baudrate=2400;COMserver=;Port=COM1;Parity=even;EchoOn=False;TestEcho=True;RecTime_BeforFirstByte=2600;RecTime_OffsetPerByte=0;RecTime_GlobalOffset=0;TransTime_GlobalOffset=0;RecTransTime=10;TransTime_BreakTime=700;TransTime_AfterBreak=5000;WaitBeforeRepeatTime=400;BreakIntervalTime=10000;MinoConnectPowerOffTime=1000;Wakeup=None;TransceiverDevice=None;ForceMinoConnectState=;IrDaSelection=None;HardwareHandshake=False;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=1700;MinoConnectBaseState=off".Split(';'));
        defaultMbusMeterVpn.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=MBus;FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;DaKonId=;Password=;MaxRequestRepeat=2;ScanStartAddress=0;ScanStartSerialnumber=fffffff0;OrganizeStartAddress=1;CycleTime=5;OnlySecondaryAddressing=False;FastSecondaryAddressing=True;KeepExistingDestinationAddress=False;ChangeInterfaceBaudrateToo=False;UseExternalKeyForReading=True;BeepSignalOnReadResult=False;LogToFileEnabled=False;LogFilePath=".Split(';'));
        return defaultMbusMeterVpn;
      }
    }

    public static GMMSettings Default_Wavenis
    {
      get
      {
        GMMSettings defaultWavenis = new GMMSettings();
        defaultWavenis.Name = GMMSettingsName.Wavenis;
        defaultWavenis.AsyncComSettingsList.AddRange((IEnumerable<string>) "Type=COM;Baudrate=2400;COMserver=-;Port=COM1;Parity=even;EchoOn=False;TestEcho=False;RecTime_BeforFirstByte=1000;RecTime_OffsetPerByte=10;RecTime_GlobalOffset=0;TransTime_GlobalOffset=0;RecTransTime=10;TransTime_BreakTime=700;TransTime_AfterBreak=200;WaitBeforeRepeatTime=500;BreakIntervalTime=10000;MinoConnectPowerOffTime=300;Wakeup=None;TransceiverDevice=Wavenis;ForceMinoConnectState=;IrDaSelection=None;HardwareHandshake=False;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=70;MinoConnectBaseState=IrCombiHead".Split(';'));
        defaultWavenis.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=WaveFlowRadio;DaKonId=;FromTime=01.01.2000 01:01:01;ToTime=01.01.2030 01:01:01;Password=;MaxRequestRepeat=2;ScanStartAddress=0;ScanStartSerialnumber=fffffff0;OrganizeStartAddress=1;CycleTime=5;OnlySecondaryAddressing=False;FastSecondaryAddressing=True;KeepExistingDestinationAddress=False;ChangeInterfaceBaudrateToo=False;UseExternalKeyForReading=True;BeepSignalOnReadResult=False;LogToFileEnabled=False;LogFilePath=".Split(';'));
        return defaultWavenis;
      }
    }

    public static GMMSettings Default_MBus
    {
      get
      {
        GMMSettings defaultMbus = new GMMSettings();
        defaultMbus.Name = GMMSettingsName.MBus;
        defaultMbus.AsyncComSettingsList.AddRange((IEnumerable<string>) "Type=COM;Baudrate=2400;Port=COM1;Parity=even;EchoOn=False;TestEcho=False;RecTime_BeforFirstByte=2000;RecTime_OffsetPerByte=0;RecTime_GlobalOffset=0;TransTime_GlobalOffset=0;RecTransTime=10;TransTime_BreakTime=700;TransTime_AfterBreak=1000;WaitBeforeRepeatTime=400;BreakIntervalTime=1000;MinoConnectPowerOffTime=1000;Wakeup=None;TransceiverDevice=None;ForceMinoConnectState=;IrDaSelection=None;HardwareHandshake=False;RecTime_OffsetPerBlock=100;".Split(';'));
        defaultMbus.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=MBus;FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=2;ScanStartAddress=0;ScanStartSerialnumber=fffffff0;OrganizeStartAddress=1;CycleTime=5;OnlySecondaryAddressing=False;FastSecondaryAddressing=True;KeepExistingDestinationAddress=False;ChangeInterfaceBaudrateToo=False;UseExternalKeyForReading=True;BeepSignalOnReadResult=False;LogToFileEnabled=False".Split(';'));
        return defaultMbus;
      }
    }

    public static GMMSettings Default_WirelessMBusModeS1_MinoConnect
    {
      get
      {
        GMMSettings modeS1MinoConnect = new GMMSettings();
        modeS1MinoConnect.Name = GMMSettingsName.WirelessMBusModeS1_MinoConnect;
        modeS1MinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        modeS1MinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.wMBusS1.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return modeS1MinoConnect;
      }
    }

    public static GMMSettings Default_WirelessMBusModeC1A_MinoConnect
    {
      get
      {
        GMMSettings modeC1AMinoConnect = new GMMSettings();
        modeC1AMinoConnect.Name = GMMSettingsName.WirelessMBusModeC1A_MinoConnect;
        modeC1AMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        modeC1AMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.wMBusC1A.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return modeC1AMinoConnect;
      }
    }

    public static GMMSettings Default_WirelessMBusModeC1B_MinoConnect
    {
      get
      {
        GMMSettings modeC1BMinoConnect = new GMMSettings();
        modeC1BMinoConnect.Name = GMMSettingsName.WirelessMBusModeC1B_MinoConnect;
        modeC1BMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        modeC1BMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.wMBusC1B.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return modeC1BMinoConnect;
      }
    }

    public static GMMSettings Default_WirelessMBusModeS1M_MinoConnect
    {
      get
      {
        GMMSettings modeS1MMinoConnect = new GMMSettings();
        modeS1MMinoConnect.Name = GMMSettingsName.WirelessMBusModeS1M_MinoConnect;
        modeS1MMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        modeS1MMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.wMBusS1M.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return modeS1MMinoConnect;
      }
    }

    public static GMMSettings Default_WirelessMBusModeS2_MinoConnect
    {
      get
      {
        GMMSettings modeS2MinoConnect = new GMMSettings();
        modeS2MinoConnect.Name = GMMSettingsName.WirelessMBusModeS2_MinoConnect;
        modeS2MinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        modeS2MinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.wMBusS2.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return modeS2MinoConnect;
      }
    }

    public static GMMSettings Default_WirelessMBusModeT1_MinoConnect
    {
      get
      {
        GMMSettings modeT1MinoConnect = new GMMSettings();
        modeT1MinoConnect.Name = GMMSettingsName.WirelessMBusModeT1_MinoConnect;
        modeT1MinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        modeT1MinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.wMBusT1.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return modeT1MinoConnect;
      }
    }

    public static GMMSettings Default_WirelessMBusModeT2_meter_MinoConnect
    {
      get
      {
        GMMSettings meterMinoConnect = new GMMSettings();
        meterMinoConnect.Name = GMMSettingsName.WirelessMBusModeT2_meter_MinoConnect;
        meterMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        meterMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.wMBusT2_meter.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return meterMinoConnect;
      }
    }

    public static GMMSettings Default_WirelessMBusModeT2_other_MinoConnect
    {
      get
      {
        GMMSettings otherMinoConnect = new GMMSettings();
        otherMinoConnect.Name = GMMSettingsName.WirelessMBusModeT2_other_MinoConnect;
        otherMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        otherMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.wMBusT2_other.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return otherMinoConnect;
      }
    }

    public static GMMSettings Default_ModeRadioMS_MinoConnect
    {
      get
      {
        GMMSettings radioMsMinoConnect = new GMMSettings();
        radioMsMinoConnect.Name = GMMSettingsName.ModeRadioMS_MinoConnect;
        radioMsMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        radioMsMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.RadioMS.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;").Split(';'));
        return radioMsMinoConnect;
      }
    }

    public static GMMSettings Default_ModeMinomatRadioTest_MinoConnect
    {
      get
      {
        GMMSettings radioTestMinoConnect = new GMMSettings();
        radioTestMinoConnect.Name = GMMSettingsName.ModeMinomatRadioTest_MinoConnect;
        radioTestMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;EchoOn=False;ForceMinoConnectState=RS232;HardwareHandshake=false;IrDaSelection=None;MinoConnectPowerOffTime=3600;Parity=no;Port=COM1;RecTime_BeforFirstByte=4000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=10;RecTransTime=10;TestEcho=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=1000;TransTime_BreakTime=700;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=500;Wakeup=MinoHead;MinoConnectIrDaPulseTime=0".Split(';'));
        radioTestMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) ("BusMode=" + BusMode.MinomatRadioTest.ToString() + ";FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;DaKonId=250;").Split(';'));
        return radioTestMinoConnect;
      }
    }

    public static GMMSettings Default_MBusP2P_IrCombiHeadRoundSide_IrDa_MinoConnect_EDC
    {
      get
      {
        GMMSettings daMinoConnectEdc = new GMMSettings();
        daMinoConnectEdc.Name = GMMSettingsName.MBusP2P_IrCombiHeadRoundSide_IrDa_MinoConnect_EDC;
        daMinoConnectEdc.AsyncComSettingsList.AddRange((IEnumerable<string>) "Type=COM;Baudrate=9600;COMserver=-;Port=COM1;Parity=even;EchoOn=False;TestEcho=False;RecTime_BeforFirstByte=1000;RecTime_OffsetPerByte=0;RecTime_GlobalOffset=0;TransTime_GlobalOffset=0;RecTransTime=30;TransTime_BreakTime=2592;TransTime_AfterBreak=50;WaitBeforeRepeatTime=200;BreakIntervalTime=10000;MinoConnectPowerOffTime=3600;Wakeup=BaudrateCarrier;TransceiverDevice=MinoConnect;ForceMinoConnectState=IrCombiHead;IrDaSelection=RoundSide;HardwareHandshake=False;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=50;MinoConnectBaseState=IrCombiHead".Split(';'));
        daMinoConnectEdc.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=MBusPointToPoint;SelectedDeviceMBusType=EDC;FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=3;".Split(';'));
        return daMinoConnectEdc;
      }
    }

    public static GMMSettings Default_SmokeDetector_IrCombiHeadDoveTailSide_MinoConnect
    {
      get
      {
        GMMSettings tailSideMinoConnect = new GMMSettings();
        tailSideMinoConnect.Name = GMMSettingsName.SmokeDetector_IrCombiHeadDoveTailSide_MinoConnect;
        tailSideMinoConnect.AsyncComSettingsList.AddRange((IEnumerable<string>) "Baudrate=9600;BreakIntervalTime=10000;ForceMinoConnectState=IrCombiHead;IrDaSelection=DoveTailSide;Parity=even;Port=COM1;MinoConnectPowerOffTime=3600;RecTime_BeforFirstByte=1000;RecTime_GlobalOffset=0;RecTime_OffsetPerByte=0;RecTransTime=0;TestEcho=False;EchoOn=False;TransceiverDevice=MinoConnect;TransTime_AfterBreak=32;TransTime_BreakTime=2000;TransTime_GlobalOffset=0;Type=COM;WaitBeforeRepeatTime=0;Wakeup=BaudrateCarrier;MinoConnectIrDaPulseTime=0;RecTime_OffsetPerBlock=0;".Split(';'));
        tailSideMinoConnect.DeviceCollectorSettingsList.AddRange((IEnumerable<string>) "BusMode=SmokeDetector;FromTime=2008-01-01T01:01:01;ToTime=2030-01-01T01:01:01;MaxRequestRepeat=2;".Split(';'));
        return tailSideMinoConnect;
      }
    }

    public override string ToString() => this.Name.ToString();

    [XmlIgnore]
    public SortedList<ZR_ClassLibrary.AsyncComSettings, object> AsyncComSettings
    {
      get
      {
        SortedList<ZR_ClassLibrary.AsyncComSettings, object> asyncComSettings = new SortedList<ZR_ClassLibrary.AsyncComSettings, object>();
        SortedList<string, string> sortedList = GMMSettings.SplitSettings(this.AsyncComSettingsList);
        if (sortedList != null)
        {
          foreach (KeyValuePair<string, string> keyValuePair in sortedList)
          {
            if (Enum.IsDefined(typeof (ZR_ClassLibrary.AsyncComSettings), (object) keyValuePair.Key))
            {
              ZR_ClassLibrary.AsyncComSettings key = (ZR_ClassLibrary.AsyncComSettings) Enum.Parse(typeof (ZR_ClassLibrary.AsyncComSettings), keyValuePair.Key, true);
              string str = keyValuePair.Value;
              asyncComSettings.Add(key, (object) str);
            }
          }
        }
        return asyncComSettings;
      }
    }

    [XmlIgnore]
    public SortedList<string, string> AsyncComSettings_string_string
    {
      get
      {
        SortedList<string, string> settingsStringString = new SortedList<string, string>();
        SortedList<string, string> sortedList = GMMSettings.SplitSettings(this.AsyncComSettingsList);
        if (sortedList != null)
        {
          foreach (KeyValuePair<string, string> keyValuePair in sortedList)
          {
            if (Enum.IsDefined(typeof (ZR_ClassLibrary.AsyncComSettings), (object) keyValuePair.Key))
            {
              string key = keyValuePair.Key;
              string str = keyValuePair.Value;
              settingsStringString.Add(key, str);
            }
          }
        }
        return settingsStringString;
      }
    }

    [XmlIgnore]
    public SortedList<ZR_ClassLibrary.DeviceCollectorSettings, object> DeviceCollectorSettings
    {
      get
      {
        SortedList<ZR_ClassLibrary.DeviceCollectorSettings, object> collectorSettings = new SortedList<ZR_ClassLibrary.DeviceCollectorSettings, object>();
        SortedList<string, string> sortedList = GMMSettings.SplitSettings(this.DeviceCollectorSettingsList);
        if (sortedList != null)
        {
          List<string> stringList = new List<string>((IEnumerable<string>) Util.GetNamesOfEnum(typeof (ZR_ClassLibrary.DeviceCollectorSettings)));
          foreach (KeyValuePair<string, string> keyValuePair in sortedList)
          {
            if (stringList.Contains(keyValuePair.Key))
            {
              ZR_ClassLibrary.DeviceCollectorSettings key = (ZR_ClassLibrary.DeviceCollectorSettings) Enum.Parse(typeof (ZR_ClassLibrary.DeviceCollectorSettings), keyValuePair.Key, true);
              string str = keyValuePair.Value;
              collectorSettings.Add(key, (object) str);
            }
          }
        }
        return collectorSettings;
      }
    }

    public static SortedList<string, string> SplitSettings(List<string> settings)
    {
      if (settings == null)
        return (SortedList<string, string>) null;
      SortedList<string, string> sortedList = new SortedList<string, string>();
      for (int index = 0; index < settings.Count; ++index)
      {
        if (!string.IsNullOrEmpty(settings[index]))
        {
          string[] strArray = settings[index].Split('=');
          if (strArray.Length != 2)
            return (SortedList<string, string>) null;
          if (sortedList.ContainsKey(strArray[0]))
          {
            string str = "Wrong settings of GMM detected! The '" + strArray[0] + "' is twice.";
            GMMSettings.logger.Warn(str);
            ZR_ClassLibMessages.AddWarning(str);
          }
          else
            sortedList.Add(strArray[0], strArray[1]);
        }
      }
      return sortedList;
    }

    public string GetAsyncComSettingsString()
    {
      if (this.AsyncComSettingsList == null)
        return string.Empty;
      StringBuilder stringBuilder = new StringBuilder();
      foreach (string asyncComSettings in this.AsyncComSettingsList)
      {
        char[] chArray = new char[1]{ '=' };
        string[] strArray = asyncComSettings.Split(chArray);
        if (strArray.Length == 2)
        {
          stringBuilder.Append(strArray[0]).Append(";");
          stringBuilder.Append(strArray[1]).Append(";");
        }
      }
      return stringBuilder.ToString();
    }

    public string GetDeviceCollectorSettingsString()
    {
      if (this.DeviceCollectorSettingsList == null)
        return string.Empty;
      StringBuilder stringBuilder = new StringBuilder();
      foreach (string collectorSettings in this.DeviceCollectorSettingsList)
      {
        char[] chArray = new char[1]{ '=' };
        string[] strArray = collectorSettings.Split(chArray);
        if (strArray.Length == 2)
        {
          stringBuilder.Append(strArray[0]).Append(";");
          stringBuilder.Append(strArray[1]).Append(";");
        }
      }
      return stringBuilder.ToString();
    }

    public string GetCommunicationSettings()
    {
      StringBuilder stringBuilder = new StringBuilder();
      if (this.AsyncComSettingsList != null)
      {
        foreach (string asyncComSettings in this.AsyncComSettingsList)
        {
          if (asyncComSettings != null)
            stringBuilder.Append(asyncComSettings).Append(";");
        }
      }
      if (this.DeviceCollectorSettingsList != null)
      {
        foreach (string collectorSettings in this.DeviceCollectorSettingsList)
        {
          if (collectorSettings != null)
            stringBuilder.Append(collectorSettings).Append(";");
        }
      }
      return stringBuilder.ToString();
    }

    public SortedList<ReadoutSettings, object> GetReadoutSettings()
    {
      if (this.DeviceCollectorSettingsList == null)
        return (SortedList<ReadoutSettings, object>) null;
      SortedList<ReadoutSettings, object> readoutSettings = new SortedList<ReadoutSettings, object>();
      for (int index = 0; index < this.DeviceCollectorSettingsList.Count; ++index)
      {
        string str = this.DeviceCollectorSettingsList[index].Trim();
        if (!string.IsNullOrEmpty(str))
        {
          string[] strArray = str.Split('=');
          if (strArray.Length == 2 && new List<string>((IEnumerable<string>) Util.GetNamesOfEnum(typeof (ReadoutSettings))).Contains(strArray[0]))
          {
            ReadoutSettings key = (ReadoutSettings) Enum.Parse(typeof (ReadoutSettings), strArray[0], true);
            object obj = (object) strArray[1];
            readoutSettings.Add(key, obj);
          }
        }
      }
      return readoutSettings;
    }

    public string GetReadoutSettingsValue(ReadoutSettings key)
    {
      if (this.DeviceCollectorSettingsList == null)
        return (string) null;
      for (int index = 0; index < this.DeviceCollectorSettingsList.Count; ++index)
      {
        if (this.DeviceCollectorSettingsList[index].StartsWith(key.ToString()))
          return this.DeviceCollectorSettingsList[index].Substring(key.ToString().Length + 1);
      }
      return string.Empty;
    }

    public string GetCommunicationStructureValue(string key)
    {
      string communicationSettings = this.GetCommunicationSettings();
      if (string.IsNullOrEmpty(communicationSettings))
        return string.Empty;
      int startIndex = communicationSettings.IndexOf(key + "=") + key.Length + 1;
      int num = communicationSettings.IndexOf(";", startIndex);
      return startIndex >= 0 && num > 0 && startIndex < num ? communicationSettings.Substring(startIndex, num - startIndex) : string.Empty;
    }

    public void UpdateCommunicationStructure(string key, string value)
    {
      if (this.AsyncComSettingsList != null)
      {
        for (int index = 0; index < this.AsyncComSettingsList.Count; ++index)
        {
          int num = this.AsyncComSettingsList[index].IndexOf(key);
          if (num >= 0 && this.AsyncComSettingsList[index].IndexOf("=", num + key.Length) >= 0)
          {
            this.AsyncComSettingsList[index] = key + "=" + value;
            return;
          }
        }
      }
      if (this.DeviceCollectorSettingsList == null)
        return;
      for (int index = 0; index < this.DeviceCollectorSettingsList.Count; ++index)
      {
        int num = this.DeviceCollectorSettingsList[index].IndexOf(key);
        if (num >= 0 && this.DeviceCollectorSettingsList[index].IndexOf("=", num + key.Length) >= 0)
        {
          this.DeviceCollectorSettingsList[index] = key + "=" + value;
          break;
        }
      }
    }

    public void AddOrUpdateReadoutSettings(ReadoutSettings key, string value)
    {
      if (this.DeviceCollectorSettingsList == null)
        this.DeviceCollectorSettingsList = new List<string>();
      if (string.IsNullOrEmpty(this.GetReadoutSettingsValue(key)))
      {
        this.DeviceCollectorSettingsList.Add(key.ToString() + "=" + value);
      }
      else
      {
        for (int index = 0; index < this.DeviceCollectorSettingsList.Count; ++index)
        {
          if (this.DeviceCollectorSettingsList[index].StartsWith(key.ToString()))
          {
            this.DeviceCollectorSettingsList[index] = key.ToString() + "=" + value;
            break;
          }
        }
      }
    }

    public static BusMode[] GetAvailableBusModes(TransceiverDevice transceiver)
    {
      switch (transceiver)
      {
        case TransceiverDevice.None:
          return new BusMode[0];
        case TransceiverDevice.MinoConnect:
          return new BusMode[21]
          {
            BusMode.MBus,
            BusMode.Minol_Device,
            BusMode.MinomatV2,
            BusMode.MinomatV3,
            BusMode.MinomatV4,
            BusMode.MinomatRadioTest,
            BusMode.RadioMS,
            BusMode.Radio2,
            BusMode.Radio3,
            BusMode.Radio3_868_95_RUSSIA,
            BusMode.MBusPointToPoint,
            BusMode.RelayDevice,
            BusMode.wMBusS1,
            BusMode.wMBusC1A,
            BusMode.wMBusC1B,
            BusMode.wMBusS1M,
            BusMode.wMBusS2,
            BusMode.wMBusT1,
            BusMode.wMBusT2_meter,
            BusMode.wMBusT2_other,
            BusMode.SmokeDetector
          };
        case TransceiverDevice.Wavenis:
          return new BusMode[1]{ BusMode.WaveFlowRadio };
        case TransceiverDevice.MinoHead:
          return new BusMode[6]
          {
            BusMode.Minol_Device,
            BusMode.MinomatV2,
            BusMode.MinomatV3,
            BusMode.MinomatV4,
            BusMode.Radio2,
            BusMode.Radio3
          };
        default:
          throw new ArgumentException("Not supported transceiver. Value: " + transceiver.ToString());
      }
    }

    public void SetSettings(string settings)
    {
      this.AsyncComSettingsList.Clear();
      this.DeviceCollectorSettingsList.Clear();
      if (settings == null)
        return;
      string[] strArray1 = settings.Split(';');
      if (strArray1 == null)
        return;
      foreach (string str1 in strArray1)
      {
        if (!string.IsNullOrEmpty(str1))
        {
          string[] strArray2 = str1.Split('=');
          if (strArray2 != null && strArray2.Length == 2)
          {
            string str2 = strArray2[0];
            string str3 = strArray2[1];
            if (Enum.IsDefined(typeof (ZR_ClassLibrary.AsyncComSettings), (object) str2))
              this.AsyncComSettingsList.Add(str1);
            else if (Enum.IsDefined(typeof (ZR_ClassLibrary.DeviceCollectorSettings), (object) str2))
              this.DeviceCollectorSettingsList.Add(str1);
          }
        }
      }
    }

    public void SetAsyncComSettings(SortedList<string, string> asyncComSettings)
    {
      if (asyncComSettings == null)
        return;
      List<string> stringList = new List<string>((IEnumerable<string>) Util.GetNamesOfEnum(typeof (ZR_ClassLibrary.AsyncComSettings)));
      foreach (KeyValuePair<string, string> asyncComSetting in asyncComSettings)
      {
        if (stringList.Contains(asyncComSetting.Key))
          this.AsyncComSettingsList.Add(asyncComSetting.Key + "=" + asyncComSetting.Value);
      }
    }

    public void SetAsyncComSettings(
      SortedList<ZR_ClassLibrary.AsyncComSettings, object> newAsyncComSettings)
    {
      if (newAsyncComSettings == null)
        return;
      SortedList<ZR_ClassLibrary.AsyncComSettings, object> asyncComSettings = this.AsyncComSettings;
      ZR_ClassLibrary.AsyncComSettings key;
      foreach (KeyValuePair<ZR_ClassLibrary.AsyncComSettings, object> newAsyncComSetting in newAsyncComSettings)
      {
        if (!asyncComSettings.ContainsKey(newAsyncComSetting.Key))
        {
          List<string> asyncComSettingsList = this.AsyncComSettingsList;
          key = newAsyncComSetting.Key;
          string str = key.ToString() + "=" + newAsyncComSetting.Value.ToString();
          asyncComSettingsList.Add(str);
        }
        else
        {
          key = newAsyncComSetting.Key;
          this.UpdateCommunicationStructure(key.ToString(), newAsyncComSetting.Value.ToString());
        }
      }
    }

    public bool SetAsyncComSettings(ZR_ClassLibrary.AsyncComSettings key, string value)
    {
      if (value == null)
        value = string.Empty;
      if (!this.AsyncComSettings.ContainsKey(key))
        this.AsyncComSettingsList.Add(key.ToString() + "=" + value);
      else
        this.UpdateCommunicationStructure(key.ToString(), value);
      return true;
    }

    public void SetDeviceCollectorSettings(
      SortedList<ZR_ClassLibrary.DeviceCollectorSettings, object> deviceCollectorSettings)
    {
      if (deviceCollectorSettings == null)
        return;
      SortedList<ZR_ClassLibrary.DeviceCollectorSettings, object> collectorSettings = this.DeviceCollectorSettings;
      ZR_ClassLibrary.DeviceCollectorSettings key;
      foreach (KeyValuePair<ZR_ClassLibrary.DeviceCollectorSettings, object> collectorSetting in deviceCollectorSettings)
      {
        if (!collectorSettings.ContainsKey(collectorSetting.Key))
        {
          List<string> collectorSettingsList = this.DeviceCollectorSettingsList;
          key = collectorSetting.Key;
          string str = key.ToString() + "=" + collectorSetting.Value?.ToString();
          collectorSettingsList.Add(str);
        }
        else
        {
          key = collectorSetting.Key;
          this.UpdateCommunicationStructure(key.ToString(), collectorSetting.Value.ToString());
        }
      }
    }
  }
}


--- GMMSettingsCollection.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.GMMSettingsCollection
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml.Serialization;

#nullable disable
namespace ZR_ClassLibrary
{
  [Serializable]
  public class GMMSettingsCollection
  {
    public static string DEFAULT_SETTINGS_NAME = "settings.xml";

    public GMMSettingsName SelectedSettingsName { get; set; }

    public List<GMMSettings> Items { get; set; }

    public GMMSettingsCollection() => this.Items = new List<GMMSettings>();

    public static GMMSettingsCollection Default
    {
      get
      {
        return new GMMSettingsCollection()
        {
          Items = {
            GMMSettings.Default_MBus,
            GMMSettings.Default_MBus_MeterVPN,
            GMMSettings.Default_MBusP2P_IrCombiHeadRoundSide_IrDa_MinoConnect,
            GMMSettings.Default_MBusP2P_IrCombiHeadRoundSide_ZVEI_Break_MinoConnect,
            GMMSettings.Default_MBusP2P_IrCombiHeadRoundSide_ZVEI_MinoConnect,
            GMMSettings.Default_MinolDevice_IrCombiHeadDoveTailSide_MinoConnect,
            GMMSettings.Default_MinolDevice_IrMinoHead,
            GMMSettings.Default_MinomatV2_IrCombiHeadDoveTailSide_MinoConnect,
            GMMSettings.Default_MinomatV2_IrMinoHead,
            GMMSettings.Default_MinomatV3_IrCombiHeadRoundSide_MinoConnect,
            GMMSettings.Default_MinomatV3_IrMinoHead,
            GMMSettings.Default_MinomatV4_IrCombiHeadDoveTailSide_MinoConnect,
            GMMSettings.Default_MinomatV4_IrMinoHead,
            GMMSettings.Default_ModeMinomatRadioTest_MinoConnect,
            GMMSettings.Default_ModeRadioMS_MinoConnect,
            GMMSettings.Default_Radio2_MinoConnect,
            GMMSettings.Default_Radio2_MinoHead,
            GMMSettings.Default_Radio3_868_95_RUSSIA_MinoConnect,
            GMMSettings.Default_Radio3_MinoConnect,
            GMMSettings.Default_Radio3_MinoHead,
            GMMSettings.Default_RelayDevice_MinoConnect,
            GMMSettings.Default_Wavenis,
            GMMSettings.Default_WirelessMBusModeC1A_MinoConnect,
            GMMSettings.Default_WirelessMBusModeC1B_MinoConnect,
            GMMSettings.Default_WirelessMBusModeS1_MinoConnect,
            GMMSettings.Default_WirelessMBusModeS1M_MinoConnect,
            GMMSettings.Default_WirelessMBusModeS2_MinoConnect,
            GMMSettings.Default_WirelessMBusModeT1_MinoConnect,
            GMMSettings.Default_WirelessMBusModeT2_meter_MinoConnect,
            GMMSettings.Default_WirelessMBusModeT2_other_MinoConnect,
            GMMSettings.Default_MBusP2P_IrCombiHeadRoundSide_IrDa_MinoConnect_EDC,
            GMMSettings.Default_SmokeDetector_IrCombiHeadDoveTailSide_MinoConnect
          }
        };
      }
    }

    public GMMSettings this[GMMSettingsName name]
    {
      get
      {
        foreach (GMMSettings gmmSettings in this.Items)
        {
          if (gmmSettings.Name == name)
            return gmmSettings;
        }
        return (GMMSettings) null;
      }
    }

    public static void Save(GMMSettingsCollection settingsCollection)
    {
      GMMSettingsCollection.Save(settingsCollection, GMMSettingsCollection.DEFAULT_SETTINGS_NAME);
    }

    public static void Save(GMMSettingsCollection settingsCollection, string fileName)
    {
      if (settingsCollection == null || SystemValues.SettingsPath == null)
        return;
      string path = Path.Combine(SystemValues.SettingsPath, fileName);
      using (FileStream fileStream = File.Create(path))
        new XmlSerializer(typeof (GMMSettingsCollection)).Serialize((Stream) fileStream, (object) settingsCollection);
    }

    public static GMMSettingsCollection Load()
    {
      return GMMSettingsCollection.Load(GMMSettingsCollection.DEFAULT_SETTINGS_NAME);
    }

    public static GMMSettingsCollection Load(string fileName)
    {
      if (SystemValues.SettingsPath == null)
        return (GMMSettingsCollection) null;
      string path = Path.Combine(SystemValues.SettingsPath, fileName);
      if (!File.Exists(path))
        return (GMMSettingsCollection) null;
      XmlSerializer xmlSerializer = new XmlSerializer(typeof (GMMSettingsCollection));
      using (FileStream fileStream = File.OpenRead(path))
      {
        try
        {
          return xmlSerializer.Deserialize((Stream) fileStream) as GMMSettingsCollection;
        }
        catch (Exception ex)
        {
          Debug.WriteLine("Wrong settings file detected! Remove it.");
          File.Delete(fileName);
          return (GMMSettingsCollection) null;
        }
      }
    }
  }
}


--- GMMSettingsName.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.GMMSettingsName
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum GMMSettingsName
  {
    None,
    MinolDevice_IrMinoHead,
    Radio2_MinoHead,
    Radio3_MinoHead,
    Radio2_MinoConnect,
    Radio3_MinoConnect,
    MinolDevice_IrCombiHeadDoveTailSide_MinoConnect,
    MinomatV2_IrCombiHeadDoveTailSide_MinoConnect,
    MinomatV2_IrMinoHead,
    MinomatV3_IrMinoHead,
    MinomatV4_IrMinoHead,
    MinomatV3_IrCombiHeadRoundSide_MinoConnect,
    MinomatV4_IrCombiHeadDoveTailSide_MinoConnect,
    RelayDevice_MinoConnect,
    MBusP2P_IrCombiHeadRoundSide_ZVEI_Break_MinoConnect,
    MBusP2P_IrCombiHeadRoundSide_ZVEI_MinoConnect,
    MBusP2P_IrCombiHeadRoundSide_IrDa_MinoConnect,
    MBusP2P_IrCombiHeadRoundSide_IrDa_MinoConnect_EDC,
    MBus_MeterVPN,
    MBus,
    Wavenis,
    WirelessMBusModeS1_MinoConnect,
    WirelessMBusModeC1A_MinoConnect,
    WirelessMBusModeC1B_MinoConnect,
    WirelessMBusModeS1M_MinoConnect,
    WirelessMBusModeS2_MinoConnect,
    WirelessMBusModeT1_MinoConnect,
    WirelessMBusModeT2_meter_MinoConnect,
    WirelessMBusModeT2_other_MinoConnect,
    Radio3_868_95_RUSSIA_MinoConnect,
    ModeMinomatRadioTest_MinoConnect,
    ModeRadioMS_MinoConnect,
    SmokeDetector_IrCombiHeadDoveTailSide_MinoConnect,
  }
}


--- HardwareType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.HardwareType
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Text;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class HardwareType
  {
    public int HardwareTypeID { get; set; }

    public int MapID { get; set; }

    public uint FirmwareVersion { get; set; }

    public string HardwareName { get; set; }

    public int HardwareVersion { get; set; }

    public string HardwareResource { get; set; }

    public string Description { get; set; }

    public string ToString(int spaces)
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("HardwareTypeID: ".PadRight(spaces)).AppendLine(this.HardwareTypeID.ToString());
      stringBuilder.Append("MapID: ".PadRight(spaces)).AppendLine(this.MapID.ToString());
      stringBuilder.Append("FirmwareVersion: ".PadRight(spaces)).AppendLine(this.FirmwareVersion.ToString());
      if (!string.IsNullOrEmpty(this.HardwareName))
        stringBuilder.Append("HardwareName: ".PadRight(spaces)).AppendLine(this.HardwareName);
      stringBuilder.Append("HardwareVersion: ".PadRight(spaces)).AppendLine(this.HardwareVersion.ToString());
      if (!string.IsNullOrEmpty(this.HardwareResource))
        stringBuilder.Append("HardwareResource: ".PadRight(spaces)).AppendLine(this.HardwareResource);
      if (!string.IsNullOrEmpty(this.Description))
        stringBuilder.Append("HardwareDescription: ".PadRight(spaces)).AppendLine(this.Description);
      return stringBuilder.ToString();
    }

    public override string ToString()
    {
      return "ID: " + this.HardwareTypeID.ToString() + ", " + (string.IsNullOrEmpty(this.Description) ? "" : this.Description);
    }

    public HardwareType DeepCopy() => this.MemberwiseClone() as HardwareType;
  }
}


--- HCA_Scale.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.HCA_Scale
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum HCA_Scale
  {
    Uniform,
    Product,
  }
}


--- HCA_SensorMode.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.HCA_SensorMode
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum HCA_SensorMode
  {
    Single,
    Double,
  }
}


--- HS_Funkt.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.HS_Funkt
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Globalization;

#nullable disable
namespace ZR_ClassLibrary
{
  public class HS_Funkt
  {
    public int getMaskScroll(long lValue)
    {
      int maskScroll;
      for (maskScroll = 0; (lValue & 1L) == 0L && maskScroll < 64; ++maskScroll)
        lValue >>= 1;
      return maskScroll;
    }

    public string DeleteSpaces(string instr)
    {
      instr.Trim();
      string[] strArray = instr.Split(' ');
      string str = "";
      for (int index = 0; index < strArray.Length; ++index)
      {
        if (strArray[index] != "")
          str = str + strArray[index] + " ";
      }
      return str;
    }

    public bool StringToMBusSerialNumber(string SerialNumberIn, out int SerialNumberOut)
    {
      SerialNumberIn.Trim();
      SerialNumberIn = SerialNumberIn.ToUpper();
      SerialNumberOut = 0;
      if (SerialNumberIn.Length > 8)
        return false;
      while (SerialNumberIn.Length > 0)
      {
        SerialNumberOut <<= 4;
        int num = (int) SerialNumberIn[0] - 48;
        if (num < 0 || num > 9)
          return false;
        SerialNumberIn = SerialNumberIn.Remove(0, 1);
        SerialNumberOut += num;
      }
      return true;
    }

    public bool MBusSerialNumberToString(int SerialNumberIn, out string SerialNumberOut)
    {
      bool flag = true;
      SerialNumberOut = SerialNumberIn.ToString("X8");
      return flag;
    }

    public char IntToHexChar(byte inValue)
    {
      return ((int) inValue & 15) <= 9 ? (char) (((int) inValue & 15) + 48) : (char) (((int) inValue & 15) + 55);
    }

    public int HexchartoInt(string Value)
    {
      string upper = Value.ToUpper();
      int num = 0;
      if (upper == "0")
        num = 0;
      if (upper == "1")
        num = 1;
      if (upper == "2")
        num = 2;
      if (upper == "3")
        num = 3;
      if (upper == "4")
        num = 4;
      if (upper == "5")
        num = 5;
      if (upper == "6")
        num = 6;
      if (upper == "7")
        num = 7;
      if (upper == "8")
        num = 8;
      if (upper == "9")
        num = 9;
      if (upper == "A")
        num = 10;
      if (upper == "B")
        num = 11;
      if (upper == "C")
        num = 12;
      if (upper == "D")
        num = 13;
      if (upper == "E")
        num = 14;
      if (upper == "F")
        num = 15;
      return num;
    }

    public string makeHexText(int Value, int DigitCount)
    {
      string str = "0x";
      int num1 = Value;
      for (int index = DigitCount; index > 0; --index)
      {
        int num2 = num1 >> (index - 1) * 4;
        str += this.IntToHexChar((byte) (num2 & 15)).ToString();
        num1 = Value;
      }
      return str;
    }

    public int getIntValue(string Value, out int Result)
    {
      Result = 0;
      int intValue;
      if (Value != "")
      {
        string upper = Value.ToUpper();
        int length = upper.Length;
        int num = upper.IndexOf("0X", 0);
        if (num >= 0)
        {
          for (int startIndex = num + 2; startIndex < length; ++startIndex)
          {
            string str = upper.Substring(startIndex, 1);
            Result <<= 4;
            Result += this.HexchartoInt(str);
          }
          intValue = 0;
        }
        else
        {
          try
          {
            Result = int.Parse(Value, NumberStyles.None);
            intValue = 0;
          }
          catch
          {
            Result = 0;
            intValue = 1;
          }
        }
      }
      else
      {
        intValue = 2;
        Result = 0;
      }
      return intValue;
    }

    public int getIntValueDecOfHex(string Value, out int Result)
    {
      int intValueDecOfHex;
      if (Value != "")
      {
        string upper = Value.ToUpper();
        int length = upper.Length;
        int num = upper.IndexOf("0X", 0);
        if (num >= 0)
          Value = upper.Substring(num + 2);
        try
        {
          Result = int.Parse(Value);
          intValueDecOfHex = 0;
        }
        catch
        {
          Result = 0;
          intValueDecOfHex = 1;
        }
      }
      else
      {
        intValueDecOfHex = 2;
        Result = 0;
      }
      return intValueDecOfHex;
    }

    public int getIntValueOfHex(string Value, out int Result)
    {
      Result = 0;
      int intValueOfHex;
      if (Value != "")
      {
        string upper = Value.ToUpper();
        int length = upper.Length;
        int num = upper.IndexOf("0X", 0);
        if (num >= 0)
        {
          for (int startIndex = num + 2; startIndex < length; ++startIndex)
          {
            string str = upper.Substring(startIndex, 1);
            Result <<= 4;
            Result += this.HexchartoInt(str);
          }
          intValueOfHex = 0;
        }
        else
        {
          try
          {
            Result = int.Parse(Value, NumberStyles.AllowHexSpecifier);
            intValueOfHex = 0;
          }
          catch
          {
            Result = 0;
            intValueOfHex = 1;
          }
        }
      }
      else
      {
        intValueOfHex = 2;
        Result = 0;
      }
      return intValueOfHex;
    }

    public static void getZelsiusTime(DateTime PCTime, out long ZelsiusTime)
    {
      DateTime dateTime = new DateTime(1980, 1, 1, 0, 0, 0, 0);
      ZelsiusTime = (PCTime.Ticks - dateTime.Ticks) / 10000000L;
    }

    public static void convertZelsiusTimeToPCTime(long ZelsiusTime, out DateTime PCTime)
    {
      DateTime dateTime = new DateTime(1980, 1, 1, 0, 0, 0, 0);
      PCTime = new DateTime(ZelsiusTime * 10000000L + dateTime.Ticks);
    }
  }
}


--- I_ZR_Component.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.I_ZR_Component
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public interface I_ZR_Component
  {
    void GMM_Dispose();
  }
}


--- ICancelable.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ICancelable
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public interface ICancelable
  {
    bool BreakRequest { get; set; }
  }
}


--- ILockable.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ILockable
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public interface ILockable
  {
    bool IsLocked { get; }

    void Lock(string owner);

    void Unlock();

    string Owner { get; }
  }
}


--- Images.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Images
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class Images : Form
  {
    public static Images pics = new Images();
    public Image FileNew;
    public PictureBox Knoten_16x16;
    private Label label1;
    private Label label2;
    public PictureBox Device_16x16;
    private Label label14;
    public PictureBox Device_20x20;
    private Label label15;
    public PictureBox Printer_20x20;
    private Label label16;
    private Label label17;
    private Label label18;
    private Label label19;
    private Label label20;
    private Label label21;
    private Label label22;
    private Label label23;
    private Label label24;
    private Label label25;
    private Label label26;
    private Label label27;
    private Label label28;
    private Label label29;
    private Label label30;
    public PictureBox pictureBox26;
    private Label label31;
    public PictureBox pictureBox27;
    private Label label32;
    public PictureBox pictureBox28;
    private Label label33;
    public PictureBox pictureBox29;
    private Label label34;
    public PictureBox pictureBox30;
    private Label label35;
    public PictureBox pictureBox31;
    private Label label36;
    public PictureBox pictureBox32;
    private Label label37;
    public PictureBox pictureBox33;
    private Label label38;
    public PictureBox pictureBox34;
    private Label label39;
    public PictureBox pictureBox35;
    public PictureBox ScanPC;
    private Label label40;
    private Label label41;
    public PictureBox Bomb;
    private Label label42;
    private Label label43;
    public PictureBox MultidataS1_208x208;
    private Label label44;
    public PictureBox Exclamation;
    private Label label47;
    public PictureBox MenuArrange_20x20;
    public PictureBox DeviceNew_20x20;
    public PictureBox New_20x20;
    public PictureBox Open_20x20;
    public PictureBox Save_20x20;
    public PictureBox DeviceRead_20x20;
    public PictureBox DeviceWrite_20x20;
    private Label label48;
    public PictureBox MenuDetails_20x20;
    private Label label49;
    public PictureBox MenuDelete_20x20;
    private Label label50;
    public PictureBox MenuRefresh_20x20;
    private Label label51;
    public PictureBox MenuAllDelete_20x20;
    public PictureBox Help_20x20;
    public PictureBox AmpelGruen_32x32;
    private Label label53;
    public PictureBox DeviceSearch_20x20;
    private Label label55;
    private Label label56;
    public PictureBox FunctionWasserhahn_16x16;
    public PictureBox FunctionTime_16x16;
    private Label label57;
    private Label label58;
    public PictureBox FunctionDollar_16x16;
    private Label label59;
    public PictureBox FunctionUnSelected_16x16;
    public PictureBox FunctionGroupSelected_16x16;
    public PictureBox FunctionInfo_16x16;
    public PictureBox FunctionTemperature_16x16;
    private Label label60;
    public PictureBox FunctionEnergy_16x16;
    private Label label61;
    public PictureBox FunctionGoup_16x16;
    private Label label62;
    private Label label63;
    public PictureBox FunctionSelected_16x16;
    private GroupBox groupBox1;
    private Label label64;
    private Label label65;
    private Label label66;
    private Label label67;
    public PictureBox FunctionWasserhahnSel_16x16;
    private Label label68;
    public PictureBox FunctionTimeSel_16x16;
    private Label label69;
    public PictureBox FunctionInfoSel_16x16;
    public PictureBox FunctionDollarSel_16x16;
    public PictureBox FunctionTemperatureSel_16x16;
    public PictureBox FunctionEnergySel_16x16;
    public PictureBox FunctionDefaultSel_16x16;
    private Label label70;
    public PictureBox FunctionDefault_16x16;
    private Label label71;
    public PictureBox DesktopPC;
    private Label label3;
    public PictureBox KnotenSel_16x16;
    private Label label72;
    public PictureBox DeviceSel_16x16;
    private Label label73;
    public PictureBox KnotenInactiveSel_16x16;
    private Label label74;
    public PictureBox DeviceInactiveSel_16x16;
    private Label label75;
    private Label label76;
    public PictureBox DeviceInactive_16x16;
    public PictureBox KnotenInactive_16x16;
    private Label label77;
    public PictureBox Search_20x20;
    public PictureBox DeviceMN1_24x24;
    public PictureBox DeviceMS1_24x24;
    public PictureBox DeviceIZM208_24x24;
    public PictureBox DeviceIZM972_24x24;
    public PictureBox DeviceSaarius_24x24;
    private Label label78;
    public PictureBox DeviceZelsius_24x24;
    private Label label79;
    public PictureBox DeviceZelsiusSel_24x24;
    private Label label80;
    public PictureBox DeviceSaariusSel_24x24;
    private Label label81;
    public PictureBox DeviceIZM972Sel_24x24;
    private Label label82;
    public PictureBox DeviceIZM208Sel_24x24;
    private Label label83;
    public PictureBox DeviceMS1Sel_24x24;
    private Label label84;
    public PictureBox DeviceMN1Sel_24x24;
    private Label label4;
    public PictureBox AddParameter_20x20;
    private Label label5;
    public PictureBox RemoveParameter_20x20;
    private Label label6;
    public PictureBox AmpelRot_32x32;
    public PictureBox FunctionDataloggerSel_16x16;
    private Label label7;
    public PictureBox FunctionDatalogger_16x16;
    private Label label8;
    private Label label9;
    public PictureBox DeviceEdit_20x20;
    public PictureBox FunctionInOutSel_16x16;
    private Label label11;
    public PictureBox FunctionInOut_16x16;
    private Label label12;
    private Label label10;
    private Label label13;
    private Label label45;
    private Label label46;
    public PictureBox WriteDesktopPC_48x48;
    public PictureBox WriteDesktopPC1_48x48;
    public PictureBox WriteDesktopPC2_48x48;
    public PictureBox WriteDesktopPC3_48x48;
    private Label label52;
    private Label label54;
    public PictureBox FunctionPowerSel_16x16;
    public PictureBox FunctionPower_16x16;
    private Label label85;
    public PictureBox DeviceRemoved_16x16;
    private Label label86;
    public PictureBox DeviceRemovedSel_16x16;
    public PictureBox ReadAll_20x20;
    private Label label87;
    public PictureBox ScanByAddress_20x20;
    private Label label88;
    private Label label89;
    public PictureBox ScanBySerialNo_20x20;
    public PictureBox SeachByAddress_20x20;
    private Label label90;
    private Label label91;
    public PictureBox SearchBySerialNo_20x20;
    private Label label92;
    public PictureBox DeleteAllDevices_20x20;
    private Label label93;
    public PictureBox ConsumptionValues_20x20;
    private Label label94;
    public PictureBox ShowMBusList_20x20;
    private Label label95;
    public PictureBox BaseNodeMobileDevice_16x16;
    public PictureBox AddressTypeStreet_16x16;
    private Label label96;
    private GroupBox groupBox2;
    private Label label99;
    public PictureBox AddressTypeCityArea_16x16;
    private Label label98;
    public PictureBox AddressTypeCity_16x16;
    private Label label97;
    public PictureBox AddressTypeHouse_16x16;
    private Label label102;
    public PictureBox AddressTypeCorridor_16x16;
    private Label label101;
    public PictureBox AddressTypeFloor_16x16;
    private Label label100;
    public PictureBox AddressTypeCountry_16x16;
    private Label label103;
    public PictureBox AddressTypeRoomNumber_16x16;
    public PictureBox WaveFlowDevice_16x16;
    private Label label104;
    private Label label105;
    public PictureBox NewPositionArrow_16x16;
    private GroupBox groupBox3;
    public PictureBox Liegenschaft_16x16;
    public PictureBox Nutzer_16x16;
    public PictureBox Nutzergruppe_16x16;
    public PictureBox Rechenzentrum_16x16;
    public PictureBox Wohnung_16x16;
    private GroupBox groupBox4;
    public PictureBox Nutzungsgrad_16x16;
    public PictureBox Berechnung_Output_16x16;
    public PictureBox Berechnung_Input_16x16;
    public PictureBox Berechnungsknoten_16x16;
    public PictureBox Open_16x16;
    public PictureBox Close_16x16;
    private Label label106;
    private Label label107;
    private IContainer components = (IContainer) null;

    public Images() => this.InitializeComponent();

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Images));
      this.Knoten_16x16 = new PictureBox();
      this.label1 = new Label();
      this.label2 = new Label();
      this.Device_16x16 = new PictureBox();
      this.label14 = new Label();
      this.Device_20x20 = new PictureBox();
      this.label15 = new Label();
      this.Printer_20x20 = new PictureBox();
      this.label16 = new Label();
      this.Help_20x20 = new PictureBox();
      this.label17 = new Label();
      this.MenuArrange_20x20 = new PictureBox();
      this.label18 = new Label();
      this.DeviceNew_20x20 = new PictureBox();
      this.label19 = new Label();
      this.New_20x20 = new PictureBox();
      this.label20 = new Label();
      this.Open_20x20 = new PictureBox();
      this.label21 = new Label();
      this.Save_20x20 = new PictureBox();
      this.label22 = new Label();
      this.DeviceRead_20x20 = new PictureBox();
      this.label23 = new Label();
      this.DeviceWrite_20x20 = new PictureBox();
      this.label24 = new Label();
      this.DeviceMN1_24x24 = new PictureBox();
      this.label25 = new Label();
      this.AmpelGruen_32x32 = new PictureBox();
      this.label26 = new Label();
      this.DeviceMS1_24x24 = new PictureBox();
      this.label27 = new Label();
      this.DeviceIZM208_24x24 = new PictureBox();
      this.label28 = new Label();
      this.DeviceIZM972_24x24 = new PictureBox();
      this.label29 = new Label();
      this.DeviceSaarius_24x24 = new PictureBox();
      this.label30 = new Label();
      this.pictureBox26 = new PictureBox();
      this.label31 = new Label();
      this.pictureBox27 = new PictureBox();
      this.label32 = new Label();
      this.pictureBox28 = new PictureBox();
      this.label33 = new Label();
      this.pictureBox29 = new PictureBox();
      this.label34 = new Label();
      this.pictureBox30 = new PictureBox();
      this.label35 = new Label();
      this.pictureBox31 = new PictureBox();
      this.label36 = new Label();
      this.pictureBox32 = new PictureBox();
      this.label37 = new Label();
      this.pictureBox33 = new PictureBox();
      this.label38 = new Label();
      this.pictureBox34 = new PictureBox();
      this.label39 = new Label();
      this.pictureBox35 = new PictureBox();
      this.ScanPC = new PictureBox();
      this.label40 = new Label();
      this.label41 = new Label();
      this.Bomb = new PictureBox();
      this.label42 = new Label();
      this.DesktopPC = new PictureBox();
      this.label43 = new Label();
      this.MultidataS1_208x208 = new PictureBox();
      this.label44 = new Label();
      this.Exclamation = new PictureBox();
      this.FunctionWasserhahn_16x16 = new PictureBox();
      this.label47 = new Label();
      this.label48 = new Label();
      this.MenuDetails_20x20 = new PictureBox();
      this.label49 = new Label();
      this.MenuDelete_20x20 = new PictureBox();
      this.label50 = new Label();
      this.MenuRefresh_20x20 = new PictureBox();
      this.label51 = new Label();
      this.MenuAllDelete_20x20 = new PictureBox();
      this.label53 = new Label();
      this.DeviceSearch_20x20 = new PictureBox();
      this.FunctionUnSelected_16x16 = new PictureBox();
      this.label55 = new Label();
      this.FunctionGroupSelected_16x16 = new PictureBox();
      this.label56 = new Label();
      this.FunctionTime_16x16 = new PictureBox();
      this.label57 = new Label();
      this.FunctionInfo_16x16 = new PictureBox();
      this.label58 = new Label();
      this.FunctionDollar_16x16 = new PictureBox();
      this.label59 = new Label();
      this.FunctionTemperature_16x16 = new PictureBox();
      this.label60 = new Label();
      this.FunctionEnergy_16x16 = new PictureBox();
      this.label61 = new Label();
      this.FunctionGoup_16x16 = new PictureBox();
      this.label62 = new Label();
      this.label63 = new Label();
      this.FunctionSelected_16x16 = new PictureBox();
      this.groupBox1 = new GroupBox();
      this.FunctionPowerSel_16x16 = new PictureBox();
      this.label52 = new Label();
      this.FunctionPower_16x16 = new PictureBox();
      this.label54 = new Label();
      this.FunctionInOutSel_16x16 = new PictureBox();
      this.label11 = new Label();
      this.FunctionInOut_16x16 = new PictureBox();
      this.label12 = new Label();
      this.FunctionDefaultSel_16x16 = new PictureBox();
      this.label70 = new Label();
      this.FunctionDefault_16x16 = new PictureBox();
      this.label71 = new Label();
      this.FunctionInfoSel_16x16 = new PictureBox();
      this.label64 = new Label();
      this.FunctionDollarSel_16x16 = new PictureBox();
      this.label65 = new Label();
      this.FunctionTemperatureSel_16x16 = new PictureBox();
      this.label66 = new Label();
      this.FunctionEnergySel_16x16 = new PictureBox();
      this.label67 = new Label();
      this.FunctionWasserhahnSel_16x16 = new PictureBox();
      this.label68 = new Label();
      this.FunctionTimeSel_16x16 = new PictureBox();
      this.label69 = new Label();
      this.FunctionDataloggerSel_16x16 = new PictureBox();
      this.label7 = new Label();
      this.FunctionDatalogger_16x16 = new PictureBox();
      this.label8 = new Label();
      this.label3 = new Label();
      this.KnotenSel_16x16 = new PictureBox();
      this.label72 = new Label();
      this.DeviceSel_16x16 = new PictureBox();
      this.label73 = new Label();
      this.KnotenInactiveSel_16x16 = new PictureBox();
      this.label74 = new Label();
      this.DeviceInactiveSel_16x16 = new PictureBox();
      this.label75 = new Label();
      this.label76 = new Label();
      this.DeviceInactive_16x16 = new PictureBox();
      this.KnotenInactive_16x16 = new PictureBox();
      this.label77 = new Label();
      this.Search_20x20 = new PictureBox();
      this.label78 = new Label();
      this.DeviceZelsius_24x24 = new PictureBox();
      this.label79 = new Label();
      this.DeviceZelsiusSel_24x24 = new PictureBox();
      this.label80 = new Label();
      this.DeviceSaariusSel_24x24 = new PictureBox();
      this.label81 = new Label();
      this.DeviceIZM972Sel_24x24 = new PictureBox();
      this.label82 = new Label();
      this.DeviceIZM208Sel_24x24 = new PictureBox();
      this.label83 = new Label();
      this.DeviceMS1Sel_24x24 = new PictureBox();
      this.label84 = new Label();
      this.DeviceMN1Sel_24x24 = new PictureBox();
      this.label4 = new Label();
      this.AddParameter_20x20 = new PictureBox();
      this.label5 = new Label();
      this.RemoveParameter_20x20 = new PictureBox();
      this.label6 = new Label();
      this.AmpelRot_32x32 = new PictureBox();
      this.label9 = new Label();
      this.DeviceEdit_20x20 = new PictureBox();
      this.WriteDesktopPC_48x48 = new PictureBox();
      this.label10 = new Label();
      this.WriteDesktopPC1_48x48 = new PictureBox();
      this.label13 = new Label();
      this.WriteDesktopPC2_48x48 = new PictureBox();
      this.label45 = new Label();
      this.WriteDesktopPC3_48x48 = new PictureBox();
      this.label46 = new Label();
      this.label85 = new Label();
      this.DeviceRemoved_16x16 = new PictureBox();
      this.label86 = new Label();
      this.DeviceRemovedSel_16x16 = new PictureBox();
      this.ReadAll_20x20 = new PictureBox();
      this.label87 = new Label();
      this.ScanByAddress_20x20 = new PictureBox();
      this.label88 = new Label();
      this.label89 = new Label();
      this.ScanBySerialNo_20x20 = new PictureBox();
      this.SeachByAddress_20x20 = new PictureBox();
      this.label90 = new Label();
      this.label91 = new Label();
      this.SearchBySerialNo_20x20 = new PictureBox();
      this.label92 = new Label();
      this.DeleteAllDevices_20x20 = new PictureBox();
      this.label93 = new Label();
      this.ConsumptionValues_20x20 = new PictureBox();
      this.label94 = new Label();
      this.ShowMBusList_20x20 = new PictureBox();
      this.label95 = new Label();
      this.BaseNodeMobileDevice_16x16 = new PictureBox();
      this.AddressTypeStreet_16x16 = new PictureBox();
      this.label96 = new Label();
      this.groupBox2 = new GroupBox();
      this.label103 = new Label();
      this.AddressTypeRoomNumber_16x16 = new PictureBox();
      this.label102 = new Label();
      this.AddressTypeCorridor_16x16 = new PictureBox();
      this.label101 = new Label();
      this.AddressTypeFloor_16x16 = new PictureBox();
      this.label100 = new Label();
      this.AddressTypeCountry_16x16 = new PictureBox();
      this.label99 = new Label();
      this.AddressTypeCityArea_16x16 = new PictureBox();
      this.label98 = new Label();
      this.AddressTypeCity_16x16 = new PictureBox();
      this.label97 = new Label();
      this.AddressTypeHouse_16x16 = new PictureBox();
      this.WaveFlowDevice_16x16 = new PictureBox();
      this.label104 = new Label();
      this.label105 = new Label();
      this.NewPositionArrow_16x16 = new PictureBox();
      this.groupBox3 = new GroupBox();
      this.Wohnung_16x16 = new PictureBox();
      this.Rechenzentrum_16x16 = new PictureBox();
      this.Nutzergruppe_16x16 = new PictureBox();
      this.Nutzer_16x16 = new PictureBox();
      this.Liegenschaft_16x16 = new PictureBox();
      this.groupBox4 = new GroupBox();
      this.Berechnungsknoten_16x16 = new PictureBox();
      this.Berechnung_Output_16x16 = new PictureBox();
      this.Berechnung_Input_16x16 = new PictureBox();
      this.Nutzungsgrad_16x16 = new PictureBox();
      this.Open_16x16 = new PictureBox();
      this.Close_16x16 = new PictureBox();
      this.label106 = new Label();
      this.label107 = new Label();
      ((ISupportInitialize) this.Knoten_16x16).BeginInit();
      ((ISupportInitialize) this.Device_16x16).BeginInit();
      ((ISupportInitialize) this.Device_20x20).BeginInit();
      ((ISupportInitialize) this.Printer_20x20).BeginInit();
      ((ISupportInitialize) this.Help_20x20).BeginInit();
      ((ISupportInitialize) this.MenuArrange_20x20).BeginInit();
      ((ISupportInitialize) this.DeviceNew_20x20).BeginInit();
      ((ISupportInitialize) this.New_20x20).BeginInit();
      ((ISupportInitialize) this.Open_20x20).BeginInit();
      ((ISupportInitialize) this.Save_20x20).BeginInit();
      ((ISupportInitialize) this.DeviceRead_20x20).BeginInit();
      ((ISupportInitialize) this.DeviceWrite_20x20).BeginInit();
      ((ISupportInitialize) this.DeviceMN1_24x24).BeginInit();
      ((ISupportInitialize) this.AmpelGruen_32x32).BeginInit();
      ((ISupportInitialize) this.DeviceMS1_24x24).BeginInit();
      ((ISupportInitialize) this.DeviceIZM208_24x24).BeginInit();
      ((ISupportInitialize) this.DeviceIZM972_24x24).BeginInit();
      ((ISupportInitialize) this.DeviceSaarius_24x24).BeginInit();
      ((ISupportInitialize) this.pictureBox26).BeginInit();
      ((ISupportInitialize) this.pictureBox27).BeginInit();
      ((ISupportInitialize) this.pictureBox28).BeginInit();
      ((ISupportInitialize) this.pictureBox29).BeginInit();
      ((ISupportInitialize) this.pictureBox30).BeginInit();
      ((ISupportInitialize) this.pictureBox31).BeginInit();
      ((ISupportInitialize) this.pictureBox32).BeginInit();
      ((ISupportInitialize) this.pictureBox33).BeginInit();
      ((ISupportInitialize) this.pictureBox34).BeginInit();
      ((ISupportInitialize) this.pictureBox35).BeginInit();
      ((ISupportInitialize) this.ScanPC).BeginInit();
      ((ISupportInitialize) this.Bomb).BeginInit();
      ((ISupportInitialize) this.DesktopPC).BeginInit();
      ((ISupportInitialize) this.MultidataS1_208x208).BeginInit();
      ((ISupportInitialize) this.Exclamation).BeginInit();
      ((ISupportInitialize) this.FunctionWasserhahn_16x16).BeginInit();
      ((ISupportInitialize) this.MenuDetails_20x20).BeginInit();
      ((ISupportInitialize) this.MenuDelete_20x20).BeginInit();
      ((ISupportInitialize) this.MenuRefresh_20x20).BeginInit();
      ((ISupportInitialize) this.MenuAllDelete_20x20).BeginInit();
      ((ISupportInitialize) this.DeviceSearch_20x20).BeginInit();
      ((ISupportInitialize) this.FunctionUnSelected_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionGroupSelected_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionTime_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionInfo_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionDollar_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionTemperature_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionEnergy_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionGoup_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionSelected_16x16).BeginInit();
      this.groupBox1.SuspendLayout();
      ((ISupportInitialize) this.FunctionPowerSel_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionPower_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionInOutSel_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionInOut_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionDefaultSel_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionDefault_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionInfoSel_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionDollarSel_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionTemperatureSel_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionEnergySel_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionWasserhahnSel_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionTimeSel_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionDataloggerSel_16x16).BeginInit();
      ((ISupportInitialize) this.FunctionDatalogger_16x16).BeginInit();
      ((ISupportInitialize) this.KnotenSel_16x16).BeginInit();
      ((ISupportInitialize) this.DeviceSel_16x16).BeginInit();
      ((ISupportInitialize) this.KnotenInactiveSel_16x16).BeginInit();
      ((ISupportInitialize) this.DeviceInactiveSel_16x16).BeginInit();
      ((ISupportInitialize) this.DeviceInactive_16x16).BeginInit();
      ((ISupportInitialize) this.KnotenInactive_16x16).BeginInit();
      ((ISupportInitialize) this.Search_20x20).BeginInit();
      ((ISupportInitialize) this.DeviceZelsius_24x24).BeginInit();
      ((ISupportInitialize) this.DeviceZelsiusSel_24x24).BeginInit();
      ((ISupportInitialize) this.DeviceSaariusSel_24x24).BeginInit();
      ((ISupportInitialize) this.DeviceIZM972Sel_24x24).BeginInit();
      ((ISupportInitialize) this.DeviceIZM208Sel_24x24).BeginInit();
      ((ISupportInitialize) this.DeviceMS1Sel_24x24).BeginInit();
      ((ISupportInitialize) this.DeviceMN1Sel_24x24).BeginInit();
      ((ISupportInitialize) this.AddParameter_20x20).BeginInit();
      ((ISupportInitialize) this.RemoveParameter_20x20).BeginInit();
      ((ISupportInitialize) this.AmpelRot_32x32).BeginInit();
      ((ISupportInitialize) this.DeviceEdit_20x20).BeginInit();
      ((ISupportInitialize) this.WriteDesktopPC_48x48).BeginInit();
      ((ISupportInitialize) this.WriteDesktopPC1_48x48).BeginInit();
      ((ISupportInitialize) this.WriteDesktopPC2_48x48).BeginInit();
      ((ISupportInitialize) this.WriteDesktopPC3_48x48).BeginInit();
      ((ISupportInitialize) this.DeviceRemoved_16x16).BeginInit();
      ((ISupportInitialize) this.DeviceRemovedSel_16x16).BeginInit();
      ((ISupportInitialize) this.ReadAll_20x20).BeginInit();
      ((ISupportInitialize) this.ScanByAddress_20x20).BeginInit();
      ((ISupportInitialize) this.ScanBySerialNo_20x20).BeginInit();
      ((ISupportInitialize) this.SeachByAddress_20x20).BeginInit();
      ((ISupportInitialize) this.SearchBySerialNo_20x20).BeginInit();
      ((ISupportInitialize) this.DeleteAllDevices_20x20).BeginInit();
      ((ISupportInitialize) this.ConsumptionValues_20x20).BeginInit();
      ((ISupportInitialize) this.ShowMBusList_20x20).BeginInit();
      ((ISupportInitialize) this.BaseNodeMobileDevice_16x16).BeginInit();
      ((ISupportInitialize) this.AddressTypeStreet_16x16).BeginInit();
      this.groupBox2.SuspendLayout();
      ((ISupportInitialize) this.AddressTypeRoomNumber_16x16).BeginInit();
      ((ISupportInitialize) this.AddressTypeCorridor_16x16).BeginInit();
      ((ISupportInitialize) this.AddressTypeFloor_16x16).BeginInit();
      ((ISupportInitialize) this.AddressTypeCountry_16x16).BeginInit();
      ((ISupportInitialize) this.AddressTypeCityArea_16x16).BeginInit();
      ((ISupportInitialize) this.AddressTypeCity_16x16).BeginInit();
      ((ISupportInitialize) this.AddressTypeHouse_16x16).BeginInit();
      ((ISupportInitialize) this.WaveFlowDevice_16x16).BeginInit();
      ((ISupportInitialize) this.NewPositionArrow_16x16).BeginInit();
      this.groupBox3.SuspendLayout();
      ((ISupportInitialize) this.Wohnung_16x16).BeginInit();
      ((ISupportInitialize) this.Rechenzentrum_16x16).BeginInit();
      ((ISupportInitialize) this.Nutzergruppe_16x16).BeginInit();
      ((ISupportInitialize) this.Nutzer_16x16).BeginInit();
      ((ISupportInitialize) this.Liegenschaft_16x16).BeginInit();
      this.groupBox4.SuspendLayout();
      ((ISupportInitialize) this.Berechnungsknoten_16x16).BeginInit();
      ((ISupportInitialize) this.Berechnung_Output_16x16).BeginInit();
      ((ISupportInitialize) this.Berechnung_Input_16x16).BeginInit();
      ((ISupportInitialize) this.Nutzungsgrad_16x16).BeginInit();
      ((ISupportInitialize) this.Open_16x16).BeginInit();
      ((ISupportInitialize) this.Close_16x16).BeginInit();
      this.SuspendLayout();
      this.Knoten_16x16.Image = (Image) componentResourceManager.GetObject("Knoten_16x16.Image");
      this.Knoten_16x16.Location = new Point(24, 56);
      this.Knoten_16x16.Name = "Knoten_16x16";
      this.Knoten_16x16.Size = new Size(16, 16);
      this.Knoten_16x16.TabIndex = 0;
      this.Knoten_16x16.TabStop = false;
      this.label1.Location = new Point(40, 56);
      this.label1.Name = "label1";
      this.label1.Size = new Size(88, 16);
      this.label1.TabIndex = 1;
      this.label1.Text = "Knoten_16x16";
      this.label2.Location = new Point(40, 80);
      this.label2.Name = "label2";
      this.label2.Size = new Size(88, 16);
      this.label2.TabIndex = 1;
      this.label2.Text = "Device_16x16";
      this.Device_16x16.Image = (Image) componentResourceManager.GetObject("Device_16x16.Image");
      this.Device_16x16.Location = new Point(24, 80);
      this.Device_16x16.Name = "Device_16x16";
      this.Device_16x16.Size = new Size(16, 16);
      this.Device_16x16.TabIndex = 0;
      this.Device_16x16.TabStop = false;
      this.label14.Location = new Point(224, 56);
      this.label14.Name = "label14";
      this.label14.Size = new Size(88, 16);
      this.label14.TabIndex = 19;
      this.label14.Text = "Device_20x20";
      this.Device_20x20.Image = (Image) componentResourceManager.GetObject("Device_20x20.Image");
      this.Device_20x20.Location = new Point(192, 56);
      this.Device_20x20.Name = "Device_20x20";
      this.Device_20x20.Size = new Size(24, 24);
      this.Device_20x20.TabIndex = 18;
      this.Device_20x20.TabStop = false;
      this.label15.Location = new Point(392, 24);
      this.label15.Name = "label15";
      this.label15.Size = new Size(88, 16);
      this.label15.TabIndex = 21;
      this.label15.Text = "Printer_20x20";
      this.Printer_20x20.Image = (Image) componentResourceManager.GetObject("Printer_20x20.Image");
      this.Printer_20x20.Location = new Point(360, 24);
      this.Printer_20x20.Name = "Printer_20x20";
      this.Printer_20x20.Size = new Size(24, 24);
      this.Printer_20x20.TabIndex = 20;
      this.Printer_20x20.TabStop = false;
      this.label16.Location = new Point(392, 48);
      this.label16.Name = "label16";
      this.label16.Size = new Size(88, 16);
      this.label16.TabIndex = 23;
      this.label16.Text = "Help_20x20";
      this.Help_20x20.Image = (Image) componentResourceManager.GetObject("Help_20x20.Image");
      this.Help_20x20.Location = new Point(360, 48);
      this.Help_20x20.Name = "Help_20x20";
      this.Help_20x20.Size = new Size(24, 24);
      this.Help_20x20.TabIndex = 22;
      this.Help_20x20.TabStop = false;
      this.label17.Location = new Point(224, 304);
      this.label17.Name = "label17";
      this.label17.Size = new Size(112, 16);
      this.label17.TabIndex = 25;
      this.label17.Text = "MenuArrange_20x20";
      this.MenuArrange_20x20.Image = (Image) componentResourceManager.GetObject("MenuArrange_20x20.Image");
      this.MenuArrange_20x20.Location = new Point(192, 304);
      this.MenuArrange_20x20.Name = "MenuArrange_20x20";
      this.MenuArrange_20x20.Size = new Size(24, 24);
      this.MenuArrange_20x20.TabIndex = 24;
      this.MenuArrange_20x20.TabStop = false;
      this.label18.Location = new Point(224, 104);
      this.label18.Name = "label18";
      this.label18.Size = new Size(112, 16);
      this.label18.TabIndex = 27;
      this.label18.Text = "DeviceNew_20x20";
      this.DeviceNew_20x20.Image = (Image) componentResourceManager.GetObject("DeviceNew_20x20.Image");
      this.DeviceNew_20x20.Location = new Point(192, 104);
      this.DeviceNew_20x20.Name = "DeviceNew_20x20";
      this.DeviceNew_20x20.Size = new Size(24, 24);
      this.DeviceNew_20x20.TabIndex = 26;
      this.DeviceNew_20x20.TabStop = false;
      this.label19.Location = new Point(392, 80);
      this.label19.Name = "label19";
      this.label19.Size = new Size(104, 16);
      this.label19.TabIndex = 29;
      this.label19.Text = "New_20x20";
      this.New_20x20.Image = (Image) componentResourceManager.GetObject("New_20x20.Image");
      this.New_20x20.Location = new Point(360, 80);
      this.New_20x20.Name = "New_20x20";
      this.New_20x20.Size = new Size(24, 24);
      this.New_20x20.TabIndex = 28;
      this.New_20x20.TabStop = false;
      this.label20.Location = new Point(392, 104);
      this.label20.Name = "label20";
      this.label20.Size = new Size(88, 16);
      this.label20.TabIndex = 31;
      this.label20.Text = "Open_20x20";
      this.Open_20x20.Image = (Image) componentResourceManager.GetObject("Open_20x20.Image");
      this.Open_20x20.Location = new Point(360, 104);
      this.Open_20x20.Name = "Open_20x20";
      this.Open_20x20.Size = new Size(24, 24);
      this.Open_20x20.TabIndex = 30;
      this.Open_20x20.TabStop = false;
      this.label21.Location = new Point(392, 128);
      this.label21.Name = "label21";
      this.label21.Size = new Size(88, 16);
      this.label21.TabIndex = 33;
      this.label21.Text = "Save_20x20";
      this.Save_20x20.Image = (Image) componentResourceManager.GetObject("Save_20x20.Image");
      this.Save_20x20.Location = new Point(360, 128);
      this.Save_20x20.Name = "Save_20x20";
      this.Save_20x20.Size = new Size(24, 24);
      this.Save_20x20.TabIndex = 32;
      this.Save_20x20.TabStop = false;
      this.label22.Location = new Point(224, 128);
      this.label22.Name = "label22";
      this.label22.Size = new Size(112, 16);
      this.label22.TabIndex = 35;
      this.label22.Text = "DeviceRead_20x20";
      this.DeviceRead_20x20.Image = (Image) componentResourceManager.GetObject("DeviceRead_20x20.Image");
      this.DeviceRead_20x20.Location = new Point(192, 128);
      this.DeviceRead_20x20.Name = "DeviceRead_20x20";
      this.DeviceRead_20x20.Size = new Size(24, 24);
      this.DeviceRead_20x20.TabIndex = 34;
      this.DeviceRead_20x20.TabStop = false;
      this.label23.Location = new Point(224, 152);
      this.label23.Name = "label23";
      this.label23.Size = new Size(112, 16);
      this.label23.TabIndex = 37;
      this.label23.Text = "DeviceWrite_20x20";
      this.DeviceWrite_20x20.Image = (Image) componentResourceManager.GetObject("DeviceWrite_20x20.Image");
      this.DeviceWrite_20x20.Location = new Point(192, 152);
      this.DeviceWrite_20x20.Name = "DeviceWrite_20x20";
      this.DeviceWrite_20x20.Size = new Size(24, 24);
      this.DeviceWrite_20x20.TabIndex = 36;
      this.DeviceWrite_20x20.TabStop = false;
      this.label24.Location = new Point(608, 72);
      this.label24.Name = "label24";
      this.label24.Size = new Size(104, 16);
      this.label24.TabIndex = 39;
      this.label24.Text = "DeviceMN1_24x24";
      this.DeviceMN1_24x24.Image = (Image) componentResourceManager.GetObject("DeviceMN1_24x24.Image");
      this.DeviceMN1_24x24.Location = new Point(568, 64);
      this.DeviceMN1_24x24.Name = "DeviceMN1_24x24";
      this.DeviceMN1_24x24.Size = new Size(32, 32);
      this.DeviceMN1_24x24.TabIndex = 38;
      this.DeviceMN1_24x24.TabStop = false;
      this.label25.Location = new Point(592, 448);
      this.label25.Name = "label25";
      this.label25.Size = new Size(120, 16);
      this.label25.TabIndex = 41;
      this.label25.Text = "AmpelGruen_32x32";
      this.AmpelGruen_32x32.Image = (Image) componentResourceManager.GetObject("AmpelGruen_32x32.Image");
      this.AmpelGruen_32x32.Location = new Point(552, 440);
      this.AmpelGruen_32x32.Name = "AmpelGruen_32x32";
      this.AmpelGruen_32x32.Size = new Size(32, 32);
      this.AmpelGruen_32x32.TabIndex = 40;
      this.AmpelGruen_32x32.TabStop = false;
      this.label26.Location = new Point(608, 104);
      this.label26.Name = "label26";
      this.label26.Size = new Size(104, 16);
      this.label26.TabIndex = 44;
      this.label26.Text = "DeviceMS1_24x24";
      this.DeviceMS1_24x24.Image = (Image) componentResourceManager.GetObject("DeviceMS1_24x24.Image");
      this.DeviceMS1_24x24.Location = new Point(568, 96);
      this.DeviceMS1_24x24.Name = "DeviceMS1_24x24";
      this.DeviceMS1_24x24.Size = new Size(32, 32);
      this.DeviceMS1_24x24.TabIndex = 43;
      this.DeviceMS1_24x24.TabStop = false;
      this.label27.Location = new Point(608, 128);
      this.label27.Name = "label27";
      this.label27.Size = new Size(128, 16);
      this.label27.TabIndex = 46;
      this.label27.Text = "DeviceIZM208_24x24";
      this.DeviceIZM208_24x24.Image = (Image) componentResourceManager.GetObject("DeviceIZM208_24x24.Image");
      this.DeviceIZM208_24x24.Location = new Point(568, 120);
      this.DeviceIZM208_24x24.Name = "DeviceIZM208_24x24";
      this.DeviceIZM208_24x24.Size = new Size(32, 32);
      this.DeviceIZM208_24x24.TabIndex = 45;
      this.DeviceIZM208_24x24.TabStop = false;
      this.label28.Location = new Point(608, 152);
      this.label28.Name = "label28";
      this.label28.Size = new Size(136, 16);
      this.label28.TabIndex = 48;
      this.label28.Text = "DeviceIZM972_24x24";
      this.DeviceIZM972_24x24.Image = (Image) componentResourceManager.GetObject("DeviceIZM972_24x24.Image");
      this.DeviceIZM972_24x24.Location = new Point(568, 144);
      this.DeviceIZM972_24x24.Name = "DeviceIZM972_24x24";
      this.DeviceIZM972_24x24.Size = new Size(32, 32);
      this.DeviceIZM972_24x24.TabIndex = 47;
      this.DeviceIZM972_24x24.TabStop = false;
      this.label29.Location = new Point(608, 176);
      this.label29.Name = "label29";
      this.label29.Size = new Size(136, 16);
      this.label29.TabIndex = 50;
      this.label29.Text = "DeviceSaarius_24x24";
      this.DeviceSaarius_24x24.Image = (Image) componentResourceManager.GetObject("DeviceSaarius_24x24.Image");
      this.DeviceSaarius_24x24.Location = new Point(568, 168);
      this.DeviceSaarius_24x24.Name = "DeviceSaarius_24x24";
      this.DeviceSaarius_24x24.Size = new Size(24, 24);
      this.DeviceSaarius_24x24.TabIndex = 49;
      this.DeviceSaarius_24x24.TabStop = false;
      this.label30.Location = new Point(600, 600);
      this.label30.Name = "label30";
      this.label30.Size = new Size(88, 16);
      this.label30.TabIndex = 52;
      this.label30.Text = "Device_24x24";
      this.pictureBox26.Image = (Image) componentResourceManager.GetObject("pictureBox26.Image");
      this.pictureBox26.Location = new Point(560, 592);
      this.pictureBox26.Name = "pictureBox26";
      this.pictureBox26.Size = new Size(32, 32);
      this.pictureBox26.TabIndex = 51;
      this.pictureBox26.TabStop = false;
      this.label31.Location = new Point(600, 640);
      this.label31.Name = "label31";
      this.label31.Size = new Size(88, 16);
      this.label31.TabIndex = 54;
      this.label31.Text = "Device_24x24";
      this.pictureBox27.Image = (Image) componentResourceManager.GetObject("pictureBox27.Image");
      this.pictureBox27.Location = new Point(560, 632);
      this.pictureBox27.Name = "pictureBox27";
      this.pictureBox27.Size = new Size(32, 32);
      this.pictureBox27.TabIndex = 53;
      this.pictureBox27.TabStop = false;
      this.label32.Location = new Point(600, 680);
      this.label32.Name = "label32";
      this.label32.Size = new Size(88, 16);
      this.label32.TabIndex = 56;
      this.label32.Text = "Device_24x24";
      this.pictureBox28.Image = (Image) componentResourceManager.GetObject("pictureBox28.Image");
      this.pictureBox28.Location = new Point(560, 672);
      this.pictureBox28.Name = "pictureBox28";
      this.pictureBox28.Size = new Size(32, 32);
      this.pictureBox28.TabIndex = 55;
      this.pictureBox28.TabStop = false;
      this.label33.Location = new Point(904, 592);
      this.label33.Name = "label33";
      this.label33.Size = new Size(88, 16);
      this.label33.TabIndex = 58;
      this.label33.Text = "Device_32x32";
      this.pictureBox29.Image = (Image) componentResourceManager.GetObject("pictureBox29.Image");
      this.pictureBox29.Location = new Point(864, 584);
      this.pictureBox29.Name = "pictureBox29";
      this.pictureBox29.Size = new Size(32, 32);
      this.pictureBox29.TabIndex = 57;
      this.pictureBox29.TabStop = false;
      this.label34.Location = new Point(904, 632);
      this.label34.Name = "label34";
      this.label34.Size = new Size(88, 16);
      this.label34.TabIndex = 60;
      this.label34.Text = "Device_32x32";
      this.pictureBox30.Image = (Image) componentResourceManager.GetObject("pictureBox30.Image");
      this.pictureBox30.Location = new Point(864, 624);
      this.pictureBox30.Name = "pictureBox30";
      this.pictureBox30.Size = new Size(32, 32);
      this.pictureBox30.TabIndex = 59;
      this.pictureBox30.TabStop = false;
      this.label35.Location = new Point(904, 672);
      this.label35.Name = "label35";
      this.label35.Size = new Size(88, 16);
      this.label35.TabIndex = 62;
      this.label35.Text = "Device_32x32";
      this.pictureBox31.Image = (Image) componentResourceManager.GetObject("pictureBox31.Image");
      this.pictureBox31.Location = new Point(864, 664);
      this.pictureBox31.Name = "pictureBox31";
      this.pictureBox31.Size = new Size(32, 32);
      this.pictureBox31.TabIndex = 61;
      this.pictureBox31.TabStop = false;
      this.label36.Location = new Point(752, 560);
      this.label36.Name = "label36";
      this.label36.Size = new Size(88, 16);
      this.label36.TabIndex = 64;
      this.label36.Text = "Device_32x32";
      this.pictureBox32.Image = (Image) componentResourceManager.GetObject("pictureBox32.Image");
      this.pictureBox32.Location = new Point(712, 552);
      this.pictureBox32.Name = "pictureBox32";
      this.pictureBox32.Size = new Size(32, 32);
      this.pictureBox32.TabIndex = 63;
      this.pictureBox32.TabStop = false;
      this.label37.Location = new Point(752, 600);
      this.label37.Name = "label37";
      this.label37.Size = new Size(88, 16);
      this.label37.TabIndex = 66;
      this.label37.Text = "Device_32x32";
      this.pictureBox33.Image = (Image) componentResourceManager.GetObject("pictureBox33.Image");
      this.pictureBox33.Location = new Point(712, 592);
      this.pictureBox33.Name = "pictureBox33";
      this.pictureBox33.Size = new Size(32, 32);
      this.pictureBox33.TabIndex = 65;
      this.pictureBox33.TabStop = false;
      this.label38.Location = new Point(752, 640);
      this.label38.Name = "label38";
      this.label38.Size = new Size(88, 16);
      this.label38.TabIndex = 68;
      this.label38.Text = "Device_32x32";
      this.pictureBox34.Image = (Image) componentResourceManager.GetObject("pictureBox34.Image");
      this.pictureBox34.Location = new Point(712, 632);
      this.pictureBox34.Name = "pictureBox34";
      this.pictureBox34.Size = new Size(32, 32);
      this.pictureBox34.TabIndex = 67;
      this.pictureBox34.TabStop = false;
      this.label39.Location = new Point(752, 680);
      this.label39.Name = "label39";
      this.label39.Size = new Size(88, 16);
      this.label39.TabIndex = 70;
      this.label39.Text = "Device_32x32";
      this.pictureBox35.Image = (Image) componentResourceManager.GetObject("pictureBox35.Image");
      this.pictureBox35.Location = new Point(712, 672);
      this.pictureBox35.Name = "pictureBox35";
      this.pictureBox35.Size = new Size(32, 32);
      this.pictureBox35.TabIndex = 69;
      this.pictureBox35.TabStop = false;
      this.ScanPC.Image = (Image) componentResourceManager.GetObject("ScanPC.Image");
      this.ScanPC.Location = new Point(824, 104);
      this.ScanPC.Name = "ScanPC";
      this.ScanPC.Size = new Size(56, 48);
      this.ScanPC.TabIndex = 0;
      this.ScanPC.TabStop = false;
      this.label40.Location = new Point(824, 80);
      this.label40.Name = "label40";
      this.label40.Size = new Size(72, 16);
      this.label40.TabIndex = 1;
      this.label40.Text = "ScanPC";
      this.label41.Location = new Point(808, 160);
      this.label41.Name = "label41";
      this.label41.Size = new Size(80, 16);
      this.label41.TabIndex = 3;
      this.label41.Text = "Exclamation";
      this.Bomb.Image = (Image) componentResourceManager.GetObject("Bomb.Image");
      this.Bomb.Location = new Point(816, 256);
      this.Bomb.Name = "Bomb";
      this.Bomb.Size = new Size(40, 40);
      this.Bomb.TabIndex = 4;
      this.Bomb.TabStop = false;
      this.label42.Location = new Point(816, 232);
      this.label42.Name = "label42";
      this.label42.Size = new Size(56, 16);
      this.label42.TabIndex = 5;
      this.label42.Text = "Bomb";
      this.DesktopPC.Image = (Image) componentResourceManager.GetObject("DesktopPC.Image");
      this.DesktopPC.Location = new Point(824, 40);
      this.DesktopPC.Name = "DesktopPC";
      this.DesktopPC.Size = new Size(40, 32);
      this.DesktopPC.TabIndex = 6;
      this.DesktopPC.TabStop = false;
      this.label43.Location = new Point(816, 24);
      this.label43.Name = "label43";
      this.label43.Size = new Size(88, 16);
      this.label43.TabIndex = 7;
      this.label43.Text = "DesktopPC";
      this.MultidataS1_208x208.Image = (Image) componentResourceManager.GetObject("MultidataS1_208x208.Image");
      this.MultidataS1_208x208.Location = new Point(920, 40);
      this.MultidataS1_208x208.Name = "MultidataS1_208x208";
      this.MultidataS1_208x208.Size = new Size(208, 208);
      this.MultidataS1_208x208.TabIndex = 8;
      this.MultidataS1_208x208.TabStop = false;
      this.label44.Location = new Point(912, 24);
      this.label44.Name = "label44";
      this.label44.Size = new Size(136, 16);
      this.label44.TabIndex = 9;
      this.label44.Text = "Multidata_208x208";
      this.Exclamation.Image = (Image) componentResourceManager.GetObject("Exclamation.Image");
      this.Exclamation.Location = new Point(816, 184);
      this.Exclamation.Name = "Exclamation";
      this.Exclamation.Size = new Size(40, 40);
      this.Exclamation.TabIndex = 71;
      this.Exclamation.TabStop = false;
      this.FunctionWasserhahn_16x16.Image = (Image) componentResourceManager.GetObject("FunctionWasserhahn_16x16.Image");
      this.FunctionWasserhahn_16x16.Location = new Point(16, 72);
      this.FunctionWasserhahn_16x16.Name = "FunctionWasserhahn_16x16";
      this.FunctionWasserhahn_16x16.Size = new Size(16, 16);
      this.FunctionWasserhahn_16x16.TabIndex = 76;
      this.FunctionWasserhahn_16x16.TabStop = false;
      this.label47.Location = new Point(40, 72);
      this.label47.Name = "label47";
      this.label47.Size = new Size(152, 24);
      this.label47.TabIndex = 77;
      this.label47.Text = "FunctionWasserhahn_16x16";
      this.label48.Location = new Point(224, 208);
      this.label48.Name = "label48";
      this.label48.Size = new Size(112, 16);
      this.label48.TabIndex = 79;
      this.label48.Text = "MenuDetails_20x20";
      this.MenuDetails_20x20.Image = (Image) componentResourceManager.GetObject("MenuDetails_20x20.Image");
      this.MenuDetails_20x20.Location = new Point(192, 208);
      this.MenuDetails_20x20.Name = "MenuDetails_20x20";
      this.MenuDetails_20x20.Size = new Size(24, 24);
      this.MenuDetails_20x20.TabIndex = 78;
      this.MenuDetails_20x20.TabStop = false;
      this.label49.Location = new Point(224, 232);
      this.label49.Name = "label49";
      this.label49.Size = new Size(112, 16);
      this.label49.TabIndex = 81;
      this.label49.Text = "MenuDelete_20x20";
      this.MenuDelete_20x20.Image = (Image) componentResourceManager.GetObject("MenuDelete_20x20.Image");
      this.MenuDelete_20x20.Location = new Point(192, 232);
      this.MenuDelete_20x20.Name = "MenuDelete_20x20";
      this.MenuDelete_20x20.Size = new Size(24, 24);
      this.MenuDelete_20x20.TabIndex = 80;
      this.MenuDelete_20x20.TabStop = false;
      this.label50.Location = new Point(224, 256);
      this.label50.Name = "label50";
      this.label50.Size = new Size(112, 16);
      this.label50.TabIndex = 83;
      this.label50.Text = "MenuRefresh_20x20";
      this.MenuRefresh_20x20.Image = (Image) componentResourceManager.GetObject("MenuRefresh_20x20.Image");
      this.MenuRefresh_20x20.Location = new Point(192, 256);
      this.MenuRefresh_20x20.Name = "MenuRefresh_20x20";
      this.MenuRefresh_20x20.Size = new Size(24, 24);
      this.MenuRefresh_20x20.TabIndex = 82;
      this.MenuRefresh_20x20.TabStop = false;
      this.label51.Location = new Point(224, 280);
      this.label51.Name = "label51";
      this.label51.Size = new Size(128, 16);
      this.label51.TabIndex = 85;
      this.label51.Text = "MenuAllDelete_20x20";
      this.MenuAllDelete_20x20.Image = (Image) componentResourceManager.GetObject("MenuAllDelete_20x20.Image");
      this.MenuAllDelete_20x20.Location = new Point(192, 280);
      this.MenuAllDelete_20x20.Name = "MenuAllDelete_20x20";
      this.MenuAllDelete_20x20.Size = new Size(24, 24);
      this.MenuAllDelete_20x20.TabIndex = 84;
      this.MenuAllDelete_20x20.TabStop = false;
      this.label53.Location = new Point(224, 80);
      this.label53.Name = "label53";
      this.label53.Size = new Size(128, 16);
      this.label53.TabIndex = 89;
      this.label53.Text = "DeviceSearch_20x20";
      this.DeviceSearch_20x20.Image = (Image) componentResourceManager.GetObject("DeviceSearch_20x20.Image");
      this.DeviceSearch_20x20.Location = new Point(192, 80);
      this.DeviceSearch_20x20.Name = "DeviceSearch_20x20";
      this.DeviceSearch_20x20.Size = new Size(24, 24);
      this.DeviceSearch_20x20.TabIndex = 88;
      this.DeviceSearch_20x20.TabStop = false;
      this.FunctionUnSelected_16x16.Image = (Image) componentResourceManager.GetObject("FunctionUnSelected_16x16.Image");
      this.FunctionUnSelected_16x16.Location = new Point(16, 24);
      this.FunctionUnSelected_16x16.Name = "FunctionUnSelected_16x16";
      this.FunctionUnSelected_16x16.Size = new Size(16, 24);
      this.FunctionUnSelected_16x16.TabIndex = 92;
      this.FunctionUnSelected_16x16.TabStop = false;
      this.label55.Location = new Point(32, 24);
      this.label55.Name = "label55";
      this.label55.Size = new Size(184, 24);
      this.label55.TabIndex = 93;
      this.label55.Text = "FunctionUnSelected_16x16";
      this.FunctionGroupSelected_16x16.Image = (Image) componentResourceManager.GetObject("FunctionGroupSelected_16x16.Image");
      this.FunctionGroupSelected_16x16.Location = new Point(240, 48);
      this.FunctionGroupSelected_16x16.Name = "FunctionGroupSelected_16x16";
      this.FunctionGroupSelected_16x16.Size = new Size(16, 24);
      this.FunctionGroupSelected_16x16.TabIndex = 94;
      this.FunctionGroupSelected_16x16.TabStop = false;
      this.label56.Location = new Point(264, 48);
      this.label56.Name = "label56";
      this.label56.Size = new Size(176, 24);
      this.label56.TabIndex = 95;
      this.label56.Text = "FunctionGroupSelected_16x16";
      this.FunctionTime_16x16.Image = (Image) componentResourceManager.GetObject("FunctionTime_16x16.Image");
      this.FunctionTime_16x16.Location = new Point(16, 96);
      this.FunctionTime_16x16.Name = "FunctionTime_16x16";
      this.FunctionTime_16x16.Size = new Size(16, 16);
      this.FunctionTime_16x16.TabIndex = 96;
      this.FunctionTime_16x16.TabStop = false;
      this.label57.Location = new Point(40, 96);
      this.label57.Name = "label57";
      this.label57.Size = new Size(152, 24);
      this.label57.TabIndex = 97;
      this.label57.Text = "FunctionTime_16x16";
      this.FunctionInfo_16x16.Image = (Image) componentResourceManager.GetObject("FunctionInfo_16x16.Image");
      this.FunctionInfo_16x16.Location = new Point(16, 120);
      this.FunctionInfo_16x16.Name = "FunctionInfo_16x16";
      this.FunctionInfo_16x16.Size = new Size(16, 24);
      this.FunctionInfo_16x16.TabIndex = 98;
      this.FunctionInfo_16x16.TabStop = false;
      this.label58.Location = new Point(40, 120);
      this.label58.Name = "label58";
      this.label58.Size = new Size(152, 24);
      this.label58.TabIndex = 99;
      this.label58.Text = "FunctionInfo_16x16";
      this.FunctionDollar_16x16.Image = (Image) componentResourceManager.GetObject("FunctionDollar_16x16.Image");
      this.FunctionDollar_16x16.Location = new Point(16, 144);
      this.FunctionDollar_16x16.Name = "FunctionDollar_16x16";
      this.FunctionDollar_16x16.Size = new Size(16, 24);
      this.FunctionDollar_16x16.TabIndex = 100;
      this.FunctionDollar_16x16.TabStop = false;
      this.label59.Location = new Point(40, 144);
      this.label59.Name = "label59";
      this.label59.Size = new Size(152, 24);
      this.label59.TabIndex = 101;
      this.label59.Text = "FunctionDollar_16x16";
      this.FunctionTemperature_16x16.Image = (Image) componentResourceManager.GetObject("FunctionTemperature_16x16.Image");
      this.FunctionTemperature_16x16.Location = new Point(16, 168);
      this.FunctionTemperature_16x16.Name = "FunctionTemperature_16x16";
      this.FunctionTemperature_16x16.Size = new Size(16, 24);
      this.FunctionTemperature_16x16.TabIndex = 102;
      this.FunctionTemperature_16x16.TabStop = false;
      this.label60.Location = new Point(40, 168);
      this.label60.Name = "label60";
      this.label60.Size = new Size(152, 24);
      this.label60.TabIndex = 103;
      this.label60.Text = "FunctionTemperature_16x16";
      this.FunctionEnergy_16x16.Image = (Image) componentResourceManager.GetObject("FunctionEnergy_16x16.Image");
      this.FunctionEnergy_16x16.Location = new Point(16, 192);
      this.FunctionEnergy_16x16.Name = "FunctionEnergy_16x16";
      this.FunctionEnergy_16x16.Size = new Size(16, 24);
      this.FunctionEnergy_16x16.TabIndex = 104;
      this.FunctionEnergy_16x16.TabStop = false;
      this.label61.Location = new Point(40, 192);
      this.label61.Name = "label61";
      this.label61.Size = new Size(152, 24);
      this.label61.TabIndex = 105;
      this.label61.Text = "FunctionEnergy_16x16";
      this.FunctionGoup_16x16.Image = (Image) componentResourceManager.GetObject("FunctionGoup_16x16.Image");
      this.FunctionGoup_16x16.Location = new Point(16, 48);
      this.FunctionGoup_16x16.Name = "FunctionGoup_16x16";
      this.FunctionGoup_16x16.Size = new Size(24, 24);
      this.FunctionGoup_16x16.TabIndex = 106;
      this.FunctionGoup_16x16.TabStop = false;
      this.label62.Location = new Point(40, 48);
      this.label62.Name = "label62";
      this.label62.Size = new Size(136, 24);
      this.label62.TabIndex = 107;
      this.label62.Text = "FunctionGoup_16x16";
      this.label63.Location = new Point(264, 24);
      this.label63.Name = "label63";
      this.label63.Size = new Size(136, 24);
      this.label63.TabIndex = 109;
      this.label63.Text = "FunctionSelected_16x16";
      this.FunctionSelected_16x16.Image = (Image) componentResourceManager.GetObject("FunctionSelected_16x16.Image");
      this.FunctionSelected_16x16.Location = new Point(240, 24);
      this.FunctionSelected_16x16.Name = "FunctionSelected_16x16";
      this.FunctionSelected_16x16.Size = new Size(16, 16);
      this.FunctionSelected_16x16.TabIndex = 108;
      this.FunctionSelected_16x16.TabStop = false;
      this.groupBox1.Controls.Add((Control) this.FunctionPowerSel_16x16);
      this.groupBox1.Controls.Add((Control) this.label52);
      this.groupBox1.Controls.Add((Control) this.FunctionPower_16x16);
      this.groupBox1.Controls.Add((Control) this.label54);
      this.groupBox1.Controls.Add((Control) this.FunctionInOutSel_16x16);
      this.groupBox1.Controls.Add((Control) this.label11);
      this.groupBox1.Controls.Add((Control) this.FunctionInOut_16x16);
      this.groupBox1.Controls.Add((Control) this.label12);
      this.groupBox1.Controls.Add((Control) this.FunctionDefaultSel_16x16);
      this.groupBox1.Controls.Add((Control) this.label70);
      this.groupBox1.Controls.Add((Control) this.FunctionDefault_16x16);
      this.groupBox1.Controls.Add((Control) this.label71);
      this.groupBox1.Controls.Add((Control) this.FunctionInfoSel_16x16);
      this.groupBox1.Controls.Add((Control) this.label64);
      this.groupBox1.Controls.Add((Control) this.FunctionDollarSel_16x16);
      this.groupBox1.Controls.Add((Control) this.label65);
      this.groupBox1.Controls.Add((Control) this.FunctionTemperatureSel_16x16);
      this.groupBox1.Controls.Add((Control) this.label66);
      this.groupBox1.Controls.Add((Control) this.FunctionEnergySel_16x16);
      this.groupBox1.Controls.Add((Control) this.label67);
      this.groupBox1.Controls.Add((Control) this.FunctionWasserhahnSel_16x16);
      this.groupBox1.Controls.Add((Control) this.label68);
      this.groupBox1.Controls.Add((Control) this.FunctionTimeSel_16x16);
      this.groupBox1.Controls.Add((Control) this.label69);
      this.groupBox1.Controls.Add((Control) this.FunctionInfo_16x16);
      this.groupBox1.Controls.Add((Control) this.label58);
      this.groupBox1.Controls.Add((Control) this.FunctionDollar_16x16);
      this.groupBox1.Controls.Add((Control) this.label59);
      this.groupBox1.Controls.Add((Control) this.FunctionTemperature_16x16);
      this.groupBox1.Controls.Add((Control) this.label60);
      this.groupBox1.Controls.Add((Control) this.FunctionEnergy_16x16);
      this.groupBox1.Controls.Add((Control) this.label61);
      this.groupBox1.Controls.Add((Control) this.FunctionGoup_16x16);
      this.groupBox1.Controls.Add((Control) this.label62);
      this.groupBox1.Controls.Add((Control) this.label63);
      this.groupBox1.Controls.Add((Control) this.FunctionSelected_16x16);
      this.groupBox1.Controls.Add((Control) this.FunctionWasserhahn_16x16);
      this.groupBox1.Controls.Add((Control) this.label47);
      this.groupBox1.Controls.Add((Control) this.FunctionUnSelected_16x16);
      this.groupBox1.Controls.Add((Control) this.label55);
      this.groupBox1.Controls.Add((Control) this.FunctionGroupSelected_16x16);
      this.groupBox1.Controls.Add((Control) this.label56);
      this.groupBox1.Controls.Add((Control) this.FunctionTime_16x16);
      this.groupBox1.Controls.Add((Control) this.label57);
      this.groupBox1.Controls.Add((Control) this.FunctionDataloggerSel_16x16);
      this.groupBox1.Controls.Add((Control) this.label7);
      this.groupBox1.Controls.Add((Control) this.FunctionDatalogger_16x16);
      this.groupBox1.Controls.Add((Control) this.label8);
      this.groupBox1.Location = new Point(32, 416);
      this.groupBox1.Name = "groupBox1";
      this.groupBox1.Size = new Size(472, 312);
      this.groupBox1.TabIndex = 111;
      this.groupBox1.TabStop = false;
      this.groupBox1.Text = "Für die Functionpalette im Designer";
      this.groupBox1.Enter += new System.EventHandler(this.groupBox1_Enter);
      this.FunctionPowerSel_16x16.Image = (Image) componentResourceManager.GetObject("FunctionPowerSel_16x16.Image");
      this.FunctionPowerSel_16x16.Location = new Point(240, 288);
      this.FunctionPowerSel_16x16.Name = "FunctionPowerSel_16x16";
      this.FunctionPowerSel_16x16.Size = new Size(16, 16);
      this.FunctionPowerSel_16x16.TabIndex = 133;
      this.FunctionPowerSel_16x16.TabStop = false;
      this.label52.Location = new Point(264, 288);
      this.label52.Name = "label52";
      this.label52.Size = new Size(176, 24);
      this.label52.TabIndex = 134;
      this.label52.Text = "FunctionPowerSel_16x16";
      this.FunctionPower_16x16.Image = (Image) componentResourceManager.GetObject("FunctionPower_16x16.Image");
      this.FunctionPower_16x16.Location = new Point(16, 288);
      this.FunctionPower_16x16.Name = "FunctionPower_16x16";
      this.FunctionPower_16x16.Size = new Size(16, 16);
      this.FunctionPower_16x16.TabIndex = 131;
      this.FunctionPower_16x16.TabStop = false;
      this.label54.Location = new Point(40, 288);
      this.label54.Name = "label54";
      this.label54.Size = new Size(152, 24);
      this.label54.TabIndex = 132;
      this.label54.Text = "FunctionPower_16x16";
      this.FunctionInOutSel_16x16.Image = (Image) componentResourceManager.GetObject("FunctionInOutSel_16x16.Image");
      this.FunctionInOutSel_16x16.Location = new Point(240, 264);
      this.FunctionInOutSel_16x16.Name = "FunctionInOutSel_16x16";
      this.FunctionInOutSel_16x16.Size = new Size(16, 16);
      this.FunctionInOutSel_16x16.TabIndex = 129;
      this.FunctionInOutSel_16x16.TabStop = false;
      this.label11.Location = new Point(264, 264);
      this.label11.Name = "label11";
      this.label11.Size = new Size(176, 24);
      this.label11.TabIndex = 130;
      this.label11.Text = "FunctionInOutSel_16x16";
      this.FunctionInOut_16x16.Image = (Image) componentResourceManager.GetObject("FunctionInOut_16x16.Image");
      this.FunctionInOut_16x16.Location = new Point(16, 264);
      this.FunctionInOut_16x16.Name = "FunctionInOut_16x16";
      this.FunctionInOut_16x16.Size = new Size(16, 16);
      this.FunctionInOut_16x16.TabIndex = (int) sbyte.MaxValue;
      this.FunctionInOut_16x16.TabStop = false;
      this.label12.Location = new Point(40, 264);
      this.label12.Name = "label12";
      this.label12.Size = new Size(152, 24);
      this.label12.TabIndex = 128;
      this.label12.Text = "FunctionInOut_16x16";
      this.FunctionDefaultSel_16x16.Image = (Image) componentResourceManager.GetObject("FunctionDefaultSel_16x16.Image");
      this.FunctionDefaultSel_16x16.Location = new Point(240, 216);
      this.FunctionDefaultSel_16x16.Name = "FunctionDefaultSel_16x16";
      this.FunctionDefaultSel_16x16.Size = new Size(16, 16);
      this.FunctionDefaultSel_16x16.TabIndex = 124;
      this.FunctionDefaultSel_16x16.TabStop = false;
      this.label70.Location = new Point(264, 216);
      this.label70.Name = "label70";
      this.label70.Size = new Size(176, 24);
      this.label70.TabIndex = 125;
      this.label70.Text = "FunctionDefaultSel_16x16";
      this.FunctionDefault_16x16.Image = (Image) componentResourceManager.GetObject("FunctionDefault_16x16.Image");
      this.FunctionDefault_16x16.Location = new Point(16, 216);
      this.FunctionDefault_16x16.Name = "FunctionDefault_16x16";
      this.FunctionDefault_16x16.Size = new Size(16, 16);
      this.FunctionDefault_16x16.TabIndex = 122;
      this.FunctionDefault_16x16.TabStop = false;
      this.label71.Location = new Point(40, 216);
      this.label71.Name = "label71";
      this.label71.Size = new Size(152, 24);
      this.label71.TabIndex = 123;
      this.label71.Text = "FunctionDefault_16x16";
      this.FunctionInfoSel_16x16.Image = (Image) componentResourceManager.GetObject("FunctionInfoSel_16x16.Image");
      this.FunctionInfoSel_16x16.Location = new Point(240, 120);
      this.FunctionInfoSel_16x16.Name = "FunctionInfoSel_16x16";
      this.FunctionInfoSel_16x16.Size = new Size(16, 24);
      this.FunctionInfoSel_16x16.TabIndex = 114;
      this.FunctionInfoSel_16x16.TabStop = false;
      this.label64.Location = new Point(264, 120);
      this.label64.Name = "label64";
      this.label64.Size = new Size(152, 24);
      this.label64.TabIndex = 115;
      this.label64.Text = "FunctionInfoSel_16x16";
      this.FunctionDollarSel_16x16.Image = (Image) componentResourceManager.GetObject("FunctionDollarSel_16x16.Image");
      this.FunctionDollarSel_16x16.Location = new Point(240, 144);
      this.FunctionDollarSel_16x16.Name = "FunctionDollarSel_16x16";
      this.FunctionDollarSel_16x16.Size = new Size(16, 24);
      this.FunctionDollarSel_16x16.TabIndex = 116;
      this.FunctionDollarSel_16x16.TabStop = false;
      this.label65.Location = new Point(264, 144);
      this.label65.Name = "label65";
      this.label65.Size = new Size(152, 24);
      this.label65.TabIndex = 117;
      this.label65.Text = "FunctionDollarSel_16x16";
      this.FunctionTemperatureSel_16x16.Image = (Image) componentResourceManager.GetObject("FunctionTemperatureSel_16x16.Image");
      this.FunctionTemperatureSel_16x16.Location = new Point(240, 168);
      this.FunctionTemperatureSel_16x16.Name = "FunctionTemperatureSel_16x16";
      this.FunctionTemperatureSel_16x16.Size = new Size(16, 24);
      this.FunctionTemperatureSel_16x16.TabIndex = 118;
      this.FunctionTemperatureSel_16x16.TabStop = false;
      this.label66.Location = new Point(264, 168);
      this.label66.Name = "label66";
      this.label66.Size = new Size(168, 24);
      this.label66.TabIndex = 119;
      this.label66.Text = "FunctionTemperatureSel_16x16";
      this.FunctionEnergySel_16x16.Image = (Image) componentResourceManager.GetObject("FunctionEnergySel_16x16.Image");
      this.FunctionEnergySel_16x16.Location = new Point(240, 192);
      this.FunctionEnergySel_16x16.Name = "FunctionEnergySel_16x16";
      this.FunctionEnergySel_16x16.Size = new Size(16, 24);
      this.FunctionEnergySel_16x16.TabIndex = 120;
      this.FunctionEnergySel_16x16.TabStop = false;
      this.label67.Location = new Point(264, 192);
      this.label67.Name = "label67";
      this.label67.Size = new Size(152, 24);
      this.label67.TabIndex = 121;
      this.label67.Text = "FunctionEnergySel_16x16";
      this.FunctionWasserhahnSel_16x16.Image = (Image) componentResourceManager.GetObject("FunctionWasserhahnSel_16x16.Image");
      this.FunctionWasserhahnSel_16x16.Location = new Point(240, 72);
      this.FunctionWasserhahnSel_16x16.Name = "FunctionWasserhahnSel_16x16";
      this.FunctionWasserhahnSel_16x16.Size = new Size(16, 16);
      this.FunctionWasserhahnSel_16x16.TabIndex = 110;
      this.FunctionWasserhahnSel_16x16.TabStop = false;
      this.label68.Location = new Point(264, 72);
      this.label68.Name = "label68";
      this.label68.Size = new Size(176, 24);
      this.label68.TabIndex = 111;
      this.label68.Text = "FunctionWasserhahnSel_16x16";
      this.FunctionTimeSel_16x16.Image = (Image) componentResourceManager.GetObject("FunctionTimeSel_16x16.Image");
      this.FunctionTimeSel_16x16.Location = new Point(240, 96);
      this.FunctionTimeSel_16x16.Name = "FunctionTimeSel_16x16";
      this.FunctionTimeSel_16x16.Size = new Size(16, 24);
      this.FunctionTimeSel_16x16.TabIndex = 112;
      this.FunctionTimeSel_16x16.TabStop = false;
      this.label69.Location = new Point(264, 96);
      this.label69.Name = "label69";
      this.label69.Size = new Size(152, 24);
      this.label69.TabIndex = 113;
      this.label69.Text = "FunctionTimeSel_16x16";
      this.FunctionDataloggerSel_16x16.Image = (Image) componentResourceManager.GetObject("FunctionDataloggerSel_16x16.Image");
      this.FunctionDataloggerSel_16x16.Location = new Point(240, 240);
      this.FunctionDataloggerSel_16x16.Name = "FunctionDataloggerSel_16x16";
      this.FunctionDataloggerSel_16x16.Size = new Size(16, 16);
      this.FunctionDataloggerSel_16x16.TabIndex = 124;
      this.FunctionDataloggerSel_16x16.TabStop = false;
      this.label7.Location = new Point(264, 240);
      this.label7.Name = "label7";
      this.label7.Size = new Size(176, 24);
      this.label7.TabIndex = 125;
      this.label7.Text = "FunctionDataloggerSel_16x16";
      this.FunctionDatalogger_16x16.Image = (Image) componentResourceManager.GetObject("FunctionDatalogger_16x16.Image");
      this.FunctionDatalogger_16x16.Location = new Point(16, 240);
      this.FunctionDatalogger_16x16.Name = "FunctionDatalogger_16x16";
      this.FunctionDatalogger_16x16.Size = new Size(16, 16);
      this.FunctionDatalogger_16x16.TabIndex = 122;
      this.FunctionDatalogger_16x16.TabStop = false;
      this.label8.Location = new Point(40, 240);
      this.label8.Name = "label8";
      this.label8.Size = new Size(152, 24);
      this.label8.TabIndex = 123;
      this.label8.Text = "FunctionDatalogger_16x16";
      this.label3.Location = new Point(40, 152);
      this.label3.Name = "label3";
      this.label3.Size = new Size(112, 16);
      this.label3.TabIndex = 114;
      this.label3.Text = "KnotenSel_16x16";
      this.KnotenSel_16x16.Image = (Image) componentResourceManager.GetObject("KnotenSel_16x16.Image");
      this.KnotenSel_16x16.Location = new Point(24, 152);
      this.KnotenSel_16x16.Name = "KnotenSel_16x16";
      this.KnotenSel_16x16.Size = new Size(16, 16);
      this.KnotenSel_16x16.TabIndex = 113;
      this.KnotenSel_16x16.TabStop = false;
      this.label72.Location = new Point(40, 176);
      this.label72.Name = "label72";
      this.label72.Size = new Size(112, 16);
      this.label72.TabIndex = 115;
      this.label72.Text = "DeviceSel_16x16";
      this.DeviceSel_16x16.Image = (Image) componentResourceManager.GetObject("DeviceSel_16x16.Image");
      this.DeviceSel_16x16.Location = new Point(24, 176);
      this.DeviceSel_16x16.Name = "DeviceSel_16x16";
      this.DeviceSel_16x16.Size = new Size(16, 16);
      this.DeviceSel_16x16.TabIndex = 112;
      this.DeviceSel_16x16.TabStop = false;
      this.label73.Location = new Point(40, 208);
      this.label73.Name = "label73";
      this.label73.Size = new Size(136, 16);
      this.label73.TabIndex = 114;
      this.label73.Text = "KnotenInactiveSel_16x16";
      this.KnotenInactiveSel_16x16.Image = (Image) componentResourceManager.GetObject("KnotenInactiveSel_16x16.Image");
      this.KnotenInactiveSel_16x16.Location = new Point(24, 208);
      this.KnotenInactiveSel_16x16.Name = "KnotenInactiveSel_16x16";
      this.KnotenInactiveSel_16x16.Size = new Size(16, 16);
      this.KnotenInactiveSel_16x16.TabIndex = 113;
      this.KnotenInactiveSel_16x16.TabStop = false;
      this.label74.Location = new Point(40, 232);
      this.label74.Name = "label74";
      this.label74.Size = new Size(136, 16);
      this.label74.TabIndex = 115;
      this.label74.Text = "DeviceInactiveSel_16x16";
      this.DeviceInactiveSel_16x16.Image = (Image) componentResourceManager.GetObject("DeviceInactiveSel_16x16.Image");
      this.DeviceInactiveSel_16x16.Location = new Point(24, 232);
      this.DeviceInactiveSel_16x16.Name = "DeviceInactiveSel_16x16";
      this.DeviceInactiveSel_16x16.Size = new Size(16, 16);
      this.DeviceInactiveSel_16x16.TabIndex = 112;
      this.DeviceInactiveSel_16x16.TabStop = false;
      this.label75.Location = new Point(40, 104);
      this.label75.Name = "label75";
      this.label75.Size = new Size(128, 16);
      this.label75.TabIndex = 1;
      this.label75.Text = "KnotenInactive_16x16";
      this.label76.Location = new Point(40, 128);
      this.label76.Name = "label76";
      this.label76.Size = new Size(128, 16);
      this.label76.TabIndex = 1;
      this.label76.Text = "DeviceInactive_16x16";
      this.DeviceInactive_16x16.Image = (Image) componentResourceManager.GetObject("DeviceInactive_16x16.Image");
      this.DeviceInactive_16x16.Location = new Point(24, 128);
      this.DeviceInactive_16x16.Name = "DeviceInactive_16x16";
      this.DeviceInactive_16x16.Size = new Size(16, 16);
      this.DeviceInactive_16x16.TabIndex = 0;
      this.DeviceInactive_16x16.TabStop = false;
      this.KnotenInactive_16x16.Image = (Image) componentResourceManager.GetObject("KnotenInactive_16x16.Image");
      this.KnotenInactive_16x16.Location = new Point(24, 104);
      this.KnotenInactive_16x16.Name = "KnotenInactive_16x16";
      this.KnotenInactive_16x16.Size = new Size(16, 16);
      this.KnotenInactive_16x16.TabIndex = 0;
      this.KnotenInactive_16x16.TabStop = false;
      this.label77.Location = new Point(224, 24);
      this.label77.Name = "label77";
      this.label77.Size = new Size(88, 16);
      this.label77.TabIndex = 117;
      this.label77.Text = "Search_20x20";
      this.Search_20x20.Image = (Image) componentResourceManager.GetObject("Search_20x20.Image");
      this.Search_20x20.Location = new Point(192, 24);
      this.Search_20x20.Name = "Search_20x20";
      this.Search_20x20.Size = new Size(24, 24);
      this.Search_20x20.TabIndex = 116;
      this.Search_20x20.TabStop = false;
      this.label78.Location = new Point(608, 40);
      this.label78.Name = "label78";
      this.label78.Size = new Size(136, 16);
      this.label78.TabIndex = 119;
      this.label78.Text = "DeviceZelsius_24x24";
      this.DeviceZelsius_24x24.Image = (Image) componentResourceManager.GetObject("DeviceZelsius_24x24.Image");
      this.DeviceZelsius_24x24.Location = new Point(568, 32);
      this.DeviceZelsius_24x24.Name = "DeviceZelsius_24x24";
      this.DeviceZelsius_24x24.Size = new Size(24, 24);
      this.DeviceZelsius_24x24.TabIndex = 118;
      this.DeviceZelsius_24x24.TabStop = false;
      this.label79.Location = new Point(608, 232);
      this.label79.Name = "label79";
      this.label79.Size = new Size(136, 16);
      this.label79.TabIndex = 131;
      this.label79.Text = "DeviceZelsiusSel_24x24";
      this.DeviceZelsiusSel_24x24.Image = (Image) componentResourceManager.GetObject("DeviceZelsiusSel_24x24.Image");
      this.DeviceZelsiusSel_24x24.Location = new Point(568, 224);
      this.DeviceZelsiusSel_24x24.Name = "DeviceZelsiusSel_24x24";
      this.DeviceZelsiusSel_24x24.Size = new Size(24, 24);
      this.DeviceZelsiusSel_24x24.TabIndex = 130;
      this.DeviceZelsiusSel_24x24.TabStop = false;
      this.label80.Location = new Point(608, 368);
      this.label80.Name = "label80";
      this.label80.Size = new Size(144, 16);
      this.label80.TabIndex = 129;
      this.label80.Text = "DeviceSaariusSel_24x24";
      this.DeviceSaariusSel_24x24.Image = (Image) componentResourceManager.GetObject("DeviceSaariusSel_24x24.Image");
      this.DeviceSaariusSel_24x24.Location = new Point(568, 360);
      this.DeviceSaariusSel_24x24.Name = "DeviceSaariusSel_24x24";
      this.DeviceSaariusSel_24x24.Size = new Size(24, 24);
      this.DeviceSaariusSel_24x24.TabIndex = 128;
      this.DeviceSaariusSel_24x24.TabStop = false;
      this.label81.Location = new Point(608, 344);
      this.label81.Name = "label81";
      this.label81.Size = new Size(136, 16);
      this.label81.TabIndex = (int) sbyte.MaxValue;
      this.label81.Text = "DeviceIZM972Sel_24x24";
      this.DeviceIZM972Sel_24x24.Image = (Image) componentResourceManager.GetObject("DeviceIZM972Sel_24x24.Image");
      this.DeviceIZM972Sel_24x24.Location = new Point(568, 336);
      this.DeviceIZM972Sel_24x24.Name = "DeviceIZM972Sel_24x24";
      this.DeviceIZM972Sel_24x24.Size = new Size(32, 32);
      this.DeviceIZM972Sel_24x24.TabIndex = 126;
      this.DeviceIZM972Sel_24x24.TabStop = false;
      this.label82.Location = new Point(608, 320);
      this.label82.Name = "label82";
      this.label82.Size = new Size(136, 16);
      this.label82.TabIndex = 125;
      this.label82.Text = "DeviceIZM208Sel_24x24";
      this.DeviceIZM208Sel_24x24.Image = (Image) componentResourceManager.GetObject("DeviceIZM208Sel_24x24.Image");
      this.DeviceIZM208Sel_24x24.Location = new Point(568, 312);
      this.DeviceIZM208Sel_24x24.Name = "DeviceIZM208Sel_24x24";
      this.DeviceIZM208Sel_24x24.Size = new Size(32, 32);
      this.DeviceIZM208Sel_24x24.TabIndex = 124;
      this.DeviceIZM208Sel_24x24.TabStop = false;
      this.label83.Location = new Point(608, 296);
      this.label83.Name = "label83";
      this.label83.Size = new Size(128, 16);
      this.label83.TabIndex = 123;
      this.label83.Text = "DeviceMS1Sel_24x24";
      this.DeviceMS1Sel_24x24.Image = (Image) componentResourceManager.GetObject("DeviceMS1Sel_24x24.Image");
      this.DeviceMS1Sel_24x24.Location = new Point(568, 288);
      this.DeviceMS1Sel_24x24.Name = "DeviceMS1Sel_24x24";
      this.DeviceMS1Sel_24x24.Size = new Size(32, 32);
      this.DeviceMS1Sel_24x24.TabIndex = 122;
      this.DeviceMS1Sel_24x24.TabStop = false;
      this.label84.Location = new Point(608, 264);
      this.label84.Name = "label84";
      this.label84.Size = new Size(120, 16);
      this.label84.TabIndex = 121;
      this.label84.Text = "DeviceMN1Sel_24x24";
      this.DeviceMN1Sel_24x24.Image = (Image) componentResourceManager.GetObject("DeviceMN1Sel_24x24.Image");
      this.DeviceMN1Sel_24x24.Location = new Point(568, 256);
      this.DeviceMN1Sel_24x24.Name = "DeviceMN1Sel_24x24";
      this.DeviceMN1Sel_24x24.Size = new Size(32, 32);
      this.DeviceMN1Sel_24x24.TabIndex = 120;
      this.DeviceMN1Sel_24x24.TabStop = false;
      this.label4.Location = new Point(224, 344);
      this.label4.Name = "label4";
      this.label4.Size = new Size(128, 16);
      this.label4.TabIndex = 133;
      this.label4.Text = "AddParameter_20x20";
      this.AddParameter_20x20.Image = (Image) componentResourceManager.GetObject("AddParameter_20x20.Image");
      this.AddParameter_20x20.Location = new Point(192, 344);
      this.AddParameter_20x20.Name = "AddParameter_20x20";
      this.AddParameter_20x20.Size = new Size(24, 24);
      this.AddParameter_20x20.TabIndex = 132;
      this.AddParameter_20x20.TabStop = false;
      this.label5.Location = new Point(224, 368);
      this.label5.Name = "label5";
      this.label5.Size = new Size(136, 16);
      this.label5.TabIndex = 135;
      this.label5.Text = "RemoveParameter_20x20";
      this.RemoveParameter_20x20.Image = (Image) componentResourceManager.GetObject("RemoveParameter_20x20.Image");
      this.RemoveParameter_20x20.Location = new Point(192, 368);
      this.RemoveParameter_20x20.Name = "RemoveParameter_20x20";
      this.RemoveParameter_20x20.Size = new Size(24, 24);
      this.RemoveParameter_20x20.TabIndex = 134;
      this.RemoveParameter_20x20.TabStop = false;
      this.label6.Location = new Point(592, 488);
      this.label6.Name = "label6";
      this.label6.Size = new Size(120, 16);
      this.label6.TabIndex = 137;
      this.label6.Text = "AmpelRot_32x32";
      this.AmpelRot_32x32.Image = (Image) componentResourceManager.GetObject("AmpelRot_32x32.Image");
      this.AmpelRot_32x32.Location = new Point(552, 480);
      this.AmpelRot_32x32.Name = "AmpelRot_32x32";
      this.AmpelRot_32x32.Size = new Size(32, 32);
      this.AmpelRot_32x32.TabIndex = 136;
      this.AmpelRot_32x32.TabStop = false;
      this.label9.Location = new Point(224, 176);
      this.label9.Name = "label9";
      this.label9.Size = new Size(112, 16);
      this.label9.TabIndex = 139;
      this.label9.Text = "DeviceEdit_20x20";
      this.DeviceEdit_20x20.Image = (Image) componentResourceManager.GetObject("DeviceEdit_20x20.Image");
      this.DeviceEdit_20x20.Location = new Point(192, 176);
      this.DeviceEdit_20x20.Name = "DeviceEdit_20x20";
      this.DeviceEdit_20x20.Size = new Size(24, 24);
      this.DeviceEdit_20x20.TabIndex = 138;
      this.DeviceEdit_20x20.TabStop = false;
      this.WriteDesktopPC_48x48.Image = (Image) componentResourceManager.GetObject("WriteDesktopPC_48x48.Image");
      this.WriteDesktopPC_48x48.Location = new Point(880, 312);
      this.WriteDesktopPC_48x48.Name = "WriteDesktopPC_48x48";
      this.WriteDesktopPC_48x48.Size = new Size(48, 48);
      this.WriteDesktopPC_48x48.TabIndex = 140;
      this.WriteDesktopPC_48x48.TabStop = false;
      this.label10.Location = new Point(872, 296);
      this.label10.Name = "label10";
      this.label10.Size = new Size(136, 16);
      this.label10.TabIndex = 141;
      this.label10.Text = "WriteDesktopPC_48x48";
      this.WriteDesktopPC1_48x48.Image = (Image) componentResourceManager.GetObject("WriteDesktopPC1_48x48.Image");
      this.WriteDesktopPC1_48x48.Location = new Point(880, 376);
      this.WriteDesktopPC1_48x48.Name = "WriteDesktopPC1_48x48";
      this.WriteDesktopPC1_48x48.Size = new Size(56, 48);
      this.WriteDesktopPC1_48x48.TabIndex = 142;
      this.WriteDesktopPC1_48x48.TabStop = false;
      this.WriteDesktopPC1_48x48.Click += new System.EventHandler(this.WriteDesktopPC1_48x48_Click);
      this.label13.Location = new Point(872, 360);
      this.label13.Name = "label13";
      this.label13.Size = new Size(136, 16);
      this.label13.TabIndex = 143;
      this.label13.Text = "WriteDesktopPC1_48x48";
      this.WriteDesktopPC2_48x48.Image = (Image) componentResourceManager.GetObject("WriteDesktopPC2_48x48.Image");
      this.WriteDesktopPC2_48x48.Location = new Point(880, 440);
      this.WriteDesktopPC2_48x48.Name = "WriteDesktopPC2_48x48";
      this.WriteDesktopPC2_48x48.Size = new Size(56, 48);
      this.WriteDesktopPC2_48x48.TabIndex = 144;
      this.WriteDesktopPC2_48x48.TabStop = false;
      this.label45.Location = new Point(872, 424);
      this.label45.Name = "label45";
      this.label45.Size = new Size(136, 16);
      this.label45.TabIndex = 145;
      this.label45.Text = "WriteDesktopPC2_48x48";
      this.WriteDesktopPC3_48x48.Image = (Image) componentResourceManager.GetObject("WriteDesktopPC3_48x48.Image");
      this.WriteDesktopPC3_48x48.Location = new Point(880, 512);
      this.WriteDesktopPC3_48x48.Name = "WriteDesktopPC3_48x48";
      this.WriteDesktopPC3_48x48.Size = new Size(56, 48);
      this.WriteDesktopPC3_48x48.TabIndex = 146;
      this.WriteDesktopPC3_48x48.TabStop = false;
      this.label46.Location = new Point(872, 496);
      this.label46.Name = "label46";
      this.label46.Size = new Size(144, 16);
      this.label46.TabIndex = 147;
      this.label46.Text = "WriteDesktopPC3_48x48";
      this.label85.Location = new Point(40, 264);
      this.label85.Name = "label85";
      this.label85.Size = new Size(128, 16);
      this.label85.TabIndex = 149;
      this.label85.Text = "DeviceRemoved_16x16";
      this.DeviceRemoved_16x16.Image = (Image) componentResourceManager.GetObject("DeviceRemoved_16x16.Image");
      this.DeviceRemoved_16x16.Location = new Point(24, 264);
      this.DeviceRemoved_16x16.Name = "DeviceRemoved_16x16";
      this.DeviceRemoved_16x16.Size = new Size(16, 16);
      this.DeviceRemoved_16x16.TabIndex = 148;
      this.DeviceRemoved_16x16.TabStop = false;
      this.label86.Location = new Point(40, 288);
      this.label86.Name = "label86";
      this.label86.Size = new Size(144, 16);
      this.label86.TabIndex = 151;
      this.label86.Text = "DeviceRemovedSel_16x16";
      this.DeviceRemovedSel_16x16.Image = (Image) componentResourceManager.GetObject("DeviceRemovedSel_16x16.Image");
      this.DeviceRemovedSel_16x16.Location = new Point(24, 288);
      this.DeviceRemovedSel_16x16.Name = "DeviceRemovedSel_16x16";
      this.DeviceRemovedSel_16x16.Size = new Size(16, 16);
      this.DeviceRemovedSel_16x16.TabIndex = 150;
      this.DeviceRemovedSel_16x16.TabStop = false;
      this.ReadAll_20x20.Image = (Image) componentResourceManager.GetObject("ReadAll_20x20.Image");
      this.ReadAll_20x20.Location = new Point(360, 168);
      this.ReadAll_20x20.Name = "ReadAll_20x20";
      this.ReadAll_20x20.Size = new Size(24, 24);
      this.ReadAll_20x20.TabIndex = 34;
      this.ReadAll_20x20.TabStop = false;
      this.label87.Location = new Point(392, 168);
      this.label87.Name = "label87";
      this.label87.Size = new Size(112, 16);
      this.label87.TabIndex = 35;
      this.label87.Text = "ReadAll_20x20";
      this.ScanByAddress_20x20.Image = (Image) componentResourceManager.GetObject("ScanByAddress_20x20.Image");
      this.ScanByAddress_20x20.Location = new Point(360, 200);
      this.ScanByAddress_20x20.Name = "ScanByAddress_20x20";
      this.ScanByAddress_20x20.Size = new Size(24, 24);
      this.ScanByAddress_20x20.TabIndex = 34;
      this.ScanByAddress_20x20.TabStop = false;
      this.label88.Location = new Point(392, 200);
      this.label88.Name = "label88";
      this.label88.Size = new Size(144, 16);
      this.label88.TabIndex = 35;
      this.label88.Text = "ScanByAddress_20x20";
      this.label89.Location = new Point(392, 232);
      this.label89.Name = "label89";
      this.label89.Size = new Size(136, 16);
      this.label89.TabIndex = 35;
      this.label89.Text = "ScanBySerialNo_20x20";
      this.ScanBySerialNo_20x20.Image = (Image) componentResourceManager.GetObject("ScanBySerialNo_20x20.Image");
      this.ScanBySerialNo_20x20.Location = new Point(360, 224);
      this.ScanBySerialNo_20x20.Name = "ScanBySerialNo_20x20";
      this.ScanBySerialNo_20x20.Size = new Size(24, 24);
      this.ScanBySerialNo_20x20.TabIndex = 34;
      this.ScanBySerialNo_20x20.TabStop = false;
      this.SeachByAddress_20x20.Image = (Image) componentResourceManager.GetObject("SeachByAddress_20x20.Image");
      this.SeachByAddress_20x20.Location = new Point(360, 256);
      this.SeachByAddress_20x20.Name = "SeachByAddress_20x20";
      this.SeachByAddress_20x20.Size = new Size(24, 24);
      this.SeachByAddress_20x20.TabIndex = 34;
      this.SeachByAddress_20x20.TabStop = false;
      this.label90.Location = new Point(392, 264);
      this.label90.Name = "label90";
      this.label90.Size = new Size(136, 16);
      this.label90.TabIndex = 35;
      this.label90.Text = "SearchByAddress_20x20";
      this.label91.Location = new Point(392, 288);
      this.label91.Name = "label91";
      this.label91.Size = new Size(136, 16);
      this.label91.TabIndex = 35;
      this.label91.Text = "SearchBySerialNo_20x20";
      this.SearchBySerialNo_20x20.Image = (Image) componentResourceManager.GetObject("SearchBySerialNo_20x20.Image");
      this.SearchBySerialNo_20x20.Location = new Point(360, 280);
      this.SearchBySerialNo_20x20.Name = "SearchBySerialNo_20x20";
      this.SearchBySerialNo_20x20.Size = new Size(24, 24);
      this.SearchBySerialNo_20x20.TabIndex = 34;
      this.SearchBySerialNo_20x20.TabStop = false;
      this.label92.Location = new Point(392, 320);
      this.label92.Name = "label92";
      this.label92.Size = new Size(136, 16);
      this.label92.TabIndex = 35;
      this.label92.Text = "DeleteAllDevices_20x20";
      this.DeleteAllDevices_20x20.Image = (Image) componentResourceManager.GetObject("DeleteAllDevices_20x20.Image");
      this.DeleteAllDevices_20x20.Location = new Point(360, 312);
      this.DeleteAllDevices_20x20.Name = "DeleteAllDevices_20x20";
      this.DeleteAllDevices_20x20.Size = new Size(24, 24);
      this.DeleteAllDevices_20x20.TabIndex = 34;
      this.DeleteAllDevices_20x20.TabStop = false;
      this.label93.Location = new Point(392, 384);
      this.label93.Name = "label93";
      this.label93.Size = new Size(152, 16);
      this.label93.TabIndex = 159;
      this.label93.Text = "ConsumptionValues_20x20";
      this.ConsumptionValues_20x20.Image = (Image) componentResourceManager.GetObject("ConsumptionValues_20x20.Image");
      this.ConsumptionValues_20x20.Location = new Point(360, 376);
      this.ConsumptionValues_20x20.Name = "ConsumptionValues_20x20";
      this.ConsumptionValues_20x20.Size = new Size(24, 24);
      this.ConsumptionValues_20x20.TabIndex = 158;
      this.ConsumptionValues_20x20.TabStop = false;
      this.label94.Location = new Point(392, 352);
      this.label94.Name = "label94";
      this.label94.Size = new Size(112, 16);
      this.label94.TabIndex = 157;
      this.label94.Text = "ShowMBusList_20x20";
      this.ShowMBusList_20x20.Image = (Image) componentResourceManager.GetObject("ShowMBusList_20x20.Image");
      this.ShowMBusList_20x20.Location = new Point(360, 344);
      this.ShowMBusList_20x20.Name = "ShowMBusList_20x20";
      this.ShowMBusList_20x20.Size = new Size(24, 24);
      this.ShowMBusList_20x20.TabIndex = 156;
      this.ShowMBusList_20x20.TabStop = false;
      this.label95.Location = new Point(40, 320);
      this.label95.Name = "label95";
      this.label95.Size = new Size(144, 16);
      this.label95.TabIndex = 160;
      this.label95.Text = "BaseNodeMobileDevice_16x16";
      this.BaseNodeMobileDevice_16x16.Image = (Image) componentResourceManager.GetObject("BaseNodeMobileDevice_16x16.Image");
      this.BaseNodeMobileDevice_16x16.Location = new Point(23, 320);
      this.BaseNodeMobileDevice_16x16.Name = "BaseNodeMobileDevice_16x16";
      this.BaseNodeMobileDevice_16x16.Size = new Size(16, 16);
      this.BaseNodeMobileDevice_16x16.TabIndex = 161;
      this.BaseNodeMobileDevice_16x16.TabStop = false;
      this.AddressTypeStreet_16x16.Image = (Image) componentResourceManager.GetObject("AddressTypeStreet_16x16.Image");
      this.AddressTypeStreet_16x16.Location = new Point(5, 16);
      this.AddressTypeStreet_16x16.Name = "AddressTypeStreet_16x16";
      this.AddressTypeStreet_16x16.Size = new Size(16, 16);
      this.AddressTypeStreet_16x16.TabIndex = 163;
      this.AddressTypeStreet_16x16.TabStop = false;
      this.label96.Location = new Point(22, 16);
      this.label96.Name = "label96";
      this.label96.Size = new Size(144, 16);
      this.label96.TabIndex = 162;
      this.label96.Text = "AddressTypeStreet_16x16";
      this.groupBox2.Controls.Add((Control) this.label103);
      this.groupBox2.Controls.Add((Control) this.AddressTypeRoomNumber_16x16);
      this.groupBox2.Controls.Add((Control) this.label102);
      this.groupBox2.Controls.Add((Control) this.AddressTypeCorridor_16x16);
      this.groupBox2.Controls.Add((Control) this.label101);
      this.groupBox2.Controls.Add((Control) this.AddressTypeFloor_16x16);
      this.groupBox2.Controls.Add((Control) this.label100);
      this.groupBox2.Controls.Add((Control) this.AddressTypeCountry_16x16);
      this.groupBox2.Controls.Add((Control) this.label99);
      this.groupBox2.Controls.Add((Control) this.AddressTypeCityArea_16x16);
      this.groupBox2.Controls.Add((Control) this.label98);
      this.groupBox2.Controls.Add((Control) this.AddressTypeCity_16x16);
      this.groupBox2.Controls.Add((Control) this.label97);
      this.groupBox2.Controls.Add((Control) this.AddressTypeHouse_16x16);
      this.groupBox2.Controls.Add((Control) this.label96);
      this.groupBox2.Controls.Add((Control) this.AddressTypeStreet_16x16);
      this.groupBox2.Location = new Point(611, 404);
      this.groupBox2.Name = "groupBox2";
      this.groupBox2.Size = new Size(166, 180);
      this.groupBox2.TabIndex = 164;
      this.groupBox2.TabStop = false;
      this.groupBox2.Text = "AddressTypeNodes";
      this.label103.Location = new Point(22, 161);
      this.label103.Name = "label103";
      this.label103.Size = new Size(144, 16);
      this.label103.TabIndex = 176;
      this.label103.Text = "AddressTypeRoomNumber_16x16";
      this.AddressTypeRoomNumber_16x16.ErrorImage = (Image) null;
      this.AddressTypeRoomNumber_16x16.Image = (Image) componentResourceManager.GetObject("AddressTypeRoomNumber_16x16.Image");
      this.AddressTypeRoomNumber_16x16.Location = new Point(5, 161);
      this.AddressTypeRoomNumber_16x16.Name = "AddressTypeRoomNumber_16x16";
      this.AddressTypeRoomNumber_16x16.Size = new Size(16, 16);
      this.AddressTypeRoomNumber_16x16.TabIndex = 177;
      this.AddressTypeRoomNumber_16x16.TabStop = false;
      this.label102.Location = new Point(22, 140);
      this.label102.Name = "label102";
      this.label102.Size = new Size(144, 16);
      this.label102.TabIndex = 174;
      this.label102.Text = "AddressTypeCorridor_16x16";
      this.AddressTypeCorridor_16x16.Image = (Image) componentResourceManager.GetObject("AddressTypeCorridor_16x16.Image");
      this.AddressTypeCorridor_16x16.Location = new Point(5, 140);
      this.AddressTypeCorridor_16x16.Name = "AddressTypeCorridor_16x16";
      this.AddressTypeCorridor_16x16.Size = new Size(16, 16);
      this.AddressTypeCorridor_16x16.TabIndex = 175;
      this.AddressTypeCorridor_16x16.TabStop = false;
      this.label101.Location = new Point(22, 116);
      this.label101.Name = "label101";
      this.label101.Size = new Size(144, 16);
      this.label101.TabIndex = 172;
      this.label101.Text = "AddressTypeFloor_16x16";
      this.AddressTypeFloor_16x16.Image = (Image) componentResourceManager.GetObject("AddressTypeFloor_16x16.Image");
      this.AddressTypeFloor_16x16.Location = new Point(5, 116);
      this.AddressTypeFloor_16x16.Name = "AddressTypeFloor_16x16";
      this.AddressTypeFloor_16x16.Size = new Size(16, 16);
      this.AddressTypeFloor_16x16.TabIndex = 173;
      this.AddressTypeFloor_16x16.TabStop = false;
      this.label100.Location = new Point(22, 95);
      this.label100.Name = "label100";
      this.label100.Size = new Size(144, 16);
      this.label100.TabIndex = 170;
      this.label100.Text = "AddressTypeCountry_16x16";
      this.AddressTypeCountry_16x16.Image = (Image) componentResourceManager.GetObject("AddressTypeCountry_16x16.Image");
      this.AddressTypeCountry_16x16.Location = new Point(5, 95);
      this.AddressTypeCountry_16x16.Name = "AddressTypeCountry_16x16";
      this.AddressTypeCountry_16x16.Size = new Size(16, 16);
      this.AddressTypeCountry_16x16.TabIndex = 171;
      this.AddressTypeCountry_16x16.TabStop = false;
      this.label99.Location = new Point(22, 76);
      this.label99.Name = "label99";
      this.label99.Size = new Size(144, 16);
      this.label99.TabIndex = 168;
      this.label99.Text = "AddressTypeCityArea_16x16";
      this.AddressTypeCityArea_16x16.Image = (Image) componentResourceManager.GetObject("AddressTypeCityArea_16x16.Image");
      this.AddressTypeCityArea_16x16.Location = new Point(5, 76);
      this.AddressTypeCityArea_16x16.Name = "AddressTypeCityArea_16x16";
      this.AddressTypeCityArea_16x16.Size = new Size(16, 16);
      this.AddressTypeCityArea_16x16.TabIndex = 169;
      this.AddressTypeCityArea_16x16.TabStop = false;
      this.label98.Location = new Point(22, 55);
      this.label98.Name = "label98";
      this.label98.Size = new Size(144, 16);
      this.label98.TabIndex = 166;
      this.label98.Text = "AddressTypeCity_16x16";
      this.AddressTypeCity_16x16.Image = (Image) componentResourceManager.GetObject("AddressTypeCity_16x16.Image");
      this.AddressTypeCity_16x16.Location = new Point(5, 55);
      this.AddressTypeCity_16x16.Name = "AddressTypeCity_16x16";
      this.AddressTypeCity_16x16.Size = new Size(16, 16);
      this.AddressTypeCity_16x16.TabIndex = 167;
      this.AddressTypeCity_16x16.TabStop = false;
      this.label97.Location = new Point(22, 36);
      this.label97.Name = "label97";
      this.label97.Size = new Size(144, 16);
      this.label97.TabIndex = 164;
      this.label97.Text = "AddressTypeHouse_16x16";
      this.AddressTypeHouse_16x16.Image = (Image) componentResourceManager.GetObject("AddressTypeHouse_16x16.Image");
      this.AddressTypeHouse_16x16.Location = new Point(5, 36);
      this.AddressTypeHouse_16x16.Name = "AddressTypeHouse_16x16";
      this.AddressTypeHouse_16x16.Size = new Size(16, 16);
      this.AddressTypeHouse_16x16.TabIndex = 165;
      this.AddressTypeHouse_16x16.TabStop = false;
      this.WaveFlowDevice_16x16.Image = (Image) componentResourceManager.GetObject("WaveFlowDevice_16x16.Image");
      this.WaveFlowDevice_16x16.Location = new Point(23, 344);
      this.WaveFlowDevice_16x16.Name = "WaveFlowDevice_16x16";
      this.WaveFlowDevice_16x16.Size = new Size(16, 16);
      this.WaveFlowDevice_16x16.TabIndex = 166;
      this.WaveFlowDevice_16x16.TabStop = false;
      this.label104.Location = new Point(40, 344);
      this.label104.Name = "label104";
      this.label104.Size = new Size(144, 16);
      this.label104.TabIndex = 165;
      this.label104.Text = "WaveFlowDevice_16x16";
      this.label105.Location = new Point(45, 368);
      this.label105.Name = "label105";
      this.label105.Size = new Size(144, 16);
      this.label105.TabIndex = 167;
      this.label105.Text = "NewPositionArrow_16x16";
      this.NewPositionArrow_16x16.Image = (Image) componentResourceManager.GetObject("NewPositionArrow_16x16.Image");
      this.NewPositionArrow_16x16.Location = new Point(24, 368);
      this.NewPositionArrow_16x16.Name = "NewPositionArrow_16x16";
      this.NewPositionArrow_16x16.Size = new Size(16, 16);
      this.NewPositionArrow_16x16.TabIndex = 168;
      this.NewPositionArrow_16x16.TabStop = false;
      this.groupBox3.Controls.Add((Control) this.Wohnung_16x16);
      this.groupBox3.Controls.Add((Control) this.Rechenzentrum_16x16);
      this.groupBox3.Controls.Add((Control) this.Nutzergruppe_16x16);
      this.groupBox3.Controls.Add((Control) this.Nutzer_16x16);
      this.groupBox3.Controls.Add((Control) this.Liegenschaft_16x16);
      this.groupBox3.Location = new Point(1002, 296);
      this.groupBox3.Name = "groupBox3";
      this.groupBox3.Size = new Size(46, 176);
      this.groupBox3.TabIndex = 169;
      this.groupBox3.TabStop = false;
      this.groupBox3.Text = "E-Satz-Knoten";
      this.Wohnung_16x16.Image = (Image) componentResourceManager.GetObject("Wohnung_16x16.Image");
      this.Wohnung_16x16.Location = new Point(6, 109);
      this.Wohnung_16x16.Name = "Wohnung_16x16";
      this.Wohnung_16x16.Size = new Size(16, 16);
      this.Wohnung_16x16.TabIndex = 168;
      this.Wohnung_16x16.TabStop = false;
      this.Rechenzentrum_16x16.Image = (Image) componentResourceManager.GetObject("Rechenzentrum_16x16.Image");
      this.Rechenzentrum_16x16.Location = new Point(6, 89);
      this.Rechenzentrum_16x16.Name = "Rechenzentrum_16x16";
      this.Rechenzentrum_16x16.Size = new Size(16, 16);
      this.Rechenzentrum_16x16.TabIndex = 167;
      this.Rechenzentrum_16x16.TabStop = false;
      this.Nutzergruppe_16x16.Image = (Image) componentResourceManager.GetObject("Nutzergruppe_16x16.Image");
      this.Nutzergruppe_16x16.InitialImage = (Image) componentResourceManager.GetObject("Nutzergruppe_16x16.InitialImage");
      this.Nutzergruppe_16x16.Location = new Point(6, 67);
      this.Nutzergruppe_16x16.Name = "Nutzergruppe_16x16";
      this.Nutzergruppe_16x16.Size = new Size(16, 16);
      this.Nutzergruppe_16x16.TabIndex = 166;
      this.Nutzergruppe_16x16.TabStop = false;
      this.Nutzer_16x16.Image = (Image) componentResourceManager.GetObject("Nutzer_16x16.Image");
      this.Nutzer_16x16.InitialImage = (Image) componentResourceManager.GetObject("Nutzer_16x16.InitialImage");
      this.Nutzer_16x16.Location = new Point(6, 45);
      this.Nutzer_16x16.Name = "Nutzer_16x16";
      this.Nutzer_16x16.Size = new Size(16, 16);
      this.Nutzer_16x16.TabIndex = 165;
      this.Nutzer_16x16.TabStop = false;
      this.Liegenschaft_16x16.Image = (Image) componentResourceManager.GetObject("Liegenschaft_16x16.Image");
      this.Liegenschaft_16x16.Location = new Point(6, 21);
      this.Liegenschaft_16x16.Name = "Liegenschaft_16x16";
      this.Liegenschaft_16x16.Size = new Size(16, 16);
      this.Liegenschaft_16x16.TabIndex = 164;
      this.Liegenschaft_16x16.TabStop = false;
      this.groupBox4.Controls.Add((Control) this.Berechnungsknoten_16x16);
      this.groupBox4.Controls.Add((Control) this.Berechnung_Output_16x16);
      this.groupBox4.Controls.Add((Control) this.Berechnung_Input_16x16);
      this.groupBox4.Controls.Add((Control) this.Nutzungsgrad_16x16);
      this.groupBox4.Location = new Point(847, 520);
      this.groupBox4.Name = "groupBox4";
      this.groupBox4.Size = new Size(200, 100);
      this.groupBox4.TabIndex = 170;
      this.groupBox4.TabStop = false;
      this.groupBox4.Text = "Berechnungsknoten";
      this.Berechnungsknoten_16x16.Image = (Image) componentResourceManager.GetObject("Berechnungsknoten_16x16.Image");
      this.Berechnungsknoten_16x16.Location = new Point(41, 16);
      this.Berechnungsknoten_16x16.Name = "Berechnungsknoten_16x16";
      this.Berechnungsknoten_16x16.Size = new Size(16, 16);
      this.Berechnungsknoten_16x16.TabIndex = 172;
      this.Berechnungsknoten_16x16.TabStop = false;
      this.Berechnung_Output_16x16.Image = (Image) componentResourceManager.GetObject("Berechnung_Output_16x16.Image");
      this.Berechnung_Output_16x16.Location = new Point(11, 60);
      this.Berechnung_Output_16x16.Name = "Berechnung_Output_16x16";
      this.Berechnung_Output_16x16.Size = new Size(16, 16);
      this.Berechnung_Output_16x16.TabIndex = 171;
      this.Berechnung_Output_16x16.TabStop = false;
      this.Berechnung_Input_16x16.Image = (Image) componentResourceManager.GetObject("Berechnung_Input_16x16.Image");
      this.Berechnung_Input_16x16.Location = new Point(11, 38);
      this.Berechnung_Input_16x16.Name = "Berechnung_Input_16x16";
      this.Berechnung_Input_16x16.Size = new Size(16, 16);
      this.Berechnung_Input_16x16.TabIndex = 170;
      this.Berechnung_Input_16x16.TabStop = false;
      this.Nutzungsgrad_16x16.Image = (Image) componentResourceManager.GetObject("Nutzungsgrad_16x16.Image");
      this.Nutzungsgrad_16x16.Location = new Point(11, 16);
      this.Nutzungsgrad_16x16.Name = "Nutzungsgrad_16x16";
      this.Nutzungsgrad_16x16.Size = new Size(16, 16);
      this.Nutzungsgrad_16x16.TabIndex = 169;
      this.Nutzungsgrad_16x16.TabStop = false;
      this.Open_16x16.Image = (Image) componentResourceManager.GetObject("Open_16x16.Image");
      this.Open_16x16.Location = new Point(24, 12);
      this.Open_16x16.Name = "Open_16x16";
      this.Open_16x16.Size = new Size(16, 16);
      this.Open_16x16.TabIndex = 0;
      this.Open_16x16.TabStop = false;
      this.Close_16x16.Image = (Image) componentResourceManager.GetObject("Close_16x16.Image");
      this.Close_16x16.Location = new Point(24, 32);
      this.Close_16x16.Name = "Close_16x16";
      this.Close_16x16.Size = new Size(16, 16);
      this.Close_16x16.TabIndex = 0;
      this.Close_16x16.TabStop = false;
      this.label106.Location = new Point(40, 12);
      this.label106.Name = "label106";
      this.label106.Size = new Size(88, 16);
      this.label106.TabIndex = 1;
      this.label106.Text = "Open_16x16";
      this.label107.Location = new Point(40, 32);
      this.label107.Name = "label107";
      this.label107.Size = new Size(88, 16);
      this.label107.TabIndex = 1;
      this.label107.Text = "Close_16x16";
      this.AutoScaleBaseSize = new Size(5, 13);
      this.ClientSize = new Size(1129, 731);
      this.Controls.Add((Control) this.groupBox4);
      this.Controls.Add((Control) this.groupBox3);
      this.Controls.Add((Control) this.NewPositionArrow_16x16);
      this.Controls.Add((Control) this.label105);
      this.Controls.Add((Control) this.WaveFlowDevice_16x16);
      this.Controls.Add((Control) this.label104);
      this.Controls.Add((Control) this.groupBox2);
      this.Controls.Add((Control) this.BaseNodeMobileDevice_16x16);
      this.Controls.Add((Control) this.label95);
      this.Controls.Add((Control) this.label93);
      this.Controls.Add((Control) this.ConsumptionValues_20x20);
      this.Controls.Add((Control) this.label94);
      this.Controls.Add((Control) this.ShowMBusList_20x20);
      this.Controls.Add((Control) this.label86);
      this.Controls.Add((Control) this.DeviceRemovedSel_16x16);
      this.Controls.Add((Control) this.label85);
      this.Controls.Add((Control) this.DeviceRemoved_16x16);
      this.Controls.Add((Control) this.WriteDesktopPC3_48x48);
      this.Controls.Add((Control) this.label46);
      this.Controls.Add((Control) this.WriteDesktopPC2_48x48);
      this.Controls.Add((Control) this.label45);
      this.Controls.Add((Control) this.WriteDesktopPC1_48x48);
      this.Controls.Add((Control) this.label13);
      this.Controls.Add((Control) this.WriteDesktopPC_48x48);
      this.Controls.Add((Control) this.label10);
      this.Controls.Add((Control) this.label9);
      this.Controls.Add((Control) this.DeviceEdit_20x20);
      this.Controls.Add((Control) this.label6);
      this.Controls.Add((Control) this.AmpelRot_32x32);
      this.Controls.Add((Control) this.label5);
      this.Controls.Add((Control) this.RemoveParameter_20x20);
      this.Controls.Add((Control) this.label4);
      this.Controls.Add((Control) this.AddParameter_20x20);
      this.Controls.Add((Control) this.label79);
      this.Controls.Add((Control) this.DeviceZelsiusSel_24x24);
      this.Controls.Add((Control) this.label80);
      this.Controls.Add((Control) this.DeviceSaariusSel_24x24);
      this.Controls.Add((Control) this.label81);
      this.Controls.Add((Control) this.DeviceIZM972Sel_24x24);
      this.Controls.Add((Control) this.label82);
      this.Controls.Add((Control) this.DeviceIZM208Sel_24x24);
      this.Controls.Add((Control) this.label83);
      this.Controls.Add((Control) this.DeviceMS1Sel_24x24);
      this.Controls.Add((Control) this.label84);
      this.Controls.Add((Control) this.DeviceMN1Sel_24x24);
      this.Controls.Add((Control) this.label78);
      this.Controls.Add((Control) this.DeviceZelsius_24x24);
      this.Controls.Add((Control) this.label77);
      this.Controls.Add((Control) this.Search_20x20);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.KnotenSel_16x16);
      this.Controls.Add((Control) this.label72);
      this.Controls.Add((Control) this.DeviceSel_16x16);
      this.Controls.Add((Control) this.groupBox1);
      this.Controls.Add((Control) this.label53);
      this.Controls.Add((Control) this.DeviceSearch_20x20);
      this.Controls.Add((Control) this.label51);
      this.Controls.Add((Control) this.MenuAllDelete_20x20);
      this.Controls.Add((Control) this.label50);
      this.Controls.Add((Control) this.MenuRefresh_20x20);
      this.Controls.Add((Control) this.label49);
      this.Controls.Add((Control) this.MenuDelete_20x20);
      this.Controls.Add((Control) this.label48);
      this.Controls.Add((Control) this.MenuDetails_20x20);
      this.Controls.Add((Control) this.Exclamation);
      this.Controls.Add((Control) this.label39);
      this.Controls.Add((Control) this.pictureBox35);
      this.Controls.Add((Control) this.label38);
      this.Controls.Add((Control) this.pictureBox34);
      this.Controls.Add((Control) this.label37);
      this.Controls.Add((Control) this.pictureBox33);
      this.Controls.Add((Control) this.label36);
      this.Controls.Add((Control) this.pictureBox32);
      this.Controls.Add((Control) this.label35);
      this.Controls.Add((Control) this.pictureBox31);
      this.Controls.Add((Control) this.label34);
      this.Controls.Add((Control) this.pictureBox30);
      this.Controls.Add((Control) this.label33);
      this.Controls.Add((Control) this.pictureBox29);
      this.Controls.Add((Control) this.label32);
      this.Controls.Add((Control) this.pictureBox28);
      this.Controls.Add((Control) this.label31);
      this.Controls.Add((Control) this.pictureBox27);
      this.Controls.Add((Control) this.label30);
      this.Controls.Add((Control) this.pictureBox26);
      this.Controls.Add((Control) this.label29);
      this.Controls.Add((Control) this.DeviceSaarius_24x24);
      this.Controls.Add((Control) this.label28);
      this.Controls.Add((Control) this.DeviceIZM972_24x24);
      this.Controls.Add((Control) this.label27);
      this.Controls.Add((Control) this.DeviceIZM208_24x24);
      this.Controls.Add((Control) this.label26);
      this.Controls.Add((Control) this.DeviceMS1_24x24);
      this.Controls.Add((Control) this.label25);
      this.Controls.Add((Control) this.AmpelGruen_32x32);
      this.Controls.Add((Control) this.label24);
      this.Controls.Add((Control) this.DeviceMN1_24x24);
      this.Controls.Add((Control) this.label23);
      this.Controls.Add((Control) this.DeviceWrite_20x20);
      this.Controls.Add((Control) this.label22);
      this.Controls.Add((Control) this.DeviceRead_20x20);
      this.Controls.Add((Control) this.label21);
      this.Controls.Add((Control) this.Save_20x20);
      this.Controls.Add((Control) this.label20);
      this.Controls.Add((Control) this.Open_20x20);
      this.Controls.Add((Control) this.label19);
      this.Controls.Add((Control) this.New_20x20);
      this.Controls.Add((Control) this.label18);
      this.Controls.Add((Control) this.DeviceNew_20x20);
      this.Controls.Add((Control) this.label17);
      this.Controls.Add((Control) this.MenuArrange_20x20);
      this.Controls.Add((Control) this.label16);
      this.Controls.Add((Control) this.Help_20x20);
      this.Controls.Add((Control) this.label15);
      this.Controls.Add((Control) this.Printer_20x20);
      this.Controls.Add((Control) this.label14);
      this.Controls.Add((Control) this.Device_20x20);
      this.Controls.Add((Control) this.label107);
      this.Controls.Add((Control) this.label106);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.Close_16x16);
      this.Controls.Add((Control) this.Open_16x16);
      this.Controls.Add((Control) this.Knoten_16x16);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.Device_16x16);
      this.Controls.Add((Control) this.label44);
      this.Controls.Add((Control) this.MultidataS1_208x208);
      this.Controls.Add((Control) this.DesktopPC);
      this.Controls.Add((Control) this.label43);
      this.Controls.Add((Control) this.label40);
      this.Controls.Add((Control) this.ScanPC);
      this.Controls.Add((Control) this.label41);
      this.Controls.Add((Control) this.Bomb);
      this.Controls.Add((Control) this.label42);
      this.Controls.Add((Control) this.label73);
      this.Controls.Add((Control) this.KnotenInactiveSel_16x16);
      this.Controls.Add((Control) this.label74);
      this.Controls.Add((Control) this.DeviceInactiveSel_16x16);
      this.Controls.Add((Control) this.label75);
      this.Controls.Add((Control) this.label76);
      this.Controls.Add((Control) this.DeviceInactive_16x16);
      this.Controls.Add((Control) this.KnotenInactive_16x16);
      this.Controls.Add((Control) this.ReadAll_20x20);
      this.Controls.Add((Control) this.label87);
      this.Controls.Add((Control) this.ScanByAddress_20x20);
      this.Controls.Add((Control) this.label88);
      this.Controls.Add((Control) this.label89);
      this.Controls.Add((Control) this.ScanBySerialNo_20x20);
      this.Controls.Add((Control) this.SeachByAddress_20x20);
      this.Controls.Add((Control) this.label90);
      this.Controls.Add((Control) this.label91);
      this.Controls.Add((Control) this.SearchBySerialNo_20x20);
      this.Controls.Add((Control) this.label92);
      this.Controls.Add((Control) this.DeleteAllDevices_20x20);
      this.Name = nameof (Images);
      this.Text = nameof (Images);
      this.Load += new System.EventHandler(this.Images_Load);
      ((ISupportInitialize) this.Knoten_16x16).EndInit();
      ((ISupportInitialize) this.Device_16x16).EndInit();
      ((ISupportInitialize) this.Device_20x20).EndInit();
      ((ISupportInitialize) this.Printer_20x20).EndInit();
      ((ISupportInitialize) this.Help_20x20).EndInit();
      ((ISupportInitialize) this.MenuArrange_20x20).EndInit();
      ((ISupportInitialize) this.DeviceNew_20x20).EndInit();
      ((ISupportInitialize) this.New_20x20).EndInit();
      ((ISupportInitialize) this.Open_20x20).EndInit();
      ((ISupportInitialize) this.Save_20x20).EndInit();
      ((ISupportInitialize) this.DeviceRead_20x20).EndInit();
      ((ISupportInitialize) this.DeviceWrite_20x20).EndInit();
      ((ISupportInitialize) this.DeviceMN1_24x24).EndInit();
      ((ISupportInitialize) this.AmpelGruen_32x32).EndInit();
      ((ISupportInitialize) this.DeviceMS1_24x24).EndInit();
      ((ISupportInitialize) this.DeviceIZM208_24x24).EndInit();
      ((ISupportInitialize) this.DeviceIZM972_24x24).EndInit();
      ((ISupportInitialize) this.DeviceSaarius_24x24).EndInit();
      ((ISupportInitialize) this.pictureBox26).EndInit();
      ((ISupportInitialize) this.pictureBox27).EndInit();
      ((ISupportInitialize) this.pictureBox28).EndInit();
      ((ISupportInitialize) this.pictureBox29).EndInit();
      ((ISupportInitialize) this.pictureBox30).EndInit();
      ((ISupportInitialize) this.pictureBox31).EndInit();
      ((ISupportInitialize) this.pictureBox32).EndInit();
      ((ISupportInitialize) this.pictureBox33).EndInit();
      ((ISupportInitialize) this.pictureBox34).EndInit();
      ((ISupportInitialize) this.pictureBox35).EndInit();
      ((ISupportInitialize) this.ScanPC).EndInit();
      ((ISupportInitialize) this.Bomb).EndInit();
      ((ISupportInitialize) this.DesktopPC).EndInit();
      ((ISupportInitialize) this.MultidataS1_208x208).EndInit();
      ((ISupportInitialize) this.Exclamation).EndInit();
      ((ISupportInitialize) this.FunctionWasserhahn_16x16).EndInit();
      ((ISupportInitialize) this.MenuDetails_20x20).EndInit();
      ((ISupportInitialize) this.MenuDelete_20x20).EndInit();
      ((ISupportInitialize) this.MenuRefresh_20x20).EndInit();
      ((ISupportInitialize) this.MenuAllDelete_20x20).EndInit();
      ((ISupportInitialize) this.DeviceSearch_20x20).EndInit();
      ((ISupportInitialize) this.FunctionUnSelected_16x16).EndInit();
      ((ISupportInitialize) this.FunctionGroupSelected_16x16).EndInit();
      ((ISupportInitialize) this.FunctionTime_16x16).EndInit();
      ((ISupportInitialize) this.FunctionInfo_16x16).EndInit();
      ((ISupportInitialize) this.FunctionDollar_16x16).EndInit();
      ((ISupportInitialize) this.FunctionTemperature_16x16).EndInit();
      ((ISupportInitialize) this.FunctionEnergy_16x16).EndInit();
      ((ISupportInitialize) this.FunctionGoup_16x16).EndInit();
      ((ISupportInitialize) this.FunctionSelected_16x16).EndInit();
      this.groupBox1.ResumeLayout(false);
      ((ISupportInitialize) this.FunctionPowerSel_16x16).EndInit();
      ((ISupportInitialize) this.FunctionPower_16x16).EndInit();
      ((ISupportInitialize) this.FunctionInOutSel_16x16).EndInit();
      ((ISupportInitialize) this.FunctionInOut_16x16).EndInit();
      ((ISupportInitialize) this.FunctionDefaultSel_16x16).EndInit();
      ((ISupportInitialize) this.FunctionDefault_16x16).EndInit();
      ((ISupportInitialize) this.FunctionInfoSel_16x16).EndInit();
      ((ISupportInitialize) this.FunctionDollarSel_16x16).EndInit();
      ((ISupportInitialize) this.FunctionTemperatureSel_16x16).EndInit();
      ((ISupportInitialize) this.FunctionEnergySel_16x16).EndInit();
      ((ISupportInitialize) this.FunctionWasserhahnSel_16x16).EndInit();
      ((ISupportInitialize) this.FunctionTimeSel_16x16).EndInit();
      ((ISupportInitialize) this.FunctionDataloggerSel_16x16).EndInit();
      ((ISupportInitialize) this.FunctionDatalogger_16x16).EndInit();
      ((ISupportInitialize) this.KnotenSel_16x16).EndInit();
      ((ISupportInitialize) this.DeviceSel_16x16).EndInit();
      ((ISupportInitialize) this.KnotenInactiveSel_16x16).EndInit();
      ((ISupportInitialize) this.DeviceInactiveSel_16x16).EndInit();
      ((ISupportInitialize) this.DeviceInactive_16x16).EndInit();
      ((ISupportInitialize) this.KnotenInactive_16x16).EndInit();
      ((ISupportInitialize) this.Search_20x20).EndInit();
      ((ISupportInitialize) this.DeviceZelsius_24x24).EndInit();
      ((ISupportInitialize) this.DeviceZelsiusSel_24x24).EndInit();
      ((ISupportInitialize) this.DeviceSaariusSel_24x24).EndInit();
      ((ISupportInitialize) this.DeviceIZM972Sel_24x24).EndInit();
      ((ISupportInitialize) this.DeviceIZM208Sel_24x24).EndInit();
      ((ISupportInitialize) this.DeviceMS1Sel_24x24).EndInit();
      ((ISupportInitialize) this.DeviceMN1Sel_24x24).EndInit();
      ((ISupportInitialize) this.AddParameter_20x20).EndInit();
      ((ISupportInitialize) this.RemoveParameter_20x20).EndInit();
      ((ISupportInitialize) this.AmpelRot_32x32).EndInit();
      ((ISupportInitialize) this.DeviceEdit_20x20).EndInit();
      ((ISupportInitialize) this.WriteDesktopPC_48x48).EndInit();
      ((ISupportInitialize) this.WriteDesktopPC1_48x48).EndInit();
      ((ISupportInitialize) this.WriteDesktopPC2_48x48).EndInit();
      ((ISupportInitialize) this.WriteDesktopPC3_48x48).EndInit();
      ((ISupportInitialize) this.DeviceRemoved_16x16).EndInit();
      ((ISupportInitialize) this.DeviceRemovedSel_16x16).EndInit();
      ((ISupportInitialize) this.ReadAll_20x20).EndInit();
      ((ISupportInitialize) this.ScanByAddress_20x20).EndInit();
      ((ISupportInitialize) this.ScanBySerialNo_20x20).EndInit();
      ((ISupportInitialize) this.SeachByAddress_20x20).EndInit();
      ((ISupportInitialize) this.SearchBySerialNo_20x20).EndInit();
      ((ISupportInitialize) this.DeleteAllDevices_20x20).EndInit();
      ((ISupportInitialize) this.ConsumptionValues_20x20).EndInit();
      ((ISupportInitialize) this.ShowMBusList_20x20).EndInit();
      ((ISupportInitialize) this.BaseNodeMobileDevice_16x16).EndInit();
      ((ISupportInitialize) this.AddressTypeStreet_16x16).EndInit();
      this.groupBox2.ResumeLayout(false);
      ((ISupportInitialize) this.AddressTypeRoomNumber_16x16).EndInit();
      ((ISupportInitialize) this.AddressTypeCorridor_16x16).EndInit();
      ((ISupportInitialize) this.AddressTypeFloor_16x16).EndInit();
      ((ISupportInitialize) this.AddressTypeCountry_16x16).EndInit();
      ((ISupportInitialize) this.AddressTypeCityArea_16x16).EndInit();
      ((ISupportInitialize) this.AddressTypeCity_16x16).EndInit();
      ((ISupportInitialize) this.AddressTypeHouse_16x16).EndInit();
      ((ISupportInitialize) this.WaveFlowDevice_16x16).EndInit();
      ((ISupportInitialize) this.NewPositionArrow_16x16).EndInit();
      this.groupBox3.ResumeLayout(false);
      ((ISupportInitialize) this.Wohnung_16x16).EndInit();
      ((ISupportInitialize) this.Rechenzentrum_16x16).EndInit();
      ((ISupportInitialize) this.Nutzergruppe_16x16).EndInit();
      ((ISupportInitialize) this.Nutzer_16x16).EndInit();
      ((ISupportInitialize) this.Liegenschaft_16x16).EndInit();
      this.groupBox4.ResumeLayout(false);
      ((ISupportInitialize) this.Berechnungsknoten_16x16).EndInit();
      ((ISupportInitialize) this.Berechnung_Output_16x16).EndInit();
      ((ISupportInitialize) this.Berechnung_Input_16x16).EndInit();
      ((ISupportInitialize) this.Nutzungsgrad_16x16).EndInit();
      ((ISupportInitialize) this.Open_16x16).EndInit();
      ((ISupportInitialize) this.Close_16x16).EndInit();
      this.ResumeLayout(false);
    }

    private void groupBox1_Enter(object sender, EventArgs e)
    {
    }

    private void WriteDesktopPC1_48x48_Click(object sender, EventArgs e)
    {
    }

    private void Images_Load(object sender, EventArgs e)
    {
    }
  }
}


--- InOutFunctions.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.InOutFunctions
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum InOutFunctions
  {
    IO_EnumError = 0,
    IO1_Off = 1,
    IO1_Input = 2,
    IO1_Energy = 3,
    IO1_Volume = 4,
    IO1_CEnergy = 5,
    IO1_Error = 6,
    IO1_Special = 7,
    IO1_Mask = 15, // 0x0000000F
    IO2_Off = 16, // 0x00000010
    IO2_Input = 32, // 0x00000020
    IO2_Energy = 48, // 0x00000030
    IO2_Volume = 64, // 0x00000040
    IO2_CEnergy = 80, // 0x00000050
    IO2_Error = 96, // 0x00000060
    IO2_Special = 112, // 0x00000070
    IO2_Mask = 240, // 0x000000F0
  }
}


--- InputOutputFunctions.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.InputOutputFunctions
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum InputOutputFunctions
  {
    None,
    BusControlled,
    Input,
    OutputEnergy,
    OutputCoolingEnergy,
    OutputVolume,
    OutputFromInput1,
    OutputFromInput2,
    OutputError,
  }
}


--- InputSettings_PDC.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.InputSettings_PDC
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum InputSettings_PDC
  {
    TERMINAL_BLOCK,
    A_OPEN_CABLE_B_OPEN_CABLE,
    A_OPEN_CABLE_B_NO_CABLE,
    A_OPEN_CABLE_B_REED,
    A_REED_B_NO_CABLE,
    A_REED_B_REED,
    NONE,
  }
}


--- InputUnitsIndex.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.InputUnitsIndex
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum InputUnitsIndex
  {
    ImpUnit_0_000,
    ImpUnit_0_00,
    ImpUnit_0_0,
    ImpUnit_0,
    ImpUnit_0_000Wh,
    ImpUnit_0_00Wh,
    ImpUnit_0_0Wh,
    ImpUnit_0Wh,
    ImpUnit_0_000kWh,
    ImpUnit_0_00kWh,
    ImpUnit_0_0kWh,
    ImpUnit_0kWh,
    ImpUnit_0_000MWh,
    ImpUnit_0_00MWh,
    ImpUnit_0_0MWh,
    ImpUnit_0MWh,
    ImpUnit_0_000GWh,
    ImpUnit_0_00GWh,
    ImpUnit_0_0GWh,
    ImpUnit_0GWh,
    ImpUnit_0_000J,
    ImpUnit_0_00J,
    ImpUnit_0_0J,
    ImpUnit_0J,
    ImpUnit_0_000kJ,
    ImpUnit_0_00kJ,
    ImpUnit_0_0kJ,
    ImpUnit_0kJ,
    ImpUnit_0_000MJ,
    ImpUnit_0_00MJ,
    ImpUnit_0_0MJ,
    ImpUnit_0MJ,
    ImpUnit_0_000GJ,
    ImpUnit_0_00GJ,
    ImpUnit_0_0GJ,
    ImpUnit_0GJ,
    ImpUnit_0_000L,
    ImpUnit_0_00L,
    ImpUnit_0_0L,
    ImpUnit_0L,
    ImpUnit_0_000qm,
    ImpUnit_0_00qm,
    ImpUnit_0_0qm,
    ImpUnit_0qm,
  }
}


--- InternetTime.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.InternetTime
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;

#nullable disable
namespace ZR_ClassLibrary
{
  public class InternetTime
  {
    private const byte SNTPDataLength = 48;
    private byte[] SNTPData = new byte[48];
    private const byte offReferenceID = 12;
    private const byte offReferenceTimestamp = 16;
    private const byte offOriginateTimestamp = 24;
    private const byte offReceiveTimestamp = 32;
    private const byte offTransmitTimestamp = 40;
    public DateTime DestinationTimestamp;
    private string TimeServer;

    public _LeapIndicator LeapIndicator
    {
      get
      {
        switch ((byte) ((uint) this.SNTPData[0] >> 6))
        {
          case 0:
            return _LeapIndicator.NoWarning;
          case 1:
            return _LeapIndicator.LastMinute61;
          case 2:
            return _LeapIndicator.LastMinute59;
          default:
            return _LeapIndicator.Alarm;
        }
      }
    }

    public byte VersionNumber => (byte) (((int) this.SNTPData[0] & 56) >> 3);

    public _Mode Mode
    {
      get
      {
        switch ((byte) ((uint) this.SNTPData[0] & 7U))
        {
          case 1:
            return _Mode.SymmetricActive;
          case 2:
            return _Mode.SymmetricPassive;
          case 3:
            return _Mode.Client;
          case 4:
            return _Mode.Server;
          case 5:
            return _Mode.Broadcast;
          default:
            return _Mode.Unknown;
        }
      }
    }

    public _Stratum Stratum
    {
      get
      {
        byte num = this.SNTPData[1];
        if (num == (byte) 0)
          return _Stratum.Unspecified;
        if (num == (byte) 1)
          return _Stratum.PrimaryReference;
        return num <= (byte) 15 ? _Stratum.SecondaryReference : _Stratum.Reserved;
      }
    }

    public uint PollInterval => (uint) Math.Pow(2.0, (double) (sbyte) this.SNTPData[2]);

    public double Precision => Math.Pow(2.0, (double) (sbyte) this.SNTPData[3]);

    public double RootDelay
    {
      get
      {
        return 1000.0 * ((double) (256 * (256 * (256 * (int) this.SNTPData[4] + (int) this.SNTPData[5]) + (int) this.SNTPData[6]) + (int) this.SNTPData[7]) / 65536.0);
      }
    }

    public double RootDispersion
    {
      get
      {
        return 1000.0 * ((double) (256 * (256 * (256 * (int) this.SNTPData[8] + (int) this.SNTPData[9]) + (int) this.SNTPData[10]) + (int) this.SNTPData[11]) / 65536.0);
      }
    }

    public string ReferenceID
    {
      get
      {
        string referenceId = "";
        switch (this.Stratum)
        {
          case _Stratum.Unspecified:
          case _Stratum.PrimaryReference:
            referenceId = referenceId + ((char) this.SNTPData[12]).ToString() + ((char) this.SNTPData[13]).ToString() + ((char) this.SNTPData[14]).ToString() + ((char) this.SNTPData[15]).ToString();
            break;
          case _Stratum.SecondaryReference:
            switch (this.VersionNumber)
            {
              case 3:
                string hostNameOrAddress = this.SNTPData[12].ToString() + "." + this.SNTPData[13].ToString() + "." + this.SNTPData[14].ToString() + "." + this.SNTPData[15].ToString();
                try
                {
                  referenceId = Dns.GetHostEntry(hostNameOrAddress).HostName + " (" + hostNameOrAddress + ")";
                  break;
                }
                catch (Exception ex)
                {
                  referenceId = "N/A";
                  break;
                }
              case 4:
                referenceId = (this.ComputeDate(this.GetMilliSeconds((byte) 12)) + TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now)).ToString();
                break;
              default:
                referenceId = "N/A";
                break;
            }
            break;
        }
        return referenceId;
      }
    }

    public DateTime ReferenceTimestamp
    {
      get
      {
        return this.ComputeDate(this.GetMilliSeconds((byte) 16)) + TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now);
      }
    }

    public DateTime OriginateTimestamp => this.ComputeDate(this.GetMilliSeconds((byte) 24));

    public DateTime ReceiveTimestamp
    {
      get
      {
        return this.ComputeDate(this.GetMilliSeconds((byte) 32)) + TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now);
      }
    }

    public DateTime TransmitTimestamp
    {
      get
      {
        return this.ComputeDate(this.GetMilliSeconds((byte) 40)) + TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now);
      }
      set => this.SetDate((byte) 40, value);
    }

    public double RoundTripDelay
    {
      get
      {
        return (this.DestinationTimestamp - this.OriginateTimestamp - (this.ReceiveTimestamp - this.TransmitTimestamp)).TotalMilliseconds;
      }
    }

    public double LocalClockOffset
    {
      get
      {
        return (this.ReceiveTimestamp - this.OriginateTimestamp + (this.TransmitTimestamp - this.DestinationTimestamp)).TotalMilliseconds / 2.0;
      }
    }

    private DateTime ComputeDate(ulong milliseconds)
    {
      return new DateTime(1900, 1, 1) + TimeSpan.FromMilliseconds((double) milliseconds);
    }

    private ulong GetMilliSeconds(byte offset)
    {
      ulong num1 = 0;
      ulong num2 = 0;
      for (int index = 0; index <= 3; ++index)
        num1 = 256UL * num1 + (ulong) this.SNTPData[(int) offset + index];
      for (int index = 4; index <= 7; ++index)
        num2 = 256UL * num2 + (ulong) this.SNTPData[(int) offset + index];
      return num1 * 1000UL + num2 * 1000UL / 4294967296UL;
    }

    private void SetDate(byte offset, DateTime date)
    {
      DateTime dateTime = new DateTime(1900, 1, 1, 0, 0, 0);
      ulong totalMilliseconds = (ulong) (date - dateTime).TotalMilliseconds;
      ulong num1 = totalMilliseconds / 1000UL;
      ulong num2 = totalMilliseconds % 1000UL * 4294967296UL / 1000UL;
      ulong num3 = num1;
      for (int index = 3; index >= 0; --index)
      {
        this.SNTPData[(int) offset + index] = (byte) (num3 % 256UL);
        num3 /= 256UL;
      }
      ulong num4 = num2;
      for (int index = 7; index >= 4; --index)
      {
        this.SNTPData[(int) offset + index] = (byte) (num4 % 256UL);
        num4 /= 256UL;
      }
    }

    private void Initialize()
    {
      this.SNTPData[0] = (byte) 27;
      for (int index = 1; index < 48; ++index)
        this.SNTPData[index] = (byte) 0;
      this.TransmitTimestamp = DateTime.Now;
    }

    public InternetTime(string host) => this.TimeServer = host;

    public DateTime Connect(bool UpdateSystemTime)
    {
      try
      {
        IPEndPoint remoteEP = new IPEndPoint(Dns.GetHostEntry(this.TimeServer).AddressList[0], 123);
        UdpClient udpClient = new UdpClient();
        udpClient.Connect(remoteEP);
        this.Initialize();
        udpClient.Client.ReceiveTimeout = 5000;
        udpClient.Send(this.SNTPData, this.SNTPData.Length);
        this.SNTPData = udpClient.Receive(ref remoteEP);
        if (!this.IsResponseValid())
          throw new Exception("Invalid response from " + this.TimeServer);
        this.DestinationTimestamp = DateTime.Now;
      }
      catch (SocketException ex)
      {
        throw new Exception(ex.Message);
      }
      if (!UpdateSystemTime)
        return DateTime.Now.AddMilliseconds(this.LocalClockOffset);
      this.SetTime();
      return DateTime.Now;
    }

    public bool IsResponseValid() => this.SNTPData.Length >= 48 && this.Mode == _Mode.Server;

    public override string ToString()
    {
      string str1 = "Leap Indicator: ";
      switch (this.LeapIndicator)
      {
        case _LeapIndicator.NoWarning:
          str1 += "No warning";
          break;
        case _LeapIndicator.LastMinute61:
          str1 += "Last minute has 61 seconds";
          break;
        case _LeapIndicator.LastMinute59:
          str1 += "Last minute has 59 seconds";
          break;
        case _LeapIndicator.Alarm:
          str1 += "Alarm Condition (clock not synchronized)";
          break;
      }
      string str2 = str1 + "\r\nVersion number: " + this.VersionNumber.ToString() + "\r\n" + "Mode: ";
      switch (this.Mode)
      {
        case _Mode.SymmetricActive:
          str2 += "Symmetric Active";
          break;
        case _Mode.SymmetricPassive:
          str2 += "Symmetric Pasive";
          break;
        case _Mode.Client:
          str2 += "Client";
          break;
        case _Mode.Server:
          str2 += "Server";
          break;
        case _Mode.Broadcast:
          str2 += "Broadcast";
          break;
        case _Mode.Unknown:
          str2 += "Unknown";
          break;
      }
      string str3 = str2 + "\r\nStratum: ";
      switch (this.Stratum)
      {
        case _Stratum.Unspecified:
        case _Stratum.Reserved:
          str3 += "Unspecified";
          break;
        case _Stratum.PrimaryReference:
          str3 += "Primary Reference";
          break;
        case _Stratum.SecondaryReference:
          str3 += "Secondary Reference";
          break;
      }
      string str4 = str3 + "\r\nLocal time: " + this.TransmitTimestamp.ToString();
      double num = this.Precision;
      string str5 = num.ToString();
      string str6 = str4 + "\r\nPrecision: " + str5 + " s" + "\r\nPoll Interval: " + this.PollInterval.ToString() + " s" + "\r\nReference ID: " + this.ReferenceID.ToString();
      num = this.RootDelay;
      string str7 = num.ToString();
      string str8 = str6 + "\r\nRoot Delay: " + str7 + " ms";
      num = this.RootDispersion;
      string str9 = num.ToString();
      string str10 = str8 + "\r\nRoot Dispersion: " + str9 + " ms";
      num = this.RoundTripDelay;
      string str11 = num.ToString();
      string str12 = str10 + "\r\nRound Trip Delay: " + str11 + " ms";
      num = this.LocalClockOffset;
      string str13 = num.ToString();
      return str12 + "\r\nLocal Clock Offset: " + str13 + " ms" + "\r\n";
    }

    [DllImport("kernel32.dll")]
    private static extern bool SetLocalTime(ref InternetTime.SYSTEMTIME time);

    private void SetTime()
    {
      DateTime dateTime = DateTime.Now.AddMilliseconds(this.LocalClockOffset);
      InternetTime.SYSTEMTIME time;
      time.year = (short) dateTime.Year;
      time.month = (short) dateTime.Month;
      time.dayOfWeek = (short) dateTime.DayOfWeek;
      time.day = (short) dateTime.Day;
      time.hour = (short) dateTime.Hour;
      time.minute = (short) dateTime.Minute;
      time.second = (short) dateTime.Second;
      time.milliseconds = (short) dateTime.Millisecond;
      InternetTime.SetLocalTime(ref time);
    }

    private struct SYSTEMTIME
    {
      public short year;
      public short month;
      public short dayOfWeek;
      public short day;
      public short hour;
      public short minute;
      public short second;
      public short milliseconds;
    }
  }
}


--- ISortable.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ISortable
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public interface ISortable
  {
    int NodeOrder { get; set; }
  }
}


--- IWindow.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.IWindow
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public interface IWindow
  {
    object ShowWindow(object parameters);
  }
}


--- Kodierung.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Kodierung
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Globalization;

#nullable disable
namespace ZR_ClassLibrary
{
  public class Kodierung
  {
    public static string LoginPersonalName = string.Empty;
    public static string LoginPermission = string.Empty;
    public static long LoginPersonalNr = 0;

    public bool GetGlobalPermission(
      out int Personalnummer,
      out string DBPersonalName,
      out string DBPermission)
    {
      Personalnummer = 0;
      DBPersonalName = string.Empty;
      DBPermission = string.Empty;
      if (Kodierung.LoginPersonalName.Length == 0 || Kodierung.LoginPermission.Length == 0 || Kodierung.LoginPersonalNr == 0L)
        return false;
      Personalnummer = (int) Kodierung.LoginPersonalNr;
      DBPersonalName = Kodierung.LoginPersonalName;
      DBPermission = Kodierung.LoginPermission;
      return true;
    }

    public bool EncodePassword(
      string Passwort,
      int Personalnummer,
      out string KodiertesPasswort,
      out string Fehlerstring)
    {
      string str1 = "";
      string str2 = "";
      Fehlerstring = "";
      try
      {
        Passwort = Passwort.Trim();
        int length = Passwort.Length;
        if (length < 5 || length > 25)
          throw new ApplicationException("Passwort muss mindestens 5 und maximal 25 Stellen haben!");
        int index1 = 0;
        for (int index2 = 0; index2 < Personalnummer; ++index2)
        {
          ++index1;
          if (index1 == length)
            index1 = 0;
        }
        char ch;
        for (int index3 = 0; index3 < length; ++index3)
        {
          string str3 = str1;
          ch = Passwort[index1];
          string str4 = ch.ToString();
          str1 = str3 + str4;
          ++index1;
          if (index1 == length)
            index1 = 0;
        }
        int num1 = 0;
        for (int index4 = 0; index4 < length; ++index4)
        {
          int num2 = (int) str1[index4];
          num1 += num2;
        }
        for (int index5 = 0; index5 < length; ++index5)
        {
          int num3 = ((int) str1[index5] + (index5 + 1) * 7 + Personalnummer + num1) % (int) byte.MaxValue;
          string str5 = str2;
          ch = (char) num3;
          string str6 = ch.ToString();
          str2 = str5 + str6;
        }
        string str7 = "";
        for (int index6 = 0; index6 < length; ++index6)
        {
          int num4 = (int) str2[index6];
          str7 += num4.ToString("X");
        }
        KodiertesPasswort = str7;
        return true;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
        KodiertesPasswort = "";
        return false;
      }
    }

    public int Get32BitRandomValue()
    {
      Random random = new Random();
      int num;
      do
      {
        num = random.Next();
      }
      while (num == 0);
      return num;
    }

    public string GetPruefstellenPasswort() => "A12BCBBCDDDAA";

    public int Get32BitPasswort(string VerschluesseltesPasswort)
    {
      int num1 = 0;
      VerschluesseltesPasswort = VerschluesseltesPasswort.Trim();
      for (int startIndex = 0; startIndex < VerschluesseltesPasswort.Length; ++startIndex)
      {
        int num2 = int.Parse(VerschluesseltesPasswort.Substring(startIndex, 1), NumberStyles.AllowHexSpecifier);
        num1 += num2;
      }
      return num1;
    }

    public int Get32BitXORKey(int RandomValue, int IntPasswort) => RandomValue ^ IntPasswort;
  }
}


--- KOMMUNIKATION_SCHNITTSTELLE.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.KOMMUNIKATION_SCHNITTSTELLE
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum KOMMUNIKATION_SCHNITTSTELLE
  {
    NONE,
    RADIO,
    MBus,
    PULSE,
    MBUS_UND_PULS,
    LoRa,
    ModBus,
    wMBus,
    NBIoT,
    LoRa_LL,
    wMBus_LL,
    mBus_Modbus,
    mBus_CJ188,
    RS485_Modbus,
    RS485_CJ188,
    Micro_radio3_LoRa,
    Radio3,
  }
}


--- KOMMUNIKATION_SCHNITTSTELLE_PDC.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.KOMMUNIKATION_SCHNITTSTELLE_PDC
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum KOMMUNIKATION_SCHNITTSTELLE_PDC
  {
    NONE,
    WMBUS,
    MBUS,
    RADIO3,
    LoRa,
  }
}


--- LicenseManagement.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.LicenseManagement
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class LicenseManagement
  {
    internal static byte LizenzCodeVersion = 0;
    internal static byte MobileDeviceVersion = 16;
    private static int PackageNumber = -1;
    private static int OptionNumber = -1;
    public static string PackageName = string.Empty;
    public static string OptionPackageName = string.Empty;
    private static bool lizok = false;
    private static string aktCode = "LZC.";
    private static bool[] liz = new bool[4];
    internal static string[] PackageNames = new string[6]
    {
      "Demo",
      "ServiceManager",
      "ConfigurationManager",
      "RadioManager",
      "SystemManager",
      "GlobalMeterManager"
    };
    internal static string[] OptionPackageNames = new string[1]
    {
      "NoOptions"
    };
    private static char[] CodeTranslatorTable = new char[32]
    {
      'M',
      '1',
      'Z',
      '3',
      'C',
      '4',
      '7',
      '8',
      'R',
      'P',
      'L',
      'H',
      'A',
      '2',
      'B',
      'Y',
      'K',
      'W',
      'E',
      'F',
      'V',
      'G',
      'D',
      'N',
      'T',
      '9',
      'U',
      '5',
      'Q',
      'S',
      '6',
      'X'
    };

    public static bool CheckLicenseKey(string LicenseKey)
    {
      LicenseManagement.aktCode = LicenseKey;
      LicenseManagement.CheckLiz(ref LicenseManagement.liz);
      return !LicenseManagement.liz[1] && LicenseManagement.liz[0] && LicenseManagement.liz[2];
    }

    private static bool CheckLiz(ref bool[] liz)
    {
      if (!liz[1])
      {
        try
        {
          LicenseManagement.aktCode = LicenseManagement.decodeZennerCode(LicenseManagement.aktCode);
          if (LicenseManagement.localCustomScrable(LicenseManagement.GetDeviceID()) == LicenseManagement.aktCode)
          {
            liz[3] = false;
            liz[0] = true;
            liz[2] = true;
          }
          else
            liz[3] = true;
        }
        catch
        {
          liz[3] = false;
        }
      }
      return LicenseManagement.lizok;
    }

    private static string localCustomScrable(string intext)
    {
      uint[] numArray1 = new uint[intext.Length];
      uint[] numArray2 = new uint[13];
      LicenseManagement.lizok = true;
      for (int index = 0; index < intext.Length; ++index)
        numArray1[index] = (uint) intext[index];
      int index1 = 7;
      int index2 = 0;
      for (int index3 = 0; index3 < 133; ++index3)
      {
        if (index2 >= numArray1.Length)
          index2 = 0;
        if (index1 >= numArray2.Length)
          index1 -= numArray2.Length;
        numArray2[index1] += numArray1[index2];
        numArray2[index1] += (uint) LicenseManagement.PackageNumber;
        numArray2[index1] += (uint) LicenseManagement.OptionNumber;
        numArray2[index1] += (uint) index2;
        ++index2;
        index1 += 3;
      }
      StringBuilder stringBuilder = new StringBuilder(30);
      for (int index4 = 0; index4 < numArray2.Length; ++index4)
      {
        uint num = numArray2[index4];
        uint InChar = 0;
        for (; num > 0U; num >>= 5)
          InChar ^= num & 31U;
        stringBuilder.Append(LicenseManagement.GetCharacterCode((int) InChar));
      }
      return stringBuilder.ToString();
    }

    private static string decodeZennerCode(string intext)
    {
      if (intext.Length == 0)
        return "";
      if (intext.Length != 24)
      {
        int num = (int) MessageBox.Show(ZR_ClassLibMessages.ZR_ClassMessage.GetString("2"), ZR_ClassLibMessages.ZR_ClassMessage.GetString("1"));
        return "";
      }
      intext = intext.Replace("-", "");
      if (intext.Length != 20)
      {
        int num = (int) MessageBox.Show(ZR_ClassLibMessages.ZR_ClassMessage.GetString("3"), ZR_ClassLibMessages.ZR_ClassMessage.GetString("1"));
        return "";
      }
      if ((LicenseManagement.GetIntFromCharacterCode(intext[0]) & 15) != (int) LicenseManagement.LizenzCodeVersion)
      {
        int num = (int) MessageBox.Show(ZR_ClassLibMessages.ZR_ClassMessage.GetString("4"), ZR_ClassLibMessages.ZR_ClassMessage.GetString("1"));
        return "";
      }
      if ((LicenseManagement.GetIntFromCharacterCode(intext[0]) & 16) != (int) LicenseManagement.MobileDeviceVersion)
      {
        int num = (int) MessageBox.Show(ZR_ClassLibMessages.ZR_ClassMessage.GetString("11"), ZR_ClassLibMessages.ZR_ClassMessage.GetString("1"));
        return "";
      }
      if (LicenseManagement.GetStringCS(intext.Substring(0, 18)) != intext.Substring(18))
      {
        int num = (int) MessageBox.Show(ZR_ClassLibMessages.ZR_ClassMessage.GetString("5"), ZR_ClassLibMessages.ZR_ClassMessage.GetString("1"));
        return "";
      }
      LicenseManagement.PackageNumber = 0;
      LicenseManagement.PackageNumber += LicenseManagement.GetIntFromCharacterCode(intext[1]);
      LicenseManagement.PackageNumber += LicenseManagement.GetIntFromCharacterCode(intext[2]) << 5;
      LicenseManagement.OptionNumber = 0;
      LicenseManagement.OptionNumber += LicenseManagement.GetIntFromCharacterCode(intext[3]);
      LicenseManagement.OptionNumber += LicenseManagement.GetIntFromCharacterCode(intext[4]) << 5;
      if (LicenseManagement.PackageNumber < 0 || LicenseManagement.PackageNumber >= LicenseManagement.PackageNames.Length || LicenseManagement.OptionNumber < 0 || LicenseManagement.OptionNumber >= LicenseManagement.OptionPackageNames.Length)
      {
        LicenseManagement.PackageNumber = -1;
        LicenseManagement.OptionNumber = -1;
        int num = (int) MessageBox.Show(ZR_ClassLibMessages.ZR_ClassMessage.GetString("6"), ZR_ClassLibMessages.ZR_ClassMessage.GetString("1"));
        return "";
      }
      LicenseManagement.PackageName = LicenseManagement.PackageNames[LicenseManagement.PackageNumber];
      LicenseManagement.OptionPackageName = LicenseManagement.OptionPackageNames[LicenseManagement.OptionNumber];
      return intext.Substring(5, 13);
    }

    public static string GetDeviceKey()
    {
      string deviceId = LicenseManagement.GetDeviceID();
      char characterCode = LicenseManagement.GetCharacterCode((int) LicenseManagement.LizenzCodeVersion | 16);
      string str1 = characterCode.ToString();
      string str2 = deviceId;
      characterCode = LicenseManagement.GetCharacterCode((int) LicenseManagement.LizenzCodeVersion | 16);
      string stringCs = LicenseManagement.GetStringCS(characterCode.ToString() + deviceId);
      return LicenseManagement.GetSeparatedString(str1 + str2 + stringCs);
    }

    public static string GetDeviceID()
    {
      string deviceId1 = API_Access.GetDeviceID();
      byte[] hash = MD5.Create().ComputeHash(Encoding.ASCII.GetBytes(deviceId1));
      StringBuilder stringBuilder = new StringBuilder();
      string deviceId2 = "";
      for (int InChar = 0; InChar < 17; ++InChar)
        deviceId2 = InChar <= hash.Length - 1 ? deviceId2 + LicenseManagement.GetCharacterCode((int) hash[InChar]).ToString() : deviceId2 + LicenseManagement.GetCharacterCode(InChar).ToString();
      return deviceId2;
    }

    internal static char GetCharacterCode(int InChar)
    {
      return LicenseManagement.CodeTranslatorTable[InChar & 31];
    }

    internal static int GetIntFromCharacterCode(char InChar)
    {
      for (int fromCharacterCode = 0; fromCharacterCode < LicenseManagement.CodeTranslatorTable.Length; ++fromCharacterCode)
      {
        if ((int) LicenseManagement.CodeTranslatorTable[fromCharacterCode] == (int) InChar)
          return fromCharacterCode;
      }
      return -1;
    }

    internal static string GetStringCS(string InputString)
    {
      int InChar = 0;
      for (int index = 0; index < InputString.Length; ++index)
        InChar = InChar + index + (InputString.Length - index) + (int) InputString[index];
      char characterCode = LicenseManagement.GetCharacterCode(InChar);
      string str1 = "" + characterCode.ToString();
      characterCode = LicenseManagement.GetCharacterCode(InChar >> 6);
      string str2 = characterCode.ToString();
      return str1 + str2;
    }

    internal static string GetSeparatedString(string InputString)
    {
      StringBuilder stringBuilder = new StringBuilder(30);
      for (int index = 0; index < InputString.Length; ++index)
      {
        if (index % 4 == 0 && index > 0)
          stringBuilder.Append('-');
        stringBuilder.Append(InputString[index]);
      }
      return stringBuilder.ToString();
    }
  }
}


--- ListViewDoubledBuffered.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ListViewDoubledBuffered
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ListViewDoubledBuffered : ListView
  {
    public ListViewDoubledBuffered() => this.DoubleBuffered = true;
  }
}


--- MBusDeviceType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MBusDeviceType
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum MBusDeviceType : byte
  {
    OTHER = 0,
    OIL = 1,
    ELECTRICITY = 2,
    GAS = 3,
    HEAT_OUTLET = 4,
    STEAM = 5,
    HOT_WATER = 6,
    WATER = 7,
    HCA = 8,
    COMPRESSED_AIR = 9,
    COOL_OUTLET = 10, // 0x0A
    COOL_INLET = 11, // 0x0B
    HEAT_INLET = 12, // 0x0C
    HEAT_AND_COOL = 13, // 0x0D
    BUS_SYSTEM = 14, // 0x0E
    UNKNOWN = 15, // 0x0F
    HOT_WATER_90 = 21, // 0x15
    COLD_WATER = 22, // 0x16
    HOT_AND_COLD_WATER = 23, // 0x17
    PRESSURE = 24, // 0x18
    AD_CONVERTER = 25, // 0x19
    SMOKE_DETECTOR = 26, // 0x1A
    ROOM_SENSOR = 27, // 0x1B
    GAS_DETECTOR = 28, // 0x1C
    CIRCUIT_BREAKER = 32, // 0x20
    GAS_WATER_OUTLET = 33, // 0x21
    CUSTOMER_DISPLAY = 37, // 0x25
    EFFLUENT_WATER = 40, // 0x28
    WASTE = 41, // 0x29
    CARBON_MONOXIDE = 42, // 0x2A
    RF_Adapter = 55, // 0x37
  }
}


--- MemoryDump.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MemoryDump
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using CorporateDesign;
using System;
using System.Collections;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Text;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class MemoryDump : Form
  {
    private Button buttonOk;
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;
    private DataGrid dataGridMemoryData;
    private const string AddressFormat = "x4";
    private const string ValueFormat = "x2";
    private DataTable MyData;
    private ArrayList DataArray;
    private string FileName;
    public int DataStartAddress;
    public int DataEndAddress;
    private Button buttonWriteChanges;
    public int[] DataField;
    private Button FillButton;
    private TextBox FillTextBox;
    private Label label1;
    private TextBox textBoxVon;
    private Label label2;
    private TextBox textBoxBis;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private Button buttonWriteAll;
    public bool WriteChanges;
    private Button buttonSave;
    private Button buttonRead;
    private bool WriteAll;

    public MemoryDump()
    {
      this.InitializeComponent();
      this.InitGridFormat();
      this.WriteChanges = false;
      this.WriteAll = false;
      this.FileName = "MemoryDump.txt";
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.dataGridMemoryData = new DataGrid();
      this.buttonOk = new Button();
      this.buttonWriteChanges = new Button();
      this.FillButton = new Button();
      this.FillTextBox = new TextBox();
      this.label1 = new Label();
      this.textBoxVon = new TextBox();
      this.label2 = new Label();
      this.textBoxBis = new TextBox();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.buttonWriteAll = new Button();
      this.buttonSave = new Button();
      this.buttonRead = new Button();
      this.dataGridMemoryData.BeginInit();
      this.SuspendLayout();
      this.dataGridMemoryData.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.dataGridMemoryData.DataMember = "";
      this.dataGridMemoryData.HeaderForeColor = SystemColors.ControlText;
      this.dataGridMemoryData.Location = new Point(24, 48);
      this.dataGridMemoryData.Name = "dataGridMemoryData";
      this.dataGridMemoryData.PreferredColumnWidth = 35;
      this.dataGridMemoryData.Size = new Size(840, 384);
      this.dataGridMemoryData.TabIndex = 0;
      this.buttonOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonOk.Location = new Point(800, 440);
      this.buttonOk.Name = "buttonOk";
      this.buttonOk.Size = new Size(64, 24);
      this.buttonOk.TabIndex = 1;
      this.buttonOk.Text = "Ok";
      this.buttonOk.Click += new System.EventHandler(this.buttonOk_Click);
      this.buttonWriteChanges.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonWriteChanges.Location = new Point(696, 440);
      this.buttonWriteChanges.Name = "buttonWriteChanges";
      this.buttonWriteChanges.Size = new Size(96, 24);
      this.buttonWriteChanges.TabIndex = 3;
      this.buttonWriteChanges.Text = "WriteChanges";
      this.buttonWriteChanges.Click += new System.EventHandler(this.buttonWriteChanges_Click);
      this.FillButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.FillButton.Location = new Point(24, 440);
      this.FillButton.Name = "FillButton";
      this.FillButton.Size = new Size(75, 24);
      this.FillButton.TabIndex = 4;
      this.FillButton.Text = "fülle mit";
      this.FillButton.Click += new System.EventHandler(this.FillButton_Click);
      this.FillTextBox.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.FillTextBox.Location = new Point(104, 440);
      this.FillTextBox.Name = "FillTextBox";
      this.FillTextBox.Size = new Size(48, 20);
      this.FillTextBox.TabIndex = 5;
      this.FillTextBox.Text = "00";
      this.label1.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label1.Location = new Point(160, 440);
      this.label1.Name = "label1";
      this.label1.Size = new Size(32, 16);
      this.label1.TabIndex = 6;
      this.label1.Text = "von:";
      this.textBoxVon.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.textBoxVon.Location = new Point(192, 440);
      this.textBoxVon.Name = "textBoxVon";
      this.textBoxVon.Size = new Size(48, 20);
      this.textBoxVon.TabIndex = 5;
      this.textBoxVon.Text = "";
      this.label2.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label2.Location = new Point(256, 440);
      this.label2.Name = "label2";
      this.label2.Size = new Size(24, 16);
      this.label2.TabIndex = 6;
      this.label2.Text = "bis:";
      this.textBoxBis.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.textBoxBis.Location = new Point(280, 440);
      this.textBoxBis.Name = "textBoxBis";
      this.textBoxBis.Size = new Size(48, 20);
      this.textBoxBis.TabIndex = 5;
      this.textBoxBis.Text = "";
      this.zennerCoroprateDesign1.Dock = DockStyle.Fill;
      this.zennerCoroprateDesign1.Location = new Point(0, 0);
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.zennerCoroprateDesign1.Size = new Size(872, 469);
      this.zennerCoroprateDesign1.TabIndex = 7;
      this.buttonWriteAll.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonWriteAll.Location = new Point(592, 440);
      this.buttonWriteAll.Name = "buttonWriteAll";
      this.buttonWriteAll.Size = new Size(96, 24);
      this.buttonWriteAll.TabIndex = 3;
      this.buttonWriteAll.Text = "WriteAll";
      this.buttonWriteAll.Click += new System.EventHandler(this.buttonWriteAll_Click);
      this.buttonSave.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonSave.Location = new Point(488, 440);
      this.buttonSave.Name = "buttonSave";
      this.buttonSave.Size = new Size(96, 24);
      this.buttonSave.TabIndex = 3;
      this.buttonSave.Text = "Save to file";
      this.buttonSave.Click += new System.EventHandler(this.buttonSave_Click);
      this.buttonRead.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonRead.Location = new Point(384, 440);
      this.buttonRead.Name = "buttonRead";
      this.buttonRead.Size = new Size(96, 24);
      this.buttonRead.TabIndex = 3;
      this.buttonRead.Text = "Read from file";
      this.buttonRead.Click += new System.EventHandler(this.buttonRead_Click);
      this.AutoScaleBaseSize = new Size(5, 13);
      this.ClientSize = new Size(872, 469);
      this.ControlBox = false;
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.FillTextBox);
      this.Controls.Add((Control) this.textBoxVon);
      this.Controls.Add((Control) this.textBoxBis);
      this.Controls.Add((Control) this.FillButton);
      this.Controls.Add((Control) this.buttonWriteChanges);
      this.Controls.Add((Control) this.buttonOk);
      this.Controls.Add((Control) this.dataGridMemoryData);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.buttonWriteAll);
      this.Controls.Add((Control) this.buttonSave);
      this.Controls.Add((Control) this.buttonRead);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Name = nameof (MemoryDump);
      this.Text = "Memory Dump";
      this.dataGridMemoryData.EndInit();
      this.ResumeLayout(false);
    }

    private void InitGridFormat()
    {
      this.MyData = new DataTable("RAM-Layout");
      this.DataArray = new ArrayList();
      this.MyData.Columns.Add("Address ", typeof (string));
      this.MyData.Columns[0].ReadOnly = true;
      this.MyData.Columns.Add("0x00 ", typeof (string));
      this.MyData.Columns.Add("0x01 ", typeof (string));
      this.MyData.Columns.Add("0x02 ", typeof (string));
      this.MyData.Columns.Add("0x03 ", typeof (string));
      this.MyData.Columns.Add("0x04 ", typeof (string));
      this.MyData.Columns.Add("0x05 ", typeof (string));
      this.MyData.Columns.Add("0x06 ", typeof (string));
      this.MyData.Columns.Add("0x07 ", typeof (string));
      this.MyData.Columns.Add("0x08 ", typeof (string));
      this.MyData.Columns.Add("0x09 ", typeof (string));
      this.MyData.Columns.Add("0x0a ", typeof (string));
      this.MyData.Columns.Add("0x0b ", typeof (string));
      this.MyData.Columns.Add("0x0c ", typeof (string));
      this.MyData.Columns.Add("0x0d ", typeof (string));
      this.MyData.Columns.Add("0x0e ", typeof (string));
      this.MyData.Columns.Add("0x0f ", typeof (string));
    }

    public void SetMemory(int StartAddress, int EndAddress, int[] data, string RangeName)
    {
      this.MyData.Clear();
      this.DataArray.Clear();
      int num1 = 0;
      int num2 = StartAddress / 16 * 16;
      int index1 = 0;
      int[] RowData = new int[16];
      while (num2 <= EndAddress)
      {
        for (int index2 = 0; index2 < 16; ++index2)
        {
          if (num2 < StartAddress || num2 > EndAddress)
          {
            RowData[index2] = -1;
          }
          else
          {
            RowData[index2] = data[index1];
            ++index1;
          }
          this.DataArray.Add((object) new MemoryDump.DataInfo()
          {
            Address = num2,
            data = RowData[index2],
            row = num1,
            column = (index2 + 1)
          });
          ++num2;
        }
        this.AddMemoryRow(num2 - 16, RowData);
        ++num1;
      }
      this.dataGridMemoryData.CaptionText = RangeName;
      this.dataGridMemoryData.DataSource = (object) this.MyData;
    }

    private void AddMemoryRow(int Address, int[] RowData)
    {
      DataRow row = this.MyData.NewRow();
      row[0] = (object) Address.ToString("x4");
      for (int index = 0; index < 16; ++index)
        row[index + 1] = RowData[index] >= 0 ? (object) RowData[index].ToString("x2") : (object) "";
      this.MyData.Rows.Add(row);
    }

    public void GetChangedData(ref ArrayList data)
    {
      for (int index = 0; index < this.DataArray.Count; ++index)
      {
        int data1 = ((MemoryDump.DataInfo) this.DataArray[index]).data;
        string str = data1 != -1 ? data1.ToString("x2") : "";
        string s = this.MyData.Rows[((MemoryDump.DataInfo) this.DataArray[index]).row][((MemoryDump.DataInfo) this.DataArray[index]).column].ToString();
        if (s.Length != 0 && (this.WriteAll || s != str))
        {
          int num = int.Parse(s, NumberStyles.HexNumber);
          ((MemoryDump.DataInfo) this.DataArray[index]).dataNew = num;
          data.Add((object) new MemoryDump.ChangedDataInfo()
          {
            Address = ((MemoryDump.DataInfo) this.DataArray[index]).Address,
            NewData = num
          });
        }
      }
    }

    private void buttonOk_Click(object sender, EventArgs e) => this.Hide();

    private void buttonWriteChanges_Click(object sender, EventArgs e)
    {
      this.Hide();
      this.WriteChanges = true;
    }

    private void buttonWriteAll_Click(object sender, EventArgs e)
    {
      this.Hide();
      this.WriteChanges = true;
      this.WriteAll = true;
    }

    private void FillButton_Click(object sender, EventArgs e)
    {
      int num1;
      int num2;
      int num3;
      try
      {
        num1 = int.Parse(this.FillTextBox.Text, NumberStyles.AllowHexSpecifier);
        num2 = int.Parse(this.textBoxVon.Text, NumberStyles.AllowHexSpecifier);
        num3 = int.Parse(this.textBoxBis.Text, NumberStyles.AllowHexSpecifier);
      }
      catch
      {
        int num4 = (int) MessageBox.Show("format error");
        return;
      }
      if (num1 < 0 || num1 > (int) byte.MaxValue)
      {
        int num5 = (int) MessageBox.Show("value out of range");
      }
      else
      {
        string str = num1.ToString("x2");
        foreach (MemoryDump.DataInfo data in this.DataArray)
        {
          if (data.Address <= num3 && data.Address >= num2)
            this.MyData.Rows[data.row][data.column] = (object) str;
        }
      }
    }

    private void buttonSave_Click(object sender, EventArgs e)
    {
      if (!this.SelectFilename(false))
        return;
      StreamWriter streamWriter = new StreamWriter(this.FileName);
      StringBuilder stringBuilder = new StringBuilder(100);
      bool flag1 = true;
      bool flag2 = true;
      int num = 0;
      foreach (MemoryDump.DataInfo data in this.DataArray)
      {
        if (!flag2 && (data.Address & 2147483632) != num)
        {
          streamWriter.WriteLine(stringBuilder.ToString());
          flag1 = true;
        }
        flag2 = false;
        if (flag1)
        {
          stringBuilder.Length = 0;
          num = data.Address & 2147483632;
          stringBuilder.Append(num.ToString("x08"));
          stringBuilder.Append(": ");
          flag1 = false;
        }
        if ((data.Address & 3) == 0 && (data.Address & 15) != 0)
          stringBuilder.Append(" | ");
        else
          stringBuilder.Append(" ");
        if (data.data >= 0)
          stringBuilder.Append(data.data.ToString("x02"));
        else
          stringBuilder.Append("..");
      }
      if (!flag2)
        streamWriter.WriteLine(stringBuilder.ToString());
      streamWriter.Close();
    }

    private void buttonRead_Click(object sender, EventArgs e)
    {
      if (!this.SelectFilename(true))
        return;
      int[] data = new int[65536];
      int num1 = 0;
      try
      {
        using (StreamReader streamReader = new StreamReader(this.FileName))
        {
          int StartAddress = -1;
          int num2 = -1;
          int num3 = -1;
          try
          {
            string str;
            while ((str = streamReader.ReadLine()) != null)
            {
              int startIndex = 11;
              int num4 = int.Parse(str.Substring(0, 8), NumberStyles.AllowHexSpecifier);
              if (num3 == -1)
                num3 = num4;
              else if (num3 != num4)
              {
                int num5 = (int) MessageBox.Show("Illegal line address!");
                return;
              }
              for (int index = 0; index < 16; ++index)
              {
                string s = str.Substring(startIndex, 2);
                if (s == "..")
                {
                  if (StartAddress != -1 && num2 == -1)
                    num2 = num3 - 1;
                }
                else
                {
                  int num6 = int.Parse(s, NumberStyles.AllowHexSpecifier);
                  data[num1++] = num6;
                  if (StartAddress == -1)
                    StartAddress = num3;
                }
                ++num3;
                startIndex += 3;
                if (startIndex == 23 || startIndex == 37 | startIndex == 51)
                  startIndex += 2;
              }
            }
          }
          catch (Exception ex)
          {
            int num7 = (int) MessageBox.Show("Illegal format\r\n" + ex.ToString());
          }
          if (num2 == -1)
          {
            int num8 = num3 - 1;
          }
          this.SetMemory(StartAddress, StartAddress + num1 - 1, data, "From file");
        }
      }
      catch (Exception ex)
      {
        int num9 = (int) MessageBox.Show("File open error\r\n" + ex.ToString());
      }
    }

    internal bool SelectFilename(bool read)
    {
      OpenFileDialog openFileDialog = new OpenFileDialog();
      openFileDialog.InitialDirectory = Path.GetFullPath(Application.ExecutablePath);
      openFileDialog.Filter = "Dump files (*.txt)|*.txt| All files (*.*)|*.*";
      openFileDialog.FilterIndex = 1;
      openFileDialog.RestoreDirectory = true;
      if (read)
      {
        openFileDialog.Title = "Read memory dump from file";
        openFileDialog.CheckFileExists = true;
      }
      else
      {
        openFileDialog.Title = "Save memory dunp to file";
        openFileDialog.CheckFileExists = false;
      }
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return false;
      this.FileName = openFileDialog.FileName;
      return true;
    }

    private struct DataInfo
    {
      public int Address;
      public int data;
      public int dataNew;
      public int row;
      public int column;
    }

    public struct ChangedDataInfo
    {
      public int Address;
      public int NewData;
    }
  }
}


--- MemoryLocation.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MemoryLocation
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum MemoryLocation
  {
    EEPROM,
    RAM,
    NONE,
    FLASH,
  }
}


--- Meter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Meter
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class Meter
  {
    public int MeterID;
    public int MeterInfoID;
    public string SerialNr;
    public DateTime? ProductionDate;
    public DateTime? ApprovalDate;
    public string OrderNr;

    public override string ToString() => this.SerialNr;
  }
}


--- MeterData.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MeterData
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class MeterData
  {
    public int MeterID;
    public DateTime? TimePoint;
    public int PValueID;
    public string PValue;
    public byte[] PValueBinary;
    public byte SyncStatus;

    public override string ToString() => this.MeterID.ToString() + " " + this.TimePoint.ToString();
  }
}


--- MeterDatabase.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MeterDatabase
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using NLog;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Drawing;
using System.Text;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class MeterDatabase : IDisposable
  {
    private static Logger logger = LogManager.GetLogger(nameof (MeterDatabase));
    private IDataReader meterValuesReader;
    private StructureTreeNode nodeValuesReader;
    public const int PHYSICAL_LAYER = 0;
    private static readonly object saveMeterValueLocker = new object();
    private Queue<int> notHandledMeterIDs;
    private DateTime startTimepointOfMeterValues;
    private DateTime endTimepointOfMeterValues;
    private IDbCommand cmdOfMeterValues;
    private const int MAX_ITEM_PER_QUERY = 400;
    private Dictionary<int, DateTime> lastTimepointOfLoadedMeasurementValues;
    private ValueFilter valueFilterAfterLoad;
    public List<long> FilterValueIdentOfMeterValues;

    public long CountOfValues { get; private set; }

    public long CountOfLoadedValues { get; private set; }

    public event EventHandler<MeterDatabase.Progress> OnProgress;

    public static NodeLayer GetLayer(int layerID)
    {
      List<NodeLayer> nodeLayerList = MeterDatabase.LoadNodeLayer();
      if (nodeLayerList == null)
        return (NodeLayer) null;
      foreach (NodeLayer layer in nodeLayerList)
      {
        if (layer.LayerID == layerID)
          return layer;
      }
      return (NodeLayer) null;
    }

    public static List<NodeLayer> LoadNodeLayer() => MeterDatabase.LoadNodeLayer(DbBasis.PrimaryDB);

    public static List<NodeLayer> LoadNodeLayer(DbBasis db)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      List<NodeLayer> nodeLayerList = new List<NodeLayer>();
      nodeLayerList.AddRange((IEnumerable<NodeLayer>) NodeLayer.GetStaticLayers());
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM NodeLayers ORDER BY LayerID ASC;";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return nodeLayerList;
          while (dataReader.Read())
            nodeLayerList.Add(new NodeLayer()
            {
              LayerID = Convert.ToInt32(dataReader["LayerID"]),
              Name = Convert.ToString(dataReader["Name"]),
              Description = Convert.ToString(dataReader["Description"])
            });
          return nodeLayerList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<NodeLayer>) null;
      }
    }

    public static List<int> LoadMeterInstallerRootNodes(int layerID)
    {
      return MeterDatabase.LoadMeterInstallerRootNodes(DbBasis.PrimaryDB, layerID);
    }

    public static List<int> LoadMeterInstallerRootNodes(DbBasis db, int layerID)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT NodeID FROM NodeReferences WHERE ParentID = 0 AND LayerID = @LayerID;";
          IDbDataParameter parameter = cmd.CreateParameter();
          parameter.DbType = DbType.Int32;
          parameter.ParameterName = "@LayerID";
          parameter.Value = (object) layerID;
          cmd.Parameters.Add((object) parameter);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<int>) null;
          List<int> intList = new List<int>();
          while (dataReader.Read())
            intList.Add(Convert.ToInt32(dataReader["NodeID"]));
          return intList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<int>) null;
      }
    }

    public static List<StructureTreeNode> LoadMeterInstallerTreesByLayerID(int layerID)
    {
      return MeterDatabase.LoadMeterInstallerTreesByLayerID(DbBasis.PrimaryDB, layerID);
    }

    public static List<StructureTreeNode> LoadMeterInstallerTreesByLayerID(DbBasis db, int layerID)
    {
      List<int> intList = db != null ? MeterDatabase.LoadMeterInstallerRootNodes(db, layerID) : throw new ArgumentNullException("Input parameter 'db' can not be null!");
      if (intList == null)
        return (List<StructureTreeNode>) null;
      StructureTreeNodeList structureTreeNodeList = new StructureTreeNodeList();
      foreach (int startNodeID in intList)
      {
        StructureTreeNode node = MeterDatabase.LoadMeterInstallerTree(db, startNodeID, new int?(layerID));
        if (node != null)
          structureTreeNodeList.Add(node);
      }
      return (List<StructureTreeNode>) structureTreeNodeList;
    }

    public static StructureTreeNode LoadMeterInstallerTree(int startNodeID)
    {
      return MeterDatabase.LoadMeterInstallerTree(startNodeID, new int?());
    }

    public static StructureTreeNode LoadMeterInstallerTree(int startNodeID, int? layerID)
    {
      return MeterDatabase.LoadMeterInstallerTree(DbBasis.PrimaryDB, startNodeID, layerID);
    }

    public static StructureTreeNode LoadMeterInstallerTree(
      DbBasis db,
      int startNodeID,
      int? layerID)
    {
      List<NodeReferences> nodeReferences1 = db != null ? MeterDatabase.LoadNodeReferences(db) : throw new ArgumentNullException("Input parameter 'db' can not be null!");
      List<NodeList> nodeList1 = MeterDatabase.LoadNodeList(db);
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          cmd = db.DbCommand(dbConnection);
          NodeReferences nodeReferences2 = nodeReferences1.Find((Predicate<NodeReferences>) (e => e.NodeID == startNodeID));
          if (nodeReferences2 == null)
            return (StructureTreeNode) null;
          StructureTreeNode structureTreeNode1 = new StructureTreeNode();
          structureTreeNode1.NodeID = new int?(startNodeID);
          structureTreeNode1.NodeOrder = nodeReferences2.NodeOrder;
          structureTreeNode1.LayerID = new int?(nodeReferences2.LayerID);
          MeterDatabase.AddChildNodes(structureTreeNode1, nodeReferences1);
          foreach (StructureTreeNode structureTreeNode2 in StructureTreeNode.ForEach(structureTreeNode1))
          {
            StructureTreeNode node = structureTreeNode2;
            NodeList nodeList2 = nodeList1.Find((Predicate<NodeList>) (e =>
            {
              int nodeId1 = e.NodeID;
              int? nodeId2 = node.NodeID;
              int valueOrDefault = nodeId2.GetValueOrDefault();
              return nodeId1 == valueOrDefault & nodeId2.HasValue && !e.ValidTo.HasValue;
            }));
            if (nodeList2 == null)
              throw new ArgumentException("MeterInstaller structure in database is corrupt! Invalid table: NodeList. Node reference is available, but not exist the node self!");
            if (!nodeList2.ValidFrom.HasValue)
              throw new ArgumentException("MeterInstaller structure in database is corrupt! Invalid table: NodeList. ValidFrom is missing!");
            StructureNodeType nodeType = StructureTreeNode.TryParseNodeType(nodeList2.NodeTypeID);
            node.ValidFrom = nodeList2.ValidFrom.Value;
            node.ValidTo = nodeList2.ValidTo;
            node.MeterID = nodeList2.MeterID == 0 ? new int?() : new int?(nodeList2.MeterID);
            node.Name = nodeList2.NodeName;
            node.NodeAdditionalInfos = nodeList2.NodeAdditionalInfos;
            node.NodeSettings = nodeList2.NodeSettings;
            node.NodeTyp = nodeType;
            node.NodeDescription = nodeList2.NodeDescription;
            node.LayerID = structureTreeNode1.LayerID;
            MeterDatabase.TryAddReplacedMeter(node, nodeList1);
          }
          return structureTreeNode1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (StructureTreeNode) null;
      }
    }

    private static void TryAddReplacedMeter(StructureTreeNode node, List<NodeList> nodeList)
    {
      if (node == null || node.NodeTyp != StructureNodeType.Meter)
        return;
      List<NodeList> all = nodeList.FindAll((Predicate<NodeList>) (e =>
      {
        int nodeId1 = e.NodeID;
        int? nodeId2 = node.NodeID;
        int valueOrDefault1 = nodeId2.GetValueOrDefault();
        if (nodeId1 == valueOrDefault1 & nodeId2.HasValue)
        {
          int meterId1 = e.MeterID;
          int? meterId2 = node.MeterID;
          int valueOrDefault2 = meterId2.GetValueOrDefault();
          if (!(meterId1 == valueOrDefault2 & meterId2.HasValue))
            return e.ValidTo.HasValue;
        }
        return false;
      }));
      if (all == null)
        return;
      foreach (NodeList nodeList1 in all)
        node.MeterReplacementHistoryList.Add(new StructureTreeNode()
        {
          MeterID = new int?(nodeList1.MeterID),
          Name = nodeList1.NodeName,
          NodeAdditionalInfos = nodeList1.NodeAdditionalInfos,
          NodeSettings = nodeList1.NodeSettings,
          NodeTyp = node.NodeTyp,
          NodeDescription = nodeList1.NodeDescription,
          LayerID = node.LayerID,
          ValidFrom = nodeList1.ValidFrom.Value,
          ValidTo = nodeList1.ValidTo
        });
    }

    private static void AddChildNodes(StructureTreeNode parent, List<NodeReferences> nodeReferences)
    {
      List<NodeReferences> all = nodeReferences.FindAll((Predicate<NodeReferences>) (e =>
      {
        int parentId = e.ParentID;
        int? nodeId = parent.NodeID;
        int valueOrDefault1 = nodeId.GetValueOrDefault();
        if (!(parentId == valueOrDefault1 & nodeId.HasValue))
          return false;
        int layerId1 = e.LayerID;
        int? layerId2 = parent.LayerID;
        int valueOrDefault2 = layerId2.GetValueOrDefault();
        return layerId1 == valueOrDefault2 & layerId2.HasValue;
      }));
      if (all == null)
        return;
      foreach (NodeReferences nodeReferences1 in all)
      {
        StructureTreeNode structureTreeNode = new StructureTreeNode(parent);
        structureTreeNode.NodeID = new int?(nodeReferences1.NodeID);
        structureTreeNode.LayerID = new int?(nodeReferences1.LayerID);
        structureTreeNode.NodeOrder = nodeReferences1.NodeOrder;
        parent.Children.Add(structureTreeNode);
        MeterDatabase.AddChildNodes(structureTreeNode, nodeReferences);
      }
    }

    public static bool ValidateMeterInstallerTreeStructure(StructureTreeNode tree)
    {
      return MeterDatabase.ValidateMeterInstallerTreeStructure(DbBasis.PrimaryDB, tree);
    }

    public static bool ValidateMeterInstallerTreeStructure(DbBasis db, StructureTreeNode tree)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      if (tree == null)
        throw new ArgumentException(nameof (tree));
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          return MeterDatabase.ValidateMeterInstallerTreeStructure(cmd, tree);
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    private static bool ValidateMeterInstallerTreeStructure(IDbCommand cmd, StructureTreeNode tree)
    {
      if (cmd == null)
        throw new ArgumentNullException("Input parameter 'cmd' can not be null!");
      if (tree == null)
        throw new ArgumentException(nameof (tree));
      bool flag = true;
      SortedList<string, StructureTreeNode> sortedList = new SortedList<string, StructureTreeNode>();
      foreach (StructureTreeNode structureTreeNode in StructureTreeNode.ForEach(tree))
      {
        if (structureTreeNode.NodeTyp != StructureNodeType.Unknown)
        {
          structureTreeNode.NodeErrors.Clear();
          if (string.IsNullOrEmpty(structureTreeNode.Name))
          {
            structureTreeNode.NodeErrors.Add(Ot.GetTranslatedLanguageText(TranslatorKey.MeterInstallerMissingNodeName));
            flag = false;
          }
          if (structureTreeNode.NodeTyp == StructureNodeType.Meter && !structureTreeNode.MeterID.HasValue)
          {
            if (structureTreeNode.Parent != null && structureTreeNode.Parent.NodeTyp == StructureNodeType.Meter && structureTreeNode.Parent.NodeErrors.Count > 0)
            {
              structureTreeNode.NodeErrors.Add(Ot.GetTranslatedLanguageText("MeterInstallerInvalidParentNode"));
              flag = false;
            }
            if (string.IsNullOrEmpty(structureTreeNode.SerialNumber))
            {
              if (structureTreeNode.ReadEnabled)
              {
                structureTreeNode.NodeErrors.Add(Ot.GetTranslatedLanguageText(TranslatorKey.MeterInstallerMissingSerialnumber));
                flag = false;
              }
            }
            else if (MeterDatabase.ExistStructureForMeter(cmd, structureTreeNode.SerialNumber))
            {
              structureTreeNode.NodeErrors.Add(Ot.GetTranslatedLanguageText(TranslatorKey.MeterInstallerMeterAlreadyExists));
              flag = false;
            }
            else if (sortedList.ContainsKey(structureTreeNode.SerialNumber))
            {
              structureTreeNode.NodeErrors.Add(Ot.GetTranslatedLanguageText(TranslatorKey.MeterInstallerMeterAlreadyExists));
              flag = false;
            }
            else
              sortedList.Add(structureTreeNode.SerialNumber, structureTreeNode);
          }
        }
      }
      if (flag)
      {
        foreach (StructureTreeNode root in StructureTreeNode.ForEach(tree))
        {
          if (root.NodeTyp != StructureNodeType.Unknown && root.NodeErrors.Count <= 0)
          {
            foreach (StructureTreeNode structureTreeNode in StructureTreeNode.ForEachChild(root))
            {
              if (structureTreeNode.NodeErrors.Count > 0)
              {
                root.NodeErrors.Add(Ot.GetTranslatedLanguageText(TranslatorKey.MeterInstallerInvalidSubNodes));
                flag = false;
                break;
              }
            }
          }
        }
      }
      return flag;
    }

    public static bool SaveTreeNode(StructureTreeNode tree)
    {
      return MeterDatabase.SaveTreeNode(DbBasis.PrimaryDB, tree);
    }

    public static bool SaveTreeNode(DbBasis db, StructureTreeNode tree)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      if (tree == null)
        throw new ArgumentNullException(nameof (tree));
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.Transaction = dbConnection.BeginTransaction();
          int? nextUniqueId1 = MeterDatabase.GetNextUniqueID(cmd, "Meter", "MeterID");
          if (!nextUniqueId1.HasValue)
            return false;
          int? nextUniqueId2 = MeterDatabase.GetNextUniqueID(cmd, "NodeList", "NodeID");
          if (!nextUniqueId2.HasValue)
            return false;
          int num1 = nextUniqueId1.Value;
          int num2 = nextUniqueId2.Value;
          foreach (StructureTreeNode structureTreeNode in StructureTreeNode.ForEach(tree))
          {
            if (structureTreeNode.NodeTyp != StructureNodeType.Unknown)
            {
              int? nullable;
              int num3;
              if (structureTreeNode.NodeTyp == StructureNodeType.Meter)
              {
                nullable = structureTreeNode.LayerID;
                int num4 = 0;
                num3 = nullable.GetValueOrDefault() == num4 & nullable.HasValue ? 1 : 0;
              }
              else
                num3 = 0;
              if (num3 != 0)
              {
                if (!string.IsNullOrEmpty(structureTreeNode.SerialNumber) && MeterDatabase.ValidateMeterInstallerTreeStructure(cmd, structureTreeNode))
                {
                  nullable = structureTreeNode.MeterID;
                  if (!nullable.HasValue)
                  {
                    if (!MeterDatabase.AddMeter(cmd, structureTreeNode, num1))
                      return false;
                    ++num1;
                  }
                  else if (!MeterDatabase.UpdateMeter(cmd, structureTreeNode))
                    return false;
                }
                else
                  structureTreeNode.ReadEnabled = false;
              }
              nullable = structureTreeNode.NodeID;
              if (nullable.HasValue)
              {
                if (!MeterDatabase.UpdateTreeNode(cmd, structureTreeNode))
                  return false;
              }
              else if (structureTreeNode.NodeTyp != StructureNodeType.Meter)
              {
                int num5;
                if (structureTreeNode.Parent != null)
                {
                  nullable = structureTreeNode.Parent.NodeID;
                  num5 = !nullable.HasValue ? 1 : 0;
                }
                else
                  num5 = 0;
                if (num5 == 0)
                {
                  if (!MeterDatabase.AddNode(cmd, structureTreeNode, num2))
                    return false;
                  ++num2;
                }
              }
              else if (MeterDatabase.ValidateMeterInstallerTreeStructure(cmd, structureTreeNode))
              {
                if (!MeterDatabase.AddNode(cmd, structureTreeNode, num2))
                  return false;
                ++num2;
              }
            }
          }
          int num6 = num1;
          int? nullable1 = nextUniqueId1;
          int valueOrDefault1 = nullable1.GetValueOrDefault();
          if (num6 > valueOrDefault1 & nullable1.HasValue && !MeterDatabase.SetNextUniqueID(cmd, "Meter", "MeterID", num1))
            return false;
          int num7 = num2;
          nullable1 = nextUniqueId2;
          int valueOrDefault2 = nullable1.GetValueOrDefault();
          if (num7 > valueOrDefault2 & nullable1.HasValue && !MeterDatabase.SetNextUniqueID(cmd, "NodeList", "NodeID", num2))
            return false;
          cmd.Transaction.Commit();
          foreach (StructureTreeNode structureTreeNode in StructureTreeNode.ForEach(tree))
            structureTreeNode.OldParent = (StructureTreeNode) null;
          return true;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static List<GMM_User> LoadGMM_User() => MeterDatabase.LoadGMM_User(DbBasis.PrimaryDB);

    public static List<GMM_User> LoadGMM_User(DbBasis db)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM GMM_User;";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<GMM_User>) null;
          List<GMM_User> gmmUserList = new List<GMM_User>();
          while (dataReader.Read())
            gmmUserList.Add(new GMM_User()
            {
              UserName = dataReader["UserName"].ToString(),
              UserPersonalNumber = Convert.ToInt32(dataReader["UserPersonalNumber"]),
              UserRights = dataReader["UserRights"].ToString(),
              UserKey = dataReader["UserKey"].ToString(),
              ChangedUserRights = dataReader["ChangedUserRights"].ToString(),
              ChangedUserKey = dataReader["ChangedUserKey"].ToString()
            });
          return gmmUserList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<GMM_User>) null;
      }
    }

    public static GMM_User AddGMM_User(DbBasis db, GMM_User user)
    {
      return MeterDatabase.AddGMM_User(db, user.UserName, user.UserPersonalNumber, user.UserRights, user.UserKey, user.ChangedUserRights, user.ChangedUserKey);
    }

    public static GMM_User AddGMM_User(
      string userName,
      int userPersonalNumber,
      string userRights,
      string userKey,
      string changedUserRights,
      string changedUserKey)
    {
      return MeterDatabase.AddGMM_User(DbBasis.PrimaryDB, userName, userPersonalNumber, userRights, userKey, changedUserRights, changedUserKey);
    }

    public static GMM_User AddGMM_User(
      DbBasis db,
      string userName,
      int userPersonalNumber,
      string userRights,
      string userKey,
      string changedUserRights,
      string changedUserKey)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      if (string.IsNullOrEmpty(userName))
        throw new ArgumentNullException("The name of GMM_User can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "INSERT INTO GMM_User (UserName, UserPersonalNumber, UserRights, UserKey, ChangedUserRights, ChangedUserKey) VALUES (@UserName, @UserPersonalNumber, @UserRights, @UserKey, @ChangedUserRights, @ChangedUserKey)";
          cmd.Parameters.Clear();
          MeterDatabase.AddParameter(cmd, "@UserName", userName);
          MeterDatabase.AddParameter(cmd, "@UserPersonalNumber", userPersonalNumber);
          MeterDatabase.AddParameter(cmd, "@UserRights", userRights);
          MeterDatabase.AddParameter(cmd, "@UserKey", userKey);
          MeterDatabase.AddParameter(cmd, "@ChangedUserRights", changedUserRights);
          MeterDatabase.AddParameter(cmd, "@ChangedUserKey", changedUserKey);
          if (cmd.ExecuteNonQuery() != 1)
            return (GMM_User) null;
          return new GMM_User()
          {
            UserName = userName,
            UserPersonalNumber = userPersonalNumber,
            UserRights = userRights,
            UserKey = userKey,
            ChangedUserRights = changedUserRights,
            ChangedUserKey = changedUserKey
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (GMM_User) null;
      }
    }

    public static List<NodeReferences> LoadNodeReferences()
    {
      return MeterDatabase.LoadNodeReferences(DbBasis.PrimaryDB);
    }

    public static List<NodeReferences> LoadNodeReferences(DbBasis db)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM NodeReferences ORDER BY NodeOrder;";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<NodeReferences>) null;
          List<NodeReferences> nodeReferencesList = new List<NodeReferences>();
          while (dataReader.Read())
          {
            int num1 = 0;
            if (dataReader["NodeOrder"] != DBNull.Value)
              num1 = Convert.ToInt32(dataReader["NodeOrder"]);
            int num2 = 0;
            if (dataReader["LayerID"] != DBNull.Value)
              num2 = Convert.ToInt32(dataReader["LayerID"]);
            nodeReferencesList.Add(new NodeReferences()
            {
              NodeID = Convert.ToInt32(dataReader["NodeID"]),
              ParentID = Convert.ToInt32(dataReader["ParentID"]),
              LayerID = num2,
              NodeOrder = num1
            });
          }
          return nodeReferencesList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<NodeReferences>) null;
      }
    }

    public static MeterInfo GetMeterInfo(uint meterInfoID)
    {
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM MeterInfo WHERE MeterInfoID=@MeterInfoID;";
          MeterDatabase.AddParameter(cmd, "@MeterInfoID", (double) meterInfoID);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null || !dataReader.Read())
            return (MeterInfo) null;
          MeterInfo meterInfo = new MeterInfo();
          meterInfo.Description = dataReader["Description"].ToString();
          meterInfo.HardwareTypeID = Convert.ToInt32(dataReader["HardwareTypeID"]);
          meterInfo.MeterInfoID = Convert.ToInt32(dataReader["MeterInfoID"]);
          meterInfo.MeterHardwareID = Convert.ToInt32(dataReader["MeterHardwareID"]);
          meterInfo.MeterTypeID = Convert.ToInt32(dataReader["MeterTypeID"]);
          meterInfo.PPSArtikelNr = dataReader["PPSArtikelNr"].ToString();
          if (dataReader.Read())
            throw new Exception("INTERNAL ERROR: The function become more as one result from database. SQL: " + cmd.CommandText);
          return meterInfo;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (MeterInfo) null;
      }
    }

    public static List<MeterInfo> LoadMeterInfo(string sapMaterialNumber, string hardwareName)
    {
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT mi.Description, mi.HardwareTypeID, mi.MeterInfoID, mi.MeterHardwareID, mi.MeterTypeID, mi.PPSArtikelNr FROM MeterInfo AS mi, HardwareType AS ht WHERE mi.PPSArtikelNr=@PPSArtikelNr AND mi.HardwareTypeID = ht.HardwareTypeID AND ht.HardwareName = @HardwareName;";
          MeterDatabase.AddParameter(cmd, "@PPSArtikelNr", sapMaterialNumber);
          MeterDatabase.AddParameter(cmd, "@HardwareName", hardwareName);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<MeterInfo>) null;
          List<MeterInfo> meterInfoList = new List<MeterInfo>();
          while (dataReader.Read())
            meterInfoList.Add(new MeterInfo()
            {
              Description = dataReader["Description"].ToString(),
              HardwareTypeID = Convert.ToInt32(dataReader["HardwareTypeID"]),
              MeterInfoID = Convert.ToInt32(dataReader["MeterInfoID"]),
              MeterHardwareID = Convert.ToInt32(dataReader["MeterHardwareID"]),
              MeterTypeID = Convert.ToInt32(dataReader["MeterTypeID"]),
              PPSArtikelNr = dataReader["PPSArtikelNr"].ToString()
            });
          return meterInfoList;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<MeterInfo>) null;
      }
    }

    public static List<MeterInfo> LoadMeterInfoBySAPAndMeterHardwareId(
      string sapMaterialNumber,
      int MeterHardwareID)
    {
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT mi.Description, mi.HardwareTypeID, mi.MeterInfoID, mi.MeterHardwareID, mi.MeterTypeID, mi.PPSArtikelNr FROM MeterInfo AS mi, HardwareType AS ht WHERE mi.PPSArtikelNr=@PPSArtikelNr AND mi.HardwareTypeID = ht.HardwareTypeID AND mi.MeterHardwareID = @MeterHardwareID;";
          MeterDatabase.AddParameter(cmd, "@PPSArtikelNr", sapMaterialNumber);
          MeterDatabase.AddParameter(cmd, "@MeterHardwareID", MeterHardwareID);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<MeterInfo>) null;
          List<MeterInfo> meterInfoList = new List<MeterInfo>();
          while (dataReader.Read())
            meterInfoList.Add(new MeterInfo()
            {
              Description = dataReader["Description"].ToString(),
              HardwareTypeID = Convert.ToInt32(dataReader["HardwareTypeID"]),
              MeterInfoID = Convert.ToInt32(dataReader["MeterInfoID"]),
              MeterHardwareID = Convert.ToInt32(dataReader[nameof (MeterHardwareID)]),
              MeterTypeID = Convert.ToInt32(dataReader["MeterTypeID"]),
              PPSArtikelNr = dataReader["PPSArtikelNr"].ToString()
            });
          return meterInfoList;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<MeterInfo>) null;
      }
    }

    public static List<MeterInfo> LoadMeterInfo(bool onlyCustomerTypes)
    {
      return MeterDatabase.LoadMeterInfo(DbBasis.PrimaryDB, new uint?(), new int?(), new int?(), onlyCustomerTypes);
    }

    public static MeterInfo LoadMeterInfo(uint meterInfoID)
    {
      List<MeterInfo> meterInfoList = MeterDatabase.LoadMeterInfo(DbBasis.PrimaryDB, new uint?(meterInfoID), new int?(), new int?(), false);
      return meterInfoList == null || meterInfoList.Count != 1 ? (MeterInfo) null : meterInfoList[0];
    }

    public static List<MeterInfo> LoadMeterInfoByHardwareTypeID(int hardwareTypeID)
    {
      return MeterDatabase.LoadMeterInfo(DbBasis.PrimaryDB, new uint?(), new int?(hardwareTypeID), new int?(), false);
    }

    public static List<MeterInfo> LoadMeterInfoByMeterHardwareID(int meterHardwareID)
    {
      return MeterDatabase.LoadMeterInfo(DbBasis.PrimaryDB, new uint?(), new int?(), new int?(meterHardwareID), false);
    }

    public static List<MeterInfo> LoadMeterInfo(
      DbBasis db,
      uint? meterInfoID,
      int? hardwareTypeID,
      int? meterHardwareID,
      bool onlyCustomerTypes)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM MeterInfo";
          if (onlyCustomerTypes)
            cmd.CommandText += " WHERE MeterInfoID > 99999";
          else
            cmd.CommandText += " WHERE 1=1";
          if (hardwareTypeID.HasValue)
          {
            cmd.CommandText += " AND HardwareTypeID=@HardwareTypeID";
            MeterDatabase.AddParameter(cmd, "@HardwareTypeID", hardwareTypeID.Value);
          }
          if (meterHardwareID.HasValue)
          {
            cmd.CommandText += " AND MeterHardwareID=@MeterHardwareID";
            MeterDatabase.AddParameter(cmd, "@MeterHardwareID", meterHardwareID.Value);
          }
          if (meterInfoID.HasValue)
          {
            cmd.CommandText += " AND MeterInfoID=@MeterInfoID;";
            MeterDatabase.AddParameter(cmd, "@MeterInfoID", (double) meterInfoID.Value);
          }
          else
            cmd.CommandText += ";";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<MeterInfo>) null;
          List<MeterInfo> meterInfoList = new List<MeterInfo>();
          while (dataReader.Read())
            meterInfoList.Add(new MeterInfo()
            {
              MeterInfoID = Convert.ToInt32(dataReader["MeterInfoID"]),
              MeterHardwareID = Convert.ToInt32(dataReader["MeterHardwareID"]),
              MeterTypeID = Convert.ToInt32(dataReader["MeterTypeID"]),
              PPSArtikelNr = dataReader["PPSArtikelNr"].ToString(),
              DefaultFunctionNr = dataReader["DefaultFunctionNr"].ToString(),
              Description = dataReader["Description"].ToString(),
              HardwareTypeID = Convert.ToInt32(dataReader["HardwareTypeID"])
            });
          return meterInfoList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<MeterInfo>) null;
      }
    }

    public static List<MeterInfo> LoadMeterInfoByHardwareName(string hardwareName)
    {
      if (string.IsNullOrEmpty(hardwareName))
        return (List<MeterInfo>) null;
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT m.* FROM MeterInfo AS m, HardwareType AS h WHERE h.HardwareTypeID=m.HardwareTypeID AND h.HardwareName = @HardwareName;";
          MeterDatabase.AddParameter(cmd, "HardwareName", hardwareName);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<MeterInfo>) null;
          List<MeterInfo> meterInfoList = new List<MeterInfo>();
          while (dataReader.Read())
            meterInfoList.Add(new MeterInfo()
            {
              MeterInfoID = Convert.ToInt32(dataReader["MeterInfoID"]),
              MeterHardwareID = Convert.ToInt32(dataReader["MeterHardwareID"]),
              MeterTypeID = Convert.ToInt32(dataReader["MeterTypeID"]),
              PPSArtikelNr = dataReader["PPSArtikelNr"].ToString(),
              DefaultFunctionNr = dataReader["DefaultFunctionNr"].ToString(),
              Description = dataReader["Description"].ToString(),
              HardwareTypeID = Convert.ToInt32(dataReader["HardwareTypeID"])
            });
          return meterInfoList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<MeterInfo>) null;
      }
    }

    public static MeterInfo AddMeterInfo(DbBasis db, MeterInfo meterInfo)
    {
      return MeterDatabase.AddMeterInfo(db, meterInfo.MeterInfoID, meterInfo.MeterHardwareID, meterInfo.MeterTypeID, meterInfo.PPSArtikelNr, meterInfo.DefaultFunctionNr, meterInfo.Description, meterInfo.HardwareTypeID);
    }

    public static MeterInfo AddMeterInfo(
      int meterInfoID,
      int meterHardwareID,
      int meterTypeID,
      string PPSArtikelNr,
      string defaultFunctionNr,
      string description,
      int hardwareTypeID)
    {
      return MeterDatabase.AddMeterInfo(DbBasis.PrimaryDB, meterInfoID, meterHardwareID, meterTypeID, PPSArtikelNr, defaultFunctionNr, description, hardwareTypeID);
    }

    public static MeterInfo AddMeterInfo(
      DbBasis db,
      int meterInfoID,
      int meterHardwareID,
      int meterTypeID,
      string PPSArtikelNr,
      string defaultFunctionNr,
      string description,
      int hardwareTypeID)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      if (string.IsNullOrEmpty(description))
        throw new ArgumentNullException("The description of MeterInfo can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          return MeterDatabase.AddMeterInfo(cmd, meterInfoID, meterHardwareID, meterTypeID, PPSArtikelNr, defaultFunctionNr, description, hardwareTypeID);
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (MeterInfo) null;
      }
    }

    public static MeterInfo AddMeterInfo(
      IDbCommand cmd,
      int meterInfoID,
      int meterHardwareID,
      int meterTypeID,
      string PPSArtikelNr,
      string defaultFunctionNr,
      string description,
      int hardwareTypeID)
    {
      if (cmd == null)
        throw new ArgumentNullException("Input parameter 'cmd' can not be null!");
      if (string.IsNullOrEmpty(description))
        throw new ArgumentNullException("The description of MeterInfo can not be null!");
      cmd.CommandText = "INSERT INTO MeterInfo (MeterInfoID, MeterHardwareID, MeterTypeID, PPSArtikelNr, DefaultFunctionNr, Description, HardwareTypeID) VALUES (@MeterInfoID, @MeterHardwareID, @MeterTypeID, @PPSArtikelNr, @DefaultFunctionNr, @Description, @HardwareTypeID)";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@MeterInfoID", meterInfoID);
      MeterDatabase.AddParameter(cmd, "@MeterHardwareID", meterHardwareID);
      MeterDatabase.AddParameter(cmd, "@MeterTypeID", meterTypeID);
      MeterDatabase.AddParameter(cmd, "@PPSArtikelNr", PPSArtikelNr);
      MeterDatabase.AddParameter(cmd, "@DefaultFunctionNr", defaultFunctionNr);
      MeterDatabase.AddParameter(cmd, "@Description", description);
      MeterDatabase.AddParameter(cmd, "@HardwareTypeID", hardwareTypeID);
      if (cmd.ExecuteNonQuery() != 1)
        return (MeterInfo) null;
      return new MeterInfo()
      {
        MeterInfoID = meterInfoID,
        MeterHardwareID = meterHardwareID,
        MeterTypeID = meterTypeID,
        PPSArtikelNr = PPSArtikelNr,
        DefaultFunctionNr = defaultFunctionNr,
        Description = description,
        HardwareTypeID = hardwareTypeID
      };
    }

    public static bool UpdateMeterInfo(MeterInfo type)
    {
      if (type == null)
        return false;
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "UPDATE MeterInfo SET MeterHardwareID=@MeterHardwareID, MeterTypeID=@MeterTypeID, PPSArtikelNr=@PPSArtikelNr, DefaultFunctionNr=@DefaultFunctionNr, [Description]=@Description, HardwareTypeID=@HardwareTypeID WHERE MeterInfoID=@MeterInfoID;";
          MeterDatabase.AddParameter(cmd, "@MeterHardwareID", type.MeterHardwareID);
          MeterDatabase.AddParameter(cmd, "@MeterTypeID", type.MeterTypeID);
          MeterDatabase.AddParameter(cmd, "@PPSArtikelNr", type.PPSArtikelNr);
          MeterDatabase.AddParameter(cmd, "@DefaultFunctionNr", type.DefaultFunctionNr);
          MeterDatabase.AddParameter(cmd, "@Description", type.Description);
          MeterDatabase.AddParameter(cmd, "@HardwareTypeID", type.HardwareTypeID);
          MeterDatabase.AddParameter(cmd, "@MeterInfoID", type.MeterInfoID);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static List<MeterType> LoadMeterType(string typename)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM MeterType WHERE Typename=@Typename;";
          MeterDatabase.AddParameter(cmd, "@Typename", typename);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<MeterType>) null;
          List<MeterType> meterTypeList = new List<MeterType>();
          while (dataReader.Read())
            meterTypeList.Add(new MeterType()
            {
              MeterTypeID = Convert.ToInt32(dataReader["MeterTypeID"]),
              MTypeTableName = dataReader["MTypeTableName"].ToString(),
              Typename = dataReader["Typename"].ToString(),
              GenerateDate = Convert.ToDateTime(dataReader["GenerateDate"]),
              Description = dataReader["Description"].ToString()
            });
          return meterTypeList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<MeterType>) null;
      }
    }

    public static MeterType GetMeterType(int meterTypeID)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM MeterType WHERE MeterTypeID=@MeterTypeID;";
          MeterDatabase.AddParameter(cmd, "@MeterTypeID", meterTypeID);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null || !dataReader.Read())
            return (MeterType) null;
          return new MeterType()
          {
            MeterTypeID = Convert.ToInt32(dataReader["MeterTypeID"]),
            MTypeTableName = dataReader["MTypeTableName"].ToString(),
            Typename = dataReader["Typename"].ToString(),
            GenerateDate = Convert.ToDateTime(dataReader["GenerateDate"]),
            Description = dataReader["Description"].ToString()
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (MeterType) null;
      }
    }

    public static List<MeterType> LoadMeterType(bool onlyCustomerTypes)
    {
      return MeterDatabase.LoadMeterType(DbBasis.PrimaryDB, onlyCustomerTypes);
    }

    public static List<MeterType> LoadMeterType(DbBasis db, bool onlyCustomerTypes)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = !onlyCustomerTypes ? "SELECT * FROM MeterType;" : "SELECT * FROM MeterType WHERE MeterTypeID > 99999;";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<MeterType>) null;
          List<MeterType> meterTypeList = new List<MeterType>();
          while (dataReader.Read())
            meterTypeList.Add(new MeterType()
            {
              MeterTypeID = Convert.ToInt32(dataReader["MeterTypeID"]),
              MTypeTableName = dataReader["MTypeTableName"].ToString(),
              Typename = dataReader["Typename"].ToString(),
              GenerateDate = Convert.ToDateTime(dataReader["GenerateDate"]),
              Description = dataReader["Description"].ToString()
            });
          return meterTypeList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<MeterType>) null;
      }
    }

    public static MeterType AddMeterType(DbBasis db, MeterType meterType)
    {
      return MeterDatabase.AddMeterType(db, meterType.MeterTypeID, meterType.MTypeTableName, meterType.Typename, meterType.GenerateDate, meterType.Description);
    }

    public static MeterType AddMeterType(
      int meterTypeID,
      string MTypeTableName,
      string typename,
      DateTime generateDate,
      string description)
    {
      return MeterDatabase.AddMeterType(DbBasis.PrimaryDB, meterTypeID, MTypeTableName, typename, generateDate, description);
    }

    public static MeterType AddMeterType(
      DbBasis db,
      int meterTypeID,
      string MTypeTableName,
      string typename,
      DateTime generateDate,
      string description)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      if (string.IsNullOrEmpty(description))
        throw new ArgumentNullException("The description of MeterInfo can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          return MeterDatabase.AddMeterType(cmd, meterTypeID, MTypeTableName, typename, generateDate, description);
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (MeterType) null;
      }
    }

    public static MeterType AddMeterType(
      IDbCommand cmd,
      int meterTypeID,
      string MTypeTableName,
      string typename,
      DateTime generateDate,
      string description)
    {
      if (cmd == null)
        throw new ArgumentNullException("Input parameter 'cmd' can not be null!");
      if (string.IsNullOrEmpty(description))
        throw new ArgumentNullException("The description of MeterInfo can not be null!");
      cmd.CommandText = "INSERT INTO MeterType (MeterTypeID, MTypeTableName, Typename, GenerateDate, Description) VALUES (@MeterTypeID, @MTypeTableName, @Typename, @GenerateDate, @Description)";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@MeterTypeID", meterTypeID);
      MeterDatabase.AddParameter(cmd, "@MTypeTableName", MTypeTableName);
      MeterDatabase.AddParameter(cmd, "@Typename", typename);
      MeterDatabase.AddParameter(cmd, "@GenerateDate", generateDate);
      MeterDatabase.AddParameter(cmd, "@Description", description);
      if (cmd.ExecuteNonQuery() != 1)
        return (MeterType) null;
      return new MeterType()
      {
        MeterTypeID = meterTypeID,
        MTypeTableName = MTypeTableName,
        Typename = typename,
        GenerateDate = generateDate,
        Description = description
      };
    }

    public static List<MTypeZelsius> LoadMTypeZelsius(bool onlyCustomerTypes)
    {
      return MeterDatabase.LoadMTypeZelsius(DbBasis.PrimaryDB, onlyCustomerTypes);
    }

    public static List<MTypeZelsius> LoadMTypeZelsius(DbBasis db, bool onlyCustomerTypes)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = !onlyCustomerTypes ? "SELECT * FROM MTypeZelsius;" : "SELECT * FROM MTypeZelsius WHERE MeterTypeID > 99999;";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<MTypeZelsius>) null;
          List<MTypeZelsius> mtypeZelsiusList = new List<MTypeZelsius>();
          while (dataReader.Read())
            mtypeZelsiusList.Add(new MTypeZelsius()
            {
              MeterTypeID = Convert.ToInt32(dataReader["MeterTypeID"]),
              EEPdata = dataReader["EEPdata"] == DBNull.Value || dataReader["EEPdata"] == null ? (byte[]) null : (byte[]) dataReader["EEPdata"],
              TypeOverrideString = dataReader["TypeOverrideString"].ToString()
            });
          return mtypeZelsiusList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<MTypeZelsius>) null;
      }
    }

    public static MTypeZelsius AddMTypeZelsius(DbBasis db, MTypeZelsius MTypeZelsius)
    {
      return MeterDatabase.AddMTypeZelsius(db, MTypeZelsius.MeterTypeID, MTypeZelsius.EEPdata, MTypeZelsius.TypeOverrideString);
    }

    public static MTypeZelsius AddMTypeZelsius(
      int meterTypeID,
      byte[] EEPdata,
      string typeOverrideString)
    {
      return MeterDatabase.AddMTypeZelsius(DbBasis.PrimaryDB, meterTypeID, EEPdata, typeOverrideString);
    }

    public static MTypeZelsius AddMTypeZelsius(
      DbBasis db,
      int meterTypeID,
      byte[] EEPdata,
      string typeOverrideString)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "INSERT INTO MTypeZelsius (MeterTypeID, EEPdata, TypeOverrideString) VALUES (@MeterTypeID, @EEPdata, @TypeOverrideString)";
          cmd.Parameters.Clear();
          MeterDatabase.AddParameter(cmd, "@MeterTypeID", meterTypeID);
          MeterDatabase.AddParameter(cmd, "@EEPdata", EEPdata);
          MeterDatabase.AddParameter(cmd, "@TypeOverrideString", typeOverrideString);
          if (cmd.ExecuteNonQuery() != 1)
            return (MTypeZelsius) null;
          return new MTypeZelsius()
          {
            MeterTypeID = meterTypeID,
            EEPdata = EEPdata,
            TypeOverrideString = typeOverrideString
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (MTypeZelsius) null;
      }
    }

    public static Filter AddFilter(DbBasis db, Filter filter)
    {
      return MeterDatabase.AddFilter(db, filter.Name, filter.Description);
    }

    public static Filter AddFilter(string name, string description)
    {
      return MeterDatabase.AddFilter(DbBasis.PrimaryDB, name, description);
    }

    public static Filter AddFilter(DbBasis db, string name, string description)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      if (string.IsNullOrEmpty(name))
        return (Filter) null;
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          int num1 = 0;
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT MAX(FilterId) FROM Filter;";
          object obj = cmd.ExecuteScalar();
          if (obj != null && obj != DBNull.Value)
            num1 = Convert.ToInt32(obj);
          int num2 = num1 + 1;
          cmd.CommandText = "INSERT INTO Filter (FilterId, Name, Description) VALUES (@FilterId, @Name, @Description)";
          MeterDatabase.AddParameter(cmd, "@FilterId", num2);
          MeterDatabase.AddParameter(cmd, "@Name", name);
          MeterDatabase.AddParameter(cmd, "@Description", description);
          if (cmd.ExecuteNonQuery() != 1)
            return (Filter) null;
          return new Filter()
          {
            FilterId = num2,
            Name = name,
            Description = description
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (Filter) null;
      }
    }

    public static List<Filter> LoadFilter() => MeterDatabase.LoadFilter(DbBasis.PrimaryDB);

    public static List<Filter> LoadFilter(DbBasis db)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM Filter ORDER BY FilterId ASC;";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<Filter>) null;
          List<Filter> filterList = new List<Filter>();
          filterList.Add(new Filter()
          {
            FilterId = 0,
            Name = Ot.GetTranslatedLanguageText("MeterInstaller", "FilterDefault")
          });
          while (dataReader.Read())
            filterList.Add(new Filter()
            {
              FilterId = Convert.ToInt32(dataReader["FilterId"]),
              Name = dataReader["Name"].ToString(),
              Description = dataReader["Description"].ToString()
            });
          return filterList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<Filter>) null;
      }
    }

    public static Filter GetFilter(int filterId)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM Filter WHERE FilterId=@FilterId;";
          MeterDatabase.AddParameter(cmd, "@FilterId", filterId);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null || !dataReader.Read())
            return (Filter) null;
          return new Filter()
          {
            FilterId = Convert.ToInt32(dataReader["FilterId"]),
            Name = dataReader["Name"].ToString(),
            Description = dataReader["Description"].ToString()
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (Filter) null;
      }
    }

    public static bool DeleteFilter(int filterId)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.Transaction = dbConnection.BeginTransaction();
          cmd.CommandText = "DELETE FROM FilterValue WHERE FilterId = @FilterId;";
          MeterDatabase.AddParameter(cmd, "@FilterId", filterId);
          cmd.ExecuteNonQuery();
          cmd.CommandText = "DELETE FROM Filter WHERE FilterId = @FilterId;";
          cmd.ExecuteNonQuery();
          cmd.Transaction.Commit();
          return true;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static List<long> LoadFilterValues(int filterId)
    {
      return MeterDatabase.LoadFilterValues(DbBasis.PrimaryDB, filterId);
    }

    public static List<long> LoadFilterValues(DbBasis db, int filterId)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      List<long> longList = new List<long>();
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT ValueIdent FROM FilterValue WHERE FilterId = @FilterId;";
          MeterDatabase.AddParameter(cmd, "@FilterId", filterId);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return longList;
          while (dataReader.Read())
            longList.Add(Convert.ToInt64(dataReader["ValueIdent"]));
          return longList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return longList;
      }
    }

    public static bool AddFilterValue(int filterId, long valueIdent)
    {
      return MeterDatabase.AddFilterValue(DbBasis.PrimaryDB, filterId, valueIdent);
    }

    public static bool AddFilterValue(DbBasis db, int filterId, long valueIdent)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      if (!ValueIdent.IsValid(valueIdent))
        return false;
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "INSERT INTO FilterValue (FilterId, ValueIdent) VALUES (@FilterId, @ValueIdent);";
          MeterDatabase.AddParameter(cmd, "@FilterId", filterId);
          MeterDatabase.AddParameter(cmd, "@ValueIdent", valueIdent.ToString());
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static bool UpdateFilterValue(int filterId, long oldValueIdent, long newValueIdent)
    {
      if (filterId < 0 || !ValueIdent.IsValid(oldValueIdent) || !ValueIdent.IsValid(newValueIdent))
        return false;
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "UPDATE FilterValue SET ValueIdent=@NewValueIdent WHERE FilterId=@FilterId AND ValueIdent=@OldValueIdent;";
          MeterDatabase.AddParameter(cmd, "@NewValueIdent", newValueIdent.ToString());
          MeterDatabase.AddParameter(cmd, "@FilterId", filterId);
          MeterDatabase.AddParameter(cmd, "@OldValueIdent", oldValueIdent.ToString());
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static bool DeleteFilterValue(int filterId, long valueIdent)
    {
      if (!ValueIdent.IsValid(valueIdent))
        return false;
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "DELETE FROM FilterValue WHERE FilterId = @FilterId AND ValueIdent=@ValueIdent;";
          MeterDatabase.AddParameter(cmd, "@FilterId", filterId);
          MeterDatabase.AddParameter(cmd, "@ValueIdent", valueIdent.ToString());
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    internal static List<long> LoadAllKnownValueIdentsFromTranslationRules()
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT DISTINCT ValueIdent FROM TranslationRules WHERE ValueIdent > 0";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<long>) null;
          List<long> longList = new List<long>();
          while (dataReader.Read())
            longList.Add((long) Convert.ToInt32(dataReader["ValueIdent"]));
          return longList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<long>) null;
      }
    }

    internal static List<long> LoadAllKnownValueIdentsFromMeterValues()
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT DISTINCT ValueIdent FROM MeterValues";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<long>) null;
          List<long> longList = new List<long>();
          while (dataReader.Read())
            longList.Add((long) Convert.ToInt32(dataReader["ValueIdent"]));
          return longList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<long>) null;
      }
    }

    public static List<string> LoadAllKnownNodeSerialnumbers()
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT DISTINCT SerialNr FROM Meter ORDER BY SerialNr ASC;";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<string>) null;
          List<string> stringList = new List<string>();
          while (dataReader.Read())
            stringList.Add(dataReader["SerialNr"].ToString());
          return stringList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<string>) null;
      }
    }

    public static List<string> LoadAllKnownNodeNamesOfMeter()
    {
      return MeterDatabase.LoadAllKnownNodeNames("NodeTypeID = 1");
    }

    public static List<string> LoadAllKnownNodeNamesOfNotMeter()
    {
      return MeterDatabase.LoadAllKnownNodeNames("NodeTypeID <> 1");
    }

    private static List<string> LoadAllKnownNodeNames(string whereStatemet)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = string.Format("SELECT DISTINCT NodeName FROM NodeList WHERE (NodeID < 90000000 OR NodeID > 90000203) AND {0} ORDER BY NodeName ASC;", (object) whereStatemet);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<string>) null;
          List<string> stringList = new List<string>();
          while (dataReader.Read())
            stringList.Add(dataReader["NodeName"].ToString());
          return stringList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<string>) null;
      }
    }

    public static SortedList<long, SortedList<DateTime, ReadingValue>> TrySaveMeterValues(
      ValueIdentSet valueIdentSet)
    {
      if (valueIdentSet == null)
        return (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
      string serialNumber = valueIdentSet.SerialNumber;
      List<int> intList = MeterDatabase.LoadMeter(serialNumber);
      if (intList != null && intList.Count > 1)
        return (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
      StructureTreeNode node = (StructureTreeNode) null;
      if (intList != null && intList.Count == 1)
      {
        List<NodeList> nodeListList = MeterDatabase.LoadNodeList(intList[0]);
        if (nodeListList == null || nodeListList.Count > 1)
          return (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
        if (nodeListList != null && nodeListList.Count == 1)
          node = MeterDatabase.LoadMeterInstallerTree(nodeListList[0].NodeID, new int?(0));
      }
      if (node == null)
      {
        node = new StructureTreeNode();
        node.NodeTyp = StructureNodeType.Meter;
        node.Name = StructureNodeType.Meter.ToString();
        node.LayerID = new int?(0);
        node.SerialNumber = serialNumber;
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.Transaction = dbConnection.BeginTransaction();
          if (!MeterDatabase.AddMeter(cmd, node))
            return (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
          int? nextUniqueId = MeterDatabase.GetNextUniqueID(cmd, "NodeList", "NodeID");
          if (!nextUniqueId.HasValue || !MeterDatabase.AddNode(cmd, node, nextUniqueId.Value) || !MeterDatabase.SetNextUniqueID(cmd, "NodeList", "NodeID", nextUniqueId.Value + 1))
            return (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
          cmd.Transaction.Commit();
        }
      }
      return node == null ? (SortedList<long, SortedList<DateTime, ReadingValue>>) null : MeterDatabase.SaveMeterValues(node.MeterID.Value, node.NodeID.Value, valueIdentSet.AvailableValues);
    }

    public static SortedList<long, SortedList<DateTime, ReadingValue>> SaveMeterValuesMSS(
      Guid meterId,
      string serialNumber,
      SortedList<long, SortedList<DateTime, ReadingValue>> values)
    {
      lock (MeterDatabase.saveMeterValueLocker)
      {
        SortedList<long, SortedList<DateTime, ReadingValue>> sortedList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
        if (values == null)
          return sortedList;
        try
        {
          using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
          {
            dbConnection.Open();
            IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
            string str1 = "INSERT INTO MeterValuesMSS (MeterId, ValueIdentIndex, TimePoint, [Value], PhysicalQuantity, MeterType, Calculation, CalculationStart, StorageInterval, Creation) VALUES (@MeterId, @ValueIdentIndex, @TimePoint, @Value, @PhysicalQuantity, @MeterType, @Calculation, @CalculationStart, @StorageInterval, @Creation);";
            string str2 = "SELECT MeterId FROM MeterValuesMSS WHERE MeterId=@MeterId AND ValueIdentIndex=@ValueIdentIndex AND TimePoint=@TimePoint AND @Value=@Value AND PhysicalQuantity=@PhysicalQuantity AND MeterType=@MeterType AND Calculation=@Calculation AND CalculationStart=@CalculationStart AND StorageInterval=@StorageInterval AND Creation=@Creation;";
            IDbDataParameter parameter1 = cmd.CreateParameter();
            IDbDataParameter parameter2 = cmd.CreateParameter();
            IDbDataParameter parameter3 = cmd.CreateParameter();
            IDbDataParameter parameter4 = cmd.CreateParameter();
            IDbDataParameter parameter5 = cmd.CreateParameter();
            IDbDataParameter parameter6 = cmd.CreateParameter();
            IDbDataParameter parameter7 = cmd.CreateParameter();
            IDbDataParameter parameter8 = cmd.CreateParameter();
            IDbDataParameter parameter9 = cmd.CreateParameter();
            IDbDataParameter parameter10 = cmd.CreateParameter();
            parameter1.ParameterName = "@MeterId";
            parameter1.DbType = DbType.Guid;
            parameter1.Value = (object) meterId;
            cmd.Parameters.Add((object) parameter1);
            parameter2.ParameterName = "@ValueIdentIndex";
            parameter2.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter2);
            parameter3.ParameterName = "@TimePoint";
            parameter3.DbType = DbType.DateTime;
            cmd.Parameters.Add((object) parameter3);
            parameter4.ParameterName = "@Value";
            parameter4.DbType = DbType.Double;
            cmd.Parameters.Add((object) parameter4);
            parameter5.ParameterName = "@PhysicalQuantity";
            parameter5.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter5);
            parameter6.ParameterName = "@MeterType";
            parameter6.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter6);
            parameter7.ParameterName = "@Calculation";
            parameter7.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter7);
            parameter8.ParameterName = "@CalculationStart";
            parameter8.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter8);
            parameter9.ParameterName = "@StorageInterval";
            parameter9.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter9);
            parameter10.ParameterName = "@Creation";
            parameter10.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter10);
            foreach (KeyValuePair<long, SortedList<DateTime, ReadingValue>> keyValuePair1 in values)
            {
              long key1 = keyValuePair1.Key;
              byte num1 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Calculation>(key1) / 4096UL);
              byte num2 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_CalculationStart>(key1) / 65536UL);
              byte num3 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Creation>(key1) / 268435456UL);
              byte num4 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(key1) / 64UL);
              ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(key1);
              byte num5 = (byte) ((ulong) physicalQuantity / 1UL);
              byte num6 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_StorageInterval>(key1) / 4194304UL);
              byte num7 = 0;
              if (physicalQuantity == ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber)
                num7 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdentError>(key1) / 2147483648UL);
              parameter2.Value = (object) num7;
              parameter5.Value = (object) num5;
              parameter6.Value = (object) num4;
              parameter7.Value = (object) num1;
              parameter8.Value = (object) num2;
              parameter9.Value = (object) num6;
              parameter10.Value = (object) num3;
              foreach (KeyValuePair<DateTime, ReadingValue> keyValuePair2 in keyValuePair1.Value)
              {
                DateTime key2 = keyValuePair2.Key;
                double num8 = keyValuePair2.Value.value;
                DateTime dateTime = new DateTime(key2.Year, key2.Month, key2.Day, key2.Hour, key2.Minute, key2.Second);
                parameter3.Value = (object) dateTime;
                parameter4.Value = (object) num8;
                try
                {
                  cmd.CommandText = str2;
                  if (cmd.ExecuteScalar() == null)
                  {
                    cmd.CommandText = str1;
                    if (1 == cmd.ExecuteNonQuery())
                    {
                      if (!sortedList.ContainsKey(key1))
                        sortedList.Add(key1, new SortedList<DateTime, ReadingValue>());
                      sortedList[key1].Add(key2, keyValuePair2.Value);
                    }
                  }
                }
                catch (Exception ex)
                {
                  MeterDatabase.LogFailedSQLQuery(cmd);
                  string message = string.Format("Failed save the value to database! \nMeterID: {0},\nTimepoint: {1}, \nValue: {2}, \nValueIdent: {3}, \nValueIdentDescription: {4}, \nError: {5}", (object) meterId, (object) key2, (object) num8, (object) key1, (object) ValueIdent.GetTranslatedValueNameForValueId(key1, false), (object) ex.Message);
                  MeterDatabase.logger.ErrorException(message, ex);
                }
              }
            }
            return sortedList;
          }
        }
        catch (Exception ex)
        {
          string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
          MeterDatabase.logger.ErrorException(str, ex);
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
          return sortedList;
        }
      }
    }

    public static SortedList<long, SortedList<DateTime, ReadingValue>> SaveMeterValuesMSS(
      DbConnection conn,
      Guid meterId,
      string serialNumber,
      SortedList<long, SortedList<DateTime, ReadingValue>> values)
    {
      lock (MeterDatabase.saveMeterValueLocker)
      {
        SortedList<long, SortedList<DateTime, ReadingValue>> sortedList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
        if (values == null)
          return sortedList;
        try
        {
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand((IDbConnection) conn);
          string str1 = "INSERT INTO MeterValuesMSS (MeterId, ValueIdentIndex, TimePoint, [Value], PhysicalQuantity, MeterType, Calculation, CalculationStart, StorageInterval, Creation) VALUES (@MeterId, @ValueIdentIndex, @TimePoint, @Value, @PhysicalQuantity, @MeterType, @Calculation, @CalculationStart, @StorageInterval, @Creation);";
          string str2 = "SELECT MeterId FROM MeterValuesMSS WHERE MeterId=@MeterId AND ValueIdentIndex=@ValueIdentIndex AND TimePoint=@TimePoint AND @Value=@Value AND PhysicalQuantity=@PhysicalQuantity AND MeterType=@MeterType AND Calculation=@Calculation AND CalculationStart=@CalculationStart AND StorageInterval=@StorageInterval AND Creation=@Creation;";
          IDbDataParameter parameter1 = cmd.CreateParameter();
          IDbDataParameter parameter2 = cmd.CreateParameter();
          IDbDataParameter parameter3 = cmd.CreateParameter();
          IDbDataParameter parameter4 = cmd.CreateParameter();
          IDbDataParameter parameter5 = cmd.CreateParameter();
          IDbDataParameter parameter6 = cmd.CreateParameter();
          IDbDataParameter parameter7 = cmd.CreateParameter();
          IDbDataParameter parameter8 = cmd.CreateParameter();
          IDbDataParameter parameter9 = cmd.CreateParameter();
          IDbDataParameter parameter10 = cmd.CreateParameter();
          parameter1.ParameterName = "@MeterId";
          parameter1.DbType = DbType.Guid;
          parameter1.Value = (object) meterId;
          cmd.Parameters.Add((object) parameter1);
          parameter2.ParameterName = "@ValueIdentIndex";
          parameter2.DbType = DbType.Byte;
          cmd.Parameters.Add((object) parameter2);
          parameter3.ParameterName = "@TimePoint";
          parameter3.DbType = DbType.DateTime;
          cmd.Parameters.Add((object) parameter3);
          parameter4.ParameterName = "@Value";
          parameter4.DbType = DbType.Double;
          cmd.Parameters.Add((object) parameter4);
          parameter5.ParameterName = "@PhysicalQuantity";
          parameter5.DbType = DbType.Byte;
          cmd.Parameters.Add((object) parameter5);
          parameter6.ParameterName = "@MeterType";
          parameter6.DbType = DbType.Byte;
          cmd.Parameters.Add((object) parameter6);
          parameter7.ParameterName = "@Calculation";
          parameter7.DbType = DbType.Byte;
          cmd.Parameters.Add((object) parameter7);
          parameter8.ParameterName = "@CalculationStart";
          parameter8.DbType = DbType.Byte;
          cmd.Parameters.Add((object) parameter8);
          parameter9.ParameterName = "@StorageInterval";
          parameter9.DbType = DbType.Byte;
          cmd.Parameters.Add((object) parameter9);
          parameter10.ParameterName = "@Creation";
          parameter10.DbType = DbType.Byte;
          cmd.Parameters.Add((object) parameter10);
          foreach (KeyValuePair<long, SortedList<DateTime, ReadingValue>> keyValuePair1 in values)
          {
            long key1 = keyValuePair1.Key;
            byte num1 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Calculation>(key1) / 4096UL);
            byte num2 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_CalculationStart>(key1) / 65536UL);
            byte num3 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Creation>(key1) / 268435456UL);
            byte num4 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(key1) / 64UL);
            ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(key1);
            byte num5 = (byte) ((ulong) physicalQuantity / 1UL);
            byte num6 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_StorageInterval>(key1) / 4194304UL);
            byte num7 = 0;
            if (physicalQuantity == ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber)
              num7 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdentError>(key1) / 2147483648UL);
            parameter2.Value = (object) num7;
            parameter5.Value = (object) num5;
            parameter6.Value = (object) num4;
            parameter7.Value = (object) num1;
            parameter8.Value = (object) num2;
            parameter9.Value = (object) num6;
            parameter10.Value = (object) num3;
            foreach (KeyValuePair<DateTime, ReadingValue> keyValuePair2 in keyValuePair1.Value)
            {
              DateTime key2 = keyValuePair2.Key;
              double num8 = keyValuePair2.Value.value;
              DateTime dateTime = new DateTime(key2.Year, key2.Month, key2.Day, key2.Hour, key2.Minute, key2.Second);
              parameter3.Value = (object) dateTime;
              parameter4.Value = (object) num8;
              try
              {
                cmd.CommandText = str2;
                if (cmd.ExecuteScalar() == null)
                {
                  cmd.CommandText = str1;
                  if (1 == cmd.ExecuteNonQuery())
                  {
                    if (!sortedList.ContainsKey(key1))
                      sortedList.Add(key1, new SortedList<DateTime, ReadingValue>());
                    sortedList[key1].Add(key2, keyValuePair2.Value);
                  }
                }
              }
              catch (Exception ex)
              {
                MeterDatabase.LogFailedSQLQuery(cmd);
                string message = string.Format("Failed save the value to database! \nMeterID: {0},\nTimepoint: {1}, \nValue: {2}, \nValueIdent: {3}, \nValueIdentDescription: {4}, \nError: {5}", (object) meterId, (object) key2, (object) num8, (object) key1, (object) ValueIdent.GetTranslatedValueNameForValueId(key1, false), (object) ex.Message);
                MeterDatabase.logger.ErrorException(message, ex);
              }
            }
          }
          return sortedList;
        }
        catch (Exception ex)
        {
          string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
          MeterDatabase.logger.ErrorException(str, ex);
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
          return sortedList;
        }
      }
    }

    public static SortedList<long, SortedList<DateTime, ReadingValue>> SaveMeterValues(
      int meterId,
      int nodeId,
      SortedList<long, SortedList<DateTime, ReadingValue>> values)
    {
      lock (MeterDatabase.saveMeterValueLocker)
      {
        SortedList<long, SortedList<DateTime, ReadingValue>> sortedList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
        if (meterId < 0 || nodeId < 0)
          return sortedList;
        if (values == null)
          return sortedList;
        try
        {
          using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
          {
            dbConnection.Open();
            IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
            string str1 = "INSERT INTO MeterValues (MeterId, ValueIdentIndex, TimePoint, [Value], PhysicalQuantity, MeterType, Calculation, CalculationStart, StorageInterval, Creation, NodeID) VALUES (@MeterId, @ValueIdentIndex, @TimePoint, @Value, @PhysicalQuantity, @MeterType, @Calculation, @CalculationStart, @StorageInterval, @Creation, @NodeID);";
            string str2 = "SELECT MeterId FROM MeterValues WHERE MeterId=@MeterId AND ValueIdentIndex=@ValueIdentIndex AND TimePoint=@TimePoint AND @Value=@Value AND PhysicalQuantity=@PhysicalQuantity AND MeterType=@MeterType AND Calculation=@Calculation AND CalculationStart=@CalculationStart AND StorageInterval=@StorageInterval AND Creation=@Creation AND NodeID=@NodeID;";
            IDbDataParameter parameter1 = cmd.CreateParameter();
            IDbDataParameter parameter2 = cmd.CreateParameter();
            IDbDataParameter parameter3 = cmd.CreateParameter();
            IDbDataParameter parameter4 = cmd.CreateParameter();
            IDbDataParameter parameter5 = cmd.CreateParameter();
            IDbDataParameter parameter6 = cmd.CreateParameter();
            IDbDataParameter parameter7 = cmd.CreateParameter();
            IDbDataParameter parameter8 = cmd.CreateParameter();
            IDbDataParameter parameter9 = cmd.CreateParameter();
            IDbDataParameter parameter10 = cmd.CreateParameter();
            IDbDataParameter parameter11 = cmd.CreateParameter();
            parameter1.ParameterName = "@MeterId";
            parameter1.DbType = DbType.Int32;
            parameter1.Value = (object) meterId;
            cmd.Parameters.Add((object) parameter1);
            parameter2.ParameterName = "@ValueIdentIndex";
            parameter2.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter2);
            parameter3.ParameterName = "@TimePoint";
            parameter3.DbType = DbType.DateTime;
            cmd.Parameters.Add((object) parameter3);
            parameter4.ParameterName = "@Value";
            parameter4.DbType = DbType.Double;
            cmd.Parameters.Add((object) parameter4);
            parameter5.ParameterName = "@PhysicalQuantity";
            parameter5.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter5);
            parameter6.ParameterName = "@MeterType";
            parameter6.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter6);
            parameter7.ParameterName = "@Calculation";
            parameter7.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter7);
            parameter8.ParameterName = "@CalculationStart";
            parameter8.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter8);
            parameter9.ParameterName = "@StorageInterval";
            parameter9.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter9);
            parameter10.ParameterName = "@Creation";
            parameter10.DbType = DbType.Byte;
            cmd.Parameters.Add((object) parameter10);
            parameter11.ParameterName = "@NodeID";
            parameter11.DbType = DbType.Int32;
            parameter11.Value = (object) nodeId;
            cmd.Parameters.Add((object) parameter11);
            foreach (KeyValuePair<long, SortedList<DateTime, ReadingValue>> keyValuePair1 in values)
            {
              long key1 = keyValuePair1.Key;
              byte num1 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Calculation>(key1) / 4096UL);
              byte num2 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_CalculationStart>(key1) / 65536UL);
              byte num3 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Creation>(key1) / 268435456UL);
              byte num4 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(key1) / 64UL);
              ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(key1);
              byte num5 = (byte) ((ulong) physicalQuantity / 1UL);
              byte num6 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_StorageInterval>(key1) / 4194304UL);
              byte num7 = 0;
              if (physicalQuantity == ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber)
                num7 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdentError>(key1) / 2147483648UL);
              parameter2.Value = (object) num7;
              parameter5.Value = (object) num5;
              parameter6.Value = (object) num4;
              parameter7.Value = (object) num1;
              parameter8.Value = (object) num2;
              parameter9.Value = (object) num6;
              parameter10.Value = (object) num3;
              foreach (KeyValuePair<DateTime, ReadingValue> keyValuePair2 in keyValuePair1.Value)
              {
                DateTime key2 = keyValuePair2.Key;
                double num8 = keyValuePair2.Value.value;
                DateTime dateTime = new DateTime(key2.Year, key2.Month, key2.Day, key2.Hour, key2.Minute, key2.Second);
                parameter3.Value = (object) dateTime;
                parameter4.Value = (object) num8;
                try
                {
                  cmd.CommandText = str2;
                  if (cmd.ExecuteScalar() == null)
                  {
                    cmd.CommandText = str1;
                    if (1 == cmd.ExecuteNonQuery())
                    {
                      if (!sortedList.ContainsKey(key1))
                        sortedList.Add(key1, new SortedList<DateTime, ReadingValue>());
                      sortedList[key1].Add(key2, keyValuePair2.Value);
                    }
                  }
                }
                catch (Exception ex)
                {
                  MeterDatabase.LogFailedSQLQuery(cmd);
                  string message = string.Format("Failed save the value to database! \nMeterID: {0},\nNodeID: {1}, \nTimepoint: {2}, \nValue: {3}, \nValueIdent: {4}, \nValueIdentDescription: {5}, \nError: {6}", (object) meterId, (object) nodeId, (object) key2, (object) num8, (object) key1, (object) ValueIdent.GetTranslatedValueNameForValueId(key1, false), (object) ex.Message);
                  MeterDatabase.logger.ErrorException(message, ex);
                }
              }
            }
            return sortedList;
          }
        }
        catch (Exception ex)
        {
          string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
          MeterDatabase.logger.ErrorException(str, ex);
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
          return sortedList;
        }
      }
    }

    public static void LogFailedSQLQuery(IDbCommand cmd)
    {
      if (!MeterDatabase.logger.IsErrorEnabled || cmd == null)
        return;
      MeterDatabase.logger.Error(cmd.CommandText);
      int num = 1;
      foreach (IDbDataParameter parameter in (IEnumerable) cmd.Parameters)
        MeterDatabase.logger.Error("#{0} Name: {1} DbType: {2}  Value: {3}", new object[4]
        {
          (object) num++.ToString().PadRight(2),
          (object) parameter.ParameterName.PadRight(20),
          (object) parameter.DbType.ToString().PadRight(10),
          parameter.Value
        });
    }

    public static List<int> LoadAllMeterIdOfTree(StructureTreeNode node, bool checkChildNodes)
    {
      if (node == null)
        throw new ArgumentNullException("Input parameter 'node' can not be null!");
      if (!node.NodeID.HasValue)
        throw new ArgumentNullException("Input parameter 'node.NodeID' can not be null!");
      IDbCommand cmd1 = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd1 = DbBasis.PrimaryDB.DbCommand(dbConnection);
          StringBuilder stringBuilder = new StringBuilder();
          List<int> intList = new List<int>();
          int num1 = 0;
          foreach (StructureTreeNode structureTreeNode in StructureTreeNode.ForEach(node))
          {
            int? nodeId1 = structureTreeNode.NodeID;
            if (nodeId1.HasValue)
            {
              if (stringBuilder.Length == 0)
                stringBuilder.Append("NodeID=@NodeID").Append(num1);
              else
                stringBuilder.Append(" OR NodeID=@NodeID").Append(num1);
              IDbCommand cmd2 = cmd1;
              string parameterName = "@NodeID" + num1.ToString();
              nodeId1 = structureTreeNode.NodeID;
              int num2 = nodeId1.Value;
              MeterDatabase.AddParameter(cmd2, parameterName, num2);
            }
            if (num1 >= 400)
            {
              cmd1.CommandText = "SELECT MeterID FROM NodeList WHERE " + stringBuilder.ToString();
              IDataReader dataReader = cmd1.ExecuteReader();
              if (dataReader == null)
                return (List<int>) null;
              while (dataReader.Read())
              {
                int int32 = Convert.ToInt32(dataReader["MeterID"]);
                if (int32 != 0 && !intList.Contains(int32))
                  intList.Add(int32);
              }
              dataReader.Close();
              cmd1.Parameters.Clear();
              stringBuilder.Length = 0;
              num1 = 0;
            }
            else
              ++num1;
            int num3;
            if (!checkChildNodes)
            {
              nodeId1 = structureTreeNode.NodeID;
              int? nodeId2 = node.NodeID;
              num3 = nodeId1.GetValueOrDefault() == nodeId2.GetValueOrDefault() & nodeId1.HasValue == nodeId2.HasValue ? 1 : 0;
            }
            else
              num3 = 0;
            if (num3 != 0)
              break;
          }
          if (stringBuilder.Length > 0)
          {
            cmd1.CommandText = "SELECT MeterID FROM NodeList WHERE " + stringBuilder.ToString();
            IDataReader dataReader = cmd1.ExecuteReader();
            if (dataReader == null)
              return (List<int>) null;
            while (dataReader.Read())
            {
              int int32 = Convert.ToInt32(dataReader["MeterID"]);
              if (int32 != 0 && !intList.Contains(int32))
                intList.Add(int32);
            }
          }
          return intList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd1);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<int>) null;
      }
    }

    public static MeterValue[] LoadMeterValues(
      DateTime startTime,
      DateTime endTime,
      List<string> serialNumbers,
      ValueIdent.ValueIdPart_Calculation calculation,
      ValueIdent.ValueIdPart_CalculationStart calculationStart,
      ValueIdent.ValueIdPart_Creation creation,
      ValueIdent.ValueIdPart_MeterType meterType,
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity,
      ValueIdent.ValueIdPart_StorageInterval storageInterval)
    {
      StringBuilder stringBuilder1 = new StringBuilder();
      if (serialNumbers == null || serialNumbers.Count == 0 || serialNumbers[0] == string.Empty)
      {
        stringBuilder1.Append("SELECT * FROM MeterValues LEFT JOIN Meter ON MeterValues.MeterId = Meter.MeterId WHERE MeterValues.TimePoint >= @startDate AND MeterValues.TimePoint <= @endDate");
      }
      else
      {
        stringBuilder1.Append("SELECT * FROM MeterValues LEFT JOIN Meter ON MeterValues.MeterId = Meter.MeterId WHERE MeterValues.TimePoint >= @startDate AND MeterValues.TimePoint <= @endDate AND Meter.SerialNr IN (");
        for (int index = 0; index < serialNumbers.Count; ++index)
          stringBuilder1.Append(serialNumbers[index].ToString() + ",");
        stringBuilder1.Remove(stringBuilder1.Length - 1, 1);
        stringBuilder1.Append(")");
      }
      long num;
      if (calculation != 0)
      {
        StringBuilder stringBuilder2 = stringBuilder1;
        num = (long) calculation / 4096L;
        string str = " AND MeterValues.Calculation = " + num.ToString();
        stringBuilder2.Append(str);
      }
      if (calculationStart != 0)
      {
        StringBuilder stringBuilder3 = stringBuilder1;
        num = (long) calculationStart / 65536L;
        string str = " AND MeterValues.CalculationStart = " + num.ToString();
        stringBuilder3.Append(str);
      }
      if (creation != 0)
      {
        StringBuilder stringBuilder4 = stringBuilder1;
        num = (long) creation / 268435456L;
        string str = " AND MeterValues.Creation = " + num.ToString();
        stringBuilder4.Append(str);
      }
      if (meterType != 0)
      {
        StringBuilder stringBuilder5 = stringBuilder1;
        num = (long) meterType / 64L;
        string str = " AND MeterValues.MeterType = " + num.ToString();
        stringBuilder5.Append(str);
      }
      if (physicalQuantity != 0)
      {
        StringBuilder stringBuilder6 = stringBuilder1;
        num = (long) physicalQuantity / 1L;
        string str = " AND MeterValues.PhysicalQuantity = " + num.ToString();
        stringBuilder6.Append(str);
      }
      if (storageInterval != 0)
      {
        StringBuilder stringBuilder7 = stringBuilder1;
        num = (long) storageInterval / 4194304L;
        string str = " AND MeterValues.StorageInterval = " + num.ToString();
        stringBuilder7.Append(str);
      }
      string str1 = stringBuilder1.ToString();
      MeterDatabase.logger.Info("WEBSERVICE: " + str1);
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = str1;
          MeterDatabase.AddParameter(cmd, "@startDate", startTime);
          MeterDatabase.AddParameter(cmd, "@endDate", endTime);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (MeterValue[]) null;
          List<MeterValue> meterValueList = new List<MeterValue>();
          while (dataReader.Read())
          {
            byte calculation1 = Convert.ToByte(dataReader["Calculation"]);
            byte calculationStart1 = Convert.ToByte(dataReader["CalculationStart"]);
            byte creation1 = Convert.ToByte(dataReader["Creation"]);
            byte meterType1 = Convert.ToByte(dataReader["MeterType"]);
            byte physicalQuantity1 = Convert.ToByte(dataReader["PhysicalQuantity"]);
            byte storageInterval1 = Convert.ToByte(dataReader["StorageInterval"]);
            long valueIdent = ValueIdent.GetValueIdent(Convert.ToByte(dataReader["ValueIdentIndex"]), physicalQuantity1, meterType1, calculation1, calculationStart1, storageInterval1, creation1);
            meterValueList.Add(new MeterValue()
            {
              meterId = (long) Convert.ToInt32(dataReader["MeterId"]),
              readoutDate = Convert.ToDateTime(dataReader["TimePoint"]),
              value = Convert.ToDouble(dataReader["Value"]),
              state = ReadingValueState.ok,
              valueId = valueIdent,
              serialNumber = Convert.ToString(dataReader["SerialNr"])
            });
          }
          return meterValueList.ToArray();
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str2 = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str2, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str2);
        return (MeterValue[]) null;
      }
    }

    public void LoadMeterValues(
      StructureTreeNode node,
      DateTime start,
      DateTime end,
      List<long> filterValueIdent,
      ValueFilter valueFilter)
    {
      if (node == null)
        throw new ArgumentNullException("Input parameter 'node' can not be null!");
      this.valueFilterAfterLoad = valueFilter;
      if (this.lastTimepointOfLoadedMeasurementValues == null)
        this.lastTimepointOfLoadedMeasurementValues = new Dictionary<int, DateTime>();
      bool flag = node.NodeTyp == StructureNodeType.Meter && node.Children.Count > 0;
      List<int> intList = MeterDatabase.LoadAllMeterIdOfTree(node, !flag);
      if (intList == null || intList.Count == 0)
        return;
      lock (MeterDatabase.saveMeterValueLocker)
      {
        this.DisposeReader();
        this.nodeValuesReader = node;
        this.startTimepointOfMeterValues = start;
        this.endTimepointOfMeterValues = end;
        this.FilterValueIdentOfMeterValues = filterValueIdent;
        this.CountOfValues = 0L;
        this.CountOfLoadedValues = 0L;
        IDbConnection Connection = (IDbConnection) null;
        IDbCommand cmd = (IDbCommand) null;
        try
        {
          Connection = DbBasis.PrimaryDB.GetDbConnection();
          Connection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(Connection);
          this.cmdOfMeterValues = cmd;
          string filterSqlStatement = MeterDatabase.CreateFilterSQLStatement(filterValueIdent);
          StringBuilder stringBuilder = new StringBuilder();
          int num1 = 0;
          MeterDatabase.AddParameter(cmd, "@start", start);
          MeterDatabase.AddParameter(cmd, "@end", end);
          for (int index = 0; index < intList.Count; ++index)
          {
            if (this.lastTimepointOfLoadedMeasurementValues.ContainsKey(intList[index]))
              this.lastTimepointOfLoadedMeasurementValues[intList[index]] = DateTime.MinValue;
            else
              this.lastTimepointOfLoadedMeasurementValues.Add(intList[index], DateTime.MinValue);
            if (stringBuilder.Length == 0)
              stringBuilder.Append("MeterID=@MeterID").Append(num1);
            else
              stringBuilder.Append(" OR MeterID=@MeterID").Append(num1);
            MeterDatabase.AddParameter(cmd, "@MeterID" + num1.ToString(), intList[index]);
            if (num1 >= 400 || index == intList.Count - 1)
            {
              cmd.CommandText = string.Format("SELECT COUNT(MeterId) FROM MeterValues WHERE TimePoint BETWEEN @start AND @end AND ({0}) {1};", (object) stringBuilder.ToString(), (object) filterSqlStatement);
              object obj = cmd.ExecuteScalar();
              if (obj == null || obj == DBNull.Value)
                return;
              this.CountOfValues += Convert.ToInt64(obj);
              cmd.Parameters.Clear();
              MeterDatabase.AddParameter(cmd, "@start", start);
              MeterDatabase.AddParameter(cmd, "@end", end);
              stringBuilder.Length = 0;
              num1 = 0;
            }
            else
              ++num1;
          }
          stringBuilder.Length = 0;
          int num2 = 0;
          cmd.Parameters.Clear();
          MeterDatabase.AddParameter(cmd, "@start", start);
          MeterDatabase.AddParameter(cmd, "@end", end);
          for (int index = 0; index < intList.Count; ++index)
          {
            if (stringBuilder.Length == 0)
              stringBuilder.Append("MeterID=@MeterID").Append(num2);
            else
              stringBuilder.Append(" OR MeterID=@MeterID").Append(num2);
            MeterDatabase.AddParameter(cmd, "@MeterID" + num2.ToString(), intList[index]);
            if (num2 >= 400 || index == intList.Count - 1)
            {
              cmd.CommandText = string.Format("SELECT MeterID, ValueIdentIndex, TimePoint, [Value], PhysicalQuantity, MeterType, Calculation, CalculationStart, StorageInterval, Creation, NodeID FROM MeterValues WHERE TimePoint BETWEEN @start AND @end AND ({0}) {1}ORDER BY MeterID, TimePoint DESC;", (object) stringBuilder.ToString(), (object) filterSqlStatement);
              cmd.CommandTimeout = 100;
              this.meterValuesReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
              this.notHandledMeterIDs = new Queue<int>((IEnumerable<int>) intList.GetRange(index, intList.Count - index));
              break;
            }
            ++num2;
          }
        }
        catch (Exception ex)
        {
          MeterDatabase.LogFailedSQLQuery(cmd);
          string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
          MeterDatabase.logger.ErrorException(str, ex);
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
          this.DisposeReader();
          Connection?.Close();
        }
      }
    }

    private void DisposeReader()
    {
      if (this.meterValuesReader == null)
        return;
      this.meterValuesReader.Close();
      this.meterValuesReader.Dispose();
      this.meterValuesReader = (IDataReader) null;
      this.valueFilterAfterLoad = ValueFilter.None;
      if (this.lastTimepointOfLoadedMeasurementValues != null)
        this.lastTimepointOfLoadedMeasurementValues.Clear();
    }

    private static string CreateWhereStatementForValueIdent_V2(string enumName, List<byte> values)
    {
      string str = "";
      foreach (byte num in values)
      {
        if (str.Length > 2)
          str += "AND ";
        str += string.Format("{0}={1} ", (object) enumName, (object) num);
      }
      return str.Trim() + " ";
    }

    public List<MeterValueRow> ReadNextMeterValues(int maxRecords)
    {
      if (this.meterValuesReader == null || this.meterValuesReader.IsClosed)
        return (List<MeterValueRow>) null;
      if (this.nodeValuesReader == null)
        throw new ArgumentNullException("Parameter 'nodeValuesReader' can not be null!");
      if (this.cmdOfMeterValues == null)
        throw new ArgumentNullException("Parameter 'cmdOfMeterValues' can not be null!");
      List<MeterValueRow> meterValueRowList = new List<MeterValueRow>();
      while (this.meterValuesReader.Read())
      {
        DateTime timePoint = (DateTime) this.meterValuesReader["TimePoint"];
        int int32 = Convert.ToInt32(this.meterValuesReader["MeterId"]);
        if (this.IsFiltered(timePoint, int32))
        {
          --this.CountOfValues;
        }
        else
        {
          ++this.CountOfLoadedValues;
          MeterValueRow meterValueRow = new MeterValueRow()
          {
            Calculation = Convert.ToByte(this.meterValuesReader["Calculation"]),
            CalculationStart = Convert.ToByte(this.meterValuesReader["CalculationStart"]),
            Creation = Convert.ToByte(this.meterValuesReader["Creation"]),
            MeterId = int32,
            MeterType = Convert.ToByte(this.meterValuesReader["MeterType"]),
            PhysicalQuantity = Convert.ToByte(this.meterValuesReader["PhysicalQuantity"]),
            StorageInterval = Convert.ToByte(this.meterValuesReader["StorageInterval"]),
            TimePoint = timePoint,
            Value = Convert.ToDouble(this.meterValuesReader["Value"]),
            ValueIdentIndex = Convert.ToByte(this.meterValuesReader["ValueIdentIndex"]),
            NodeID = Convert.ToInt32(this.meterValuesReader["NodeID"])
          };
          meterValueRow.NodeName = this.nodeValuesReader.FindNodeName(meterValueRow.MeterId);
          meterValueRow.SerialNr = this.nodeValuesReader.FindSerialnumber(meterValueRow.MeterId);
          meterValueRowList.Add(meterValueRow);
          if (meterValueRowList.Count >= maxRecords)
            return meterValueRowList;
        }
      }
      if (this.notHandledMeterIDs != null && this.notHandledMeterIDs.Count > 0)
      {
        try
        {
          StringBuilder stringBuilder = new StringBuilder();
          int num = 0;
          this.meterValuesReader.Close();
          this.cmdOfMeterValues.Connection.Open();
          this.cmdOfMeterValues.Parameters.Clear();
          MeterDatabase.AddParameter(this.cmdOfMeterValues, "@start", this.startTimepointOfMeterValues);
          MeterDatabase.AddParameter(this.cmdOfMeterValues, "@end", this.endTimepointOfMeterValues);
          string filterSqlStatement = MeterDatabase.CreateFilterSQLStatement(this.FilterValueIdentOfMeterValues);
          while (this.notHandledMeterIDs.Count > 0)
          {
            if (stringBuilder.Length == 0)
              stringBuilder.Append("MeterID=@MeterID").Append(num);
            else
              stringBuilder.Append(" OR MeterID=@MeterID").Append(num);
            MeterDatabase.AddParameter(this.cmdOfMeterValues, "@MeterID" + num.ToString(), this.notHandledMeterIDs.Dequeue());
            if (num >= 400 || num == this.notHandledMeterIDs.Count - 1)
            {
              this.cmdOfMeterValues.CommandText = string.Format("SELECT MeterID, ValueIdentIndex, TimePoint, [Value], PhysicalQuantity, MeterType, Calculation, CalculationStart, StorageInterval, Creation, NodeID FROM MeterValues WHERE TimePoint BETWEEN @start AND @end AND ({0}) {1}ORDER BY MeterID, TimePoint DESC;", (object) stringBuilder.ToString(), (object) filterSqlStatement);
              this.cmdOfMeterValues.CommandTimeout = 100;
              this.meterValuesReader = this.cmdOfMeterValues.ExecuteReader(CommandBehavior.CloseConnection);
              return this.ReadNextMeterValues(maxRecords);
            }
            ++num;
          }
        }
        catch (Exception ex)
        {
          MeterDatabase.logger.Error<Exception>(ex);
          return meterValueRowList;
        }
      }
      this.DisposeReader();
      return meterValueRowList;
    }

    private bool IsFiltered(DateTime timePoint, int meterID)
    {
      if (this.valueFilterAfterLoad != 0)
      {
        if (this.lastTimepointOfLoadedMeasurementValues[meterID] == DateTime.MinValue)
        {
          this.lastTimepointOfLoadedMeasurementValues[meterID] = timePoint;
          return false;
        }
        if (this.lastTimepointOfLoadedMeasurementValues[meterID] == timePoint)
          return false;
        if (this.valueFilterAfterLoad == ValueFilter.OnlyOneValueSetPerDay)
        {
          int num;
          if (this.lastTimepointOfLoadedMeasurementValues[meterID].Day == timePoint.Day)
          {
            DateTime measurementValue = this.lastTimepointOfLoadedMeasurementValues[meterID];
            if (measurementValue.Month == timePoint.Month)
            {
              measurementValue = this.lastTimepointOfLoadedMeasurementValues[meterID];
              num = measurementValue.Year == timePoint.Year ? 1 : 0;
              goto label_10;
            }
          }
          num = 0;
label_10:
          if (num != 0)
            return true;
        }
        else if (this.valueFilterAfterLoad == ValueFilter.OnlyOneValueSetPerMonth)
        {
          if (this.lastTimepointOfLoadedMeasurementValues[meterID].Month == timePoint.Month && this.lastTimepointOfLoadedMeasurementValues[meterID].Year == timePoint.Year)
            return true;
        }
        else if (this.valueFilterAfterLoad == ValueFilter.OnlyOneValueSetPerYear && this.lastTimepointOfLoadedMeasurementValues[meterID].Year == timePoint.Year)
          return true;
        this.lastTimepointOfLoadedMeasurementValues[meterID] = timePoint;
      }
      return false;
    }

    public static Dictionary<int, string> GetFullAdditionalInfos(DataTable table)
    {
      if (DbBasis.PrimaryDB == null)
        return (Dictionary<int, string>) null;
      DataTable table1 = table.DefaultView.ToTable(true, "NodeID");
      if (table1 == null || table1.Rows.Count == 0)
        return (Dictionary<int, string>) null;
      string SqlCommand = "SELECT   nl.NodeID, nr.ParentID, nl.NodeAdditionalInfos\r\n\t\t\t\t\t\tFROM     NodeList AS nl INNER JOIN NodeReferences AS nr ON nl.NodeID = nr.NodeID";
      DataTable dataTable = new DataTable();
      using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        DbBasis.PrimaryDB.ZRDataAdapter(SqlCommand, dbConnection).Fill(dataTable);
      Dictionary<int, string> fullAdditionalInfos = new Dictionary<int, string>();
      foreach (DataRow row in (InternalDataCollectionBase) table1.Rows)
      {
        int num = (int) row["NodeID"];
        StringBuilder stringBuilder = new StringBuilder();
        while (num > 0)
        {
          DataRow[] dataRowArray = dataTable.Select("NodeID=" + num.ToString());
          if (dataRowArray.Length != 0)
          {
            num = (int) dataRowArray[0]["ParentID"];
            string str = Util.ToString(dataRowArray[0]["NodeAdditionalInfos"]);
            if (!string.IsNullOrEmpty(str))
            {
              if (stringBuilder.Length > 0)
                stringBuilder.Insert(0, ";");
              stringBuilder.Insert(0, str);
            }
          }
          else
            break;
        }
        if (stringBuilder.Length > 0)
          fullAdditionalInfos.Add((int) row["NodeID"], stringBuilder.ToString());
      }
      return fullAdditionalInfos;
    }

    public static long GetDatabaseSize() => DbBasis.PrimaryDB.GetDatabaseSize();

    public void Dispose() => this.DisposeReader();

    public static List<NodeList> LoadNodeList() => MeterDatabase.LoadNodeList(DbBasis.PrimaryDB);

    public static List<NodeList> LoadNodeList(DbBasis db)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM NodeList;";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<NodeList>) null;
          List<NodeList> nodeListList = new List<NodeList>();
          while (dataReader.Read())
          {
            int num = 0;
            if (dataReader["NodeTypeID"] != DBNull.Value)
              num = Convert.ToInt32(dataReader["NodeTypeID"]);
            string empty1 = string.Empty;
            if (dataReader["NodeName"] != DBNull.Value)
              empty1 = Convert.ToString(dataReader["NodeName"]);
            string empty2 = string.Empty;
            if (dataReader["NodeDescription"] != DBNull.Value)
              empty2 = Convert.ToString(dataReader["NodeDescription"]);
            string empty3 = string.Empty;
            if (dataReader["NodeSettings"] != DBNull.Value)
              empty3 = Convert.ToString(dataReader["NodeSettings"]);
            DateTime? nullable1 = new DateTime?();
            if (dataReader["ValidFrom"] != DBNull.Value)
              nullable1 = new DateTime?(Convert.ToDateTime(dataReader["ValidFrom"]));
            DateTime? nullable2 = new DateTime?();
            if (dataReader["ValidTo"] != DBNull.Value)
              nullable2 = new DateTime?(Convert.ToDateTime(dataReader["ValidTo"]));
            string empty4 = string.Empty;
            if (dataReader["NodeAdditionalInfos"] != DBNull.Value)
              empty4 = Convert.ToString(dataReader["NodeAdditionalInfos"]);
            nodeListList.Add(new NodeList()
            {
              NodeID = Convert.ToInt32(dataReader["NodeID"]),
              MeterID = Convert.ToInt32(dataReader["MeterID"]),
              NodeTypeID = num,
              NodeName = empty1,
              NodeDescription = empty2,
              NodeSettings = empty3,
              ValidFrom = nullable1,
              ValidTo = nullable2,
              NodeAdditionalInfos = empty4
            });
          }
          return nodeListList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<NodeList>) null;
      }
    }

    public static List<NodeList> LoadNodeList(int meterID)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM NodeList WHERE MeterID=@MeterID;";
          MeterDatabase.AddParameter(cmd, "@MeterID", meterID);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<NodeList>) null;
          List<NodeList> nodeListList = new List<NodeList>();
          while (dataReader.Read())
          {
            int num = 0;
            if (dataReader["NodeTypeID"] != DBNull.Value)
              num = Convert.ToInt32(dataReader["NodeTypeID"]);
            string empty1 = string.Empty;
            if (dataReader["NodeName"] != DBNull.Value)
              empty1 = Convert.ToString(dataReader["NodeName"]);
            string empty2 = string.Empty;
            if (dataReader["NodeDescription"] != DBNull.Value)
              empty2 = Convert.ToString(dataReader["NodeDescription"]);
            string empty3 = string.Empty;
            if (dataReader["NodeSettings"] != DBNull.Value)
              empty3 = Convert.ToString(dataReader["NodeSettings"]);
            DateTime? nullable1 = new DateTime?();
            if (dataReader["ValidFrom"] != DBNull.Value)
              nullable1 = new DateTime?(Convert.ToDateTime(dataReader["ValidFrom"]));
            DateTime? nullable2 = new DateTime?();
            if (dataReader["ValidTo"] != DBNull.Value)
              nullable2 = new DateTime?(Convert.ToDateTime(dataReader["ValidTo"]));
            string empty4 = string.Empty;
            if (dataReader["NodeAdditionalInfos"] != DBNull.Value)
              empty4 = Convert.ToString(dataReader["NodeAdditionalInfos"]);
            nodeListList.Add(new NodeList()
            {
              NodeID = Convert.ToInt32(dataReader["NodeID"]),
              MeterID = Convert.ToInt32(dataReader["MeterID"]),
              NodeTypeID = num,
              NodeName = empty1,
              NodeDescription = empty2,
              NodeSettings = empty3,
              ValidFrom = nullable1,
              ValidTo = nullable2,
              NodeAdditionalInfos = empty4
            });
          }
          return nodeListList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<NodeList>) null;
      }
    }

    private bool UpdateNodeList(IDbCommand cmd, int nodeID, int meterID, DateTime validFrom)
    {
      if (cmd == null)
        throw new ArgumentNullException("Input parameter 'cmd' can not be null!");
      cmd.CommandText = "UPDATE NodeList SET ValidFrom=@ValidFrom WHERE NodeID=@NodeID AND MeterID=@MeterID;";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@ValidFrom", validFrom);
      MeterDatabase.AddParameter(cmd, "@NodeID", nodeID);
      MeterDatabase.AddParameter(cmd, "@MeterID", meterID);
      return cmd.ExecuteNonQuery() == 1;
    }

    public static string TryGetDatabaseIdentificationValue(string key)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT InfoData FROM DatabaseIdentification WHERE InfoName = @InfoName;";
          MeterDatabase.AddParameter(cmd, "@InfoName", key);
          object obj = cmd.ExecuteScalar();
          return obj != null && obj != DBNull.Value && !string.IsNullOrEmpty(obj.ToString()) ? obj.ToString() : (string) null;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (string) null;
      }
    }

    public static List<Meter> LoadMeter() => MeterDatabase.LoadMeter(DbBasis.PrimaryDB);

    public static List<Meter> LoadMeter(DbBasis db)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM Meter;";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<Meter>) null;
          List<Meter> meterList = new List<Meter>();
          while (dataReader.Read())
          {
            DateTime? nullable1 = new DateTime?();
            if (dataReader["ProductionDate"] != DBNull.Value)
              nullable1 = new DateTime?(Convert.ToDateTime(dataReader["ProductionDate"]));
            DateTime? nullable2 = new DateTime?();
            if (dataReader["ApprovalDate"] != DBNull.Value)
              nullable2 = new DateTime?(Convert.ToDateTime(dataReader["ApprovalDate"]));
            meterList.Add(new Meter()
            {
              MeterID = Convert.ToInt32(dataReader["MeterID"]),
              MeterInfoID = Convert.ToInt32(dataReader["MeterInfoID"]),
              SerialNr = dataReader["SerialNr"].ToString(),
              ProductionDate = nullable1,
              ApprovalDate = nullable2,
              OrderNr = dataReader["OrderNr"].ToString()
            });
          }
          return meterList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<Meter>) null;
      }
    }

    public static List<int> LoadMeter(string serialnumber)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT MeterID FROM Meter WHERE SerialNr=@SerialNr;";
          MeterDatabase.AddParameter(cmd, "@SerialNr", serialnumber);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<int>) null;
          List<int> intList = new List<int>();
          while (dataReader.Read())
            intList.Add(Convert.ToInt32(dataReader["MeterID"]));
          return intList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<int>) null;
      }
    }

    public static Meter AddMeter(DbBasis db, Meter meter)
    {
      return MeterDatabase.AddMeter(db, meter.MeterID, meter.MeterInfoID, meter.SerialNr, meter.ProductionDate, meter.ApprovalDate, meter.OrderNr);
    }

    public static Meter AddMeter(
      int meterID,
      int meterInfoID,
      string serialNr,
      DateTime? productionDate,
      DateTime? approvalDate,
      string orderNr)
    {
      return MeterDatabase.AddMeter(DbBasis.PrimaryDB, meterID, meterInfoID, serialNr, productionDate, approvalDate, orderNr);
    }

    public static Meter AddMeter(
      DbBasis db,
      int meterID,
      int meterInfoID,
      string serialNr,
      DateTime? productionDate,
      DateTime? approvalDate,
      string orderNr)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      if (string.IsNullOrEmpty(serialNr))
        throw new ArgumentNullException("The serialNr of Meter can not be null or empty!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "INSERT INTO Meter (MeterID, MeterInfoID, SerialNr, ProductionDate, ApprovalDate, OrderNr) VALUES (@MeterID, @MeterInfoID, @SerialNr, @ProductionDate, @ApprovalDate, @OrderNr)";
          cmd.Parameters.Clear();
          MeterDatabase.AddParameter(cmd, "@MeterID", meterID);
          MeterDatabase.AddParameter(cmd, "@MeterInfoID", meterInfoID);
          MeterDatabase.AddParameter(cmd, "@SerialNr", serialNr);
          MeterDatabase.AddParameter(cmd, "@ProductionDate", productionDate);
          MeterDatabase.AddParameter(cmd, "@ApprovalDate", approvalDate);
          MeterDatabase.AddParameter(cmd, "@OrderNr", orderNr);
          if (cmd.ExecuteNonQuery() != 1)
            return (Meter) null;
          return new Meter()
          {
            MeterID = meterID,
            MeterInfoID = meterInfoID,
            SerialNr = serialNr,
            ProductionDate = productionDate,
            ApprovalDate = approvalDate,
            OrderNr = orderNr
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (Meter) null;
      }
    }

    private static bool AddMeter(StructureTreeNode node)
    {
      if (node == null)
        throw new ArgumentNullException(nameof (node));
      if (node.NodeTyp != StructureNodeType.Meter)
        throw new ArgumentException(nameof (node));
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.Transaction = dbConnection.BeginTransaction();
          MeterDatabase.AddMeter(cmd, node);
          cmd.Transaction.Commit();
          return true;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    private static bool AddMeter(IDbCommand cmd, StructureTreeNode node)
    {
      int? nextUniqueId = MeterDatabase.GetNextUniqueID(cmd, "Meter", "MeterID");
      return nextUniqueId.HasValue && MeterDatabase.AddMeter(cmd, node, nextUniqueId.Value) && MeterDatabase.SetNextUniqueID(cmd, "Meter", "MeterID", nextUniqueId.Value + 1);
    }

    private static bool AddMeter(IDbCommand cmd, StructureTreeNode node, int nextMeterID)
    {
      cmd.CommandText = "SELECT MeterID FROM Meter WHERE SerialNr=@SerialNr;";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@SerialNr", node.SerialNumber);
      using (IDataReader dataReader = cmd.ExecuteReader())
      {
        if (dataReader == null)
          return false;
        if (dataReader.RecordsAffected > 0)
          return false;
      }
      cmd.CommandText = "INSERT INTO Meter (MeterID, MeterInfoID, SerialNr, ProductionDate, ApprovalDate, OrderNr) VALUES (@MeterID, @MeterInfoID, @SerialNr, @ProductionDate, @ApprovalDate, @OrderNr);";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@MeterID", nextMeterID);
      MeterDatabase.AddParameter(cmd, "@MeterInfoID", 0);
      MeterDatabase.AddParameter(cmd, "@SerialNr", node.SerialNumber);
      MeterDatabase.AddParameter(cmd, "@ProductionDate", DateTime.Now);
      IDbDataParameter parameter1 = cmd.CreateParameter();
      parameter1.DbType = DbType.Date;
      parameter1.ParameterName = "@ApprovalDate";
      parameter1.Value = (object) DBNull.Value;
      cmd.Parameters.Add((object) parameter1);
      IDbDataParameter parameter2 = cmd.CreateParameter();
      parameter2.DbType = DbType.String;
      parameter2.ParameterName = "@OrderNr";
      parameter2.Value = (object) DBNull.Value;
      cmd.Parameters.Add((object) parameter2);
      if (cmd.ExecuteNonQuery() != 1)
        return false;
      node.MeterID = new int?(nextMeterID);
      return true;
    }

    public static Meter GetMeter(int meterID)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM Meter WHERE MeterID=@MeterID;";
          MeterDatabase.AddParameter(cmd, "@MeterID", meterID);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null || !dataReader.Read())
            return (Meter) null;
          DateTime? nullable1 = new DateTime?();
          if (dataReader["ProductionDate"] != DBNull.Value)
            nullable1 = new DateTime?(Convert.ToDateTime(dataReader["ProductionDate"]));
          DateTime? nullable2 = new DateTime?();
          if (dataReader["ApprovalDate"] != DBNull.Value)
            nullable2 = new DateTime?(Convert.ToDateTime(dataReader["ApprovalDate"]));
          return new Meter()
          {
            MeterID = Convert.ToInt32(dataReader["MeterID"]),
            MeterInfoID = Convert.ToInt32(dataReader["MeterInfoID"]),
            SerialNr = dataReader["SerialNr"].ToString(),
            ProductionDate = nullable1,
            ApprovalDate = nullable2,
            OrderNr = dataReader["OrderNr"].ToString()
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (Meter) null;
      }
    }

    public static bool UpdateMeter(Meter meter)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          return MeterDatabase.UpdateMeter(cmd, meter);
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static bool UpdateMeter(IDbCommand cmd, Meter meter)
    {
      if (meter == null)
        throw new ArgumentNullException("Input parameter 'meter' can not be null!");
      if (cmd == null)
        throw new ArgumentNullException("Input parameter 'cmd' can not be null!");
      cmd.CommandText = "UPDATE Meter SET MeterInfoID=@MeterInfoID, SerialNr=@SerialNr, ProductionDate=@ProductionDate, ApprovalDate=@ApprovalDate, OrderNr=@OrderNr WHERE MeterID=@MeterID;";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@MeterInfoID", meter.MeterInfoID);
      MeterDatabase.AddParameter(cmd, "@SerialNr", meter.SerialNr);
      MeterDatabase.AddParameter(cmd, "@ProductionDate", meter.ProductionDate);
      MeterDatabase.AddParameter(cmd, "@ApprovalDate", meter.ApprovalDate);
      MeterDatabase.AddParameter(cmd, "@OrderNr", meter.OrderNr);
      MeterDatabase.AddParameter(cmd, "@MeterID", meter.MeterID);
      return cmd.ExecuteNonQuery() == 1;
    }

    private static bool UpdateMeter(IDbCommand cmd, StructureTreeNode node)
    {
      if (node == null)
        return false;
      int? nullable;
      int num1;
      if (node.NodeTyp == StructureNodeType.Meter)
      {
        if (node.MeterID.HasValue)
        {
          nullable = node.MeterID;
          int num2 = 0;
          num1 = nullable.GetValueOrDefault() == num2 & nullable.HasValue ? 1 : 0;
        }
        else
          num1 = 1;
      }
      else
        num1 = 0;
      if (num1 != 0)
      {
        nullable = node.NodeID;
        string str = "Can't change the data of Meter! The MeterID is invalid! NodeID: " + nullable.ToString();
        MeterDatabase.logger.Error(str);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
      cmd.CommandText = "UPDATE Meter SET SerialNr=@SerialNr WHERE MeterID=@MeterID;";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@SerialNr", node.SerialNumber);
      IDbCommand cmd1 = cmd;
      nullable = node.MeterID;
      int num3 = nullable.Value;
      MeterDatabase.AddParameter(cmd1, "@MeterID", num3);
      return cmd.ExecuteNonQuery() == 1;
    }

    public static string GetDatabaseLocationName()
    {
      return MeterDatabase.GetDatabaseLocationName(DbBasis.PrimaryDB);
    }

    public static string GetDatabaseLocationName(DbBasis db)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      using (IDbConnection dbConnection = db.GetDbConnection())
      {
        dbConnection.Open();
        return MeterDatabase.GetDatabaseLocationName(db.DbCommand(dbConnection));
      }
    }

    public static string GetDatabaseLocationName(IDbCommand cmd)
    {
      cmd.CommandText = "SELECT InfoData FROM DatabaseIdentification WHERE InfoName=@InfoName;";
      cmd.Parameters.Clear();
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.DbType = DbType.String;
      parameter.ParameterName = "@InfoName";
      parameter.Value = (object) "DatabaseLocationName";
      cmd.Parameters.Add((object) parameter);
      object obj = cmd.ExecuteScalar();
      return obj != null && obj != DBNull.Value ? Convert.ToString(obj) : (string) null;
    }

    [Obsolete]
    public static int? GetNextUniqueID(string tableName, string fieldName)
    {
      return MeterDatabase.GetNextUniqueID(DbBasis.PrimaryDB, tableName, fieldName);
    }

    [Obsolete]
    public static int? GetNextUniqueID(DbBasis db, string tableName, string fieldName)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      using (IDbConnection dbConnection = db.GetDbConnection())
      {
        dbConnection.Open();
        return MeterDatabase.GetNextUniqueID(db.DbCommand(dbConnection), tableName, fieldName);
      }
    }

    [Obsolete]
    public static int? GetNextUniqueID(IDbCommand cmd, string tableName, string fieldName)
    {
      if (string.IsNullOrEmpty(tableName))
        throw new ArgumentNullException(nameof (tableName));
      if (string.IsNullOrEmpty(fieldName))
        throw new ArgumentNullException(nameof (fieldName));
      string databaseLocationName = MeterDatabase.GetDatabaseLocationName(cmd);
      if (string.IsNullOrEmpty(databaseLocationName))
        throw new ArgumentNullException("databaseLocationName");
      cmd.CommandText = "SELECT ZRNextNr FROM ZRGlobalID WHERE ZRTableName=@ZRTableName AND ZRFieldName=@ZRFieldName AND DatabaseLocationName=@DatabaseLocationName;";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@ZRTableName", tableName);
      MeterDatabase.AddParameter(cmd, "@ZRFieldName", fieldName);
      MeterDatabase.AddParameter(cmd, "@DatabaseLocationName", databaseLocationName);
      object obj = cmd.ExecuteScalar();
      return obj != null && obj != DBNull.Value ? new int?(Convert.ToInt32(obj)) : new int?();
    }

    [Obsolete]
    public static bool SetNextUniqueID(string tableName, string fieldName, int nextID)
    {
      return MeterDatabase.SetNextUniqueID(DbBasis.PrimaryDB, tableName, fieldName, nextID);
    }

    [Obsolete]
    public static bool SetNextUniqueID(DbBasis db, string tableName, string fieldName, int nextID)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      using (IDbConnection dbConnection = db.GetDbConnection())
      {
        dbConnection.Open();
        return MeterDatabase.SetNextUniqueID(db.DbCommand(dbConnection), tableName, fieldName, nextID);
      }
    }

    [Obsolete]
    public static bool SetNextUniqueID(
      IDbCommand cmd,
      string tableName,
      string fieldName,
      int nextID)
    {
      string databaseLocationName = MeterDatabase.GetDatabaseLocationName(cmd);
      if (string.IsNullOrEmpty(databaseLocationName))
        throw new ArgumentNullException("databaseLocationName");
      cmd.CommandText = "SELECT ZRNextNr, ZRFirstNr, ZRLastNr FROM ZRGlobalID WHERE ZRTableName=@ZRTableName AND ZRFieldName=@ZRFieldName AND DatabaseLocationName=@DatabaseLocationName;";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@ZRTableName", tableName);
      MeterDatabase.AddParameter(cmd, "@ZRFieldName", fieldName);
      MeterDatabase.AddParameter(cmd, "@DatabaseLocationName", databaseLocationName);
      using (IDataReader dataReader = cmd.ExecuteReader())
      {
        if (!dataReader.Read())
          return false;
        int int32_1 = dataReader.GetInt32(0);
        int int32_2 = dataReader.GetInt32(1);
        int int32_3 = dataReader.GetInt32(2);
        if (int32_2 > int32_3)
          throw new ArgumentOutOfRangeException("firstNr > lastNr");
        if (int32_1 < int32_2)
          throw new ArgumentOutOfRangeException("nextNr < firstNr");
        if (int32_3 < int32_1)
          throw new ArgumentOutOfRangeException("lastNr > nextNr");
        if (nextID <= int32_1)
          throw new ArgumentOutOfRangeException("nextID <= nextNr");
        if (nextID > int32_3)
          throw new ArgumentOutOfRangeException("nextID > lastNr");
      }
      return MeterDatabase.UpdateNextUniqueID(cmd, tableName, fieldName, nextID);
    }

    [Obsolete]
    public static bool UpdateNextUniqueID(string tableName, string fieldName, int nextID)
    {
      return MeterDatabase.UpdateNextUniqueID(DbBasis.PrimaryDB, tableName, fieldName, nextID);
    }

    [Obsolete]
    public static bool UpdateNextUniqueID(
      DbBasis db,
      string tableName,
      string fieldName,
      int nextID)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      using (IDbConnection dbConnection = db.GetDbConnection())
      {
        dbConnection.Open();
        return MeterDatabase.UpdateNextUniqueID(db.DbCommand(dbConnection), tableName, fieldName, nextID);
      }
    }

    [Obsolete]
    public static bool UpdateNextUniqueID(
      IDbCommand cmd,
      string tableName,
      string fieldName,
      int nextID)
    {
      string databaseLocationName = MeterDatabase.GetDatabaseLocationName(cmd);
      if (string.IsNullOrEmpty(databaseLocationName))
        throw new ArgumentNullException("databaseLocationName");
      cmd.CommandText = "UPDATE ZRGlobalID SET ZRNextNr=@ZRNextNr WHERE ZRTableName=@ZRTableName AND ZRFieldName=@ZRFieldName AND DatabaseLocationName=@DatabaseLocationName;";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@ZRNextNr", nextID);
      MeterDatabase.AddParameter(cmd, "@ZRTableName", tableName);
      MeterDatabase.AddParameter(cmd, "@ZRFieldName", fieldName);
      MeterDatabase.AddParameter(cmd, "@DatabaseLocationName", databaseLocationName);
      return cmd.ExecuteNonQuery() == 1;
    }

    private static bool AddTreeNode(StructureTreeNode node)
    {
      int? nullable = node != null && node.Name != null ? node.NodeID : throw new ArgumentNullException(nameof (node));
      if (nullable.HasValue)
        return false;
      int num;
      if (node.NodeTyp == StructureNodeType.Meter)
      {
        nullable = node.MeterID;
        num = !nullable.HasValue ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
      {
        nullable = node.NodeID;
        string str = "Wrong MeterInstaller structur detected! The node exist, but the meter device is not known. NodeID: " + nullable.ToString();
        MeterDatabase.logger.Error(str);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.Transaction = dbConnection.BeginTransaction();
          int? nextUniqueId = MeterDatabase.GetNextUniqueID(cmd, "NodeList", "NodeID");
          if (!nextUniqueId.HasValue || !MeterDatabase.AddNode(cmd, node, nextUniqueId.Value) || !MeterDatabase.SetNextUniqueID(cmd, "NodeList", "NodeID", nextUniqueId.Value + 1))
            return false;
          cmd.Transaction.Commit();
          return true;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    private static bool AddNode(IDbCommand cmd, StructureTreeNode node, int nextNodeID)
    {
      cmd.CommandText = "INSERT INTO NodeList (NodeID, MeterID, NodeTypeID, NodeName, NodeDescription, NodeSettings, ValidFrom, ValidTo, NodeAdditionalInfos) VALUES (@NodeID, @MeterID, @NodeTypeID, @NodeName, @NodeDescription, @NodeSettings, @ValidFrom, @ValidTo, @NodeAdditionalInfos);";
      cmd.Parameters.Clear();
      IDbDataParameter parameter1 = cmd.CreateParameter();
      parameter1.DbType = DbType.Int32;
      parameter1.ParameterName = "@NodeID";
      parameter1.Value = (object) nextNodeID;
      cmd.Parameters.Add((object) parameter1);
      IDbDataParameter parameter2 = cmd.CreateParameter();
      parameter2.DbType = DbType.Int32;
      parameter2.ParameterName = "@MeterID";
      int? nullable;
      if (node.MeterID.HasValue)
      {
        IDbDataParameter dbDataParameter = parameter2;
        nullable = node.MeterID;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (System.ValueType) nullable.Value;
        dbDataParameter.Value = (object) local;
      }
      else
        parameter2.Value = (object) 0;
      cmd.Parameters.Add((object) parameter2);
      IDbDataParameter parameter3 = cmd.CreateParameter();
      parameter3.DbType = DbType.Int32;
      parameter3.ParameterName = "@NodeTypeID";
      parameter3.Value = (object) Convert.ToInt32((object) node.NodeTyp);
      cmd.Parameters.Add((object) parameter3);
      IDbDataParameter parameter4 = cmd.CreateParameter();
      parameter4.DbType = DbType.String;
      parameter4.ParameterName = "@NodeName";
      parameter4.Size = 50;
      parameter4.Value = (object) node.Name;
      cmd.Parameters.Add((object) parameter4);
      IDbDataParameter parameter5 = cmd.CreateParameter();
      parameter5.DbType = DbType.String;
      parameter5.ParameterName = "@NodeDescription";
      parameter5.Value = (object) node.NodeDescription;
      cmd.Parameters.Add((object) parameter5);
      IDbDataParameter parameter6 = cmd.CreateParameter();
      parameter6.DbType = DbType.String;
      parameter6.ParameterName = "@NodeSettings";
      parameter6.Value = (object) node.NodeSettings;
      cmd.Parameters.Add((object) parameter6);
      IDbDataParameter parameter7 = cmd.CreateParameter();
      parameter7.DbType = DbType.DateTime;
      parameter7.ParameterName = "@ValidFrom";
      DateTime now = DateTime.Now;
      parameter7.Value = (object) new DateTime(now.Year, now.Month, now.Day, now.Hour, now.Minute, now.Second);
      cmd.Parameters.Add((object) parameter7);
      IDbDataParameter parameter8 = cmd.CreateParameter();
      parameter8.DbType = DbType.DateTime;
      parameter8.ParameterName = "@ValidTo";
      parameter8.Value = (object) DBNull.Value;
      cmd.Parameters.Add((object) parameter8);
      IDbDataParameter parameter9 = cmd.CreateParameter();
      parameter9.DbType = DbType.String;
      parameter9.ParameterName = "@NodeAdditionalInfos";
      parameter9.Value = (object) node.NodeAdditionalInfos;
      cmd.Parameters.Add((object) parameter9);
      if (cmd.ExecuteNonQuery() == 1)
      {
        cmd.CommandText = "INSERT INTO NodeReferences (NodeID, ParentID, LayerID, NodeOrder) VALUES (@NodeID, @ParentID, @LayerID, @NodeOrder);";
        cmd.Parameters.Clear();
        IDbDataParameter parameter10 = cmd.CreateParameter();
        parameter10.DbType = DbType.Int32;
        parameter10.ParameterName = "@NodeID";
        parameter10.Value = (object) nextNodeID;
        cmd.Parameters.Add((object) parameter10);
        IDbDataParameter parameter11 = cmd.CreateParameter();
        parameter11.DbType = DbType.Int32;
        parameter11.ParameterName = "@ParentID";
        if (node.Parent != null && node.Parent.NodeTyp != 0)
        {
          nullable = node.Parent.NodeID;
          if (nullable.HasValue)
          {
            IDbDataParameter dbDataParameter = parameter11;
            nullable = node.Parent.NodeID;
            // ISSUE: variable of a boxed type
            __Boxed<int> local = (System.ValueType) nullable.Value;
            dbDataParameter.Value = (object) local;
          }
          else
          {
            string str = string.Format("The NodeID of parent can not be null! Node: {0}", (object) node);
            MeterDatabase.logger.Error(str);
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, str);
            return false;
          }
        }
        else
          parameter11.Value = (object) 0;
        cmd.Parameters.Add((object) parameter11);
        IDbDataParameter parameter12 = cmd.CreateParameter();
        parameter12.DbType = DbType.Int32;
        parameter12.ParameterName = "@LayerID";
        parameter12.Value = (object) node.LayerID;
        cmd.Parameters.Add((object) parameter12);
        IDbDataParameter parameter13 = cmd.CreateParameter();
        parameter13.DbType = DbType.Int32;
        parameter13.ParameterName = "@NodeOrder";
        parameter13.Value = (object) node.NodeOrder;
        cmd.Parameters.Add((object) parameter13);
        if (cmd.ExecuteNonQuery() == 1)
        {
          node.NodeID = new int?(nextNodeID);
          node.ValidFrom = now;
          return true;
        }
        string str1 = string.Format("Can not add new reference to database! {0}", (object) node);
        MeterDatabase.logger.Error(str1);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str1);
        return false;
      }
      string str2 = string.Format("Can not add new node to database! {0}", (object) node);
      MeterDatabase.logger.Error(str2);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str2);
      return false;
    }

    public static bool UpdateTree(StructureTreeNode root)
    {
      if (root == null)
        throw new ArgumentNullException(nameof (root));
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.Transaction = dbConnection.BeginTransaction();
          foreach (StructureTreeNode node in StructureTreeNode.ForEach(root))
          {
            if (node.NodeTyp != StructureNodeType.Unknown && !MeterDatabase.UpdateTreeNode(cmd, node))
              return false;
          }
          cmd.Transaction.Commit();
          foreach (StructureTreeNode structureTreeNode in StructureTreeNode.ForEach(root))
            structureTreeNode.OldParent = (StructureTreeNode) null;
          return true;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    private static bool UpdateTreeNode(IDbCommand cmd, StructureTreeNode node)
    {
      if (node == null)
        return false;
      if (!node.NodeID.HasValue)
      {
        string str = "Can't modify this node! NodeID is null!";
        MeterDatabase.logger.Error(str);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
      int? meterId = node.MeterID;
      int? nullable;
      if (node.NodeTyp == StructureNodeType.Meter)
      {
        nullable = node.MeterID;
        int num;
        if (nullable.HasValue)
        {
          nullable = node.MeterID;
          num = nullable.Value == 0 ? 1 : 0;
        }
        else
          num = 1;
        if (num != 0 && !string.IsNullOrEmpty(node.SerialNumber))
          MeterDatabase.AddMeter(cmd, node);
      }
      cmd.CommandText = "UPDATE NodeList SET NodeTypeID=@NodeTypeID, MeterID=@MeterID, NodeName=@NodeName, NodeDescription=@NodeDescription, NodeSettings=@NodeSettings, NodeAdditionalInfos=@NodeAdditionalInfos  WHERE NodeID=@NodeID AND MeterID=@MeterID2;";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@NodeTypeID", Convert.ToInt32((object) node.NodeTyp));
      IDbCommand cmd1 = cmd;
      nullable = node.MeterID;
      int num1;
      if (nullable.HasValue)
      {
        nullable = node.MeterID;
        num1 = nullable.Value;
      }
      else
        num1 = 0;
      MeterDatabase.AddParameter(cmd1, "@MeterID", num1);
      MeterDatabase.AddParameter(cmd, "@NodeName", node.Name);
      MeterDatabase.AddParameter(cmd, "@NodeDescription", node.NodeDescription);
      MeterDatabase.AddParameter(cmd, "@NodeSettings", node.NodeSettings);
      MeterDatabase.AddParameter(cmd, "@NodeAdditionalInfos", node.NodeAdditionalInfos);
      IDbCommand cmd2 = cmd;
      nullable = node.NodeID;
      int num2 = nullable.Value;
      MeterDatabase.AddParameter(cmd2, "@NodeID", num2);
      MeterDatabase.AddParameter(cmd, "@MeterID2", !meterId.HasValue ? 0 : meterId.Value);
      if (cmd.ExecuteNonQuery() != 1)
        return false;
      cmd.CommandText = "UPDATE NodeReferences SET ParentID=@ParentID, NodeOrder=@NodeOrder WHERE NodeID=@NodeID AND LayerID=@LayerID AND ParentID=@OldParentID;";
      cmd.Parameters.Clear();
      int num3;
      if (node.Parent != null && node.Parent.NodeTyp != StructureNodeType.Unknown)
      {
        nullable = node.Parent.NodeID;
        num3 = nullable.Value;
      }
      else
        num3 = 0;
      int num4 = num3;
      int num5;
      if (node.OldParent != null)
      {
        nullable = node.OldParent.NodeID;
        num5 = nullable.Value;
      }
      else
        num5 = num4;
      int num6 = num5;
      MeterDatabase.AddParameter(cmd, "@ParentID", num4);
      MeterDatabase.AddParameter(cmd, "@NodeOrder", node.NodeOrder);
      IDbCommand cmd3 = cmd;
      nullable = node.NodeID;
      int num7 = nullable.Value;
      MeterDatabase.AddParameter(cmd3, "@NodeID", num7);
      IDbCommand cmd4 = cmd;
      nullable = node.LayerID;
      int num8 = nullable.Value;
      MeterDatabase.AddParameter(cmd4, "@LayerID", num8);
      MeterDatabase.AddParameter(cmd, "@OldParentID", num6);
      return cmd.ExecuteNonQuery() == 1;
    }

    public static bool AddTreeNodeReference(int nodeId, int parentId, int layerId, int nodeOrder)
    {
      if (nodeId == parentId)
        return false;
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "INSERT INTO NodeReferences (NodeID, ParentID, LayerID, NodeOrder) VALUES (@NodeID, @ParentID, @LayerID, @NodeOrder);";
          cmd.Parameters.Clear();
          MeterDatabase.AddParameter(cmd, "@NodeID", nodeId);
          MeterDatabase.AddParameter(cmd, "@ParentID", parentId);
          MeterDatabase.AddParameter(cmd, "@LayerID", layerId);
          MeterDatabase.AddParameter(cmd, "@NodeOrder", nodeOrder);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static bool HasTreeNodeReference(int nodeId, int layerId, int parentId)
    {
      return MeterDatabase.LoadNodeReferences().Exists((Predicate<NodeReferences>) (e => e.NodeID == nodeId && e.LayerID == layerId && e.ParentID == parentId));
    }

    public static long GetCountOfInstalledMeters()
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT COUNT(*) AS TOTAL FROM Meter;";
          object obj = cmd.ExecuteScalar();
          return obj == null || obj == DBNull.Value ? 0L : Convert.ToInt64(obj);
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return -1;
      }
    }

    public static bool CheckTreeNodeForDelete(
      StructureTreeNode node,
      out StructureTreeNodeList problems)
    {
      if (node == null)
        throw new ArgumentNullException(nameof (node));
      problems = new StructureTreeNodeList();
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          foreach (StructureTreeNode structureTreeNode in StructureTreeNode.ForEach(node))
          {
            if (structureTreeNode.NodeTyp == StructureNodeType.Meter)
            {
              int? nullable = structureTreeNode.NodeID;
              if (nullable.HasValue)
              {
                nullable = structureTreeNode.MeterID;
                if (nullable.HasValue)
                {
                  nullable = structureTreeNode.LayerID;
                  int num = 0;
                  if (nullable.GetValueOrDefault() == num & nullable.HasValue && MeterDatabase.HasMeterValues(cmd, structureTreeNode))
                    problems.Add(structureTreeNode);
                }
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
      return problems.Count == 0;
    }

    public static bool HasMeterValues(StructureTreeNode nodeToCheck)
    {
      if (nodeToCheck == null)
        throw new ArgumentNullException(nameof (nodeToCheck));
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          foreach (StructureTreeNode nodeToCheck1 in StructureTreeNode.ForEach(nodeToCheck))
          {
            if (nodeToCheck1.NodeTyp == StructureNodeType.Meter && MeterDatabase.HasMeterValues(cmd, nodeToCheck1))
              return true;
          }
          return false;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return true;
      }
    }

    private static bool HasMeterValues(IDbCommand cmd, StructureTreeNode nodeToCheck)
    {
      if (nodeToCheck == null)
        throw new ArgumentNullException(nameof (nodeToCheck));
      if (!nodeToCheck.MeterID.HasValue || !nodeToCheck.NodeID.HasValue)
        return false;
      IDbCommand cmd1 = cmd;
      int? nullable = nodeToCheck.MeterID;
      int meterId = nullable.Value;
      nullable = nodeToCheck.NodeID;
      int nodeId = nullable.Value;
      return MeterDatabase.HasMeterValues(cmd1, meterId, nodeId);
    }

    private static bool HasMeterValues(IDbCommand cmd, int meterId, int nodeId)
    {
      cmd.CommandText = "SELECT COUNT(MeterId) FROM MeterValues WHERE MeterId=@MeterID AND NodeID=@NodeID;";
      cmd.Parameters.Clear();
      IDbDataParameter parameter1 = cmd.CreateParameter();
      parameter1.DbType = DbType.Int32;
      parameter1.ParameterName = "@MeterID";
      parameter1.Value = (object) meterId;
      cmd.Parameters.Add((object) parameter1);
      IDbDataParameter parameter2 = cmd.CreateParameter();
      parameter2.DbType = DbType.Int32;
      parameter2.ParameterName = "@NodeID";
      parameter2.Value = (object) nodeId;
      cmd.Parameters.Add((object) parameter2);
      return Convert.ToInt64(cmd.ExecuteScalar()) > 0L;
    }

    public static bool DeleteTreeNode(
      StructureTreeNode node,
      out StructureTreeNodeList problems,
      bool verificateNodes)
    {
      if (node == null)
        throw new ArgumentNullException(nameof (node));
      if (!node.NodeID.HasValue)
        throw new ArgumentNullException("node.NodeID");
      problems = (StructureTreeNodeList) null;
      if (verificateNodes && !MeterDatabase.CheckTreeNodeForDelete(node, out problems))
        return false;
      IDbCommand cmd1 = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd1 = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd1.Transaction = dbConnection.BeginTransaction();
          foreach (StructureTreeNode node1 in StructureTreeNode.ForEach(node))
          {
            if (node1.NodeTyp != StructureNodeType.Unknown)
            {
              int? nullable = node1.LayerID;
              if (!nullable.HasValue)
                throw new ArgumentNullException("nodeToDelete.LayerID");
              int num1;
              if (node1.NodeTyp == StructureNodeType.Meter)
              {
                nullable = node1.LayerID;
                int num2 = 0;
                if (nullable.GetValueOrDefault() == num2 & nullable.HasValue)
                {
                  nullable = node1.MeterID;
                  num1 = nullable.HasValue ? 1 : 0;
                  goto label_17;
                }
              }
              num1 = 0;
label_17:
              if (num1 != 0)
              {
                cmd1.CommandText = "DELETE FROM MeterValues WHERE MeterID=@MeterID;";
                cmd1.Parameters.Clear();
                IDbDataParameter parameter1 = cmd1.CreateParameter();
                parameter1.DbType = DbType.Int32;
                parameter1.ParameterName = "@MeterID";
                cmd1.Parameters.Add((object) parameter1);
                foreach (int num3 in MeterDatabase.LoadAllMeterIdOfTree(node1, true))
                {
                  parameter1.Value = (object) num3;
                  cmd1.ExecuteNonQuery();
                }
                cmd1.CommandText = "DELETE FROM Meter WHERE MeterID=@MeterID;";
                cmd1.Parameters.Clear();
                MeterDatabase.AddParameter(cmd1, "@MeterID", node1.MeterID.Value);
                cmd1.ExecuteNonQuery();
                cmd1.CommandText = "DELETE FROM NodeReferences WHERE NodeID=@NodeID;";
                cmd1.Parameters.Clear();
                IDbDataParameter parameter2 = cmd1.CreateParameter();
                parameter2.DbType = DbType.Int32;
                parameter2.ParameterName = "@NodeID";
                IDbDataParameter dbDataParameter = parameter2;
                nullable = node1.NodeID;
                // ISSUE: variable of a boxed type
                __Boxed<int> local = (System.ValueType) nullable.Value;
                dbDataParameter.Value = (object) local;
                cmd1.Parameters.Add((object) parameter2);
              }
              else
              {
                cmd1.CommandText = "DELETE FROM NodeReferences WHERE NodeID=@NodeID AND ParentID=@ParentID AND LayerID=@LayerID;";
                cmd1.Parameters.Clear();
                IDbDataParameter parameter3 = cmd1.CreateParameter();
                parameter3.DbType = DbType.Int32;
                parameter3.ParameterName = "@NodeID";
                IDbDataParameter dbDataParameter1 = parameter3;
                nullable = node1.NodeID;
                // ISSUE: variable of a boxed type
                __Boxed<int> local1 = (System.ValueType) nullable.Value;
                dbDataParameter1.Value = (object) local1;
                cmd1.Parameters.Add((object) parameter3);
                IDbDataParameter parameter4 = cmd1.CreateParameter();
                parameter4.DbType = DbType.Int32;
                parameter4.ParameterName = "@ParentID";
                parameter4.Value = (object) (node1.Parent == null || node1.Parent.NodeTyp == StructureNodeType.Unknown ? new int?(0) : node1.Parent.NodeID);
                cmd1.Parameters.Add((object) parameter4);
                IDbDataParameter parameter5 = cmd1.CreateParameter();
                parameter5.DbType = DbType.Int32;
                parameter5.ParameterName = "@LayerID";
                IDbDataParameter dbDataParameter2 = parameter5;
                nullable = node1.LayerID;
                // ISSUE: variable of a boxed type
                __Boxed<int> local2 = (System.ValueType) nullable.Value;
                dbDataParameter2.Value = (object) local2;
                cmd1.Parameters.Add((object) parameter5);
              }
              cmd1.ExecuteNonQuery();
              nullable = node1.LayerID;
              int num4 = 0;
              if (!(nullable.GetValueOrDefault() > num4 & nullable.HasValue) || node1.NodeTyp != StructureNodeType.Meter)
              {
                cmd1.CommandText = "DELETE FROM NodeList WHERE NodeID=@NodeID;";
                cmd1.Parameters.Clear();
                IDbCommand cmd2 = cmd1;
                nullable = node1.NodeID;
                int num5 = nullable.Value;
                MeterDatabase.AddParameter(cmd2, "@NodeID", num5);
                cmd1.ExecuteNonQuery();
              }
            }
          }
          cmd1.Transaction.Commit();
          return true;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd1);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static bool ExistStructureForMeter(string serialnumber)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          return MeterDatabase.ExistStructureForMeter(cmd, serialnumber);
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return true;
      }
    }

    private static bool ExistStructureForMeter(IDbCommand cmd, string serialnumber)
    {
      cmd.CommandText = "SELECT MeterID FROM Meter WHERE SerialNr=@SerialNr;";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@SerialNr", serialnumber);
      IDataReader dataReader1 = cmd.ExecuteReader();
      if (dataReader1.Read())
      {
        int int32 = dataReader1.GetInt32(0);
        if (dataReader1.Read())
          throw new Exception("Database table 'Meter' has invalid values! Serialnumber: " + serialnumber);
        dataReader1.Close();
        cmd.CommandText = "SELECT MeterID FROM NodeList WHERE MeterID=@MeterID;";
        cmd.Parameters.Clear();
        MeterDatabase.AddParameter(cmd, "@MeterID", int32);
        IDataReader dataReader2 = cmd.ExecuteReader();
        if (dataReader2.Read())
        {
          dataReader2.Close();
          return true;
        }
        dataReader2.Close();
      }
      else
        dataReader1.Close();
      return false;
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, DateTime? value)
    {
      if (value.HasValue)
      {
        MeterDatabase.AddParameter(cmd, parameterName, value.Value);
      }
      else
      {
        IDbDataParameter parameter = cmd.CreateParameter();
        parameter.ParameterName = parameterName;
        parameter.DbType = DbType.DateTime;
        parameter.Value = (object) DBNull.Value;
        cmd.Parameters.Add((object) parameter);
      }
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, DateTime value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.DateTime;
      parameter.Value = (object) new DateTime(value.Year, value.Month, value.Day, value.Hour, value.Minute, value.Second);
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, int value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.Int32;
      parameter.Value = (object) value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, Guid value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.Guid;
      parameter.Value = (object) value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, double value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.Double;
      parameter.Value = (object) value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, double? value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.Double;
      if (value.HasValue)
        parameter.Value = (object) value.Value;
      else
        parameter.Value = (object) DBNull.Value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, bool? value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.Boolean;
      if (value.HasValue)
        parameter.Value = (object) value.Value;
      else
        parameter.Value = (object) DBNull.Value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, string value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.String;
      if (value == null)
        parameter.Value = (object) DBNull.Value;
      else
        parameter.Value = (object) value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, byte[] value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.Binary;
      if (value == null)
        parameter.Value = (object) DBNull.Value;
      else
        parameter.Value = (object) value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, Type type, object value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = MeterDatabase.TypeToDbType(type);
      if (value == null)
        parameter.Value = (object) DBNull.Value;
      else
        parameter.Value = value;
      cmd.Parameters.Add((object) parameter);
    }

    private static void AddParameter(IDbCommand cmd, string parameterName, Image value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.Binary;
      parameter.Value = (object) Util.ImageToByte(value);
      cmd.Parameters.Add((object) parameter);
    }

    public static DbType TypeToDbType(Type t)
    {
      DbType dbType;
      try
      {
        dbType = !(t == typeof (byte[])) ? (DbType) Enum.Parse(typeof (DbType), t.Name, true) : DbType.Binary;
      }
      catch
      {
        dbType = DbType.Object;
      }
      return dbType;
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, bool value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.Boolean;
      parameter.Value = (object) value;
      cmd.Parameters.Add((object) parameter);
    }

    public static bool MeterReplacement(StructureTreeNode nodeOld, StructureTreeNode nodeNew)
    {
      if (nodeNew == null || nodeOld == null)
        return false;
      int? nullable = nodeOld.NodeID;
      if (!nullable.HasValue)
        return false;
      nullable = nodeOld.MeterID;
      if (!nullable.HasValue)
        return false;
      nullable = nodeNew.NodeID;
      if (!nullable.HasValue)
        return false;
      nullable = nodeNew.MeterID;
      if (!nullable.HasValue)
        return false;
      DateTime now = DateTime.Now;
      IDbCommand cmd1 = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd1 = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd1.Transaction = dbConnection.BeginTransaction();
          cmd1.CommandText = "UPDATE NodeList SET ValidTo=@ValidTo WHERE NodeID=@NodeID AND MeterID=@MeterID;";
          cmd1.Parameters.Clear();
          MeterDatabase.AddParameter(cmd1, "@ValidTo", now);
          IDbCommand cmd2 = cmd1;
          nullable = nodeOld.NodeID;
          int num1 = nullable.Value;
          MeterDatabase.AddParameter(cmd2, "@NodeID", num1);
          IDbCommand cmd3 = cmd1;
          nullable = nodeOld.MeterID;
          int num2 = nullable.Value;
          MeterDatabase.AddParameter(cmd3, "@MeterID", num2);
          if (cmd1.ExecuteNonQuery() != 1)
            return false;
          cmd1.CommandText = "UPDATE NodeList SET NodeID=@NodeIDNew, ValidTo=@ValidTo, NodeName=@NodeName WHERE NodeID=@NodeID AND MeterID=@MeterID;";
          cmd1.Parameters.Clear();
          IDbCommand cmd4 = cmd1;
          nullable = nodeOld.NodeID;
          int num3 = nullable.Value;
          MeterDatabase.AddParameter(cmd4, "@NodeIDNew", num3);
          IDbDataParameter parameter = cmd1.CreateParameter();
          parameter.ParameterName = "@ValidTo";
          parameter.DbType = DbType.DateTime;
          parameter.Value = (object) DBNull.Value;
          cmd1.Parameters.Add((object) parameter);
          MeterDatabase.AddParameter(cmd1, "@NodeName", nodeNew.Name);
          IDbCommand cmd5 = cmd1;
          nullable = nodeNew.NodeID;
          int num4 = nullable.Value;
          MeterDatabase.AddParameter(cmd5, "@NodeID", num4);
          IDbCommand cmd6 = cmd1;
          nullable = nodeNew.MeterID;
          int num5 = nullable.Value;
          MeterDatabase.AddParameter(cmd6, "@MeterID", num5);
          if (cmd1.ExecuteNonQuery() != 1)
            return false;
          cmd1.CommandText = "DELETE FROM NodeReferences WHERE NodeID=@NodeID AND ParentID=@ParentID AND LayerID=@LayerID;";
          cmd1.Parameters.Clear();
          IDbCommand cmd7 = cmd1;
          nullable = nodeNew.NodeID;
          int num6 = nullable.Value;
          MeterDatabase.AddParameter(cmd7, "@NodeID", num6);
          IDbCommand cmd8 = cmd1;
          nullable = nodeNew.Parent.NodeID;
          int num7 = nullable.Value;
          MeterDatabase.AddParameter(cmd8, "@ParentID", num7);
          IDbCommand cmd9 = cmd1;
          nullable = nodeNew.LayerID;
          int num8 = nullable.Value;
          MeterDatabase.AddParameter(cmd9, "@LayerID", num8);
          if (cmd1.ExecuteNonQuery() != 1)
            return false;
          nodeNew.NodeID = nodeOld.NodeID;
          nodeNew.Name = nodeOld.Name;
          nodeNew.NodeOrder = nodeOld.NodeOrder;
          nodeOld.Parent.Children.Remove(nodeOld);
          cmd1.Transaction.Commit();
          return true;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd1);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static int? GetDatabaseVersion() => MeterDatabase.GetDatabaseVersion(DbBasis.PrimaryDB);

    public static int? GetDatabaseVersion(DbBasis db)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT InfoData FROM DatabaseIdentification WHERE InfoName = @InfoName;";
          MeterDatabase.AddParameter(cmd, "@InfoName", "DatabaseVersion");
          object obj = cmd.ExecuteScalar();
          return obj != null && obj != DBNull.Value && !string.IsNullOrEmpty(obj.ToString()) ? new int?(Convert.ToInt32(obj)) : new int?(1);
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return new int?();
      }
    }

    public static string GetDatabaseVersionDate()
    {
      return MeterDatabase.GetDatabaseVersionDate(DbBasis.PrimaryDB);
    }

    public static string GetDatabaseVersionDate(DbBasis db)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT InfoData FROM DatabaseIdentification WHERE InfoName = @InfoName;";
          MeterDatabase.AddParameter(cmd, "@InfoName", "DatabaseVersionDate");
          object obj = cmd.ExecuteScalar();
          return obj != null && obj != DBNull.Value && !string.IsNullOrEmpty(obj.ToString()) ? obj.ToString() : "01/01/2011";
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (string) null;
      }
    }

    public static bool ExistTable(DbBasis db, string tableName)
    {
      using (IDbConnection dbConnection = db.GetDbConnection())
      {
        dbConnection.Open();
        IDbCommand command = dbConnection.CreateCommand();
        try
        {
          command.CommandText = "SELECT CASE WHEN EXISTS((SELECT * FROM information_schema.tables WHERE table_name = '" + tableName + "')) THEN 1 ELSE 0 END";
          return (int) command.ExecuteScalar() == 1;
        }
        catch
        {
          try
          {
            command.CommandText = "SELECT 1 FROM " + tableName + " WHERE 1 = 0";
            command.ExecuteNonQuery();
            return true;
          }
          catch
          {
            return false;
          }
        }
      }
    }

    public bool TransferDataToEmptyDatabase(
      DbBasis oldDatabase,
      DbBasis newDatabase,
      string table,
      string filter)
    {
      if (oldDatabase == null)
        throw new ArgumentNullException("Input parameter 'oldDatabase' can not be null!");
      if (newDatabase == null)
        throw new ArgumentNullException("Input parameter 'newDatabase' can not be null!");
      if (string.IsNullOrEmpty(table))
        throw new ArgumentNullException("Input parameter 'table' can not be null!");
      IDbCommand cmd1 = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection1 = oldDatabase.GetDbConnection())
        {
          dbConnection1.Open();
          using (cmd1 = oldDatabase.DbCommand(dbConnection1))
          {
            string str1;
            string str2;
            if (string.IsNullOrEmpty(filter))
            {
              str1 = "SELECT COUNT(*) FROM " + table;
              str2 = "SELECT * FROM " + table;
            }
            else
            {
              str1 = "SELECT COUNT(*) FROM " + table + " WHERE " + filter;
              str2 = "SELECT * FROM " + table + " WHERE " + filter;
            }
            cmd1.CommandText = str1;
            object obj1 = cmd1.ExecuteScalar();
            if (obj1 == null || obj1 == DBNull.Value)
              return false;
            long int64 = Convert.ToInt64(obj1);
            if (int64 == 0L)
              return true;
            cmd1.CommandText = str2;
            IDataReader dataReader = cmd1.ExecuteReader();
            if (dataReader == null)
              return false;
            using (IDbConnection dbConnection2 = newDatabase.GetDbConnection())
            {
              dbConnection2.Open();
              IDbCommand cmd2;
              using (cmd2 = newDatabase.DbCommand(dbConnection2))
              {
                DataTable schemaTable = dataReader.GetSchemaTable();
                StringBuilder stringBuilder = new StringBuilder("INSERT INTO ");
                stringBuilder.Append(table).Append(" (");
                foreach (DataRow row in (InternalDataCollectionBase) schemaTable.Rows)
                  stringBuilder.Append("[").Append(row["ColumnName"]).Append("]").Append(", ");
                stringBuilder.Remove(stringBuilder.Length - 2, 2);
                stringBuilder.Append(") VALUES (");
                foreach (DataRow row in (InternalDataCollectionBase) schemaTable.Rows)
                {
                  stringBuilder.Append("@").Append(row["ColumnName"]).Append(", ");
                  MeterDatabase.AddParameter(cmd2, row["ColumnName"].ToString(), (Type) row["DataType"], (object) null);
                }
                stringBuilder.Remove(stringBuilder.Length - 2, 2);
                stringBuilder.Append(");");
                cmd2.CommandText = stringBuilder.ToString();
                long num1 = 0;
                int num2 = 0;
                int num3 = 0;
                MeterDatabase.Progress e = new MeterDatabase.Progress()
                {
                  Count = int64,
                  Successful = num2,
                  Failed = 0,
                  ProgressValue = 0
                };
                DateTime now = DateTime.Now;
                while (dataReader.Read())
                {
                  ++num1;
                  for (int index = 0; index < dataReader.FieldCount; ++index)
                  {
                    object obj2 = dataReader.GetValue(index);
                    ((IDataParameter) cmd2.Parameters[schemaTable.Rows[index]["ColumnName"].ToString()]).Value = obj2;
                  }
                  try
                  {
                    if (cmd2.ExecuteNonQuery() != 1)
                      ++num3;
                    else
                      ++num2;
                  }
                  catch (Exception ex)
                  {
                    MeterDatabase.logger.Error<Exception>(ex);
                    ++num3;
                  }
                  if (this.OnProgress != null)
                  {
                    int int32 = Convert.ToInt32((double) num1 / (double) int64 * 100.0);
                    if (e.ProgressValue != int32 || (DateTime.Now - now).TotalSeconds > 1.0)
                    {
                      e.ProgressValue = int32;
                      e.Successful = num2;
                      e.Failed = num3;
                      this.OnProgress((object) this, e);
                      now = DateTime.Now;
                    }
                  }
                }
                return true;
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd1);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public bool TransferTableNodeList_1_to_2(DbBasis oldDatabase, DbBasis newDatabase)
    {
      if (oldDatabase == null)
        throw new ArgumentNullException("Input parameter 'oldDatabase' can not be null!");
      if (newDatabase == null)
        throw new ArgumentNullException("Input parameter 'newDatabase' can not be null!");
      IDbCommand cmd1 = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection1 = oldDatabase.GetDbConnection())
        {
          dbConnection1.Open();
          using (cmd1 = oldDatabase.DbCommand(dbConnection1))
          {
            string str1 = "SELECT COUNT(*) FROM NodeList WHERE NodeID > 99999999;";
            string str2 = "SELECT * FROM NodeList WHERE NodeID > 99999999;";
            cmd1.CommandText = str1;
            object obj = cmd1.ExecuteScalar();
            if (obj == null || obj == DBNull.Value)
              return false;
            long int64 = Convert.ToInt64(obj);
            if (int64 == 0L)
              return true;
            cmd1.CommandText = str2;
            IDataReader dataReader = cmd1.ExecuteReader();
            if (dataReader == null)
              return false;
            using (IDbConnection dbConnection2 = newDatabase.GetDbConnection())
            {
              dbConnection2.Open();
              using (IDbTransaction dbTransaction = dbConnection2.BeginTransaction())
              {
                using (IDbCommand cmd2 = newDatabase.DbCommand(dbConnection2))
                {
                  cmd2.CommandText = "INSERT INTO NodeList (NodeID, MeterID, NodeTypeID, NodeName, NodeDescription, NodeSettings, ValidFrom) VALUES (@NodeID, @MeterID, @NodeTypeID, @NodeName, @NodeDescription, @NodeSettings, @ValidFrom);";
                  MeterDatabase.AddParameter(cmd2, "@NodeID", 0);
                  MeterDatabase.AddParameter(cmd2, "@MeterID", 0);
                  MeterDatabase.AddParameter(cmd2, "@NodeTypeID", 0);
                  MeterDatabase.AddParameter(cmd2, "@NodeName", "");
                  MeterDatabase.AddParameter(cmd2, "@NodeDescription", "");
                  MeterDatabase.AddParameter(cmd2, "@NodeSettings", "");
                  MeterDatabase.AddParameter(cmd2, "@ValidFrom", DateTime.Now);
                  long num1 = 0;
                  int num2 = 0;
                  int num3 = 0;
                  MeterDatabase.Progress e = new MeterDatabase.Progress()
                  {
                    Count = int64,
                    Successful = num2,
                    Failed = 0,
                    ProgressValue = 0
                  };
                  DateTime now = DateTime.Now;
                  while (dataReader.Read())
                  {
                    ++num1;
                    int num4 = Convert.ToInt32(dataReader["NodeTypeID"]);
                    string str3 = dataReader["NodeSettings"].ToString().Replace("VALUE_REQ_ID;1;", string.Empty);
                    MBusDeviceType mbusDeviceType = MBusDeviceType.HEAT_OUTLET;
                    string newValue1 = mbusDeviceType.ToString();
                    string str4 = str3.Replace("HEAT_WARM", newValue1);
                    mbusDeviceType = MBusDeviceType.HEAT_INLET;
                    string newValue2 = mbusDeviceType.ToString();
                    string str5 = str4.Replace("HEAT_COLD", newValue2);
                    mbusDeviceType = MBusDeviceType.COOL_INLET;
                    string newValue3 = mbusDeviceType.ToString();
                    string settings = str5.Replace("COOL_COLD", newValue3);
                    int int32_1 = Convert.ToInt32(dataReader["ReadingType"]);
                    if ((num4 != 2 || settings.IndexOf("AsynchronSeriell") >= 0 || settings.Length <= 10) && num4 == 2 && settings.Length <= 50)
                      num4 = 3;
                    if (int32_1 == 14)
                      num4 = 3;
                    if (int32_1 == 15)
                      num4 = 11;
                    if (num4 == 1)
                      settings = ParameterService.AddOrUpdateParameter(settings, "READOUT_TYPE", "1");
                    ((IDataParameter) cmd2.Parameters["@NodeID"]).Value = dataReader["NodeID"];
                    ((IDataParameter) cmd2.Parameters["@MeterID"]).Value = dataReader["MeterID"];
                    ((IDataParameter) cmd2.Parameters["@NodeTypeID"]).Value = (object) num4;
                    ((IDataParameter) cmd2.Parameters["@NodeName"]).Value = dataReader["NodeName"];
                    ((IDataParameter) cmd2.Parameters["@NodeDescription"]).Value = (object) dataReader["NodeDescription"].ToString().Replace("-", "");
                    ((IDataParameter) cmd2.Parameters["@NodeSettings"]).Value = (object) settings;
                    if (cmd2.ExecuteNonQuery() != 1)
                      ++num3;
                    else
                      ++num2;
                    if (this.OnProgress != null)
                    {
                      int int32_2 = Convert.ToInt32((double) num1 / (double) int64 * 100.0);
                      if (e.ProgressValue != int32_2 || (DateTime.Now - now).TotalSeconds > 1.0)
                      {
                        e.ProgressValue = int32_2;
                        e.Successful = num2;
                        e.Failed = num3;
                        this.OnProgress((object) this, e);
                        now = DateTime.Now;
                      }
                    }
                  }
                }
                dbTransaction.Commit();
                return true;
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd1);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public bool TransferTableMeterValues_1_to_2(DbBasis oldDatabase, DbBasis newDatabase)
    {
      if (oldDatabase == null)
        throw new ArgumentNullException("Input parameter 'oldDatabase' can not be null!");
      if (newDatabase == null)
        throw new ArgumentNullException("Input parameter 'newDatabase' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection1 = oldDatabase.GetDbConnection())
        {
          dbConnection1.Open();
          using (cmd = oldDatabase.DbCommand(dbConnection1))
          {
            string str1 = "SELECT COUNT(*) FROM MeterData;";
            string str2 = "SELECT * FROM MeterData;";
            cmd.CommandText = str1;
            object obj = cmd.ExecuteScalar();
            if (obj == null || obj == DBNull.Value)
              return false;
            long int64 = Convert.ToInt64(obj);
            if (int64 == 0L)
              return true;
            cmd.CommandText = str2;
            IDataReader dataReader1 = cmd.ExecuteReader();
            if (dataReader1 == null)
              return false;
            using (IDbConnection dbConnection2 = newDatabase.GetDbConnection())
            {
              dbConnection2.Open();
              using (IDbTransaction dbTransaction = dbConnection2.BeginTransaction())
              {
                using (IDbCommand dbCommand = newDatabase.DbCommand(dbConnection2))
                {
                  dbCommand.CommandText = "SELECT NodeID, MeterID FROM NodeList;";
                  SortedList<int, int> sortedList = new SortedList<int, int>();
                  using (IDataReader dataReader2 = dbCommand.ExecuteReader())
                  {
                    if (dataReader2 == null)
                      return false;
                    while (dataReader2.Read())
                    {
                      int int32_1 = Convert.ToInt32(dataReader2["MeterID"]);
                      int int32_2 = Convert.ToInt32(dataReader2["NodeID"]);
                      if (!sortedList.ContainsKey(int32_1))
                        sortedList.Add(int32_1, int32_2);
                    }
                  }
                  MeterDatabase.InitializeSQLQueryForMeterValues1_to_2(dbCommand);
                  long num1 = 0;
                  int num2 = 0;
                  int num3 = 0;
                  MeterDatabase.Progress e = new MeterDatabase.Progress()
                  {
                    Count = int64,
                    Successful = num2,
                    Failed = 0,
                    ProgressValue = 0
                  };
                  DateTime now = DateTime.Now;
                  while (dataReader1.Read())
                  {
                    ++num1;
                    int int32_3 = Convert.ToInt32(dataReader1["MeterId"]);
                    if (!sortedList.ContainsKey(int32_3))
                    {
                      ++num3;
                    }
                    else
                    {
                      int nodeID = sortedList[int32_3];
                      if (dataReader1["PValueID"] == DBNull.Value || dataReader1["PValueID"] == null)
                      {
                        ++num3;
                      }
                      else
                      {
                        int int32_4 = Convert.ToInt32(dataReader1["PValueID"]);
                        switch (int32_4)
                        {
                          case 1:
                            ++num2;
                            continue;
                          case 1000:
                            DateTime dateTime = Convert.ToDateTime(dataReader1["TimePoint"]);
                            if (this.UpdateNodeList(dbCommand, nodeID, int32_3, dateTime))
                              ++num2;
                            else
                              ++num3;
                            MeterDatabase.InitializeSQLQueryForMeterValues1_to_2(dbCommand);
                            continue;
                          case 1001:
                            ++num2;
                            continue;
                          default:
                            long? valueIdent = this.ConvertPValueToValueIdent(int32_4);
                            if (!valueIdent.HasValue)
                            {
                              MeterDatabase.logger.Error("Can not convert PValueID to ValueIdent! Value: " + int32_4.ToString());
                              ++num3;
                              continue;
                            }
                            long valueId = valueIdent.Value;
                            ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(valueId);
                            byte num4 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Calculation>(valueId) / 4096UL);
                            byte num5 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_CalculationStart>(valueId) / 65536UL);
                            byte num6 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Creation>(valueId) / 268435456UL);
                            byte num7 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(valueId) / 64UL);
                            byte num8 = (byte) ((ulong) physicalQuantity / 1UL);
                            byte num9 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_StorageInterval>(valueId) / 4194304UL);
                            byte num10 = (byte) ((ulong) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdentError>(valueId) / 2147483648UL);
                            ((IDataParameter) dbCommand.Parameters["@MeterId"]).Value = (object) int32_3;
                            ((IDataParameter) dbCommand.Parameters["@TimePoint"]).Value = dataReader1["TimePoint"];
                            ((IDataParameter) dbCommand.Parameters["@NodeID"]).Value = (object) nodeID;
                            ((IDataParameter) dbCommand.Parameters["@Calculation"]).Value = (object) num4;
                            ((IDataParameter) dbCommand.Parameters["@CalculationStart"]).Value = (object) num5;
                            ((IDataParameter) dbCommand.Parameters["@Creation"]).Value = (object) num6;
                            ((IDataParameter) dbCommand.Parameters["@MeterType"]).Value = (object) num7;
                            ((IDataParameter) dbCommand.Parameters["@PhysicalQuantity"]).Value = (object) num8;
                            ((IDataParameter) dbCommand.Parameters["@StorageInterval"]).Value = (object) num9;
                            ((IDataParameter) dbCommand.Parameters["@Creation"]).Value = (object) num6;
                            if (physicalQuantity == ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber)
                            {
                              ((IDataParameter) dbCommand.Parameters["@Value"]).Value = (object) 1;
                            }
                            else
                            {
                              double num11 = double.Parse(dataReader1["PValue"].ToString(), (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
                              ((IDataParameter) dbCommand.Parameters["@Value"]).Value = (object) num11;
                            }
                            try
                            {
                              if (dbCommand.ExecuteNonQuery() != 1)
                                ++num3;
                              else
                                ++num2;
                            }
                            catch (Exception ex)
                            {
                              MeterDatabase.LogFailedSQLQuery(dbCommand);
                              MeterDatabase.logger.Error(ex.Message);
                              ++num3;
                            }
                            if (this.OnProgress != null)
                            {
                              int int32_5 = Convert.ToInt32((double) num1 / (double) int64 * 100.0);
                              if (e.ProgressValue != int32_5 || (DateTime.Now - now).TotalSeconds > 1.0)
                              {
                                e.ProgressValue = int32_5;
                                e.Successful = num2;
                                e.Failed = num3;
                                this.OnProgress((object) this, e);
                                now = DateTime.Now;
                              }
                            }
                            continue;
                        }
                      }
                    }
                  }
                }
                dbTransaction.Commit();
                return true;
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    private static void InitializeSQLQueryForMeterValues1_to_2(IDbCommand cmdNew)
    {
      cmdNew.CommandText = "INSERT INTO MeterValues (MeterId, ValueIdentIndex, TimePoint, [Value], PhysicalQuantity, MeterType, Calculation, CalculationStart, StorageInterval, Creation, NodeID) VALUES (@MeterId, @ValueIdentIndex, @TimePoint, @Value, @PhysicalQuantity, @MeterType, @Calculation, @CalculationStart, @StorageInterval, @Creation, @NodeID);";
      cmdNew.Parameters.Clear();
      MeterDatabase.AddParameter(cmdNew, "@MeterId", 0);
      MeterDatabase.AddParameter(cmdNew, "@ValueIdentIndex", 0);
      MeterDatabase.AddParameter(cmdNew, "@TimePoint", DateTime.Now);
      MeterDatabase.AddParameter(cmdNew, "@Value", 0.0);
      MeterDatabase.AddParameter(cmdNew, "@PhysicalQuantity", 0);
      MeterDatabase.AddParameter(cmdNew, "@MeterType", 0);
      MeterDatabase.AddParameter(cmdNew, "@Calculation", 0);
      MeterDatabase.AddParameter(cmdNew, "@CalculationStart", 0);
      MeterDatabase.AddParameter(cmdNew, "@StorageInterval", 0);
      MeterDatabase.AddParameter(cmdNew, "@Creation", 0);
      MeterDatabase.AddParameter(cmdNew, "@NodeID", 0);
    }

    private long? ConvertPValueToValueIdent(int PValueID)
    {
      switch (PValueID)
      {
        case 1:
          return new long?();
        case 1000:
          return new long?();
        case 1001:
          return new long?();
        case 1002:
          return new long?(541204495L);
        case 1010:
          return new long?();
        case 1014:
          return new long?(272769743L);
        case 1100:
        case 1215:
        case 1216:
          return new long?(272699714L);
        case 1101:
        case 1212:
        case 1213:
          return new long?(272699713L);
        case 1102:
          return new long?(541204803L);
        case 1103:
          return new long?(272769356L);
        case 1104:
          return new long?(272769357L);
        case 1105:
          return new long?(272769351L);
        case 1106:
          return new long?(541204804L);
        case 1107:
          return new long?(272699723L);
        case 1131:
          return new long?(272699778L);
        case 1133:
          return new long?(272769412L);
        case 1136:
          return new long?();
        case 1208:
        case 1257:
          return new long?(272699457L);
        case 1209:
        case 1214:
          return new long?(272699585L);
        case 1210:
          return new long?(272699521L);
        case 1211:
          return new long?(272699649L);
        case 1217:
          return new long?(272699586L);
        case 1218:
          return new long?(541204547L);
        case 1219:
          return new long?(541204675L);
        case 1220:
          return new long?(541204611L);
        case 1221:
          return new long?(541204739L);
        case 1223:
          return new long?(541204803L);
        case 1224:
          return new long?(541204803L);
        case 1225:
          return new long?(541204675L);
        case 1226:
          return new long?(541217092L);
        case 1227:
          return new long?(541217092L);
        case 1228:
          return new long?(541217092L);
        case 1229:
          return new long?(541216964L);
        case 1230:
          return new long?(272699841L);
        case 1231:
          return new long?(272769347L);
        case 1232:
          return new long?(272769348L);
        case 1233:
          return new long?(272773443L);
        case 1234:
          return new long?(272773444L);
        case 1235:
          return new long?(281088386L);
        case 1236:
          return new long?(281088322L);
        case 1237:
          return new long?(281088322L);
        case 1238:
          return new long?(281088194L);
        case 1239:
          return new long?(281088449L);
        case 1240:
          return new long?(281088257L);
        case 1241:
          return new long?(281088129L);
        case 1242:
          return new long?(281088321L);
        case 1243:
          return new long?(281088321L);
        case 1244:
          return new long?(281088193L);
        case 1245:
          return new long?(281088065L);
        case 1246:
          return new long?(281088193L);
        case 1247:
          return new long?(272699778L);
        case 1248:
          return new long?(272699714L);
        case 1249:
          return new long?(272699714L);
        case 1250:
          return new long?(272699586L);
        case 1251:
          return new long?(272699841L);
        case 1252:
          return new long?(272699649L);
        case 1253:
          return new long?(272699521L);
        case 1254:
          return new long?(272699713L);
        case 1255:
          return new long?(272699713L);
        case 1256:
          return new long?(272699585L);
        case 1258:
          return new long?(272699585L);
        case 1259:
          return new long?(281088321L);
        case 1260:
          return new long?(272699713L);
        case 1261:
          return new long?(281088322L);
        case 1262:
          return new long?(272699714L);
        case 1263:
          return new long?(272773444L);
        case 1264:
          return new long?(272773444L);
        case 1265:
          return new long?(272773444L);
        case 1266:
          return new long?(272699723L);
        case 1267:
          return new long?(272699723L);
        case 1268:
          return new long?(272699723L);
        case 1269:
          return new long?(272699723L);
        case 1270:
          return new long?(272699723L);
        case 1271:
          return new long?(281088331L);
        case 1272:
          return new long?(281088331L);
        case 1273:
          return new long?(281088331L);
        default:
          return new long?();
      }
    }

    public static SortedList<string, string> LoadOnlineTranslation(string language)
    {
      SortedList<string, string> sortedList = new SortedList<string, string>();
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        string lower = language.ToLower();
        bool flag = false;
        try
        {
          using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
          {
            newConnection.Open();
            while (true)
            {
              DbCommand command1 = newConnection.CreateCommand();
              command1.CommandText = "SELECT TextKey,LanguageText FROM OnlineTranslations WHERE LanguageCode = '" + lower + "' ORDER BY TextKey ASC";
              DbDataReader dbDataReader1 = command1.ExecuteReader();
              if (dbDataReader1 != null)
              {
                while (dbDataReader1.Read())
                {
                  string key = dbDataReader1["TextKey"].ToString();
                  string str = dbDataReader1["LanguageText"].ToString();
                  sortedList.Add(key, str);
                }
                dbDataReader1.Close();
                DbCommand command2 = newConnection.CreateCommand();
                command2.CommandText = "SELECT TextKey,LanguageText FROM OnlineTranslations WHERE LanguageCode = 'en' ORDER BY TextKey ASC";
                DbDataReader dbDataReader2 = command2.ExecuteReader();
                if (dbDataReader2 != null)
                {
                  while (dbDataReader2.Read())
                  {
                    string key = dbDataReader2["TextKey"].ToString();
                    string str = dbDataReader2["LanguageText"].ToString();
                    if (!sortedList.ContainsKey(key))
                      sortedList.Add(key, str);
                  }
                  dbDataReader2.Close();
                  if (sortedList.Count <= 0)
                  {
                    if (!flag)
                    {
                      DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM OnlineTranslations", newConnection, out DbCommandBuilder _);
                      DataTable dataTable = new DataTable();
                      dataAdapter.Fill(dataTable);
                      DbCommand command3 = newConnection.CreateCommand();
                      command3.CommandText = "SELECT * FROM OnlineTranslation";
                      DbDataReader dbDataReader3 = command3.ExecuteReader();
                      if (dbDataReader3 != null)
                      {
                        while (dbDataReader3.Read())
                        {
                          string str1 = dbDataReader3["TextKey"].ToString();
                          string str2 = dbDataReader3["TextEN"].ToString();
                          string str3 = dbDataReader3["TextDE"].ToString();
                          if (!string.IsNullOrEmpty(str3))
                          {
                            DataRow row = dataTable.NewRow();
                            row["TextKey"] = (object) str1;
                            row["LanguageCode"] = (object) "de";
                            row["LanguageText"] = (object) str3;
                            dataTable.Rows.Add(row);
                          }
                          if (!string.IsNullOrEmpty(str2))
                          {
                            DataRow row = dataTable.NewRow();
                            row["TextKey"] = (object) str1;
                            row["LanguageCode"] = (object) "en";
                            row["LanguageText"] = (object) str2;
                            dataTable.Rows.Add(row);
                          }
                        }
                        dbDataReader3.Close();
                        if (dataTable.Rows.Count > 0)
                          dataAdapter.Update(dataTable);
                        flag = true;
                      }
                      else
                        goto label_29;
                    }
                    else
                      goto label_29;
                  }
                  else
                    break;
                }
                else
                  goto label_29;
              }
              else
                goto label_29;
            }
            return sortedList;
          }
        }
        catch
        {
        }
label_29:
        DbBasis primaryDb = DbBasis.PrimaryDB;
        if (primaryDb == null)
          throw new ArgumentNullException("Input parameter 'db' can not be null!");
        MeterDatabase.logger.Debug(nameof (LoadOnlineTranslation));
        string name1 = "TextKey";
        string name2 = "TextEN";
        string name3 = "Text" + language.ToUpper();
        string str4 = name3;
        if (str4 != name2)
          str4 = name2 + "," + name3;
        using (IDbConnection dbConnection = primaryDb.GetDbConnection())
        {
          dbConnection.Open();
          cmd = primaryDb.DbCommand(dbConnection);
          cmd.CommandText = "SELECT " + name1 + ", " + str4 + " FROM OnlineTranslation ORDER BY TextKey ASC;";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return sortedList;
          while (dataReader.Read())
          {
            string key = dataReader[name1].ToString();
            string str5 = dataReader[name3].ToString();
            if (str5 == "")
            {
              str5 = dataReader[name2].ToString();
              if (str5 == "")
                str5 = key;
            }
            sortedList.Add(key, str5);
          }
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
      }
      return sortedList;
    }

    public static bool DeleteOnlineTranslation(string keyToDelete)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "DELETE FROM [OnlineTranslation] WHERE TextKey = @TextKey;";
          MeterDatabase.AddParameter(cmd, "@TextKey", keyToDelete);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static string GetOnlineTranslationText(
      string language,
      string GmmModule,
      string TextKey)
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      IDbCommand cmd = (IDbCommand) null;
      MeterDatabase.logger.Debug("LoadOnlineTranslation");
      string str1 = nameof (TextKey);
      string str2 = GmmModule + TextKey;
      string name = "Text" + language.ToUpper();
      string onlineTranslationText = "";
      try
      {
        if (primaryDb == null)
          throw new ArgumentNullException("Input parameter 'db' can not be null!");
        using (IDbConnection dbConnection = primaryDb.GetDbConnection())
        {
          dbConnection.Open();
          cmd = primaryDb.DbCommand(dbConnection);
          cmd.CommandText = "SELECT + " + str1 + "," + name + " FROM OnlineTranslation WHERE " + str1 + " = '" + str2 + "'";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader != null)
          {
            if (dataReader.Read())
              onlineTranslationText = dataReader[name].ToString();
          }
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str3 = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str3, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str3);
      }
      return onlineTranslationText;
    }

    public static bool AddOrChangeOnlineTranslation(
      string language,
      string key,
      string newLanguageText)
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      if (string.IsNullOrEmpty(key))
        return false;
      IDbCommand cmd = (IDbCommand) null;
      string str = "Text" + language.ToUpper();
      try
      {
        if (primaryDb == null)
          throw new ArgumentNullException("Input parameter 'db' can not be null!");
        using (IDbConnection dbConnection = primaryDb.GetDbConnection())
        {
          dbConnection.Open();
          cmd = primaryDb.DbCommand(dbConnection);
          cmd.CommandText = "SELECT TextKey FROM OnlineTranslation WHERE TextKey=@TextKey;";
          MeterDatabase.AddParameter(cmd, "@TextKey", key);
          object obj = cmd.ExecuteScalar();
          cmd.Parameters.Clear();
          if (obj != null && obj != DBNull.Value)
          {
            cmd.CommandText = "UPDATE OnlineTranslation SET " + str + "=@TextLanguage WHERE TextKey=@TextKey;";
            MeterDatabase.AddParameter(cmd, "@TextLanguage", newLanguageText);
            MeterDatabase.AddParameter(cmd, "@TextKey", key);
          }
          else
          {
            cmd.CommandText = "INSERT INTO OnlineTranslation (TextKey, " + str + ") VALUES (@TextKey, @TextLanguage)";
            MeterDatabase.AddParameter(cmd, "@TextKey", key);
            MeterDatabase.AddParameter(cmd, "@TextLanguage", newLanguageText);
          }
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        return false;
      }
    }

    private static string CreateFilterSQLStatement(List<long> filterValueIdent)
    {
      if (filterValueIdent == null || filterValueIdent.Count <= 0)
        return string.Empty;
      StringBuilder stringBuilder = new StringBuilder();
      foreach (long num in filterValueIdent)
      {
        if (stringBuilder.Length == 0)
          stringBuilder.Append("AND (");
        else
          stringBuilder.Append("OR ");
        List<long> valueIdents = new List<long>();
        valueIdents.Add(num);
        List<byte> values1 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(valueIdents);
        List<byte> values2 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(valueIdents);
        List<byte> values3 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Calculation>(valueIdents);
        List<byte> values4 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_CalculationStart>(valueIdents);
        List<byte> values5 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_StorageInterval>(valueIdents);
        List<byte> values6 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Creation>(valueIdents);
        List<byte> values7 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Index>(valueIdents);
        bool flag1 = values1.Count > 0 && !values1.Contains((byte) 0);
        bool flag2 = values2.Count > 0 && !values2.Contains((byte) 0);
        bool flag3 = values3.Count > 0 && !values3.Contains((byte) 0);
        bool flag4 = values4.Count > 0 && !values4.Contains((byte) 0);
        bool flag5 = values5.Count > 0 && !values5.Contains((byte) 0);
        bool flag6 = values6.Count > 0 && !values6.Contains((byte) 0);
        bool flag7 = values7.Count > 0 && !values7.Contains((byte) 0);
        if (flag1)
        {
          stringBuilder.Append(" (");
          stringBuilder.Append(MeterDatabase.CreateWhereStatementForValueIdent_V2("PhysicalQuantity", values1));
        }
        if (flag2)
        {
          if (stringBuilder.Length == 0 | flag1)
            stringBuilder.Append("AND ");
          stringBuilder.Append(MeterDatabase.CreateWhereStatementForValueIdent_V2("MeterType", values2));
        }
        if (flag3)
        {
          if (stringBuilder.Length == 0 | flag1 | flag2)
            stringBuilder.Append("AND ");
          stringBuilder.Append(MeterDatabase.CreateWhereStatementForValueIdent_V2("Calculation", values3));
        }
        if (flag4)
        {
          if (stringBuilder.Length == 0 | flag1 | flag2 | flag3)
            stringBuilder.Append("AND ");
          stringBuilder.Append(MeterDatabase.CreateWhereStatementForValueIdent_V2("CalculationStart", values4));
        }
        if (flag5)
        {
          if (stringBuilder.Length == 0 | flag1 | flag2 | flag3 | flag4)
            stringBuilder.Append("AND ");
          stringBuilder.Append(MeterDatabase.CreateWhereStatementForValueIdent_V2("StorageInterval", values5));
        }
        if (flag6)
        {
          if (stringBuilder.Length == 0 | flag1 | flag2 | flag3 | flag4 | flag5)
            stringBuilder.Append("AND ");
          stringBuilder.Append(MeterDatabase.CreateWhereStatementForValueIdent_V2("Creation", values6));
        }
        if (flag7)
        {
          if (stringBuilder.Length == 0 | flag1 | flag2 | flag3 | flag4 | flag5 | flag6)
            stringBuilder.Append("AND ");
          stringBuilder.Append(MeterDatabase.CreateWhereStatementForValueIdent_V2("ValueIdentIndex", values7));
        }
        stringBuilder.Append(") ");
      }
      stringBuilder.Append(")");
      return stringBuilder.ToString().Trim();
    }

    public static List<long> LoadAvailableValueIdentsOfNode(
      StructureTreeNode node,
      List<long> filter)
    {
      if (node == null)
        throw new ArgumentNullException("Input parameter 'node' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          StringBuilder stringBuilder = new StringBuilder();
          List<long> longList = new List<long>();
          int num = 0;
          string filterSqlStatement = MeterDatabase.CreateFilterSQLStatement(filter);
          foreach (StructureTreeNode structureTreeNode in StructureTreeNode.ForEach(node))
          {
            if (structureTreeNode.MeterID.HasValue && structureTreeNode.MeterID.Value != 0)
            {
              if (stringBuilder.Length == 0)
                stringBuilder.Append("MeterID=@MeterID").Append(num);
              else
                stringBuilder.Append(" OR MeterID=@MeterID").Append(num);
              MeterDatabase.AddParameter(cmd, "@MeterID" + num.ToString(), structureTreeNode.MeterID.Value);
              if (num >= 400)
              {
                cmd.CommandText = string.Format("SELECT DISTINCT ValueIdentIndex, PhysicalQuantity, MeterType, Calculation, CalculationStart, StorageInterval, Creation FROM MeterValues WHERE {0} {1};", (object) stringBuilder.ToString(), (object) filterSqlStatement);
                cmd.CommandTimeout = 3000;
                IDataReader dataReader = cmd.ExecuteReader();
                if (dataReader == null)
                  return (List<long>) null;
                while (dataReader.Read())
                {
                  byte calculation = Convert.ToByte(dataReader["Calculation"]);
                  byte calculationStart = Convert.ToByte(dataReader["CalculationStart"]);
                  byte creation = Convert.ToByte(dataReader["Creation"]);
                  byte meterType = Convert.ToByte(dataReader["MeterType"]);
                  byte physicalQuantity = Convert.ToByte(dataReader["PhysicalQuantity"]);
                  byte storageInterval = Convert.ToByte(dataReader["StorageInterval"]);
                  long valueIdent = ValueIdent.GetValueIdent(Convert.ToByte(dataReader["ValueIdentIndex"]), physicalQuantity, meterType, calculation, calculationStart, storageInterval, creation);
                  if (!longList.Contains(valueIdent))
                    longList.Add(valueIdent);
                }
                dataReader.Close();
                cmd.Parameters.Clear();
                stringBuilder.Length = 0;
                num = 0;
              }
              else
                ++num;
            }
          }
          cmd.CommandText = string.Format("SELECT DISTINCT ValueIdentIndex, PhysicalQuantity, MeterType, Calculation, CalculationStart, StorageInterval, Creation FROM MeterValues WHERE {0} {1};", (object) stringBuilder.ToString(), (object) filterSqlStatement);
          MeterDatabase.logger.Trace(cmd.CommandText);
          cmd.CommandTimeout = 3000;
          IDataReader dataReader1 = cmd.ExecuteReader();
          if (dataReader1 == null)
            return (List<long>) null;
          while (dataReader1.Read())
          {
            byte calculation = Convert.ToByte(dataReader1["Calculation"]);
            byte calculationStart = Convert.ToByte(dataReader1["CalculationStart"]);
            byte creation = Convert.ToByte(dataReader1["Creation"]);
            byte meterType = Convert.ToByte(dataReader1["MeterType"]);
            byte physicalQuantity = Convert.ToByte(dataReader1["PhysicalQuantity"]);
            byte storageInterval = Convert.ToByte(dataReader1["StorageInterval"]);
            long valueIdent = ValueIdent.GetValueIdent(Convert.ToByte(dataReader1["ValueIdentIndex"]), physicalQuantity, meterType, calculation, calculationStart, storageInterval, creation);
            if (!longList.Contains(valueIdent))
              longList.Add(valueIdent);
          }
          return longList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<long>) null;
      }
    }

    public static List<MeterValueRow> LoadConsumptionOfMeterPerMonth(
      StructureTreeNode node,
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity,
      DateTime start,
      DateTime end)
    {
      if (!node.MeterID.HasValue)
        throw new ArgumentNullException("Input parameter 'node.MeterID' can not be null!");
      byte num1 = (byte) ((ulong) physicalQuantity / 1UL);
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT TimePoint, [Value], MeterType FROM MeterValues WHERE TimePoint BETWEEN @start AND @end AND MeterId=@MeterId AND PhysicalQuantity=@PhysicalQuantity AND Calculation=@Calculation AND CalculationStart=@CalculationStart AND ValueIdentIndex=@ValueIdentIndex ORDER BY TimePoint ASC;";
          MeterDatabase.AddParameter(cmd, "@start", start);
          MeterDatabase.AddParameter(cmd, "@end", end);
          MeterDatabase.AddParameter(cmd, "@MeterId", node.MeterID.Value);
          MeterDatabase.AddParameter(cmd, "@PhysicalQuantity", (int) num1);
          MeterDatabase.AddParameter(cmd, "@Calculation", 1);
          MeterDatabase.AddParameter(cmd, "@CalculationStart", 1);
          MeterDatabase.AddParameter(cmd, "@ValueIdentIndex", 0);
          cmd.CommandTimeout = 100;
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<MeterValueRow>) null;
          Dictionary<DateTime, double> dictionary = new Dictionary<DateTime, double>();
          DateTime dateTime1 = DateTime.MinValue;
          double num2 = 0.0;
          bool flag1 = true;
          byte? nullable = new byte?();
          while (dataReader.Read())
          {
            DateTime dateTime2 = Convert.ToDateTime(dataReader["TimePoint"]);
            double num3 = Convert.ToDouble(dataReader["Value"]);
            if (!nullable.HasValue)
              nullable = new byte?(Convert.ToByte(dataReader["MeterType"]));
            if (flag1)
            {
              dateTime1 = dateTime2;
              num2 = num3;
              flag1 = false;
            }
            else if (dateTime2.Year != dateTime1.Year || dateTime2.Month != dateTime1.Month || dateTime2.Day != dateTime1.Day)
            {
              if (dateTime2.Year <= dateTime1.Year && dateTime2.Month <= dateTime1.Month && dateTime2.Day <= dateTime1.Day)
                throw new Exception("Internal error! Not defined state detected!");
              dictionary.Add(new DateTime(dateTime1.Year, dateTime1.Month, dateTime1.Day), num2);
              dateTime1 = dateTime2;
              num2 = num3;
            }
          }
          List<MeterValueRow> meterValueRowList = new List<MeterValueRow>();
          if (dictionary.Count > 0)
          {
            dictionary.Add(new DateTime(dateTime1.Year, dateTime1.Month, dateTime1.Day), num2);
            List<MeterDatabase.DayValue> dayValueList = new List<MeterDatabase.DayValue>();
            DateTime dateTime3 = DateTime.MinValue;
            foreach (KeyValuePair<DateTime, double> keyValuePair in dictionary)
            {
              if (dayValueList.Count == 0)
              {
                dateTime3 = keyValuePair.Key;
                dayValueList.Add(new MeterDatabase.DayValue(keyValuePair.Key, keyValuePair.Value, false));
              }
              else
              {
                DateTime dateTime4 = dateTime3.AddDays(1.0);
                DateTime key1 = keyValuePair.Key;
                if (key1.Year > dateTime4.Year || key1.Month > dateTime4.Month || key1.Day > dateTime4.Day)
                {
                  double num4 = dictionary[dateTime3];
                  double num5 = keyValuePair.Value;
                  DateTime key2 = keyValuePair.Key;
                  double num6 = num5 - num4;
                  TimeSpan timeSpan = key2 - dateTime3;
                  double num7 = num6 / timeSpan.TotalDays;
                  for (int index = 0; (double) index < timeSpan.TotalDays - 1.0; ++index)
                  {
                    dateTime3 = dateTime3.AddDays(1.0);
                    num4 += num7;
                    dayValueList.Add(new MeterDatabase.DayValue(dateTime3, num4, true));
                  }
                  dayValueList.Add(new MeterDatabase.DayValue(keyValuePair.Key, keyValuePair.Value, false));
                  dateTime3 = dateTime3.AddDays(1.0);
                }
                else
                {
                  dayValueList.Add(new MeterDatabase.DayValue(keyValuePair.Key, keyValuePair.Value, false));
                  dateTime3 = dateTime3.AddDays(1.0);
                }
              }
            }
            MeterDatabase.DayValue dayValue1 = dayValueList[0];
            MeterDatabase.DayValue dayValue2 = dayValue1;
            for (int index = 0; index < dayValueList.Count; ++index)
            {
              MeterDatabase.DayValue dayValue3 = dayValueList[index];
              if (dayValue3.Timepoint.Year > dayValue1.Timepoint.Year || dayValue3.Timepoint.Month > dayValue1.Timepoint.Month || dayValueList.Count - 1 == index)
              {
                double num8 = Math.Round(dayValue3.Value - dayValue1.Value, 3);
                bool flag2 = dayValue1.IsEstimated || dayValue3.IsEstimated;
                meterValueRowList.Add(new MeterValueRow()
                {
                  Calculation = (byte) 6,
                  CalculationStart = (byte) 6,
                  Creation = flag2 ? (byte) 3 : (byte) 2,
                  StorageInterval = (byte) 5,
                  MeterId = node.MeterID.Value,
                  MeterType = nullable.Value,
                  NodeName = node.Name,
                  PhysicalQuantity = num1,
                  SerialNr = node.SerialNumber,
                  TimePoint = dayValue2.Timepoint,
                  Value = num8
                });
                dayValue1 = dayValue3;
              }
              else
                dayValue2 = dayValue3;
            }
          }
          return meterValueRowList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<MeterValueRow>) null;
      }
    }

    public static List<MeterValueRow> LoadConsumptionOfMeterPerDay(
      StructureTreeNode node,
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity,
      DateTime start,
      DateTime end)
    {
      if (!node.MeterID.HasValue)
        throw new ArgumentNullException("Input parameter 'node.MeterID' can not be null!");
      byte num1 = (byte) ((ulong) physicalQuantity / 1UL);
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT TimePoint, [Value], MeterType FROM MeterValues WHERE TimePoint BETWEEN @start AND @end AND MeterId=@MeterId AND PhysicalQuantity=@PhysicalQuantity AND Calculation=@Calculation AND CalculationStart=@CalculationStart AND ValueIdentIndex=@ValueIdentIndex ORDER BY TimePoint ASC;";
          MeterDatabase.AddParameter(cmd, "@start", start);
          MeterDatabase.AddParameter(cmd, "@end", end);
          MeterDatabase.AddParameter(cmd, "@MeterId", node.MeterID.Value);
          MeterDatabase.AddParameter(cmd, "@PhysicalQuantity", (int) num1);
          MeterDatabase.AddParameter(cmd, "@Calculation", 1);
          MeterDatabase.AddParameter(cmd, "@CalculationStart", 1);
          MeterDatabase.AddParameter(cmd, "@ValueIdentIndex", 0);
          cmd.CommandTimeout = 100;
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<MeterValueRow>) null;
          Dictionary<DateTime, double> dictionary = new Dictionary<DateTime, double>();
          DateTime dateTime1 = DateTime.MinValue;
          double num2 = 0.0;
          bool flag1 = true;
          byte? nullable = new byte?();
          while (dataReader.Read())
          {
            DateTime dateTime2 = Convert.ToDateTime(dataReader["TimePoint"]);
            double num3 = Convert.ToDouble(dataReader["Value"]);
            if (!nullable.HasValue)
              nullable = new byte?(Convert.ToByte(dataReader["MeterType"]));
            if (flag1)
            {
              dateTime1 = dateTime2;
              num2 = num3;
              flag1 = false;
            }
            else if (dateTime2.Year != dateTime1.Year || dateTime2.Month != dateTime1.Month || dateTime2.Day != dateTime1.Day)
            {
              if (dateTime2.Year <= dateTime1.Year && dateTime2.Month <= dateTime1.Month && dateTime2.Day <= dateTime1.Day)
                throw new Exception("Internal error! Not defined state detected!");
              dictionary.Add(new DateTime(dateTime1.Year, dateTime1.Month, dateTime1.Day), num2);
              dateTime1 = dateTime2;
              num2 = num3;
            }
          }
          List<MeterValueRow> meterValueRowList = new List<MeterValueRow>();
          if (dictionary.Count > 0)
          {
            dictionary.Add(new DateTime(dateTime1.Year, dateTime1.Month, dateTime1.Day), num2);
            List<MeterDatabase.DayValue> dayValueList = new List<MeterDatabase.DayValue>();
            DateTime dateTime3 = DateTime.MinValue;
            foreach (KeyValuePair<DateTime, double> keyValuePair in dictionary)
            {
              if (dayValueList.Count == 0)
              {
                dateTime3 = keyValuePair.Key;
                dayValueList.Add(new MeterDatabase.DayValue(keyValuePair.Key, keyValuePair.Value, false));
              }
              else
              {
                DateTime dateTime4 = dateTime3.AddDays(1.0);
                DateTime key1 = keyValuePair.Key;
                if (key1.Year > dateTime4.Year || key1.Month > dateTime4.Month || key1.Day > dateTime4.Day)
                {
                  double num4 = dictionary[dateTime3];
                  double num5 = keyValuePair.Value;
                  DateTime key2 = keyValuePair.Key;
                  double num6 = num5 - num4;
                  TimeSpan timeSpan = key2 - dateTime3;
                  double num7 = num6 / timeSpan.TotalDays;
                  for (int index = 0; (double) index < timeSpan.TotalDays - 1.0; ++index)
                  {
                    dateTime3 = dateTime3.AddDays(1.0);
                    num4 += num7;
                    dayValueList.Add(new MeterDatabase.DayValue(dateTime3, num4, true));
                  }
                  dayValueList.Add(new MeterDatabase.DayValue(keyValuePair.Key, keyValuePair.Value, false));
                  dateTime3 = dateTime3.AddDays(1.0);
                }
                else
                {
                  dayValueList.Add(new MeterDatabase.DayValue(keyValuePair.Key, keyValuePair.Value, false));
                  dateTime3 = dateTime3.AddDays(1.0);
                }
              }
            }
            MeterDatabase.DayValue dayValue1 = dayValueList[0];
            for (int index = 1; index < dayValueList.Count; ++index)
            {
              MeterDatabase.DayValue dayValue2 = dayValueList[index];
              double num8 = Math.Round(dayValue2.Value - dayValue1.Value, 3);
              bool flag2 = dayValue1.IsEstimated || dayValue2.IsEstimated;
              meterValueRowList.Add(new MeterValueRow()
              {
                Calculation = (byte) 6,
                CalculationStart = (byte) 9,
                Creation = flag2 ? (byte) 3 : (byte) 2,
                StorageInterval = (byte) 8,
                MeterId = node.MeterID.Value,
                MeterType = nullable.Value,
                NodeName = node.Name,
                PhysicalQuantity = num1,
                SerialNr = node.SerialNumber,
                TimePoint = dayValue1.Timepoint,
                Value = num8
              });
              dayValue1 = dayValue2;
            }
          }
          return meterValueRowList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<MeterValueRow>) null;
      }
    }

    public static bool AddTranslationRule(TranslationRule newRule)
    {
      if (newRule == null)
        return false;
      newRule.Medium = TranslationRule.CorrectMedium(newRule.Medium);
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "INSERT INTO TranslationRules (Manufacturer, Medium, VersionMin, VersionMax, MBusZDF, ValueIdent, RuleOrder, Multiplier, SpecialTranslation, SubDeviceAttributeIdentifier, SubDeviceIndex, StorageTimeParam, StorageTimeTranslation) VALUES (@Manufacturer, @Medium, @VersionMin, @VersionMax, @MBusZDF, @ValueIdent, @RuleOrder, @Multiplier, @SpecialTranslation, @SubDeviceAttributeIdentifier, @SubDeviceIndex, @StorageTimeParam, @StorageTimeTranslation);";
          MeterDatabase.AddParameter(cmd, "@Manufacturer", newRule.Manufacturer);
          MeterDatabase.AddParameter(cmd, "@Medium", newRule.Medium);
          MeterDatabase.AddParameter(cmd, "@VersionMin", newRule.VersionMin);
          MeterDatabase.AddParameter(cmd, "@VersionMax", newRule.VersionMax);
          MeterDatabase.AddParameter(cmd, "@MBusZDF", newRule.MBusZDF);
          MeterDatabase.AddParameter(cmd, "@ValueIdent", newRule.ValueIdent.ToString());
          MeterDatabase.AddParameter(cmd, "@RuleOrder", newRule.RuleOrder);
          MeterDatabase.AddParameter(cmd, "@Multiplier", newRule.Multiplier);
          MeterDatabase.AddParameter(cmd, "@SpecialTranslation", Convert.ToInt32((object) newRule.SpecialTranslation));
          MeterDatabase.AddParameter(cmd, "@SubDeviceAttributeIdentifier", newRule.SubDeviceAttributeIdentifier);
          MeterDatabase.AddParameter(cmd, "@SubDeviceIndex", newRule.SubDeviceIndex);
          MeterDatabase.AddParameter(cmd, "@StorageTimeParam", newRule.StorageTimeParam);
          MeterDatabase.AddParameter(cmd, "@StorageTimeTranslation", (int) newRule.StorageTimeTranslation);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static List<TranslationRule> LoadTranslationRules()
    {
      if (DbBasis.PrimaryDB == null)
        return (List<TranslationRule>) null;
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM TranslationRules ORDER BY Manufacturer;";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<TranslationRule>) null;
          List<TranslationRule> translationRuleList = new List<TranslationRule>();
          while (dataReader.Read())
          {
            double num1 = 1.0;
            if (dataReader["Multiplier"] != DBNull.Value)
              num1 = Convert.ToDouble(dataReader["Multiplier"]);
            SpecialTranslation specialTranslation = SpecialTranslation.None;
            if (dataReader["SpecialTranslation"] != DBNull.Value)
            {
              int int32 = Convert.ToInt32(dataReader["SpecialTranslation"]);
              if (Enum.IsDefined(typeof (SpecialTranslation), (object) int32))
                specialTranslation = (SpecialTranslation) Enum.Parse(typeof (SpecialTranslation), int32.ToString(), true);
            }
            string empty1 = string.Empty;
            if (dataReader["SubDeviceAttributeIdentifier"] != DBNull.Value)
              empty1 = dataReader["SubDeviceAttributeIdentifier"].ToString();
            int num2 = 0;
            if (dataReader["SubDeviceIndex"] != DBNull.Value)
              num2 = Convert.ToInt32(dataReader["SubDeviceIndex"]);
            string empty2 = string.Empty;
            if (dataReader["StorageTimeParam"] != DBNull.Value)
              empty2 = dataReader["StorageTimeParam"].ToString();
            SpecialStorageTimeTranslation storageTimeTranslation = SpecialStorageTimeTranslation.None;
            if (dataReader["StorageTimeTranslation"] != DBNull.Value)
              storageTimeTranslation = (SpecialStorageTimeTranslation) Enum.Parse(typeof (SpecialStorageTimeTranslation), dataReader["StorageTimeTranslation"].ToString(), true);
            translationRuleList.Add(new TranslationRule()
            {
              Manufacturer = dataReader["Manufacturer"].ToString(),
              Medium = dataReader["Medium"].ToString(),
              VersionMin = Convert.ToInt32(dataReader["VersionMin"]),
              VersionMax = Convert.ToInt32(dataReader["VersionMax"]),
              MBusZDF = dataReader["MBusZDF"].ToString(),
              ValueIdent = Convert.ToInt64(dataReader["ValueIdent"]),
              RuleOrder = Convert.ToInt32(dataReader["RuleOrder"]),
              Multiplier = num1,
              SpecialTranslation = specialTranslation,
              SubDeviceAttributeIdentifier = empty1,
              SubDeviceIndex = num2,
              StorageTimeParam = empty2,
              StorageTimeTranslation = storageTimeTranslation
            });
          }
          return translationRuleList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<TranslationRule>) null;
      }
    }

    public static bool UpdateTranslationRule(TranslationRule oldRule, TranslationRule newRule)
    {
      if (oldRule == null)
        throw new ArgumentNullException("Input parameter 'oldRule' can not be null!");
      if (newRule == null)
        throw new ArgumentNullException("Input parameter 'newRule' can not be null!");
      IDbCommand cmd1 = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd1 = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd1.CommandText = "UPDATE TranslationRules SET Manufacturer=@Manufacturer, Medium=@Medium, VersionMin=@VersionMin, VersionMax=@VersionMax, MBusZDF=@MBusZDF, ValueIdent=@ValueIdent, RuleOrder=@RuleOrder, Multiplier=@Multiplier, SpecialTranslation=@SpecialTranslation, SubDeviceAttributeIdentifier=@SubDeviceAttributeIdentifier, SubDeviceIndex=@SubDeviceIndex, StorageTimeParam=@StorageTimeParam, StorageTimeTranslation=@StorageTimeTranslation WHERE Manufacturer=@Manufacturer1 AND Medium=@Medium1 AND VersionMin=@VersionMin1 AND VersionMax=@VersionMax1 AND MBusZDF=@MBusZDF1 AND ValueIdent=@ValueIdent1 AND RuleOrder=@RuleOrder1;";
          MeterDatabase.AddParameter(cmd1, "@Manufacturer", newRule.Manufacturer);
          MeterDatabase.AddParameter(cmd1, "@Medium", newRule.Medium);
          MeterDatabase.AddParameter(cmd1, "@VersionMin", newRule.VersionMin);
          MeterDatabase.AddParameter(cmd1, "@VersionMax", newRule.VersionMax);
          MeterDatabase.AddParameter(cmd1, "@MBusZDF", newRule.MBusZDF);
          IDbCommand cmd2 = cmd1;
          long valueIdent = newRule.ValueIdent;
          string str1 = valueIdent.ToString();
          MeterDatabase.AddParameter(cmd2, "@ValueIdent", str1);
          MeterDatabase.AddParameter(cmd1, "@RuleOrder", newRule.RuleOrder);
          MeterDatabase.AddParameter(cmd1, "@Multiplier", newRule.Multiplier);
          MeterDatabase.AddParameter(cmd1, "@SpecialTranslation", Convert.ToInt32((object) newRule.SpecialTranslation));
          MeterDatabase.AddParameter(cmd1, "@SubDeviceAttributeIdentifier", newRule.SubDeviceAttributeIdentifier);
          MeterDatabase.AddParameter(cmd1, "@SubDeviceIndex", newRule.SubDeviceIndex);
          MeterDatabase.AddParameter(cmd1, "@StorageTimeParam", newRule.StorageTimeParam);
          MeterDatabase.AddParameter(cmd1, "@StorageTimeTranslation", (int) newRule.StorageTimeTranslation);
          MeterDatabase.AddParameter(cmd1, "@Manufacturer1", oldRule.Manufacturer);
          MeterDatabase.AddParameter(cmd1, "@Medium1", oldRule.Medium);
          MeterDatabase.AddParameter(cmd1, "@VersionMin1", oldRule.VersionMin);
          MeterDatabase.AddParameter(cmd1, "@VersionMax1", oldRule.VersionMax);
          MeterDatabase.AddParameter(cmd1, "@MBusZDF1", oldRule.MBusZDF);
          IDbCommand cmd3 = cmd1;
          valueIdent = oldRule.ValueIdent;
          string str2 = valueIdent.ToString();
          MeterDatabase.AddParameter(cmd3, "@ValueIdent1", str2);
          MeterDatabase.AddParameter(cmd1, "@RuleOrder1", oldRule.RuleOrder);
          return cmd1.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd1);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static bool DeleteTranslationRule(TranslationRule oldRule)
    {
      if (oldRule == null)
        throw new ArgumentNullException("Input parameter 'oldRule' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "DELETE FROM TranslationRules WHERE Manufacturer=@Manufacturer AND Medium=@Medium AND VersionMin=@VersionMin AND VersionMax=@VersionMax AND MBusZDF=@MBusZDF AND ValueIdent=@ValueIdent AND RuleOrder=@RuleOrder;";
          MeterDatabase.AddParameter(cmd, "@Manufacturer", oldRule.Manufacturer);
          MeterDatabase.AddParameter(cmd, "@Medium", oldRule.Medium);
          MeterDatabase.AddParameter(cmd, "@VersionMin", oldRule.VersionMin);
          MeterDatabase.AddParameter(cmd, "@VersionMax", oldRule.VersionMax);
          MeterDatabase.AddParameter(cmd, "@MBusZDF", oldRule.MBusZDF);
          MeterDatabase.AddParameter(cmd, "@ValueIdent", oldRule.ValueIdent.ToString());
          MeterDatabase.AddParameter(cmd, "@RuleOrder", oldRule.RuleOrder);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static ReadoutType AddReadoutType(string readoutDeviceType)
    {
      return MeterDatabase.AddReadoutType(readoutDeviceType, 0, string.Empty);
    }

    public static ReadoutType AddReadoutType(
      string readoutDeviceType,
      int readoutSettingsID,
      string imageIdList)
    {
      if (string.IsNullOrEmpty(readoutDeviceType))
        throw new ArgumentNullException("Input parameter 'readoutDeviceType' can not be null or empty!");
      if (!string.IsNullOrEmpty(Ot.GetKey("ReadoutDeviceTypeID", readoutDeviceType.ToString())))
        return (ReadoutType) null;
      IDbCommand cmd = (IDbCommand) null;
      int readoutDeviceTypeID = 1;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT MAX(ReadoutDeviceTypeID) FROM ReadoutType;";
          object obj = cmd.ExecuteScalar();
          if (obj != null && obj != DBNull.Value)
            readoutDeviceTypeID = Convert.ToInt32(obj) + 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (ReadoutType) null;
      }
      return MeterDatabase.AddReadoutType(readoutDeviceTypeID, readoutSettingsID, imageIdList);
    }

    public static ReadoutType AddReadoutType(
      int readoutDeviceTypeID,
      int readoutSettingsID,
      string imageIdList)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "INSERT INTO ReadoutType (ReadoutDeviceTypeID, ReadoutSettingsID, ImageIdList) VALUES (@ReadoutDeviceTypeID, @ReadoutSettingsID, @ImageIdList);";
          MeterDatabase.AddParameter(cmd, "@ReadoutDeviceTypeID", readoutDeviceTypeID);
          MeterDatabase.AddParameter(cmd, "@ReadoutSettingsID", readoutSettingsID);
          MeterDatabase.AddParameter(cmd, "@ImageIdList", string.IsNullOrEmpty(imageIdList) ? "" : imageIdList);
          if (cmd.ExecuteNonQuery() != 1)
            return (ReadoutType) null;
          return new ReadoutType()
          {
            ReadoutDeviceTypeID = readoutDeviceTypeID,
            ReadoutSettingsID = readoutSettingsID,
            ImageIdList = imageIdList
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (ReadoutType) null;
      }
    }

    public static bool DeleteReadoutTypeBySettingsID(int readoutSettingsID)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "DELETE FROM ReadoutType WHERE ReadoutSettingsID = @ReadoutSettingsID;";
          MeterDatabase.AddParameter(cmd, "@ReadoutSettingsID", readoutSettingsID);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static bool DeleteReadoutType(int readoutDeviceTypeID)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "DELETE FROM ReadoutType WHERE ReadoutDeviceTypeID = @ReadoutDeviceTypeID;";
          MeterDatabase.AddParameter(cmd, "@ReadoutDeviceTypeID", readoutDeviceTypeID);
          Ot.Delete("ReadoutDeviceTypeID", readoutDeviceTypeID.ToString());
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static bool DeleteReadoutType(ReadoutType item)
    {
      if (item == null)
        throw new ArgumentNullException("Input parameter 'item' can not be null!");
      return MeterDatabase.DeleteReadoutType(item.ReadoutDeviceTypeID, item.ReadoutSettingsID);
    }

    public static bool DeleteReadoutType(int readoutDeviceTypeID, int readoutSettingsID)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "DELETE FROM ReadoutType WHERE ReadoutDeviceTypeID=@ReadoutDeviceTypeID AND ReadoutSettingsID=@ReadoutSettingsID;";
          MeterDatabase.AddParameter(cmd, "@ReadoutDeviceTypeID", readoutDeviceTypeID);
          MeterDatabase.AddParameter(cmd, "@ReadoutSettingsID", readoutSettingsID);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static List<ReadoutType> LoadReadoutType()
    {
      return MeterDatabase.LoadReadoutType(DbBasis.PrimaryDB, new int?());
    }

    public static List<ReadoutType> LoadReadoutType(int? readoutDeviceTypeID)
    {
      return MeterDatabase.LoadReadoutType(DbBasis.PrimaryDB, readoutDeviceTypeID);
    }

    public static List<ReadoutType> LoadReadoutType(DbBasis db, int? readoutDeviceTypeID)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      List<ReadoutType> readoutTypeList = new List<ReadoutType>();
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          if (!readoutDeviceTypeID.HasValue)
          {
            cmd.CommandText = "SELECT * FROM ReadoutType;";
          }
          else
          {
            cmd.CommandText = "SELECT * FROM ReadoutType WHERE ReadoutDeviceTypeID=@ReadoutDeviceTypeID;";
            MeterDatabase.AddParameter(cmd, "@ReadoutDeviceTypeID", readoutDeviceTypeID.Value);
          }
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return readoutTypeList;
          while (dataReader.Read())
          {
            string empty = string.Empty;
            if (dataReader["ImageIdList"] != DBNull.Value)
              empty = Convert.ToString(dataReader["ImageIdList"]);
            readoutTypeList.Add(new ReadoutType()
            {
              ReadoutDeviceTypeID = Convert.ToInt32(dataReader["ReadoutDeviceTypeID"]),
              ReadoutSettingsID = Convert.ToInt32(dataReader["ReadoutSettingsID"]),
              ImageIdList = empty
            });
          }
          return readoutTypeList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return readoutTypeList;
      }
    }

    public static bool UpdateReadoutType(
      int readoutDeviceTypeID,
      int readoutSettingsID,
      string newImageIdList)
    {
      if (newImageIdList == null)
        throw new ArgumentNullException("Input parameter 'newImageIdList' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "UPDATE ReadoutType SET ImageIdList=@ImageIdList WHERE ReadoutDeviceTypeID=@ReadoutDeviceTypeID AND ReadoutSettingsID=@ReadoutSettingsID;";
          MeterDatabase.AddParameter(cmd, "@ImageIdList", newImageIdList);
          MeterDatabase.AddParameter(cmd, "@ReadoutDeviceTypeID", readoutDeviceTypeID);
          MeterDatabase.AddParameter(cmd, "@ReadoutSettingsID", readoutSettingsID);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static bool UpdateReadoutType(ReadoutType oldReadoutType, ReadoutType newReadoutType)
    {
      if (oldReadoutType == null)
        throw new ArgumentNullException("Input parameter 'oldReadoutType' can not be null!");
      if (newReadoutType == null)
        throw new ArgumentNullException("Input parameter 'newReadoutType' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "UPDATE ReadoutType SET ReadoutDeviceTypeID=@ReadoutDeviceTypeID, ReadoutSettingsID=@ReadoutSettingsID, ImageIdList=@ImageIdList WHERE ReadoutDeviceTypeID=@OldReadoutDeviceTypeID AND ReadoutSettingsID=@OldReadoutSettingsID AND ImageIdList=@OldImageIdList;";
          MeterDatabase.AddParameter(cmd, "@ReadoutDeviceTypeID", newReadoutType.ReadoutDeviceTypeID);
          MeterDatabase.AddParameter(cmd, "@ReadoutSettingsID", newReadoutType.ReadoutSettingsID);
          MeterDatabase.AddParameter(cmd, "@ImageIdList", newReadoutType.ImageIdList);
          MeterDatabase.AddParameter(cmd, "@OldReadoutDeviceTypeID", oldReadoutType.ReadoutDeviceTypeID);
          MeterDatabase.AddParameter(cmd, "@OldReadoutSettingsID", oldReadoutType.ReadoutSettingsID);
          MeterDatabase.AddParameter(cmd, "@OldImageIdList", oldReadoutType.ImageIdList);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static bool UpdateReadoutType(ReadoutType readoutType, string newReadoutDeviceType)
    {
      return readoutType != null;
    }

    public static ReadoutGmmSettings AddReadoutSettings(string readoutSettings)
    {
      return MeterDatabase.AddReadoutSettings(DbBasis.PrimaryDB, readoutSettings);
    }

    public static ReadoutGmmSettings AddReadoutSettings(DbBasis db, string readoutSettings)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      if (string.IsNullOrEmpty(readoutSettings))
        throw new ArgumentNullException("Input parameter 'readoutSettings' can not be null or empty!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          int num = 1;
          cmd.CommandText = "SELECT MAX(ReadoutSettingsID) FROM ReadoutSettings;";
          object obj = cmd.ExecuteScalar();
          if (obj != null && obj != DBNull.Value)
            num = Convert.ToInt32(obj) + 1;
          cmd.CommandText = "INSERT INTO ReadoutSettings (ReadoutSettingsID, Settings) VALUES (@ReadoutSettingsID, @Settings);";
          MeterDatabase.AddParameter(cmd, "@ReadoutSettingsID", num);
          MeterDatabase.AddParameter(cmd, "@Settings", readoutSettings);
          if (cmd.ExecuteNonQuery() != 1)
            return (ReadoutGmmSettings) null;
          return new ReadoutGmmSettings()
          {
            ReadoutSettingsID = num,
            Settings = readoutSettings
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (ReadoutGmmSettings) null;
      }
    }

    public static bool DeleteReadoutSettings(int readoutSettingsID)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "DELETE FROM ReadoutSettings WHERE ReadoutSettingsID = @ReadoutSettingsID;";
          MeterDatabase.AddParameter(cmd, "@ReadoutSettingsID", readoutSettingsID);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static List<ReadoutGmmSettings> LoadReadoutSettings(int readoutDeviceTypeID)
    {
      return MeterDatabase.LoadReadoutSettings(DbBasis.PrimaryDB, readoutDeviceTypeID);
    }

    public static List<ReadoutGmmSettings> LoadReadoutSettings(DbBasis db, int readoutDeviceTypeID)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      List<ReadoutGmmSettings> readoutGmmSettingsList = new List<ReadoutGmmSettings>();
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT ReadoutSettingsID FROM ReadoutType WHERE ReadoutDeviceTypeID=@ReadoutDeviceTypeID;";
          MeterDatabase.AddParameter(cmd, "@ReadoutDeviceTypeID", readoutDeviceTypeID);
          StringBuilder stringBuilder = new StringBuilder();
          using (IDataReader dataReader = cmd.ExecuteReader())
          {
            if (dataReader == null)
              return readoutGmmSettingsList;
            cmd.Parameters.Clear();
            int num = 0;
            while (dataReader.Read())
            {
              if (Convert.ToInt32(dataReader["ReadoutSettingsID"]) != 0)
              {
                if (stringBuilder.Length > 0)
                  stringBuilder.Append(", ");
                stringBuilder.Append("@").Append(num);
                MeterDatabase.AddParameter(cmd, "@" + num.ToString(), Convert.ToInt32(dataReader["ReadoutSettingsID"]));
                ++num;
              }
            }
          }
          if (stringBuilder.Length == 0)
            return readoutGmmSettingsList;
          cmd.CommandText = "SELECT * FROM ReadoutSettings WHERE ReadoutSettingsID IN (" + stringBuilder.ToString() + ");";
          using (IDataReader dataReader = cmd.ExecuteReader())
          {
            if (dataReader == null)
              return readoutGmmSettingsList;
            while (dataReader.Read())
              readoutGmmSettingsList.Add(new ReadoutGmmSettings()
              {
                ReadoutSettingsID = Convert.ToInt32(dataReader["ReadoutSettingsID"]),
                Settings = Convert.ToString(dataReader["Settings"])
              });
          }
          return readoutGmmSettingsList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return readoutGmmSettingsList;
      }
    }

    public static List<ReadoutGmmSettings> LoadReadoutSettings()
    {
      return MeterDatabase.LoadReadoutSettings(DbBasis.PrimaryDB);
    }

    public static List<ReadoutGmmSettings> LoadReadoutSettings(DbBasis db)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      List<ReadoutGmmSettings> readoutGmmSettingsList = new List<ReadoutGmmSettings>();
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM ReadoutSettings;";
          using (IDataReader dataReader = cmd.ExecuteReader())
          {
            if (dataReader == null)
              return readoutGmmSettingsList;
            while (dataReader.Read())
              readoutGmmSettingsList.Add(new ReadoutGmmSettings()
              {
                ReadoutSettingsID = Convert.ToInt32(dataReader["ReadoutSettingsID"]),
                Settings = Convert.ToString(dataReader["Settings"])
              });
          }
          return readoutGmmSettingsList;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return readoutGmmSettingsList;
      }
    }

    public static ReadoutGmmSettings GetReadoutSettings(int readoutSettingsID)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM ReadoutSettings WHERE ReadoutSettingsID=@ReadoutSettingsID;";
          MeterDatabase.AddParameter(cmd, "@ReadoutSettingsID", readoutSettingsID);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null || !dataReader.Read())
            return (ReadoutGmmSettings) null;
          return new ReadoutGmmSettings()
          {
            ReadoutSettingsID = Convert.ToInt32(dataReader["ReadoutSettingsID"]),
            Settings = Convert.ToString(dataReader["Settings"])
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (ReadoutGmmSettings) null;
      }
    }

    public static bool UpdateReadoutSettings(int readoutSettingsID, string readoutSettings)
    {
      if (readoutSettings == null)
        throw new ArgumentNullException("Input parameter 'readoutSettings' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "UPDATE ReadoutSettings SET Settings=@Settings WHERE ReadoutSettingsID=@ReadoutSettingsID;";
          MeterDatabase.AddParameter(cmd, "@Settings", readoutSettings);
          MeterDatabase.AddParameter(cmd, "@ReadoutSettingsID", readoutSettingsID);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static FunctionPrecompiled AddFunctionPrecompiled(
      int functionNumber,
      short recordOrder,
      FunctionRecordType recordType,
      string name,
      int offset,
      byte[] codes)
    {
      return MeterDatabase.AddFunctionPrecompiled(DbBasis.PrimaryDB, functionNumber, recordOrder, recordType, name, offset, codes);
    }

    public static FunctionPrecompiled AddFunctionPrecompiled(
      DbBasis db,
      int functionNumber,
      short recordOrder,
      FunctionRecordType recordType,
      string name,
      int offset,
      byte[] codes)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "INSERT INTO ZRFunctionCompiled (FunctionNumber, RecordOrder, RecordType, [Name], [Offset], Codes) VALUES (@FunctionNumber, @RecordOrder, @RecordType, @Name, @Offset, @Codes);";
          MeterDatabase.AddParameter(cmd, "@FunctionNumber", functionNumber);
          MeterDatabase.AddParameter(cmd, "@RecordOrder", (int) recordOrder);
          MeterDatabase.AddParameter(cmd, "@RecordType", (int) Convert.ToInt16((object) recordType));
          MeterDatabase.AddParameter(cmd, "@Name", name);
          MeterDatabase.AddParameter(cmd, "@Offset", offset);
          MeterDatabase.AddParameter(cmd, "@Codes", codes);
          return cmd.ExecuteNonQuery() != 1 ? (FunctionPrecompiled) null : new FunctionPrecompiled(functionNumber, recordOrder, recordType, name, offset, codes);
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (FunctionPrecompiled) null;
      }
    }

    public static List<FunctionPrecompiled> LoadFunctionPrecompiled(int functionNumber)
    {
      return MeterDatabase.LoadFunctionPrecompiled(DbBasis.PrimaryDB, functionNumber);
    }

    public static List<FunctionPrecompiled> LoadFunctionPrecompiled(DbBasis db, int functionNumber)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      List<FunctionPrecompiled> functionPrecompiledList = new List<FunctionPrecompiled>();
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          return MeterDatabase.LoadFunctionPrecompiled(cmd, functionNumber);
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return functionPrecompiledList;
      }
    }

    public static List<FunctionPrecompiled> LoadFunctionPrecompiled(
      IDbCommand cmd,
      int functionNumber)
    {
      return MeterDatabase.LoadFunctionPrecompiled(cmd, new List<int>((IEnumerable<int>) new int[1]
      {
        functionNumber
      }));
    }

    public static List<FunctionPrecompiled> LoadFunctionPrecompiled(
      IDbCommand cmd,
      List<int> functionNumbers)
    {
      if (cmd == null)
        throw new ArgumentNullException("Input parameter 'cmd' can not be null!");
      List<FunctionPrecompiled> functionPrecompiledList = new List<FunctionPrecompiled>();
      cmd.Parameters.Clear();
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; index < functionNumbers.Count; ++index)
      {
        if (index == 0)
          stringBuilder.Append("FunctionNumber=").Append(functionNumbers[index].ToString());
        else
          stringBuilder.Append(" OR FunctionNumber=").Append(functionNumbers[index].ToString());
      }
      cmd.CommandText = "SELECT * FROM ZRFunctionCompiled WHERE " + stringBuilder.ToString() + " ORDER BY RecordOrder;";
      using (IDataReader dataReader = cmd.ExecuteReader())
      {
        if (dataReader == null)
          return functionPrecompiledList;
        while (dataReader.Read())
        {
          FunctionRecordType RecordType = FunctionRecordType.None;
          if (dataReader["RecordType"] != DBNull.Value)
            RecordType = (FunctionRecordType) Enum.ToObject(typeof (FunctionRecordType), Convert.ToInt16(dataReader["RecordType"]));
          byte[] Codes = (byte[]) null;
          if (dataReader["Codes"] != DBNull.Value)
            Codes = (byte[]) dataReader["Codes"];
          functionPrecompiledList.Add(new FunctionPrecompiled(Convert.ToInt32(dataReader["FunctionNumber"]), Convert.ToInt16(dataReader["RecordOrder"]), RecordType, Convert.ToString(dataReader["Name"]), Convert.ToInt32(dataReader["Offset"]), Codes));
        }
      }
      return functionPrecompiledList;
    }

    public static bool DeleteFunctionPrecompiled(int functionNumber, short recordOrder)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "DELETE FROM ZRFunctionCompiled WHERE FunctionNumber = @FunctionNumber AND RecordOrder = @RecordOrder;";
          MeterDatabase.AddParameter(cmd, "@FunctionNumber", functionNumber);
          MeterDatabase.AddParameter(cmd, "@RecordOrder", (int) recordOrder);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static bool UpdateFunctionPrecompiled(
      int functionNumber,
      short oldRecordOrder,
      short recordOrder,
      FunctionRecordType recordType,
      string name,
      int offset,
      byte[] codes)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "UPDATE ZRFunctionCompiled SET RecordOrder=@RecordOrder, RecordType=@RecordType, [Name]=@Name, [Offset]=@Offset, Codes=@Codes WHERE FunctionNumber=@FunctionNumber AND RecordOrder=@OldRecordOrder;";
          MeterDatabase.AddParameter(cmd, "@RecordOrder", (int) recordOrder);
          MeterDatabase.AddParameter(cmd, "@RecordType", (int) Convert.ToInt16((object) recordType));
          MeterDatabase.AddParameter(cmd, "@Name", name);
          MeterDatabase.AddParameter(cmd, "@Offset", offset);
          MeterDatabase.AddParameter(cmd, "@Codes", codes);
          MeterDatabase.AddParameter(cmd, "@FunctionNumber", functionNumber);
          MeterDatabase.AddParameter(cmd, "@OldRecordOrder", (int) oldRecordOrder);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static bool AddMeterData(int meterID, string hardwareTypeId, byte[] buffer)
    {
      return MeterDatabase.AddMeterData(DbBasis.PrimaryDB, meterID, hardwareTypeId, buffer);
    }

    public static bool AddMeterData(DbBasis db, int meterID, string hardwareTypeId, byte[] buffer)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      if (buffer == null)
        throw new ArgumentNullException("Input parameter 'buffer' can not be null!");
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "INSERT INTO MeterData (MeterID, TimePoint, PValueID, PValue, PValueBinary, SyncStatus) VALUES (@MeterID, @TimePoint, @PValueID, @PValue, @PValueBinary, @SyncStatus);";
          MeterDatabase.AddParameter(cmd, "@MeterID", meterID);
          MeterDatabase.AddParameter(cmd, "@TimePoint", DateTime.Now);
          MeterDatabase.AddParameter(cmd, "@PValueID", 1);
          MeterDatabase.AddParameter(cmd, "@PValue", hardwareTypeId);
          MeterDatabase.AddParameter(cmd, "@PValueBinary", buffer);
          MeterDatabase.AddParameter(cmd, "@SyncStatus", 0);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static MeterData GetMeterData(int meterId, DateTime timePoint)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT PValue, PValueBinary, SyncStatus FROM MeterData WHERE MeterID=@MeterID AND TimePoint=@TimePoint;";
          MeterDatabase.AddParameter(cmd, "@MeterID", meterId);
          MeterDatabase.AddParameter(cmd, "@TimePoint", timePoint);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null || !dataReader.Read())
            return (MeterData) null;
          return new MeterData()
          {
            MeterID = meterId,
            TimePoint = new DateTime?(timePoint),
            PValueID = 1,
            PValue = dataReader["PValue"] == DBNull.Value || dataReader["PValue"] == null ? string.Empty : dataReader["PValue"].ToString(),
            PValueBinary = dataReader["PValueBinary"] == DBNull.Value || dataReader["PValueBinary"] == null ? (byte[]) null : (byte[]) dataReader["PValueBinary"],
            SyncStatus = dataReader["SyncStatus"] == DBNull.Value || dataReader["SyncStatus"] == null ? (byte) 0 : Convert.ToByte(dataReader["SyncStatus"])
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (MeterData) null;
      }
    }

    public static MeterData GetMeterDataOfLastBackup(int meterId)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT TOP 1 PValue, PValueBinary, SyncStatus, TimePoint FROM MeterData WHERE MeterID=@MeterID ORDER BY TimePoint DESC;";
          MeterDatabase.AddParameter(cmd, "@MeterID", meterId);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null || !dataReader.Read())
            return (MeterData) null;
          return new MeterData()
          {
            MeterID = meterId,
            TimePoint = new DateTime?(Convert.ToDateTime(dataReader["TimePoint"])),
            PValueID = 1,
            PValue = dataReader["PValue"] == DBNull.Value || dataReader["PValue"] == null ? string.Empty : dataReader["PValue"].ToString(),
            PValueBinary = dataReader["PValueBinary"] == DBNull.Value || dataReader["PValueBinary"] == null ? (byte[]) null : (byte[]) dataReader["PValueBinary"],
            SyncStatus = dataReader["SyncStatus"] == DBNull.Value || dataReader["SyncStatus"] == null ? (byte) 0 : Convert.ToByte(dataReader["SyncStatus"])
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (MeterData) null;
      }
    }

    public static MeterTypeData GetMeterTypeData(string tableName, int meterTypeID)
    {
      if (string.IsNullOrEmpty(tableName))
        return (MeterTypeData) null;
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT EEPdata, TypeOverrideString FROM " + tableName + " WHERE MeterTypeID=@MeterTypeID;";
          MeterDatabase.AddParameter(cmd, "@MeterTypeID", meterTypeID);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null || !dataReader.Read())
            return (MeterTypeData) null;
          return new MeterTypeData()
          {
            MeterTypeID = meterTypeID,
            EEPdata = dataReader["EEPdata"] == DBNull.Value || dataReader["EEPdata"] == null ? (byte[]) null : (byte[]) dataReader["EEPdata"],
            TypeOverrideString = dataReader["TypeOverrideString"].ToString()
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (MeterTypeData) null;
      }
    }

    public static bool UpdateMeterTypeData(
      string tableName,
      int meterTypeID,
      byte[] EEPdata,
      string typeOverrideString)
    {
      if (string.IsNullOrEmpty(tableName))
        return false;
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "UPDATE " + tableName + " SET EEPdata=@EEPdata,TypeOverrideString=@TypeOverrideString WHERE MeterTypeID=@MeterTypeID;";
          MeterDatabase.AddParameter(cmd, "@EEPdata", EEPdata);
          MeterDatabase.AddParameter(cmd, "@TypeOverrideString", typeOverrideString);
          MeterDatabase.AddParameter(cmd, "@MeterTypeID", meterTypeID);
          return cmd.ExecuteNonQuery() == 1;
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    public static MeterTypeData AddMeterTypeData(
      IDbCommand cmd,
      string tableName,
      int meterTypeID,
      byte[] EEPdata,
      string typeOverrideString)
    {
      if (cmd == null)
        throw new ArgumentNullException("Input parameter 'cmd' can not be null!");
      if (string.IsNullOrEmpty(tableName))
        throw new ArgumentNullException("The 'tableName' can not be null!");
      cmd.CommandText = "INSERT INTO " + tableName + " (MeterTypeID, EEPdata, TypeOverrideString) VALUES (@MeterTypeID, @EEPdata, @TypeOverrideString);";
      cmd.Parameters.Clear();
      MeterDatabase.AddParameter(cmd, "@MeterTypeID", meterTypeID);
      MeterDatabase.AddParameter(cmd, "@EEPdata", EEPdata);
      MeterDatabase.AddParameter(cmd, "@TypeOverrideString", typeOverrideString);
      if (cmd.ExecuteNonQuery() != 1)
        return (MeterTypeData) null;
      return new MeterTypeData()
      {
        MeterTypeID = meterTypeID,
        EEPdata = EEPdata,
        TypeOverrideString = typeOverrideString
      };
    }

    public static ProgFiles GetFirmware(int mapID)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM ProgFiles WHERE MapID=@MapID;";
          MeterDatabase.AddParameter(cmd, "@MapID", mapID);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null || !dataReader.Read())
            return (ProgFiles) null;
          return new ProgFiles()
          {
            MapID = mapID,
            ProgFileName = dataReader["ProgFileName"] == DBNull.Value || dataReader["ProgFileName"] == null ? string.Empty : dataReader["ProgFileName"].ToString(),
            Options = dataReader["Options"] == DBNull.Value || dataReader["Options"] == null ? string.Empty : dataReader["Options"].ToString(),
            HexText = dataReader["HexText"] == DBNull.Value || dataReader["HexText"] == null ? string.Empty : dataReader["HexText"].ToString(),
            SourceInfo = dataReader["SourceInfo"] == DBNull.Value || dataReader["SourceInfo"] == null ? string.Empty : dataReader["SourceInfo"].ToString()
          };
        }
      }
      catch (Exception ex)
      {
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (ProgFiles) null;
      }
    }

    public static HardwareType GetHardwareType(int hardwareTypeID)
    {
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT MapID, FirmwareVersion, HardwareName, HardwareVersion, HardwareResource, Description FROM HardwareType WHERE HardwareTypeID=@HardwareTypeID;";
          MeterDatabase.AddParameter(cmd, "@HardwareTypeID", hardwareTypeID);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null || !dataReader.Read())
            return (HardwareType) null;
          HardwareType hardwareType = new HardwareType();
          hardwareType.HardwareTypeID = hardwareTypeID;
          hardwareType.MapID = Convert.ToInt32(dataReader["MapID"]);
          hardwareType.FirmwareVersion = Convert.ToUInt32(dataReader["FirmwareVersion"]);
          hardwareType.HardwareName = dataReader["HardwareName"].ToString();
          hardwareType.HardwareVersion = Convert.ToInt32(dataReader["HardwareVersion"]);
          hardwareType.HardwareResource = dataReader["HardwareResource"].ToString();
          hardwareType.Description = dataReader["Description"].ToString();
          if (dataReader.Read())
            throw new Exception("INTERNAL ERROR: The function become more as one result from database. SQL: " + cmd.CommandText);
          return hardwareType;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        MeterDatabase.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (HardwareType) null;
      }
    }

    public sealed class Progress : EventArgs
    {
      public int Successful;
      public int Failed;
      public long Count;
      public int ProgressValue;
    }

    private sealed class DayValue
    {
      public DateTime Timepoint;
      public double Value;
      public bool IsEstimated;

      public DayValue(DateTime timepoint, double value, bool isEstimated)
      {
        this.Timepoint = timepoint;
        this.Value = value;
        this.IsEstimated = isEstimated;
      }

      public override string ToString()
      {
        return string.Format("{0} {1} {2}", (object) this.Timepoint.ToShortDateString(), (object) this.Value, (object) this.IsEstimated);
      }
    }
  }
}


--- MeterDBAccess.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MeterDBAccess
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using NLog;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;

#nullable disable
namespace ZR_ClassLibrary
{
  public class MeterDBAccess
  {
    private Logger DatabaseAccessLogger = LogManager.GetLogger(nameof (DatabaseAccessLogger));
    private ArrayList ID_List = new ArrayList();
    private SortedList<string, IdContainer> CachedIds = new SortedList<string, IdContainer>();
    private int CacheSize = 1;
    private string ErrorText;
    public DbBasis myDB;

    public MeterDBAccess(DbConnectionInfo connectionInfo, out DbBasis db)
    {
      this.DatabaseAccessLogger.Info("Loading driver: " + connectionInfo.DbType.ToString());
      db = DbBasis.getDbObject(connectionInfo);
      this.myDB = db;
    }

    public MeterDBAccess(MeterDbTypes databaseTypeConst, string connectionString, out DbBasis db)
    {
      this.DatabaseAccessLogger.Info("Loading driver: " + databaseTypeConst.ToString());
      db = DbBasis.getDbObject(databaseTypeConst, connectionString);
      this.myDB = db;
    }

    public string GetDatabaseInfo(string LineStartText, bool ShowDatabaseConnection)
    {
      return ShowDatabaseConnection ? this.myDB.BaseDbConnection.GetDatabaseFullInfo(LineStartText) : this.myDB.BaseDbConnection.GetDatabaseInfo(LineStartText);
    }

    public string GetDbShortDescription() => this.myDB.BaseDbConnection.GetDatabaseShortInfo();

    public string GetDatabaseInfo(string LineStartText)
    {
      return this.myDB.BaseDbConnection.GetDatabaseInfo(LineStartText);
    }

    public string GetDatabaseLocationName() => this.myDB.BaseDbConnection.DatabaseLocationName;

    public string GetDatabaseType() => this.myDB.BaseDbConnection.ConnectionInfo.DbType.ToString();

    public string getDBTypeString() => this.GetDbShortDescription();

    [Obsolete]
    public int FillTable(string sSQL, DataTable outTab, out string ErrMsg)
    {
      ErrMsg = "unbekannter Fehler";
      int num;
      try
      {
        using (IDbConnection dbConnection = this.myDB.GetDbConnection())
          this.myDB.ZRDataAdapter(sSQL, dbConnection).Fill(outTab);
        ErrMsg = "";
        num = 0;
      }
      catch (Exception ex)
      {
        num = 2;
        ErrMsg = ex.ToString();
      }
      return num;
    }

    public long GetNewId(string TableName, string FieldName)
    {
      long newID;
      string ErrMsg;
      if (this.getNewID(TableName, FieldName, out newID, out ErrMsg) != 0)
        throw new Exception("Error on GetNewId" + ErrMsg);
      return newID;
    }

    public int getNewID(string TableName, string FieldName, out long newID, out string ErrMsg)
    {
      ErrMsg = ErrMsg = "";
      int index = this.CachedIds.IndexOfKey(TableName);
      if (this.CacheSize > 1)
      {
        IdContainer newIds = this.myDB.BaseDbConnection.GetNewIds(TableName, this.CacheSize);
        if (index >= 0)
          this.CachedIds.Values[index] = newIds;
        else
          this.CachedIds.Add(TableName, newIds);
        newID = (long) newIds.GetNextID();
        this.CacheSize = 1;
      }
      else if (index >= 0)
      {
        IdContainer idContainer = this.CachedIds.Values[index];
        newID = (long) idContainer.GetNextID();
        if (idContainer.NumberOfUnusedIds < 1)
          this.CachedIds.RemoveAt(index);
      }
      else
        newID = (long) this.myDB.BaseDbConnection.GetNewIds(TableName, 1).GetNextID();
      return 0;
    }

    public void setIDCachSize(long theNewCachSize) => this.CacheSize = (int) theNewCachSize;

    private void addErrorText(string errtxt)
    {
      if (!(errtxt != ""))
        return;
      this.ErrorText = this.ErrorText + errtxt + "\r\n";
    }

    public string getErrorText()
    {
      string errorText = this.ErrorText;
      this.ErrorText = "";
      return errorText;
    }

    public enum EHKV_II_Ressources
    {
      EHKV_II,
      TwoSensor,
      Opto,
      Radio,
      RemoteSensor,
    }

    public enum OverWritePIDEHKV
    {
      StartTime,
      EndTime,
      StartMonth,
      SendMonth,
      SendWeeks,
      SendDays,
      SendKey,
      Cycle,
      RDay,
      Sensor,
      Scale,
      Radio,
      Opto,
      Mode,
      UTC,
    }

    public enum OverWritePIDFunkmodule
    {
      InputMode = 1,
      Medium = 2,
      PulseValue = 3,
      Unit = 4,
      RFMode = 5,
      RDay = 6,
      UTC = 7,
      ManipulationTimer = 8,
      Sendemonate = 9,
      Sendetage = 10, // 0x0000000A
      Sendestunden = 11, // 0x0000000B
    }

    public enum ValueTypes
    {
      TestError = -2, // 0xFFFFFFFE
      TestValue = -1, // 0xFFFFFFFF
      Unknown = 0,
      EEPDATA = 1,
      MeterID = 2,
      EndEnergy = 3,
      EnergyNominal = 4,
      EnergyUnit = 5,
      PositionVMT = 6,
      PulseValance = 7,
      SensorType = 8,
      StartEnergy = 9,
      TemperatureFlow = 10, // 0x0000000A
      TemperatureReturn = 11, // 0x0000000B
      Pulses = 12, // 0x0000000C
      Repetitions = 13, // 0x0000000D
      CountsMax = 14, // 0x0000000E
      CountsMin = 15, // 0x0000000F
      CountsNominal = 16, // 0x00000010
      CurrentMax = 17, // 0x00000011
      CurrentMin = 18, // 0x00000012
      CurrentNominal = 19, // 0x00000013
      EnergyErrorMax = 20, // 0x00000014
      EnergyErrorMin = 21, // 0x00000015
      EnergyErrorNominal = 22, // 0x00000016
      ErrorMax = 23, // 0x00000017
      ErrorMin = 24, // 0x00000018
      Flow = 25, // 0x00000019
      Measurements = 26, // 0x0000001A
      MeterInfoID = 27, // 0x0000001B
      TemperatureDifferenzErrorMax = 28, // 0x0000001C
      TemperatureDifferenzErrorMin = 29, // 0x0000001D
      TimeMax = 30, // 0x0000001E
      TimeMin = 31, // 0x0000001F
      TimeNominal = 32, // 0x00000020
      ErrorNominal = 33, // 0x00000021
      VoltageMax = 34, // 0x00000022
      VoltageMin = 35, // 0x00000023
      VoltageNominal = 36, // 0x00000024
      VoltageOff = 37, // 0x00000025
      VoltageOn = 38, // 0x00000026
      VoltageSupply = 39, // 0x00000027
      VolumeErrorMax = 40, // 0x00000028
      VolumeErrorMin = 41, // 0x00000029
      VolumeErrorNominal = 42, // 0x0000002A
      TemperatureDifferenzErrorNominal = 43, // 0x0000002B
      PPSArtikelnummer = 44, // 0x0000002C
      ValueFlowMax = 45, // 0x0000002D
      ValueFlowMin = 46, // 0x0000002E
      ValueFlowNominal = 47, // 0x0000002F
      ValueReturnMax = 48, // 0x00000030
      ValueReturnMin = 49, // 0x00000031
      ValueReturnNominal = 50, // 0x00000032
      VoltageOffMax = 51, // 0x00000033
      VoltageOffMin = 52, // 0x00000034
      VoltageOffNominal = 53, // 0x00000035
      VoltageOnMax = 54, // 0x00000036
      VoltageOnMin = 55, // 0x00000037
      VoltageOnNominal = 56, // 0x00000038
      VoltageErrorOff = 57, // 0x00000039
      VoltageErrorOn = 58, // 0x0000003A
      ErrorAtFlow = 59, // 0x0000003B
      ErrorAtReturn = 60, // 0x0000003C
      VoltageError = 61, // 0x0000003D
      CurrentResetMax = 62, // 0x0000003E
      CurrentResetMin = 63, // 0x0000003F
      CurrentResetNominal = 64, // 0x00000040
      ErrorReset = 65, // 0x00000041
      CurrentPowerDownMax = 66, // 0x00000042
      CurrentPowerDownMin = 67, // 0x00000043
      CurrentPowerDownNominal = 68, // 0x00000044
      ErrorPowerDown = 69, // 0x00000045
      CurrentReset = 70, // 0x00000046
      CurrentPowerDown = 72, // 0x00000048
      ValueAtFlow = 73, // 0x00000049
      ValueAtReturn = 74, // 0x0000004A
      Voltage = 75, // 0x0000004B
      Error = 76, // 0x0000004C
      PulseValueDeviationMax = 77, // 0x0000004D
      TVMinRef = 78, // 0x0000004E
      TVMaxRef = 79, // 0x0000004F
      DeltaTMinRef = 80, // 0x00000050
      DeltaTMaxRef = 81, // 0x00000051
      DeltaTVMin = 82, // 0x00000052
      DeltaTVMax = 83, // 0x00000053
      DeltaDTMin = 84, // 0x00000054
      DeltaDTMax = 85, // 0x00000055
      TVRef = 86, // 0x00000056
      DeltaTRef = 87, // 0x00000057
      ButtonOK = 88, // 0x00000058
      EquipmentID = 89, // 0x00000059
      StateAtFlow1 = 90, // 0x0000005A
      StateAtFlow2 = 91, // 0x0000005B
      StateAtReturn1 = 92, // 0x0000005C
      StateAtReturn2 = 93, // 0x0000005D
      FileName1 = 94, // 0x0000005E
      FileName2 = 95, // 0x0000005F
      GovernmentRandomNr = 96, // 0x00000060
      DisplayValueStart = 97, // 0x00000061
      DisplayValueEnd = 98, // 0x00000062
      SnCounter = 99, // 0x00000063
      SnVolumeCounter = 100, // 0x00000064
      SnTempSensorFlow = 101, // 0x00000065
      SnTempSensorReturn = 102, // 0x00000066
      DatePartlist = 103, // 0x00000067
      KFactorFlow = 104, // 0x00000068
      KFactorReturn = 105, // 0x00000069
      DisplayProgressOK = 106, // 0x0000006A
      ApprovalMark = 107, // 0x0000006B
      ProgramOK = 108, // 0x0000006C
      HydQn = 109, // 0x0000006D
      HydClass = 110, // 0x0000006E
      HydImpulsValue = 111, // 0x0000006F
      HydSnVmt = 112, // 0x00000070
      HydQmin = 113, // 0x00000071
      HydQtrenn = 114, // 0x00000072
      HydQmax = 115, // 0x00000073
      HydVsollQmin = 116, // 0x00000074
      HydVsollQtrenn = 117, // 0x00000075
      HydVsollQmax = 118, // 0x00000076
      HydVistQmin = 119, // 0x00000077
      HydVistQtrenn = 120, // 0x00000078
      HydVistQmax = 121, // 0x00000079
      HydFQmin = 122, // 0x0000007A
      HydFQtrenn = 123, // 0x0000007B
      HydFQmax = 124, // 0x0000007C
      HydFGQminMin = 125, // 0x0000007D
      HydFGQtrennMin = 126, // 0x0000007E
      HydFGQmaxMin = 127, // 0x0000007F
      HydFGQminMax = 128, // 0x00000080
      HydFGQtrennMax = 129, // 0x00000081
      HydFGQmaxMax = 130, // 0x00000082
      HydErgQmin = 131, // 0x00000083
      HydErgQtrenn = 132, // 0x00000084
      HydErgQmax = 133, // 0x00000085
      HydFlag = 134, // 0x00000086
      HydTQmin = 135, // 0x00000087
      HydTQtrenn = 136, // 0x00000088
      HydTQmax = 137, // 0x00000089
      HydProdNr = 138, // 0x0000008A
      Prefix = 139, // 0x0000008B
      SnModule = 140, // 0x0000008C
      VoltageOff1 = 141, // 0x0000008D
      VoltageErrorOff1 = 142, // 0x0000008E
      VoltageOn1 = 143, // 0x0000008F
      VoltageErrorOn1 = 144, // 0x00000090
      VoltageOff2 = 145, // 0x00000091
      VoltageErrorOff2 = 146, // 0x00000092
      VoltageOn2 = 147, // 0x00000093
      VoltageErrorOn2 = 148, // 0x00000094
      Input1Ok = 149, // 0x00000095
      Input2Ok = 150, // 0x00000096
      Voltage1 = 151, // 0x00000097
      VoltageError1 = 152, // 0x00000098
      Voltage2 = 153, // 0x00000099
      VoltageError2 = 154, // 0x0000009A
      OldMeterInfoID = 155, // 0x0000009B
      FrequencyMax = 156, // 0x0000009C
      FrequencyMin = 157, // 0x0000009D
      FrequencyNominal = 158, // 0x0000009E
      HubMax = 159, // 0x0000009F
      HubMin = 160, // 0x000000A0
      HubNominal = 161, // 0x000000A1
      OkMeasurementCount = 162, // 0x000000A2
      MisMeasurementCount = 163, // 0x000000A3
      FrequencyMaxDisplay = 164, // 0x000000A4
      FrequencyMinDisplay = 165, // 0x000000A5
      CurrentLimit = 166, // 0x000000A6
      OverVoltageProtection = 167, // 0x000000A7
      ResistorValue = 168, // 0x000000A8
      CurrentOffMax = 169, // 0x000000A9
      CurrentOffMin = 170, // 0x000000AA
      CurrentOffNominal = 171, // 0x000000AB
      CurrentOffValue = 172, // 0x000000AC
      CurrentOffError = 173, // 0x000000AD
      CurrentOnMax = 174, // 0x000000AE
      CurrentOnMin = 175, // 0x000000AF
      CurrentOnNominal = 176, // 0x000000B0
      CurrentOnValue = 177, // 0x000000B1
      CurrentOnError = 178, // 0x000000B2
      WaitTime1 = 179, // 0x000000B3
      WaitTime2 = 180, // 0x000000B4
      WaitTime3 = 181, // 0x000000B5
      WaitTime4 = 182, // 0x000000B6
      TemperatureMax = 183, // 0x000000B7
      TemperatureMin = 184, // 0x000000B8
      TemperatureNominal = 185, // 0x000000B9
      Temperature = 186, // 0x000000BA
      MeterIDInnotas = 187, // 0x000000BB
      Current = 188, // 0x000000BC
      CapHub = 189, // 0x000000BD
      CapHubMin = 190, // 0x000000BE
      CapHubMax = 191, // 0x000000BF
      PulsesMin = 192, // 0x000000C0
      PulsesMax = 193, // 0x000000C1
      WaveFormError = 194, // 0x000000C2
      HardwaretestOK = 195, // 0x000000C3
      MeterIDRead = 196, // 0x000000C4
      SerialNumberRead = 197, // 0x000000C5
      MaxSamples = 198, // 0x000000C6
      MaxSamplesMin = 199, // 0x000000C7
      MaxSamplesMax = 200, // 0x000000C8
      MaxSamplesNom = 201, // 0x000000C9
      FullWaves = 202, // 0x000000CA
      FullWavesMin = 203, // 0x000000CB
      FullWavesMax = 204, // 0x000000CC
      FullWavesNom = 205, // 0x000000CD
      DCT_ValueMin = 206, // 0x000000CE
      DCT_ValueMax = 207, // 0x000000CF
      DCT_ValueNom = 208, // 0x000000D0
      DCT_Value = 209, // 0x000000D1
      HubUnsymetrieMax = 210, // 0x000000D2
      HubUnsymetrieNom = 211, // 0x000000D3
      HubUnsymetrie = 212, // 0x000000D4
      HubUnsymetrieMin = 213, // 0x000000D5
      FileName3 = 214, // 0x000000D6
      FileName4 = 215, // 0x000000D7
      FileName5 = 216, // 0x000000D8
      MeterKey = 217, // 0x000000D9
      HydPruefstand = 218, // 0x000000DA
      HydEinbaurichtung = 219, // 0x000000DB
      HydPruefer = 220, // 0x000000DC
      HydPruefdatum = 221, // 0x000000DD
      FlowMin = 222, // 0x000000DE
      FlowMax = 223, // 0x000000DF
      FlowNom = 224, // 0x000000E0
      MotherMeterValue = 225, // 0x000000E1
      MeasuringMethod = 226, // 0x000000E2
      BalanceValue = 227, // 0x000000E3
      Volume = 228, // 0x000000E4
      NumberOfMeasuringTestPoints = 229, // 0x000000E5
      Factor = 230, // 0x000000E6
      ErrorMID1 = 231, // 0x000000E7
      ErrorMID2 = 232, // 0x000000E8
      ErrorMID3 = 233, // 0x000000E9
      FileName6 = 234, // 0x000000EA
      Density = 235, // 0x000000EB
      TestMethod = 236, // 0x000000EC
      MID = 237, // 0x000000ED
      Ratio = 238, // 0x000000EE
      Class = 239, // 0x000000EF
      ClassToShow = 240, // 0x000000F0
      Approval = 241, // 0x000000F1
      MountingDirection = 242, // 0x000000F2
      Qn = 243, // 0x000000F3
      TempRange = 244, // 0x000000F4
      MeterType = 245, // 0x000000F5
      TestCourseError = 246, // 0x000000F6
      RssiMin = 247, // 0x000000F7
      RssiMax = 248, // 0x000000F8
      RssiNom = 249, // 0x000000F9
      DeltaRssiMax = 250, // 0x000000FA
      ResistorMinValue = 251, // 0x000000FB
      ResistorMaxValue = 252, // 0x000000FC
      ValueFlowMax_1 = 253, // 0x000000FD
      ValueFlowMin_1 = 254, // 0x000000FE
      ValueFlowNominal_1 = 255, // 0x000000FF
      ValueReturnMax_1 = 256, // 0x00000100
      ValueReturnMin_1 = 257, // 0x00000101
      ValueReturnNominal_1 = 258, // 0x00000102
      Uref1Max = 259, // 0x00000103
      Uref1Min = 260, // 0x00000104
      Uref2Max = 261, // 0x00000105
      Uref2Min = 262, // 0x00000106
      DeltaDTMaxInPercent = 263, // 0x00000107
      DeltaRMaxInOhm = 264, // 0x00000108
      SwitchPosition1 = 265, // 0x00000109
      SwitchPosition2 = 266, // 0x0000010A
      SwitchPosition3 = 267, // 0x0000010B
      SwitchPosition = 268, // 0x0000010C
      counterNRef = 269, // 0x0000010D
      counterNRefMin = 270, // 0x0000010E
      counterNRefMax = 271, // 0x0000010F
      counterNRef2 = 272, // 0x00000110
      counterNRef2Min = 273, // 0x00000111
      counterNRef2Max = 274, // 0x00000112
      counterNVL = 275, // 0x00000113
      counterNVLMin = 276, // 0x00000114
      counterNVLMax = 277, // 0x00000115
      counterNRL = 278, // 0x00000116
      counterNRLMin = 279, // 0x00000117
      counterNRLMax = 280, // 0x00000118
      DeltaDT1InPercent = 281, // 0x00000119
      DeltaDT2InPercent = 282, // 0x0000011A
      DeltaDT3InPercent = 283, // 0x0000011B
      DeltaRV1InOhm = 284, // 0x0000011C
      DeltaRV2InOhm = 285, // 0x0000011D
      DeltaRV3InOhm = 286, // 0x0000011E
      tf_exp_1 = 287, // 0x0000011F
      tf_exp_2 = 288, // 0x00000120
      tf_exp_3 = 289, // 0x00000121
      tf_exp_4 = 290, // 0x00000122
      tf_exp_5 = 291, // 0x00000123
      tf_exp_6 = 292, // 0x00000124
      tf_man_1 = 293, // 0x00000125
      tf_man_2 = 294, // 0x00000126
      tf_man_3 = 295, // 0x00000127
      tf_man_4 = 296, // 0x00000128
      tf_man_5 = 297, // 0x00000129
      tf_man_6 = 298, // 0x0000012A
      n_ref_man_2 = 299, // 0x0000012B
      CurrentAfterReset = 300, // 0x0000012C
      CurrentAfterResetMin = 301, // 0x0000012D
      CurrentAfterResetMax = 302, // 0x0000012E
      CurrentWithKey = 303, // 0x0000012F
      CurrentWithKeyMin = 304, // 0x00000130
      CurrentWithKeyMax = 305, // 0x00000131
      CurrentWithKeyAndCancel = 306, // 0x00000132
      CurrentWithKeyAndCancelMin = 307, // 0x00000133
      CurrentWithKeyAndCancelMax = 308, // 0x00000134
      U_VCC_Bat1 = 309, // 0x00000135
      U_VCC_Bat2 = 310, // 0x00000136
      U_VCC_VCCExt = 311, // 0x00000137
      I_Bat2_Bat1 = 312, // 0x00000138
      I_Bat1_Bat2 = 313, // 0x00000139
      I_Bat2_VCCExt = 314, // 0x0000013A
      U_AlpVCC = 315, // 0x0000013B
      Torzeit1Hz = 316, // 0x0000013C
      Torzeit10Hz = 317, // 0x0000013D
      Torzeit100Hz = 318, // 0x0000013E
      Torzeit1000Hz = 319, // 0x0000013F
      Pulse10HzPassivIN1 = 320, // 0x00000140
      Pulse10HzPassivMin = 321, // 0x00000141
      Pulse10HzPassivMax = 322, // 0x00000142
      Flag10HzPassivIN2 = 323, // 0x00000143
      Pulse100HzPassivIN1 = 324, // 0x00000144
      Pulse100HzPassivMax = 325, // 0x00000145
      Flag100HzPassivIN2 = 326, // 0x00000146
      Pulse100HzAktivIN1 = 327, // 0x00000147
      Pulse100HzAktivMin = 328, // 0x00000148
      Pulse100HzAktivMax = 329, // 0x00000149
      Flag100HzAktivIN2 = 330, // 0x0000014A
      Pulse1000HzAktivIN1 = 331, // 0x0000014B
      Pulse1000HzAktivMax = 332, // 0x0000014C
      Flag1000HzAktivIN2 = 333, // 0x0000014D
      Pulse1HzIo1 = 334, // 0x0000014E
      Pulse1HzIo2 = 335, // 0x0000014F
      Pulse1HzMin = 336, // 0x00000150
      Pulse1HzMax = 337, // 0x00000151
      Pulse10HzIo1 = 338, // 0x00000152
      Pulse10HzIo2 = 339, // 0x00000153
      Pulse10HzMax = 340, // 0x00000154
      Pulse1HzIo1Open = 341, // 0x00000155
      Pulse1HzIo2Open = 342, // 0x00000156
      Pulse10HzIo1Open = 343, // 0x00000157
      Pulse10HzIo2Open = 344, // 0x00000158
      RerunReasonHWTWRT = 345, // 0x00000159
      TempFlowNominal = 346, // 0x0000015A
      TempReturnNominal = 347, // 0x0000015B
      ProductionYear = 348, // 0x0000015C
      CurrentStandbyMin = 349, // 0x0000015D
      CurrentStandbyMax = 350, // 0x0000015E
      CurrentInterfaceMin = 351, // 0x0000015F
      CurrentInterfaceMax = 352, // 0x00000160
      Frequency = 353, // 0x00000161
      Torzeit = 354, // 0x00000162
      FrequencyLow = 355, // 0x00000163
      PulsesLowMin = 356, // 0x00000164
      PulsesLowMax = 357, // 0x00000165
      TorzeitLow = 358, // 0x00000166
      FrequencyHigh = 359, // 0x00000167
      PulsesHighMin = 360, // 0x00000168
      PulsesHighMax = 361, // 0x00000169
      TorzeitHigh = 362, // 0x0000016A
      TV2WireErrTest = 363, // 0x0000016B
      DeltaT2WireErrTest = 364, // 0x0000016C
      TV2WireS2Wire = 365, // 0x0000016D
      DeltaT2WireS2Wire = 366, // 0x0000016E
      TV4WireErrTest = 367, // 0x0000016F
      DeltaT4WireErrTest = 368, // 0x00000170
      TV4WireS4Wire = 369, // 0x00000171
      DeltaT4WireS4Wire = 370, // 0x00000172
      TV4WireS2Wire = 371, // 0x00000173
      DeltaT4WireS2Wire = 372, // 0x00000174
      PulsesLow = 373, // 0x00000175
      PulsesHigh = 374, // 0x00000176
      CurrentStandby = 375, // 0x00000177
      CurrentInterface = 376, // 0x00000178
      Zustand1OnOff = 377, // 0x00000179
      Zustand1OffOn = 378, // 0x0000017A
      Zustand2OnOff = 379, // 0x0000017B
      Zustand2OffOn = 380, // 0x0000017C
      BatterieCapacity = 381, // 0x0000017D
      BatterieCapacityMin = 382, // 0x0000017E
      DeltaDTInPercent = 383, // 0x0000017F
      DeltaRVInOhm = 384, // 0x00000180
      TypeEtikettName = 385, // 0x00000181
      KlemmEtikettNameSmall = 386, // 0x00000182
      KlemmEtikettNameNurIO = 387, // 0x00000183
      KlemmEtikettNameMbusUndIO = 388, // 0x00000184
      KlemmEtikettNameMbusUndIO4Draht = 389, // 0x00000185
      KlemmEtikettNameMbusUndIO4DrahtDR = 390, // 0x00000186
      KlemmEtikettNameRS485UndIO = 391, // 0x00000187
      KlemmEtikettNameRS485UndIO4Draht = 392, // 0x00000188
      KlemmEtikettNameRS485UndIO4DrahtDR = 393, // 0x00000189
      KlemmEtikettNameMbusOhneIO = 394, // 0x0000018A
      KlemmEtikettNameRS232UndIO2Draht = 395, // 0x0000018B
      KartonEtikettNameCometGasmonitor = 396, // 0x0000018C
      TypeEtikettNameCometGasmonitor = 397, // 0x0000018D
      KartonEtikettName = 398, // 0x0000018E
      TypeEtikettNameZRWR3IZM = 399, // 0x0000018F
      KartonEtikettNameZRWR3IZM = 400, // 0x00000190
      KlemmenEtikettNameWR3IZM = 401, // 0x00000191
      DisplayValue = 402, // 0x00000192
      DisplayString = 403, // 0x00000193
      ApprovalMarkCooling = 404, // 0x00000194
      TestMethodCooling = 405, // 0x00000195
      KartonEtikettNameNEUTRAL = 406, // 0x00000196
      TypeEtikettNameCO = 407, // 0x00000197
      KartonEtikettNameMMmultidataWR3MID = 408, // 0x00000198
      KartonEtikettNameZelsiusHSI = 409, // 0x00000199
      KlemmenEtikettNameWR3IZM_RS485 = 410, // 0x0000019A
      NumberOfMinPulsesBeforeStart06 = 411, // 0x0000019B
      NumberOfMinPulsesBeforeStart15 = 412, // 0x0000019C
      NumberOfMinPulsesBeforeStart25 = 413, // 0x0000019D
      NumberOfReachedMinPulsesBeforeStart06 = 414, // 0x0000019E
      NumberOfReachedMinPulsesBeforeStart15 = 415, // 0x0000019F
      NumberOfReachedMinPulsesBeforeStart25 = 416, // 0x000001A0
      NumberOfAllowedFewerTheMinPulses = 417, // 0x000001A1
      KlemmenEtikettNameWR3IZM_RS232 = 418, // 0x000001A2
      PreApproval = 419, // 0x000001A3
      NotEnoughWaves = 420, // 0x000001A4
      VolumeMeterType = 421, // 0x000001A5
      ProtocolNr1 = 422, // 0x000001A6
      ProtocolNr2 = 423, // 0x000001A7
      TestsToCheck = 424, // 0x000001A8
      TypeLabelNameC3 = 425, // 0x000001A9
      BathNumberFlow = 426, // 0x000001AA
      BathNumberReturn = 427, // 0x000001AB
      TemperatureBathFlow = 428, // 0x000001AC
      TemperatureBathReturn = 429, // 0x000001AD
      DisplayStringStart = 430, // 0x000001AE
      DisplayStringEnd = 431, // 0x000001AF
      MaxHighMeasurements = 432, // 0x000001B0
      MaxLowMeasurements = 433, // 0x000001B1
      MaxHoldMeasurements = 434, // 0x000001B2
      BleedingCycles = 435, // 0x000001B3
      StartVolume = 436, // 0x000001B4
      EndVolume = 437, // 0x000001B5
      LastDigit = 438, // 0x000001B6
      MinTestVolume = 439, // 0x000001B7
      DeltaTVInKelvin = 440, // 0x000001B8
      DeltaDTInKelvin = 441, // 0x000001B9
      VoltageOffMinLoad = 442, // 0x000001BA
      VoltageOffMaxLoad = 443, // 0x000001BB
      VoltageOnMinLoad = 444, // 0x000001BC
      VoltageOnMaxLoad = 445, // 0x000001BD
      VoltageOffMinNoLoad = 446, // 0x000001BE
      VoltageOffMaxNoLoad = 447, // 0x000001BF
      VoltageOnMinNoLoad = 448, // 0x000001C0
      VoltageOnMaxNoLoad = 449, // 0x000001C1
      RisingTimeMinLoad = 450, // 0x000001C2
      RisingTimeMaxLoad = 451, // 0x000001C3
      RisingTimeMinNoLoad = 452, // 0x000001C4
      RisingTimeMaxNoLoad = 453, // 0x000001C5
      MinLevelInPercent = 454, // 0x000001C6
      MaxLevelInPercent = 455, // 0x000001C7
      GetLevelFromMaximum = 456, // 0x000001C8
      VoltageOn1Load = 457, // 0x000001C9
      VoltageOn2Load = 458, // 0x000001CA
      VoltageOn3Load = 459, // 0x000001CB
      VoltageOff1Load = 460, // 0x000001CC
      VoltageOff2Load = 461, // 0x000001CD
      VoltageOff3Load = 462, // 0x000001CE
      VoltageOn1NoLoad = 463, // 0x000001CF
      VoltageOn2NoLoad = 464, // 0x000001D0
      VoltageOn3NoLoad = 465, // 0x000001D1
      VoltageOff1NoLoad = 466, // 0x000001D2
      VoltageOff2NoLoad = 467, // 0x000001D3
      VoltageOff3NoLoad = 468, // 0x000001D4
      RisingTime1Load = 469, // 0x000001D5
      RisingTime2Load = 470, // 0x000001D6
      RisingTime3Load = 471, // 0x000001D7
      RisingTime1NoLoad = 472, // 0x000001D8
      RisingTime2NoLoad = 473, // 0x000001D9
      RisingTime3NoLoad = 474, // 0x000001DA
      ResultBytesOK1Load = 475, // 0x000001DB
      ResultBytesOK2Load = 476, // 0x000001DC
      ResultBytesOK3Load = 477, // 0x000001DD
      ResultBytesOK1NoLoad = 478, // 0x000001DE
      ResultBytesOK2NoLoad = 479, // 0x000001DF
      ResultBytesOK3NoLoad = 480, // 0x000001E0
      TriggerReceived1Load = 481, // 0x000001E1
      TriggerReceived2Load = 482, // 0x000001E2
      TriggerReceived3Load = 483, // 0x000001E3
      TriggerReceived1NoLoad = 484, // 0x000001E4
      TriggerReceived2NoLoad = 485, // 0x000001E5
      TriggerReceived3NoLoad = 486, // 0x000001E6
      SnSensorPair = 487, // 0x000001E7
      TemperatureFlowRef = 488, // 0x000001E8
      TemperatureReturnRef = 489, // 0x000001E9
      UBatMin = 490, // 0x000001EA
      UBatMax = 491, // 0x000001EB
      UInMin = 492, // 0x000001EC
      UInMax = 493, // 0x000001ED
      UVCCMin = 494, // 0x000001EE
      UVCCMax = 495, // 0x000001EF
      NominalSize = 496, // 0x000001F0
      CurrentMaxMin = 497, // 0x000001F1
      CurrentMaxMax = 498, // 0x000001F2
      UIn = 499, // 0x000001F3
      UVCC = 500, // 0x000001F4
      UBat1 = 501, // 0x000001F5
      UBat2 = 502, // 0x000001F6
      RisingTime = 503, // 0x000001F7
      CommunicationOK = 504, // 0x000001F8
      DeviceVolume = 505, // 0x000001F9
      InletTemp = 506, // 0x000001FA
      OutletTemp = 507, // 0x000001FB
      InletPressure = 508, // 0x000001FC
      OutletPressure = 509, // 0x000001FD
      Lambda = 510, // 0x000001FE
      ExternalTestName = 511, // 0x000001FF
      FirmwareVersion = 512, // 0x00000200
      AmplitudeMin = 513, // 0x00000201
      AmplitudeMax = 514, // 0x00000202
      Amplitude = 515, // 0x00000203
      CountsCoilAAttenuatedMin = 516, // 0x00000204
      CountsCoilAAttenuatedMax = 517, // 0x00000205
      CountsCoilBAttenuatedMin = 518, // 0x00000206
      CountsCoilBAttenuatedMax = 519, // 0x00000207
      CountsCoilANotAttenuatedMin = 520, // 0x00000208
      CountsCoilANotAttenuatedMax = 521, // 0x00000209
      CountsCoilBNotAttenuatedMin = 522, // 0x0000020A
      CountsCoilBNotAttenuatedMax = 523, // 0x0000020B
      CountsCoilAAttenuated = 524, // 0x0000020C
      CountsCoilBAttenuated = 525, // 0x0000020D
      CountsCoilANotAttenuated = 526, // 0x0000020E
      CountsCoilBNotAttenuated = 527, // 0x0000020F
      SubTestID = 528, // 0x00000210
      DeltaAttenuatedMax = 529, // 0x00000211
      DeltaNotAttenuatedMax = 530, // 0x00000212
      DeltaAttenuated = 531, // 0x00000213
      DeltaNotAttenuated = 532, // 0x00000214
      AESKey = 533, // 0x00000215
      RadioID = 534, // 0x00000216
      RSSI = 535, // 0x00000217
      LQI = 536, // 0x00000218
      LQIMin = 537, // 0x00000219
      LQIMax = 538, // 0x0000021A
      RadioState = 539, // 0x0000021B
      Hub_B = 540, // 0x0000021C
      CurrentMaxUs = 541, // 0x0000021D
      CurrentMinUs = 542, // 0x0000021E
      CurrentMaxRa = 543, // 0x0000021F
      CurrentMinRa = 544, // 0x00000220
      FirstPulseWidthMin = 545, // 0x00000221
      FirstPulseWidthMax = 546, // 0x00000222
      FirstPulseWidthDifferenceMax = 547, // 0x00000223
      TimeCounterMin = 548, // 0x00000224
      TimeCounterMax = 549, // 0x00000225
      TimeCounterDifferenceMax = 550, // 0x00000226
      FirstPulseWidthUp = 551, // 0x00000227
      FirstPulseWidthDown = 552, // 0x00000228
      TimeCounterUp = 553, // 0x00000229
      TimeCounterDown = 554, // 0x0000022A
      State = 555, // 0x0000022B
      TimeMinUltrasonic = 556, // 0x0000022C
      TimeMaxUltrasonic = 557, // 0x0000022D
      DeviceType = 558, // 0x0000022E
      FirstPulseWidthMin06 = 559, // 0x0000022F
      FirstPulseWidthMax06 = 560, // 0x00000230
      FirstPulseWidthDifferenceMax06 = 561, // 0x00000231
      FirstPulseWidthMin15 = 562, // 0x00000232
      FirstPulseWidthMax15 = 563, // 0x00000233
      FirstPulseWidthDifferenceMax15 = 564, // 0x00000234
      FirstPulseWidthMin25 = 565, // 0x00000235
      FirstPulseWidthMax25 = 566, // 0x00000236
      FirstPulseWidthDifferenceMax25 = 567, // 0x00000237
      Offset = 568, // 0x00000238
      RisingTimeMin = 569, // 0x00000239
      RisingTimeMax = 570, // 0x0000023A
      ActiveTimeMin = 571, // 0x0000023B
      ActiveTimeMax = 572, // 0x0000023C
      SwitchOffTimeMin = 573, // 0x0000023D
      SwitchOffTimeMax = 574, // 0x0000023E
      ActiveTime = 575, // 0x0000023F
      SwitchOffTime = 576, // 0x00000240
      FlushCycles = 577, // 0x00000241
      UltrasonicAdjustTemperature = 578, // 0x00000242
      UltrasonicAdjustValue = 579, // 0x00000243
      UltrasonicAdjustResult = 580, // 0x00000244
      IntegralMinValue = 581, // 0x00000245
      IntegralMaxValue = 582, // 0x00000246
      Row = 583, // 0x00000247
      Column = 584, // 0x00000248
      RisingTimeSensor1 = 585, // 0x00000249
      RisingTimeSensor2 = 586, // 0x0000024A
      MeterIDSensor1 = 587, // 0x0000024B
      MeterIDSensor2 = 588, // 0x0000024C
      TestIDSensor1 = 589, // 0x0000024D
      TestIDSensor2 = 590, // 0x0000024E
      QminAdjustTemperature = 591, // 0x0000024F
      QminAdjustValue = 592, // 0x00000250
      QminAdjustResult = 593, // 0x00000251
      QminAdjustFlow = 594, // 0x00000252
      CountsCoilAAttenuatedMin_CC = 595, // 0x00000253
      CountsCoilAAttenuatedMax_CC = 596, // 0x00000254
      CountsCoilBAttenuatedMin_CC = 597, // 0x00000255
      CountsCoilBAttenuatedMax_CC = 598, // 0x00000256
      maxThreshold = 599, // 0x00000257
      minThreshold = 600, // 0x00000258
      maxRotationSpeed = 601, // 0x00000259
      destroyRotationSpeed = 602, // 0x0000025A
      rotationSpeed = 603, // 0x0000025B
      ChargeNumber = 604, // 0x0000025C
      SmokeDensity = 605, // 0x0000025D
      BatteryNumber = 606, // 0x0000025E
      PCBNumber = 607, // 0x0000025F
      FrequencyError = 608, // 0x00000260
      FrequencyErrorAfterCorrection = 609, // 0x00000261
      FrequencyErrorMax = 610, // 0x00000262
      SmokeDensityMin = 611, // 0x00000263
      SmokeDensityMax = 612, // 0x00000264
      Wr3WSKartonEtikettName = 613, // 0x00000265
      RadioEpsilonValue = 614, // 0x00000266
      RadioFrequencyAdjustment = 615, // 0x00000267
      PCBDate = 616, // 0x00000268
      CorrectionRequired = 617, // 0x00000269
      VoltageMinRadio = 618, // 0x0000026A
      RepetitionsRadio = 619, // 0x0000026B
      FirstPulseWidthMin35 = 620, // 0x0000026C
      FirstPulseWidthMax35 = 621, // 0x0000026D
      FirstPulseWidthDifferenceMax35 = 622, // 0x0000026E
      FirstPulseWidthMin60 = 623, // 0x0000026F
      FirstPulseWidthMax60 = 624, // 0x00000270
      FirstPulseWidthDifferenceMax60 = 625, // 0x00000271
      FirstPulseWidthMin100 = 626, // 0x00000272
      FirstPulseWidthMax100 = 627, // 0x00000273
      FirstPulseWidthDifferenceMax100 = 628, // 0x00000274
      DeviceHasError = 629, // 0x00000275
      IsProtected = 630, // 0x00000276
      OrderNumber = 631, // 0x00000277
      BaseType = 632, // 0x00000278
      IdIsValid = 633, // 0x00000279
      HardwareNumber = 634, // 0x0000027A
      MeasurementDate = 635, // 0x0000027B
      StatusByte = 636, // 0x0000027C
      TesterSWVersion = 637, // 0x0000027D
      VibrationLevelDamped = 638, // 0x0000027E
      VibrationLevelUndamped = 639, // 0x0000027F
      StationNumber = 640, // 0x00000280
      DAC1_min = 641, // 0x00000281
      DAC1_cal = 642, // 0x00000282
      DAC0_max = 643, // 0x00000283
      DAC0_cal = 644, // 0x00000284
      Position = 645, // 0x00000285
      Pressure = 646, // 0x00000286
      NominalVolume = 647, // 0x00000287
      PulseCheck = 648, // 0x00000288
      QAdjustTemperature = 649, // 0x00000289
      QAdjustValue = 650, // 0x0000028A
      QAdjustFlow = 651, // 0x0000028B
      MaxPressureDrop = 652, // 0x0000028C
      TestBenchEquipmentIDs = 653, // 0x0000028D
      PressureTest = 654, // 0x0000028E
      UsePassedValue = 655, // 0x0000028F
      ScanOK = 656, // 0x00000290
      SnVolumeCounterOK = 657, // 0x00000291
      TestResultFound = 658, // 0x00000292
      EnergyType = 659, // 0x00000293
      TempFlowDevice1 = 660, // 0x00000294
      TempReturnDevice1 = 661, // 0x00000295
      TempFlowDevice2 = 662, // 0x00000296
      TempReturnDevice2 = 663, // 0x00000297
      TempDeviationLowerLimit = 664, // 0x00000298
      TempDeviationUpperLimit = 665, // 0x00000299
      CountsCoilAttenuatedMin_CC_Retrofit = 666, // 0x0000029A
      CountsCoilAttenuatedMax_CC_Retrofit = 667, // 0x0000029B
      CountsCoilAttenuatedMin_Standard_Retrofit = 668, // 0x0000029C
      CountsCoilAttenuatedMax_Standard_Retrofit = 669, // 0x0000029D
      CountsCoilAttenuatedMin_Bulk_Retrofit = 670, // 0x0000029E
      CountsCoilAttenuatedMax_Bulk_Retrofit = 671, // 0x0000029F
      MaxSignalRise_CC_Retrofit = 672, // 0x000002A0
      MinSignalRise_CC_Retrofit = 673, // 0x000002A1
      MaxSignalRise_Standard_Retrofit = 674, // 0x000002A2
      MinSignalRise_Standard_Retrofit = 675, // 0x000002A3
      MaxSignalRise_Bulk_Retrofit = 676, // 0x000002A4
      MinSignalRise_Bulk_Retrofit = 677, // 0x000002A5
      DifferenceSignalDistance_CC_Retrofit = 678, // 0x000002A6
      DifferenceSignalDistance_Bulk_Retrofit = 679, // 0x000002A7
      DifferenceSignalDistance_Standard_Retrofit = 680, // 0x000002A8
      RetrofitCapable = 681, // 0x000002A9
      Time = 682, // 0x000002AA
      Delay = 683, // 0x000002AB
      HumidityMinValue = 684, // 0x000002AC
      HumidityMaxValue = 685, // 0x000002AD
      CoverPrinterPrepareMode = 686, // 0x000002AE
      PulsesLowDown = 687, // 0x000002AF
      PulsesHighUp = 688, // 0x000002B0
      PulsesHighDown = 689, // 0x000002B1
      PulsesLow2 = 690, // 0x000002B2
      PulsesHigh1 = 691, // 0x000002B3
      PulsesHigh2 = 692, // 0x000002B4
      AMax = 693, // 0x000002B5
      AMin = 694, // 0x000002B6
      BMax = 695, // 0x000002B7
      BMin = 696, // 0x000002B8
      CMax = 697, // 0x000002B9
      CMin = 698, // 0x000002BA
      SingleSensor2DLabelData = 699, // 0x000002BB
      SensorPair2DLabelData = 700, // 0x000002BC
      CurrentMinPT100 = 701, // 0x000002BD
      CurrentMaxPT100 = 702, // 0x000002BE
      CurrentMaxMinPT100 = 703, // 0x000002BF
      CurrentMaxMaxPT100 = 704, // 0x000002C0
      CurrentMinPT500 = 705, // 0x000002C1
      CurrentMaxPT500 = 706, // 0x000002C2
      CurrentMaxMinPT500 = 707, // 0x000002C3
      CurrentMaxMaxPT500 = 708, // 0x000002C4
      CurrentMinPT1000 = 709, // 0x000002C5
      CurrentMaxPT1000 = 710, // 0x000002C6
      CurrentMaxMinPT1000 = 711, // 0x000002C7
      CurrentMaxMaxPT1000 = 712, // 0x000002C8
      PulsesLowUp = 713, // 0x000002C9
      DeltaTmin = 714, // 0x000002CA
      DeltaTmax = 715, // 0x000002CB
      FirmwareUpdate = 716, // 0x000002CC
      FlowResistance = 717, // 0x000002CD
      ReturnResistance = 718, // 0x000002CE
      SmokeDensityFullMin = 719, // 0x000002CF
      SmokeDensityFullMax = 720, // 0x000002D0
      MinTestVolumeQmin = 721, // 0x000002D1
      MinTestVolumeQ = 722, // 0x000002D2
      HardwareUniqueID = 723, // 0x000002D3
      DeltaA = 724, // 0x000002D4
      DeltaB = 725, // 0x000002D5
      DeltaAMax = 726, // 0x000002D6
      DeltaAMin = 727, // 0x000002D7
      DeltaBMax = 728, // 0x000002D8
      DeltaBMin = 729, // 0x000002D9
      DeltaAT5subT3Cal = 730, // 0x000002DA
      DeltaBT5subT3Cal = 731, // 0x000002DB
      DeltaCT5subT3Cal = 732, // 0x000002DC
      DeltaAT5subT2 = 733, // 0x000002DD
      DeltaBT5subT2 = 734, // 0x000002DE
      DelatBT2subT1 = 735, // 0x000002DF
      SmokeDensityLoRaMin = 736, // 0x000002E0
      SmokeDensityLoRaMax = 737, // 0x000002E1
      Type = 738, // 0x000002E2
      TransducerPair1CalibrationOffset = 739, // 0x000002E3
      TransducerPair1Offset = 740, // 0x000002E4
      TransducerPair1OffsetCalibrationError = 741, // 0x000002E5
      TransducerPair2CalibrationOffset = 742, // 0x000002E6
      TransducerPair2Offset = 743, // 0x000002E7
      TransducerPair2OffsetCalibrationError = 744, // 0x000002E8
      QmaxAdjustValue = 746, // 0x000002EA
      QmaxAdjustFlow = 748, // 0x000002EC
      TestIdHardwareTest = 749, // 0x000002ED
      TestIdPottingTest = 750, // 0x000002EE
      TestIdHydraulicTest = 751, // 0x000002EF
      FirmwareVersionMinoconnect = 752, // 0x000002F0
      FirmwareVersionMiconConnector = 753, // 0x000002F1
      PermanentFlowRateQ3 = 754, // 0x000002F2
      MinimumFlowrateQ1 = 755, // 0x000002F3
      IUWPackageLabel = 756, // 0x000002F4
      IUWCoverLabel = 757, // 0x000002F5
      Temperature_Start = 758, // 0x000002F6
      Temperature_Stop = 759, // 0x000002F7
      TemperatureSensorCounts = 760, // 0x000002F8
      ResonatorCalibration = 761, // 0x000002F9
      Receiver1Amplitude = 762, // 0x000002FA
      Receiver2Amplitude = 763, // 0x000002FB
      SUS_ResonatorCalibration = 764, // 0x000002FC
      SUS_Receiver1Amplitude = 765, // 0x000002FD
      SUS_Receiver2Amplitude = 766, // 0x000002FE
      ClockCalibrationError = 767, // 0x000002FF
      ClockCalibrationChecked = 768, // 0x00000300
      RSSI_DeviceReceive = 769, // 0x00000301
      RSSI_DeviceReceiveMin = 770, // 0x00000302
      RSSI_DeviceReceiveMax = 771, // 0x00000303
      RSSI_DeviceTransmit = 772, // 0x00000304
      RSSI_DeviceTransmitMin = 773, // 0x00000305
      RSSI_DeviceTransmitMax = 774, // 0x00000306
      CurrentMaxLoRa = 775, // 0x00000307
      MinPressure = 776, // 0x00000308
      MaxPressure = 777, // 0x00000309
      PressureDrop = 778, // 0x0000030A
      AdjustmentType = 779, // 0x0000030B
      ErrorLimitType = 780, // 0x0000030C
      DiffCounts1 = 781, // 0x0000030D
      DiffCounts2 = 782, // 0x0000030E
      CyclesErrors1 = 783, // 0x0000030F
      CyclesErrors2 = 784, // 0x00000310
      MaximalAdjustment = 785, // 0x00000311
      ZeroFlowAdjustValueMin = 786, // 0x00000312
      ZeroFlowAdjustValueMax = 787, // 0x00000313
      SusUltrasonicUpTime = 788, // 0x00000314
      SusUltrasonicDownTime = 789, // 0x00000315
      SusUltrasonicTimeDiff = 790, // 0x00000316
      UltrasonicUpTime = 791, // 0x00000317
      UltrasonicDownTime = 792, // 0x00000318
      UltrasonicTimeDiff = 793, // 0x00000319
      Amplitude06Min = 794, // 0x0000031A
      Amplitude06Max = 795, // 0x0000031B
      Amplitude15Min = 796, // 0x0000031C
      Amplitude15Max = 797, // 0x0000031D
      Amplitude25Min = 798, // 0x0000031E
      Amplitude25Max = 799, // 0x0000031F
      Amplitude35Min = 800, // 0x00000320
      Amplitude35Max = 801, // 0x00000321
      Amplitude60Min = 802, // 0x00000322
      Amplitude60Max = 803, // 0x00000323
      Amplitude100Min = 804, // 0x00000324
      Amplitude100Max = 805, // 0x00000325
      MeterIDBody = 806, // 0x00000326
      TemperatureChangeMax = 807, // 0x00000327
      TestVoltage06 = 808, // 0x00000328
      TestVoltage15 = 809, // 0x00000329
      TestVoltage25 = 810, // 0x0000032A
      TestVoltage35 = 811, // 0x0000032B
      TestVoltage60 = 812, // 0x0000032C
      TestVoltage100 = 813, // 0x0000032D
      HasLeak = 814, // 0x0000032E
      ZeroFlowAdjustValueMinSmall = 815, // 0x0000032F
      ZeroFlowAdjustValueMaxSmall = 816, // 0x00000330
      ZeroFlowAdjustValueMinBig = 817, // 0x00000331
      ZeroFlowAdjustValueMaxBig = 818, // 0x00000332
      DN = 819, // 0x00000333
      PressureTestComponentSAPNr = 820, // 0x00000334
      VoltageLimitUsed = 821, // 0x00000335
      RequiredReceiveCount = 822, // 0x00000336
      ApprovalEndDate = 823, // 0x00000337
      TestIdLCDTest = 833, // 0x00000341
      DeltaRssiMaxTransmit = 834, // 0x00000342
      DeltaRssiMaxReceive = 835, // 0x00000343
      RadioTransmit_SendCount = 836, // 0x00000344
      RadioTransmit_ReceiveCount = 837, // 0x00000345
      RadioTransmit_TestCount = 838, // 0x00000346
      RadioReceive_SendCount = 839, // 0x00000347
      RadioReceive_ReceiveCount = 840, // 0x00000348
      RadioReceive_TestCount = 841, // 0x00000349
      FNN_MARKENNUMMERMESSEV = 842, // 0x0000034A
      FNN_MARKENNUMMER = 843, // 0x0000034B
      ApprovalRevision = 844, // 0x0000034C
      ReCertification = 845, // 0x0000034D
      CustomerSerialNumber = 846, // 0x0000034E
      MinScore = 847, // 0x0000034F
      MaxScore = 848, // 0x00000350
      Score0 = 849, // 0x00000351
      Score1 = 850, // 0x00000352
      Score2 = 851, // 0x00000353
      Score3 = 852, // 0x00000354
      Score4 = 853, // 0x00000355
      Score5 = 854, // 0x00000356
      Score6 = 855, // 0x00000357
      MeterInstallation = 1000, // 0x000003E8
      MeterRemove = 1001, // 0x000003E9
      MeterReadingError = 1002, // 0x000003EA
      HeatMeterVolumeInput = 1010, // 0x000003F2
      VolumeCounter1Input = 1011, // 0x000003F3
      VolumeCounter2Input = 1012, // 0x000003F4
      InputLineBreak = 1013, // 0x000003F5
      InputLineShortCircuit = 1014, // 0x000003F6
      HeatMeterEnergy = 1100, // 0x0000044C
      HeatMeterVolume = 1101, // 0x0000044D
      HeatMeterFlow = 1102, // 0x0000044E
      HeatMeterUpperTemperature = 1103, // 0x0000044F
      HeatMeterLowerTemperature = 1104, // 0x00000450
      HeatMeterTemperatureDifference = 1105, // 0x00000451
      HeatMeterPower = 1106, // 0x00000452
      HeatMeterNegativeEnergy = 1107, // 0x00000453
      Input_1_frequencyToHigh = 1108, // 0x00000454
      Input_2_frequencyToHigh = 1109, // 0x00000455
      Input_3_frequencyToHigh = 1110, // 0x00000456
      SelfTestError = 1111, // 0x00000457
      ReadingDayDataError = 1112, // 0x00000458
      InternalLoopMemoryError = 1113, // 0x00000459
      ExternalLoopMemoryError = 1115, // 0x0000045B
      ExternalEEPHardwareError = 1116, // 0x0000045C
      InternalEEPHardwareError = 1117, // 0x0000045D
      ResetError = 1118, // 0x0000045E
      ForwardSensorTooSmall = 1120, // 0x00000460
      ForwardSensorTooLarge = 1121, // 0x00000461
      ReturnSensorTooSmall = 1122, // 0x00000462
      ReturnSensorTooLarge = 1123, // 0x00000463
      FlowReturnSensorWrongWay = 1124, // 0x00000464
      BatteryUndervoltage = 1125, // 0x00000465
      ShortCircuitReturnSensor = 1126, // 0x00000466
      BrokenReturnSensor = 1127, // 0x00000467
      ShortCircuitFlowSensor = 1128, // 0x00000468
      BrokenFlowSensor = 1129, // 0x00000469
      OtherTempMessuringError = 1130, // 0x0000046A
      ElectricityEnergy = 1131, // 0x0000046B
      OperationHours = 1132, // 0x0000046C
      ElectricityPower = 1133, // 0x0000046D
      ElectricityMeterError = 1134, // 0x0000046E
      MeterDeinstallation = 1135, // 0x0000046F
      TimePoint = 1136, // 0x00000470
      HeatMeterTarifEnergy0 = 1137, // 0x00000471
      HeatMeterTarifEnergy1 = 1138, // 0x00000472
      DeviceDateTime = 1139, // 0x00000473
      DeviceNextEventDateTime = 1140, // 0x00000474
      FlowThresholdMin = 1200, // 0x000004B0
      FlowThresholdMax = 1201, // 0x000004B1
      dT_ThresholdMin = 1202, // 0x000004B2
      dT_ThresholdMax = 1203, // 0x000004B3
      HeatMeterUpper_MinThreshold = 1204, // 0x000004B4
      HeatMeterUpper_MaxThreshold = 1205, // 0x000004B5
      HeatMeterLower_MinThreshold = 1206, // 0x000004B6
      HeatMeterLower_MaxThreshold = 1207, // 0x000004B7
      WaterMeterVolume = 1208, // 0x000004B8
      WaterMeterVolumeWarmWater = 1209, // 0x000004B9
      WaterMeterVolumeColdWater = 1210, // 0x000004BA
      WaterMeterVolumeHotWater = 1211, // 0x000004BB
      HeatMeterVolumeHeatingSystem = 1212, // 0x000004BC
      HeatMeterVolumeWarmWater = 1213, // 0x000004BD
      WaterMeterVolumeEnergyRated = 1214, // 0x000004BE
      HeatMeterEnergyHeatingSystem = 1215, // 0x000004BF
      HeatMeterEnergyWarmWater = 1216, // 0x000004C0
      WaterMeterEnergyRated = 1217, // 0x000004C1
      WaterMeterVolumeAvgFlow = 1218, // 0x000004C2
      WaterMeterVolumeWarmWaterAvgFlow = 1219, // 0x000004C3
      WaterMeterVolumeColdWaterAvgFlow = 1220, // 0x000004C4
      WaterMeterVolumeHotWaterAvgFlow = 1221, // 0x000004C5
      HeatMeterVolumeAvgFlow = 1222, // 0x000004C6
      HeatMeterVolumeHeatingSystemAvgFlow = 1223, // 0x000004C7
      HeatMeterVolumeWarmWaterAvgFlow = 1224, // 0x000004C8
      WaterMeterVolumeEnergyRatedAvgFlow = 1225, // 0x000004C9
      HeatMeterPowerAvgFlow = 1226, // 0x000004CA
      HeatMeterPowerHeatingSystemAvgFlow = 1227, // 0x000004CB
      HeatMeterPowerWarmWaterAvgFlow = 1228, // 0x000004CC
      WaterMeterPowerEnergyRatedAvgFlow = 1229, // 0x000004CD
      GasMeterVolume = 1230, // 0x000004CE
      HeatMeterCurrentFlow = 1231, // 0x000004CF
      HeatMeterCurrentPower = 1232, // 0x000004D0
      HeatMeterMaxFlow = 1233, // 0x000004D1
      HeatMeterMaxPower = 1234, // 0x000004D2
      ElectricityEnergyDueDate = 1235, // 0x000004D3
      HeatMeterEnergyHeatingSystemDueDate = 1236, // 0x000004D4
      HeatMeterEnergyWarmWaterDueDate = 1237, // 0x000004D5
      WaterMeterEnergyRatedDueDate = 1238, // 0x000004D6
      GasMeterVolumeDueDate = 1239, // 0x000004D7
      WaterMeterVolumeHotWaterDueDate = 1240, // 0x000004D8
      WaterMeterVolumeColdWaterDueDate = 1241, // 0x000004D9
      HeatMeterVolumeHeatingSystemDueDate = 1242, // 0x000004DA
      HeatMeterVolumeWarmWaterDueDate = 1243, // 0x000004DB
      WaterMeterVolumeWarmWaterDueDate = 1244, // 0x000004DC
      WaterMeterVolumeDueDate = 1245, // 0x000004DD
      WaterMeterVolumeEnergyRatedDueDate = 1246, // 0x000004DE
      ElectricityEnergyLogger = 1247, // 0x000004DF
      HeatMeterEnergyHeatingSystemLogger = 1248, // 0x000004E0
      HeatMeterEnergyWarmWaterLogger = 1249, // 0x000004E1
      WaterMeterEnergyRatedLogger = 1250, // 0x000004E2
      GasMeterVolumeLogger = 1251, // 0x000004E3
      WaterMeterVolumeHotWaterLogger = 1252, // 0x000004E4
      WaterMeterVolumeColdWaterLogger = 1253, // 0x000004E5
      HeatMeterVolumeHeatingSystemLogger = 1254, // 0x000004E6
      HeatMeterVolumeWarmWaterLogger = 1255, // 0x000004E7
      WaterMeterVolumeWarmWaterLogger = 1256, // 0x000004E8
      WaterMeterVolumeLogger = 1257, // 0x000004E9
      WaterMeterVolumeEnergyRatedLogger = 1258, // 0x000004EA
      HeatMeterVolumeDueDate = 1259, // 0x000004EB
      HeatMeterVolumeLogger = 1260, // 0x000004EC
      HeatMeterEnergyDueDate = 1261, // 0x000004ED
      HeatMeterEnergyLogger = 1262, // 0x000004EE
      HeatMeterMaxPowerLogger = 1263, // 0x000004EF
      HeatMeterMaxPowerHeatingSystemLogger = 1264, // 0x000004F0
      HeatMeterMaxPowerEnergyRatedLogger = 1265, // 0x000004F1
      HeatMeterNegativeEnergyHeatingSystem = 1266, // 0x000004F2
      HeatMeterNegativeEnergyWarmWater = 1267, // 0x000004F3
      HeatMeterNegativeEnergyLogger = 1268, // 0x000004F4
      HeatMeterNegativeEnergyHeatingSystemLogger = 1269, // 0x000004F5
      HeatMeterNegativeEnergyWarmWaterLogger = 1270, // 0x000004F6
      HeatMeterNegativeEnergyDueDate = 1271, // 0x000004F7
      HeatMeterNegativeEnergyHeatingSystemDueDate = 1272, // 0x000004F8
      HeatMeterNegativeEnergyWarmWaterDueDate = 1273, // 0x000004F9
      SmokeDetectorA = 1274, // 0x000004FA
      SmokeDetectorB = 1275, // 0x000004FB
      SmokeDetectorC = 1276, // 0x000004FC
      NFCEnergyMin_NoLoad = 1277, // 0x000004FD
      NFCEnergyMax_NoLoad = 1278, // 0x000004FE
      NFCEnergyMin_WithLoad = 1279, // 0x000004FF
      NFCEnergyMax_WithLoad = 1280, // 0x00000500
      NFCEnergy_NoLoad = 1281, // 0x00000501
      NFCEnergy_WithLoad = 1282, // 0x00000502
      MicroLVoltageMaxA = 1283, // 0x00000503
      MicroLVoltageMinA = 1284, // 0x00000504
      MicroLVoltageMaxB = 1285, // 0x00000505
      MicroLVoltageMinB = 1286, // 0x00000506
      T2ReadBValue = 1287, // 0x00000507
      BValueStatus = 1288, // 0x00000508
      T2ReadAValue = 1289, // 0x00000509
      SDT5ReadAValue = 1290, // 0x0000050A
      SDT5ReadBValue = 1291, // 0x0000050B
      SDT5ReadCValue = 1292, // 0x0000050C
      APPKey = 1293, // 0x0000050D
      EDCLVoltageMaxA = 1294, // 0x0000050E
      EDCLVoltageMinA = 1295, // 0x0000050F
      EDCLVoltageMaxB = 1296, // 0x00000510
      EDCLVoltageMinB = 1297, // 0x00000511
      ResonatorCalibrationMin = 1298, // 0x00000512
      ResonatorCalibrationMax = 1299, // 0x00000513
      ReceiverAmplitudeMin = 1300, // 0x00000514
      ReceiverAmplitudeMax = 1301, // 0x00000515
      UltrasonicTimeMin = 1302, // 0x00000516
      UltrasonicTimeMax = 1303, // 0x00000517
      UltrasonicTimeDiffMin = 1304, // 0x00000518
      UltrasonicTimeDiffMax = 1305, // 0x00000519
      ResonatorCalibrationPair1 = 1306, // 0x0000051A
      Receiver1AmplitudePair1 = 1307, // 0x0000051B
      Receiver2AmplitudePair1 = 1308, // 0x0000051C
      UltrasonicUpTimePair1 = 1309, // 0x0000051D
      UltrasonicDownTimePair1 = 1310, // 0x0000051E
      UltrasonicTimeDiffPair1 = 1311, // 0x0000051F
      ResonatorCalibrationPair2 = 1312, // 0x00000520
      Receiver1AmplitudePair2 = 1313, // 0x00000521
      Receiver2AmplitudePair2 = 1314, // 0x00000522
      UltrasonicUpTimePair2 = 1315, // 0x00000523
      UltrasonicDownTimePair2 = 1316, // 0x00000524
      UltrasonicTimeDiffPair2 = 1317, // 0x00000525
      CurrentMaxA_CELL = 1318, // 0x00000526
      CurrentMinA_CELL = 1319, // 0x00000527
      CurrentMaxC_CELL = 1320, // 0x00000528
      CurrentMinC_CELL = 1321, // 0x00000529
      JoinEui = 1322, // 0x0000052A
      Text1 = 1323, // 0x0000052B
      Text2 = 1324, // 0x0000052C
      Text3 = 1325, // 0x0000052D
      Text4 = 1326, // 0x0000052E
      Text5 = 1327, // 0x0000052F
      MWMCustomerSN = 1328, // 0x00000530
      HyduploadNominalflow = 1329, // 0x00000531
      HyduploadNominal = 1330, // 0x00000532
      HydraulicTestbenchName = 1331, // 0x00000533
      HydraulicTester = 1332, // 0x00000534
      VolumnMeterSAP = 1333, // 0x00000535
      ActualMarginValue = 1334, // 0x00000536
      SDBasicReadA1Value = 1335, // 0x00000537
      SDBasicReadB1Value = 1336, // 0x00000538
      NBIoT_IMEI = 1337, // 0x00000539
      SIM_IMSI = 1338, // 0x0000053A
      VoltagePOEMin = 1339, // 0x0000053B
      VoltagePOEMax = 1340, // 0x0000053C
      Voltage12VMin = 1341, // 0x0000053D
      Voltage12VMax = 1342, // 0x0000053E
      CurrentPOEMinA = 1343, // 0x0000053F
      CurrentPOEMinB = 1344, // 0x00000540
      CurrentPOEMinC = 1345, // 0x00000541
      CurrentPOEMinD = 1346, // 0x00000542
      CurrentPOEMinE = 1347, // 0x00000543
      CurrentPOEMaxA = 1348, // 0x00000544
      CurrentPOEMaxB = 1349, // 0x00000545
      CurrentPOEMaxC = 1350, // 0x00000546
      CurrentPOEMaxD = 1351, // 0x00000547
      CurrentPOEMaxE = 1352, // 0x00000548
      Current12VMinA = 1353, // 0x00000549
      Current12VMinB = 1354, // 0x0000054A
      Current12VMinC = 1355, // 0x0000054B
      Current12VMinD = 1356, // 0x0000054C
      Current12VMinE = 1357, // 0x0000054D
      Current12VMaxA = 1358, // 0x0000054E
      Current12VMaxB = 1359, // 0x0000054F
      Current12VMaxC = 1360, // 0x00000550
      Current12VMaxD = 1361, // 0x00000551
      Current12VMaxE = 1362, // 0x00000552
      CurrentA = 1363, // 0x00000553
      CurrentB = 1364, // 0x00000554
      CurrentC = 1365, // 0x00000555
      CurrentD = 1366, // 0x00000556
      CurrentE = 1367, // 0x00000557
      VoltagePOEMinA = 1368, // 0x00000558
      VoltagePOEMinB = 1369, // 0x00000559
      VoltagePOEMinC = 1370, // 0x0000055A
      VoltagePOEMinD = 1371, // 0x0000055B
      VoltagePOEMinE = 1372, // 0x0000055C
      VoltagePOEMinF = 1373, // 0x0000055D
      VoltagePOEMaxA = 1374, // 0x0000055E
      VoltagePOEMaxB = 1375, // 0x0000055F
      VoltagePOEMaxC = 1376, // 0x00000560
      VoltagePOEMaxD = 1377, // 0x00000561
      VoltagePOEMaxE = 1378, // 0x00000562
      VoltagePOEMaxF = 1379, // 0x00000563
      Voltage12VMinA = 1380, // 0x00000564
      Voltage12VMinB = 1381, // 0x00000565
      Voltage12VMinC = 1382, // 0x00000566
      Voltage12VMinD = 1383, // 0x00000567
      Voltage12VMinE = 1384, // 0x00000568
      Voltage12VMinF = 1385, // 0x00000569
      Voltage12VMaxA = 1386, // 0x0000056A
      Voltage12VMaxB = 1387, // 0x0000056B
      Voltage12VMaxC = 1388, // 0x0000056C
      Voltage12VMaxD = 1389, // 0x0000056D
      Voltage12VMaxE = 1390, // 0x0000056E
      Voltage12VMaxF = 1391, // 0x0000056F
      VoltageA = 1392, // 0x00000570
      VoltageB = 1393, // 0x00000571
      VoltageC = 1394, // 0x00000572
      VoltageD = 1395, // 0x00000573
      VoltageE = 1396, // 0x00000574
      VoltageF = 1397, // 0x00000575
      LTESerialNr = 1398, // 0x00000576
      SignalStrengthMin = 1399, // 0x00000577
      SignalStrengthMax = 1400, // 0x00000578
      SignalErrorMin = 1401, // 0x00000579
      SignalErrorMax = 1402, // 0x0000057A
      SignalStrength = 1403, // 0x0000057B
      SignalError = 1404, // 0x0000057C
      MWMInternalSN = 1405, // 0x0000057D
      LteModemModel = 1406, // 0x0000057E
      GpioExpander = 1407, // 0x0000057F
      loraGatewayMac = 1408, // 0x00000580
      LoragatewayCCID = 1409, // 0x00000581
      LoragatewayMACID = 1410, // 0x00000582
      LoragatewayMACIDEnd = 1411, // 0x00000583
      MWMTestPointName = 1412, // 0x00000584
      MWMTestTime = 1413, // 0x00000585
      MWMTestTemperature = 1414, // 0x00000586
      MWMHalfFaultsCheck = 1415, // 0x00000587
      MWMDVGWCheck = 1416, // 0x00000588
      MWMImpulse = 1417, // 0x00000589
      MWMPulse = 1418, // 0x0000058A
      MWMTemperatureIn = 1419, // 0x0000058B
      MWMTemperatureOut = 1420, // 0x0000058C
      MWMTemperatureDifference = 1421, // 0x0000058D
      MWMWaterDensityStd = 1422, // 0x0000058E
      MWMWaterDensityCorrection = 1423, // 0x0000058F
      MWMWeight = 1424, // 0x00000590
      MWMBatchNo = 1425, // 0x00000591
      LPTIMState = 1426, // 0x00000592
      SIM_ICCID = 1427, // 0x00000593
      MesEONumber = 1428, // 0x00000594
      TemplateName = 1429, // 0x00000595
      TheFirstSerialNumber = 1430, // 0x00000596
      Totals = 1431, // 0x00000597
      UseActualValue = 1432, // 0x00000598
      TemplateVar1 = 1433, // 0x00000599
      TemplateVar2 = 1434, // 0x0000059A
      TemplateVar3 = 1435, // 0x0000059B
      TemplateVar4 = 1436, // 0x0000059C
      TemplateVar5 = 1437, // 0x0000059D
      TemplateVar6 = 1438, // 0x0000059E
      TemplateVar7 = 1439, // 0x0000059F
      TemplateVar8 = 1440, // 0x000005A0
      TemplateVar9 = 1441, // 0x000005A1
      TemplateVar10 = 1442, // 0x000005A2
      TemplateVar11 = 1443, // 0x000005A3
      TemplateVar12 = 1444, // 0x000005A4
      TemplateVar13 = 1445, // 0x000005A5
      TemplateVar14 = 1446, // 0x000005A6
      TemplateVar15 = 1447, // 0x000005A7
      TemplateVar16 = 1448, // 0x000005A8
      ETRUSerialNumber = 1449, // 0x000005A9
      FirmwareTimestamp = 1450, // 0x000005AA
      PasswordRoot = 1451, // 0x000005AB
      PasswordHTTPD = 1452, // 0x000005AC
      PasswordConfigstation = 1453, // 0x000005AD
      Certificate = 1454, // 0x000005AE
      NET_STATIC_IP = 1455, // 0x000005AF
      NET_STATIC_MASK = 1456, // 0x000005B0
      SMGW_IP = 1457, // 0x000005B1
      SMGW_PORT = 1458, // 0x000005B2
      CLSCENTER_IP = 1459, // 0x000005B3
      CLSCENTER_PORT = 1460, // 0x000005B4
      CLSKey = 1461, // 0x000005B5
      MWMTQ4 = 1462, // 0x000005B6
      HardwareVersion = 1463, // 0x000005B7
      Branding = 1464, // 0x000005B8
      MWMTQ3 = 1465, // 0x000005B9
      DevEUI = 1466, // 0x000005BA
      OEM_UserID = 20000, // 0x00004E20
      OEM_EquipmentID = 20001, // 0x00004E21
      OEM_PrintedSerialNumber = 20002, // 0x00004E22
      OEM_ZennerMaterialNumber = 20003, // 0x00004E23
      OEM_ZennerShortDescription = 20004, // 0x00004E24
      OEM_RadioTechnology = 20005, // 0x00004E25
      OEM_RadioProtocolMode = 20006, // 0x00004E26
      OEM_FirmwareVersion = 20007, // 0x00004E27
      OEM_LoRaWanVersion = 20008, // 0x00004E28
      OEM_JoinEUI = 20009, // 0x00004E29
      OEM_DevEUI = 20010, // 0x00004E2A
      OEM_AppKey = 20011, // 0x00004E2B
      OEM_DeviceActivationMode = 20012, // 0x00004E2C
      OEM_Frequency = 20013, // 0x00004E2D
      OEM_SubDeviceCount = 20014, // 0x00004E2E
      OEM_OrderNr = 20015, // 0x00004E2F
      OEM_MeterSN = 20016, // 0x00004E30
      OEM_IMEI = 20017, // 0x00004E31
      OEM_IMSI = 20018, // 0x00004E32
      OEM_ICCID = 20019, // 0x00004E33
      OEM_MaxMeterValue = 20020, // 0x00004E34
      OEM_HardwareVersion = 20021, // 0x00004E35
      OEM_RecordUploadTime = 20022, // 0x00004E36
      OEM_DeviceAccessAddress = 20023, // 0x00004E37
      OEM_BeginTransmittingTime = 20024, // 0x00004E38
      OEM_EndTransmittingTime = 20025, // 0x00004E39
      OEM_RSSI = 20026, // 0x00004E3A
      OEM_SNR = 20027, // 0x00004E3B
      OEM_MeterValue = 20028, // 0x00004E3C
      OEM_ValveStatus = 20029, // 0x00004E3D
      OEM_PulseValue = 20030, // 0x00004E3E
      OEM_SampleRate = 20031, // 0x00004E3F
      OEM_CalibrationParameter = 20032, // 0x00004E40
      OEM_BaudRate = 20033, // 0x00004E41
      OEM_CheckBit = 20034, // 0x00004E42
      OEM_CommunicationMode = 20035, // 0x00004E43
      OEM_PulseOutputMode = 20036, // 0x00004E44
      OEM_StorageMode = 20037, // 0x00004E45
      OEM_OutputPulseValue = 20038, // 0x00004E46
      OEM_UniqueID = 20039, // 0x00004E47
      MeterBackupBase = 50000, // 0x0000C350
      MeterBackupC5 = 50005, // 0x0000C355
      MeterBackupIUW = 50006, // 0x0000C356
      MeterBackupMax = 54095, // 0x0000D34F
      END = 100000, // 0x000186A0
    }

    public enum EquipmentIdentifier
    {
      Unknown,
      Card1,
      Card2,
      Channel1,
      Channel2,
      Channel3,
      Channel4,
      ReferenceSensor,
      ReferenceSensorChannel,
      RoomTemperatureSensor,
      RoomTemperatureSensorChannel,
      Bath1,
      Bath2,
      Bath3,
      Bath4,
      Bath5,
      Bath6,
      SensorBath1,
      SensorBath2,
      SensorBath3,
      SensorBath4,
      SensorBath5,
      SensorBath6,
      ChannelBath1,
      ChannelBath2,
      ChannelBath3,
      ChannelBath4,
      ChannelBath5,
      ChannelBath6,
      ResistanceEtalon,
    }

    public enum ReadingTypes
    {
      None = 0,
      MBus = 1,
      ZRMBusSerieI = 2,
      ZRMBusSerieII = 3,
      MBusCom = 4,
      RadioReceiver = 5,
      RadioModule = 6,
      ImpulsMeter = 7,
      multidata = 8,
      IZMxxx = 9,
      zelsius = 10, // 0x0000000A
      RDM8xxT = 11, // 0x0000000B
      RDM8xxR = 12, // 0x0000000C
      ZDFFile = 13, // 0x0000000D
      WaveFlowRadio = 14, // 0x0000000E
      WaveFlowDevice = 15, // 0x0000000F
      MBusPtPCom = 17, // 0x00000011
      EnumEND = 18, // 0x00000012
    }

    public enum SQLError
    {
      DuplicateEntry = -2147467259, // 0x80004005
      ConnectionError = -3, // 0xFFFFFFFD
      Unknown = -1, // 0xFFFFFFFF
      noError = 0,
      ConstraintError = 23505, // 0x00005BD1
    }
  }
}


--- MeterInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MeterInfo
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Text;

#nullable disable
namespace ZR_ClassLibrary
{
  [Serializable]
  public sealed class MeterInfo
  {
    public int MeterInfoID { get; set; }

    public int MeterHardwareID { get; set; }

    public int MeterTypeID { get; set; }

    public string PPSArtikelNr { get; set; }

    public string DefaultFunctionNr { get; set; }

    public string Description { get; set; }

    public int HardwareTypeID { get; set; }

    public override string ToString() => this.MeterInfoID.ToString() + " " + this.Description;

    public string ToString(int spaces)
    {
      StringBuilder stringBuilder1 = new StringBuilder();
      if (!string.IsNullOrEmpty(this.Description))
        stringBuilder1.Append("MeterInfoDescription: ".PadRight(spaces)).AppendLine(this.Description);
      StringBuilder stringBuilder2 = stringBuilder1.Append("HardwareTypeID: ".PadRight(spaces));
      int num = this.HardwareTypeID;
      string str1 = num.ToString();
      stringBuilder2.AppendLine(str1);
      StringBuilder stringBuilder3 = stringBuilder1.Append("MeterInfoID: ".PadRight(spaces));
      num = this.MeterInfoID;
      string str2 = num.ToString();
      stringBuilder3.AppendLine(str2);
      StringBuilder stringBuilder4 = stringBuilder1.Append("MeterHardwareID: ".PadRight(spaces));
      num = this.MeterHardwareID;
      string str3 = num.ToString();
      stringBuilder4.AppendLine(str3);
      StringBuilder stringBuilder5 = stringBuilder1.Append("MeterTypeID: ".PadRight(spaces));
      num = this.MeterTypeID;
      string str4 = num.ToString();
      stringBuilder5.AppendLine(str4);
      if (!string.IsNullOrEmpty(this.PPSArtikelNr))
        stringBuilder1.Append("PPSArtikelNr: ".PadRight(spaces)).AppendLine(this.PPSArtikelNr);
      return stringBuilder1.ToString();
    }

    public MeterInfo DeepCopy() => this.MemberwiseClone() as MeterInfo;
  }
}


--- MeterMath.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MeterMath
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Resources;
using System.Threading;

#nullable disable
namespace ZR_ClassLibrary
{
  public abstract class MeterMath
  {
    internal ResourceManager MyRes;
    public MeterMath.Errors LastError = MeterMath.Errors.NoError;
    public string LastErrorInfo = string.Empty;
    public static MeterMath.ENERGY_UNIT_DEFS[] EnergyUnits = new MeterMath.ENERGY_UNIT_DEFS[35]
    {
      new MeterMath.ENERGY_UNIT_DEFS("0.000000Wh", "0.000001Wh/I", "0.000000W", (short) 6, (short) 0, (sbyte) -1),
      new MeterMath.ENERGY_UNIT_DEFS("0.00000Wh", "0.00001Wh/I", "0.00000W", (short) 5, (short) 1, (sbyte) 0),
      new MeterMath.ENERGY_UNIT_DEFS("0.0000Wh", "0.0001Wh/I", "0.0000W", (short) 4, (short) 2, (sbyte) 1),
      new MeterMath.ENERGY_UNIT_DEFS("0.000Wh", "0.001Wh/I", "0.000W", (short) 3, (short) 3, (sbyte) 1),
      new MeterMath.ENERGY_UNIT_DEFS("0.00Wh", "0.01Wh/I", "0.00W", (short) 2, (short) 4, (sbyte) 2),
      new MeterMath.ENERGY_UNIT_DEFS("0.0Wh", "0.1Wh/I", "0.0W", (short) 1, (short) 5, (sbyte) 3),
      new MeterMath.ENERGY_UNIT_DEFS("0Wh", "1Wh/I", "0W", (short) 0, (short) 6, (sbyte) 4),
      new MeterMath.ENERGY_UNIT_DEFS("0.000kWh", "1Wh/I", "0.000kW", (short) 3, (short) 6, (sbyte) 5),
      new MeterMath.ENERGY_UNIT_DEFS("0.00kWh", "10Wh/I", "0.00kW", (short) 2, (short) 7, (sbyte) 6),
      new MeterMath.ENERGY_UNIT_DEFS("0.0kWh", "100Wh/I", "0.0kW", (short) 1, (short) 8, (sbyte) 7),
      new MeterMath.ENERGY_UNIT_DEFS("0kWh", "1kWh/I", "0kW", (short) 0, (short) 9, (sbyte) 8),
      new MeterMath.ENERGY_UNIT_DEFS("0.000MWh", "1kWh/I", "0.000MW", (short) 3, (short) 9, (sbyte) 9),
      new MeterMath.ENERGY_UNIT_DEFS("0.00MWh", "10kWh/I", "0.00MW", (short) 2, (short) 10, (sbyte) 10),
      new MeterMath.ENERGY_UNIT_DEFS("0.0MWh", "100kWh/I", "0.0MW", (short) 1, (short) 11, (sbyte) 11),
      new MeterMath.ENERGY_UNIT_DEFS("0MWh", "1MWh/I", "0MW", (short) 0, (short) 12, (sbyte) 12),
      new MeterMath.ENERGY_UNIT_DEFS("0.000GWh", "1MWh/I", "0.000GW", (short) 3, (short) 12, (sbyte) 13),
      new MeterMath.ENERGY_UNIT_DEFS("0.00GWh", "10MWh/I", "0.00GW", (short) 2, (short) 13, (sbyte) 14),
      new MeterMath.ENERGY_UNIT_DEFS("0.0GWh", "100MWh/I", "0.0GW", (short) 1, (short) 14, (sbyte) 15),
      new MeterMath.ENERGY_UNIT_DEFS("0GWh", "1GWh/I", "0GW", (short) 0, (short) 15, (sbyte) 16),
      new MeterMath.ENERGY_UNIT_DEFS("0.000J", "0.001J/I", "0.000J/h", (short) 3, (short) 16, (sbyte) 17),
      new MeterMath.ENERGY_UNIT_DEFS("0.00J", "0.01J/I", "0.00J/h", (short) 2, (short) 17, (sbyte) 18),
      new MeterMath.ENERGY_UNIT_DEFS("0.0J", "0.1J/I", "0.0J/h", (short) 1, (short) 18, (sbyte) 19),
      new MeterMath.ENERGY_UNIT_DEFS("0J", "1J/I", "0J/h", (short) 0, (short) 19, (sbyte) 20),
      new MeterMath.ENERGY_UNIT_DEFS("0.000kJ", "1J/I", "0.000kJ/h", (short) 3, (short) 19, (sbyte) 21),
      new MeterMath.ENERGY_UNIT_DEFS("0.00kJ", "10J/I", "0.00kJ/h", (short) 2, (short) 20, (sbyte) 22),
      new MeterMath.ENERGY_UNIT_DEFS("0.0kJ", "100J/I", "0.0kJ/h", (short) 1, (short) 21, (sbyte) 23),
      new MeterMath.ENERGY_UNIT_DEFS("0kJ", "1kJ/I", "0kJ/h", (short) 0, (short) 22, (sbyte) 24),
      new MeterMath.ENERGY_UNIT_DEFS("0.000MJ", "1kJ/I", "0.000MJ/h", (short) 3, (short) 22, (sbyte) 25),
      new MeterMath.ENERGY_UNIT_DEFS("0.00MJ", "10kJ/I", "0.00MJ/h", (short) 2, (short) 23, (sbyte) 26),
      new MeterMath.ENERGY_UNIT_DEFS("0.0MJ", "100kJ/I", "0.0MJ/h", (short) 1, (short) 24, (sbyte) 27),
      new MeterMath.ENERGY_UNIT_DEFS("0MJ", "1MJ/I", "0MJ/h", (short) 0, (short) 25, (sbyte) 28),
      new MeterMath.ENERGY_UNIT_DEFS("0.000GJ", "1MJ/I", "0.000GJ/h", (short) 3, (short) 25, (sbyte) 29),
      new MeterMath.ENERGY_UNIT_DEFS("0.00GJ", "10MJ/I", "0.00GJ/h", (short) 2, (short) 26, (sbyte) 30),
      new MeterMath.ENERGY_UNIT_DEFS("0.0GJ", "100MJ/I", "0.0GJ/h", (short) 1, (short) 27, (sbyte) 31),
      new MeterMath.ENERGY_UNIT_DEFS("0GJ", "1GJ/I", "0GJ/h", (short) 0, (short) 28, (sbyte) 32)
    };
    public static MeterMath.LINEAR_ENERGY_UNIT_DEFS[] LinearEnergyUnits = new MeterMath.LINEAR_ENERGY_UNIT_DEFS[29]
    {
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(1000000.0, (short) -1, (short) -1),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(100000.0, (short) -1, (short) -1),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(10000.0, (short) -1, (short) -1),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(1000.0, (short) 0, (short) 40),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(100.0, (short) 1, (short) 41),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(10.0, (short) 2, (short) 42),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(1.0, (short) 3, (short) 43),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(0.1, (short) 4, (short) 44),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(0.01, (short) 5, (short) 45),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(0.001, (short) 6, (short) 46),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(0.0001, (short) 7, (short) 47),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(1E-05, (short) -1, (short) -1),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(1E-06, (short) -1, (short) -1),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(1E-07, (short) -1, (short) -1),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(1E-08, (short) -1, (short) -1),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(1E-09, (short) -1, (short) -1),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(3600000.0, (short) -1, (short) -1),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(360000.0, (short) -1, (short) -1),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(36000.0, (short) -1, (short) -1),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(3600.0, (short) 8, (short) 48),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(360.0, (short) 9, (short) 49),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(36.0, (short) 10, (short) 50),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(3.6, (short) 11, (short) 51),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(0.36, (short) 12, (short) 52),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(0.036, (short) 13, (short) 53),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(0.0036, (short) 14, (short) 54),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(0.00036, (short) 15, (short) 55),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(3.6E-05, (short) -1, (short) -1),
      new MeterMath.LINEAR_ENERGY_UNIT_DEFS(3.6E-06, (short) -1, (short) -1)
    };
    public static MeterMath.VOLUME_UNIT_DEFS[] VolumeUnits = new MeterMath.VOLUME_UNIT_DEFS[11]
    {
      new MeterMath.VOLUME_UNIT_DEFS("0.000000L", "0.000001L/I", "0.000000L/h", (short) 6, (short) 0, (sbyte) 0),
      new MeterMath.VOLUME_UNIT_DEFS("0.00000L", "0.00001L/I", "0.00000L/h", (short) 5, (short) 1, (sbyte) 1),
      new MeterMath.VOLUME_UNIT_DEFS("0.0000L", "0.0001L/I", "0.0000L/h", (short) 4, (short) 2, (sbyte) 2),
      new MeterMath.VOLUME_UNIT_DEFS("0.000L", "0.001L/I", "0.000L/h", (short) 3, (short) 3, (sbyte) 3),
      new MeterMath.VOLUME_UNIT_DEFS("0.00L", "0.01L/I", "0.00L/h", (short) 2, (short) 4, (sbyte) 4),
      new MeterMath.VOLUME_UNIT_DEFS("0.0L", "0.1L/I", "0.0L/h", (short) 1, (short) 5, (sbyte) 5),
      new MeterMath.VOLUME_UNIT_DEFS("0L", "1L/I", "0L/h", (short) 0, (short) 6, (sbyte) 6),
      new MeterMath.VOLUME_UNIT_DEFS("0.000m\u00B3", "1L/I", "0.000m\u00B3/h", (short) 3, (short) 6, (sbyte) 7),
      new MeterMath.VOLUME_UNIT_DEFS("0.00m\u00B3", "10L/I", "0.00m\u00B3/h", (short) 2, (short) 7, (sbyte) 8),
      new MeterMath.VOLUME_UNIT_DEFS("0.0m\u00B3", "100L/I", "0.0m\u00B3/h", (short) 1, (short) 8, (sbyte) 9),
      new MeterMath.VOLUME_UNIT_DEFS("0m\u00B3", "1000L/I", "0m\u00B3/h", (short) 0, (short) 9, (sbyte) 10)
    };
    public static MeterMath.LINEAR_VOLUME_UNIT_DEFS[] LinearVolumeUnits = new MeterMath.LINEAR_VOLUME_UNIT_DEFS[10]
    {
      new MeterMath.LINEAR_VOLUME_UNIT_DEFS(1000000.0, (short) -1, (short) -1, "L/1000000"),
      new MeterMath.LINEAR_VOLUME_UNIT_DEFS(100000.0, (short) -1, (short) -1, "L/100000"),
      new MeterMath.LINEAR_VOLUME_UNIT_DEFS(10000.0, (short) -1, (short) -1, "L/10000"),
      new MeterMath.LINEAR_VOLUME_UNIT_DEFS(1000.0, (short) 16, (short) 56, "L/1000"),
      new MeterMath.LINEAR_VOLUME_UNIT_DEFS(100.0, (short) 17, (short) 57, "L/100"),
      new MeterMath.LINEAR_VOLUME_UNIT_DEFS(10.0, (short) 18, (short) 58, "L/10"),
      new MeterMath.LINEAR_VOLUME_UNIT_DEFS(1.0, (short) 19, (short) 59, "L"),
      new MeterMath.LINEAR_VOLUME_UNIT_DEFS(0.1, (short) 20, (short) 60, "10 * L"),
      new MeterMath.LINEAR_VOLUME_UNIT_DEFS(0.01, (short) 21, (short) 61, "100 * L"),
      new MeterMath.LINEAR_VOLUME_UNIT_DEFS(0.001, (short) 22, (short) 62, "m\u00B3")
    };
    public static MeterMath.INPUT_UNIT_DEFS[] InputUnits = new MeterMath.INPUT_UNIT_DEFS[44]
    {
      new MeterMath.INPUT_UNIT_DEFS("0.000", MeterMath.InputFrameType.Empty, (short) 3, (short) 0, (sbyte) 0),
      new MeterMath.INPUT_UNIT_DEFS("0.00", MeterMath.InputFrameType.Empty, (short) 2, (short) 1, (sbyte) 1),
      new MeterMath.INPUT_UNIT_DEFS("0.0", MeterMath.InputFrameType.Empty, (short) 1, (short) 2, (sbyte) 2),
      new MeterMath.INPUT_UNIT_DEFS("0", MeterMath.InputFrameType.Empty, (short) 0, (short) 3, (sbyte) 3),
      new MeterMath.INPUT_UNIT_DEFS("0.000Wh", MeterMath.InputFrameType.Energy, (short) 3, (short) 4, (sbyte) 4),
      new MeterMath.INPUT_UNIT_DEFS("0.00Wh", MeterMath.InputFrameType.Energy, (short) 2, (short) 5, (sbyte) 5),
      new MeterMath.INPUT_UNIT_DEFS("0.0Wh", MeterMath.InputFrameType.Energy, (short) 1, (short) 6, (sbyte) 6),
      new MeterMath.INPUT_UNIT_DEFS("0Wh", MeterMath.InputFrameType.Energy, (short) 0, (short) 7, (sbyte) 7),
      new MeterMath.INPUT_UNIT_DEFS("0.000kWh", MeterMath.InputFrameType.Energy, (short) 3, (short) 7, (sbyte) 8),
      new MeterMath.INPUT_UNIT_DEFS("0.00kWh", MeterMath.InputFrameType.Energy, (short) 2, (short) 8, (sbyte) 9),
      new MeterMath.INPUT_UNIT_DEFS("0.0kWh", MeterMath.InputFrameType.Energy, (short) 1, (short) 9, (sbyte) 10),
      new MeterMath.INPUT_UNIT_DEFS("0kWh", MeterMath.InputFrameType.Energy, (short) 0, (short) 10, (sbyte) 11),
      new MeterMath.INPUT_UNIT_DEFS("0.000MWh", MeterMath.InputFrameType.Energy, (short) 3, (short) 10, (sbyte) 12),
      new MeterMath.INPUT_UNIT_DEFS("0.00MWh", MeterMath.InputFrameType.Energy, (short) 2, (short) 11, (sbyte) 13),
      new MeterMath.INPUT_UNIT_DEFS("0.0MWh", MeterMath.InputFrameType.Energy, (short) 1, (short) 12, (sbyte) 14),
      new MeterMath.INPUT_UNIT_DEFS("0MWh", MeterMath.InputFrameType.Energy, (short) 0, (short) 13, (sbyte) 15),
      new MeterMath.INPUT_UNIT_DEFS("0.000GWh", MeterMath.InputFrameType.Energy, (short) 3, (short) 13, (sbyte) 16),
      new MeterMath.INPUT_UNIT_DEFS("0.00GWh", MeterMath.InputFrameType.Energy, (short) 2, (short) 14, (sbyte) 17),
      new MeterMath.INPUT_UNIT_DEFS("0.0GWh", MeterMath.InputFrameType.Energy, (short) 1, (short) 15, (sbyte) 18),
      new MeterMath.INPUT_UNIT_DEFS("0GWh", MeterMath.InputFrameType.Energy, (short) 0, (short) 16, (sbyte) 19),
      new MeterMath.INPUT_UNIT_DEFS("0.000J", MeterMath.InputFrameType.Energy, (short) 3, (short) 17, (sbyte) 20),
      new MeterMath.INPUT_UNIT_DEFS("0.00J", MeterMath.InputFrameType.Energy, (short) 2, (short) 18, (sbyte) 21),
      new MeterMath.INPUT_UNIT_DEFS("0.0J", MeterMath.InputFrameType.Energy, (short) 1, (short) 19, (sbyte) 22),
      new MeterMath.INPUT_UNIT_DEFS("0J", MeterMath.InputFrameType.Energy, (short) 0, (short) 20, (sbyte) 23),
      new MeterMath.INPUT_UNIT_DEFS("0.000kJ", MeterMath.InputFrameType.Energy, (short) 3, (short) 20, (sbyte) 24),
      new MeterMath.INPUT_UNIT_DEFS("0.00kJ", MeterMath.InputFrameType.Energy, (short) 2, (short) 21, (sbyte) 25),
      new MeterMath.INPUT_UNIT_DEFS("0.0kJ", MeterMath.InputFrameType.Energy, (short) 1, (short) 22, (sbyte) 26),
      new MeterMath.INPUT_UNIT_DEFS("0kJ", MeterMath.InputFrameType.Energy, (short) 0, (short) 23, (sbyte) 27),
      new MeterMath.INPUT_UNIT_DEFS("0.000MJ", MeterMath.InputFrameType.Energy, (short) 3, (short) 23, (sbyte) 28),
      new MeterMath.INPUT_UNIT_DEFS("0.00MJ", MeterMath.InputFrameType.Energy, (short) 2, (short) 24, (sbyte) 29),
      new MeterMath.INPUT_UNIT_DEFS("0.0MJ", MeterMath.InputFrameType.Energy, (short) 1, (short) 25, (sbyte) 30),
      new MeterMath.INPUT_UNIT_DEFS("0MJ", MeterMath.InputFrameType.Energy, (short) 0, (short) 26, (sbyte) 31),
      new MeterMath.INPUT_UNIT_DEFS("0.000GJ", MeterMath.InputFrameType.Energy, (short) 3, (short) 26, (sbyte) 32),
      new MeterMath.INPUT_UNIT_DEFS("0.00GJ", MeterMath.InputFrameType.Energy, (short) 2, (short) 27, (sbyte) 33),
      new MeterMath.INPUT_UNIT_DEFS("0.0GJ", MeterMath.InputFrameType.Energy, (short) 1, (short) 28, (sbyte) 34),
      new MeterMath.INPUT_UNIT_DEFS("0GJ", MeterMath.InputFrameType.Energy, (short) 0, (short) 29, (sbyte) 35),
      new MeterMath.INPUT_UNIT_DEFS("0.000L", MeterMath.InputFrameType.Volume, (short) 3, (short) 30, (sbyte) 36),
      new MeterMath.INPUT_UNIT_DEFS("0.00L", MeterMath.InputFrameType.Volume, (short) 2, (short) 31, (sbyte) 37),
      new MeterMath.INPUT_UNIT_DEFS("0.0L", MeterMath.InputFrameType.Volume, (short) 1, (short) 32, (sbyte) 38),
      new MeterMath.INPUT_UNIT_DEFS("0L", MeterMath.InputFrameType.Volume, (short) 0, (short) 33, (sbyte) 39),
      new MeterMath.INPUT_UNIT_DEFS("0.000m\u00B3", MeterMath.InputFrameType.Volume, (short) 3, (short) 33, (sbyte) 40),
      new MeterMath.INPUT_UNIT_DEFS("0.00m\u00B3", MeterMath.InputFrameType.Volume, (short) 2, (short) 34, (sbyte) 41),
      new MeterMath.INPUT_UNIT_DEFS("0.0m\u00B3", MeterMath.InputFrameType.Volume, (short) 1, (short) 35, (sbyte) 42),
      new MeterMath.INPUT_UNIT_DEFS("0m\u00B3", MeterMath.InputFrameType.Volume, (short) 0, (short) 36, (sbyte) 43)
    };
    public static MeterMath.EMPTY_UNIT_DEFS[] EmptyUnits = new MeterMath.EMPTY_UNIT_DEFS[8]
    {
      new MeterMath.EMPTY_UNIT_DEFS("0.0000000", (short) 7, (short) 0),
      new MeterMath.EMPTY_UNIT_DEFS("0.000000", (short) 6, (short) 1),
      new MeterMath.EMPTY_UNIT_DEFS("0.00000", (short) 5, (short) 2),
      new MeterMath.EMPTY_UNIT_DEFS("0.0000", (short) 4, (short) 3),
      new MeterMath.EMPTY_UNIT_DEFS("0.000", (short) 3, (short) 4),
      new MeterMath.EMPTY_UNIT_DEFS("0.00", (short) 2, (short) 5),
      new MeterMath.EMPTY_UNIT_DEFS("0.0", (short) 1, (short) 6),
      new MeterMath.EMPTY_UNIT_DEFS("0", (short) 0, (short) 7)
    };
    public static MeterMath.LINEAR_EMPTY_UNIT_DEFS[] LinearEmptyUnits = new MeterMath.LINEAR_EMPTY_UNIT_DEFS[8]
    {
      new MeterMath.LINEAR_EMPTY_UNIT_DEFS(10000000.0, (short) -1),
      new MeterMath.LINEAR_EMPTY_UNIT_DEFS(1000000.0, (short) -1),
      new MeterMath.LINEAR_EMPTY_UNIT_DEFS(100000.0, (short) -1),
      new MeterMath.LINEAR_EMPTY_UNIT_DEFS(10000.0, (short) -1),
      new MeterMath.LINEAR_EMPTY_UNIT_DEFS(1000.0, (short) 16),
      new MeterMath.LINEAR_EMPTY_UNIT_DEFS(100.0, (short) 17),
      new MeterMath.LINEAR_EMPTY_UNIT_DEFS(10.0, (short) 18),
      new MeterMath.LINEAR_EMPTY_UNIT_DEFS(1.0, (short) 19)
    };

    public string getLastErrorString()
    {
      string name = this.LastError.ToString();
      string lastErrorString = this.MyRes.GetString(name);
      if (lastErrorString == null || lastErrorString.Length == 0)
        lastErrorString = "MeterMath error: " + name;
      if (this.LastErrorInfo.Length > 0)
      {
        lastErrorString = lastErrorString + ZR_Constants.SystemNewLine + this.LastErrorInfo;
        this.LastErrorInfo = string.Empty;
      }
      this.LastError = MeterMath.Errors.NoError;
      return lastErrorString;
    }

    public MeterMath()
    {
      this.MyRes = new ResourceManager("ZR_ClassLibrary.MeterMathRes", typeof (MeterMath).Assembly);
    }

    public virtual double calcPulsValue(int PulsValue, string UnitString)
    {
      throw new ApplicationException("Base class function my not be used!");
    }

    public virtual double calcPulsValue(double PulsValue, double Vol_SumExpo, string VolumeUnit)
    {
      throw new ApplicationException("Base class function my not be used!");
    }

    public virtual string GetUnitString(byte[] EEP_Data, int FrameOffset)
    {
      throw new ApplicationException("Base class function my not be used!");
    }

    public virtual bool GetDisplay(
      ByteField EEProm,
      uint EEPromSize,
      uint EEPromStartOffset,
      out bool[] Display)
    {
      throw new ApplicationException("Base class function my not be used!");
    }

    public virtual bool GetDisplay(
      byte[] EEProm,
      uint EEPromSize,
      uint EEPromStartOffset,
      out bool[] Display)
    {
      throw new ApplicationException("Base class function my not be used!");
    }

    public virtual bool CalculateMeterSettings(long FirmwareVersion)
    {
      throw new ApplicationException("Base class function my not be used!");
    }

    public virtual bool GetSpecialOverrideFrame(
      FrameTypes Type,
      string SpecialOptions,
      out MeterMath.FrameDescription TheFrame,
      out int Shift)
    {
      throw new ApplicationException("Base class function my not be used!");
    }

    public static string GetUnitText(string DisplayValue)
    {
      for (int index = 0; index < DisplayValue.Length; ++index)
      {
        if (DisplayValue[index] != '0' && DisplayValue[index] != '.')
          return DisplayValue.Substring(index);
      }
      return string.Empty;
    }

    public static string GetUnitMinValue(string DisplayValue)
    {
      for (int index = 0; index < DisplayValue.Length; ++index)
      {
        bool flag1 = index == DisplayValue.Length - 1;
        bool flag2 = DisplayValue[index] == '0';
        bool flag3 = DisplayValue[index] == '.';
        if (((flag2 ? 0 : (!flag3 ? 1 : 0)) | (flag1 ? 1 : 0)) != 0)
          return (DisplayValue.Substring(0, index - (flag1 ? 0 : 1)) + "1").Replace(".", Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
      }
      return string.Empty;
    }

    public static Decimal GetWhFactorFromUnitText(string UnitText)
    {
      int energyUnitIndex = MeterMath.GetEnergyUnitIndex("0" + UnitText);
      return energyUnitIndex < 0 ? -1M : (Decimal) MeterMath.LinearEnergyUnits[(int) MeterMath.EnergyUnits[energyUnitIndex].LinearUnitIndex].UnitFactorFromWh;
    }

    public static Decimal GetWhFactor(string DisplayValue)
    {
      int energyUnitIndex = MeterMath.GetEnergyUnitIndex(DisplayValue);
      return energyUnitIndex < 0 ? -1M : (Decimal) MeterMath.LinearEnergyUnits[(int) MeterMath.EnergyUnits[energyUnitIndex].LinearUnitIndex].UnitFactorFromWh;
    }

    public static int GetEnergyUnitIndex(string DisplayValue)
    {
      for (int energyUnitIndex = 0; energyUnitIndex < MeterMath.EnergyUnits.Length; ++energyUnitIndex)
      {
        if (MeterMath.EnergyUnits[energyUnitIndex].EnergieUnitString.ToUpper() == DisplayValue.ToUpper())
          return energyUnitIndex;
      }
      return -1;
    }

    public static string GetEnergyUnitOfID(int OverwriteID)
    {
      string energyUnitOfId = "";
      for (int index = 0; index < MeterMath.EnergyUnits.Length; ++index)
      {
        if ((int) MeterMath.EnergyUnits[index].OverwriteID == OverwriteID)
        {
          energyUnitOfId = MeterMath.EnergyUnits[index].EnergieUnitString;
          break;
        }
      }
      return energyUnitOfId;
    }

    public static int GetEnergyUnitOverwriteID(string DisplayValue)
    {
      for (int index = 0; index < MeterMath.EnergyUnits.Length; ++index)
      {
        if (MeterMath.EnergyUnits[index].EnergieUnitString.ToUpper() == DisplayValue.ToUpper())
          return (int) MeterMath.EnergyUnits[index].OverwriteID;
      }
      return -1;
    }

    public static string GetTrueEnergyUnitString(string TheString)
    {
      for (int index = 0; index < MeterMath.EnergyUnits.Length; ++index)
      {
        if (MeterMath.EnergyUnits[index].EnergieUnitString.ToUpper() == TheString.ToUpper())
          return MeterMath.EnergyUnits[index].EnergieUnitString;
      }
      return "";
    }

    public static int GetEnergyUnitIndexFromLiniarUnitIndex(int LinearUnitIndex)
    {
      for (int index = 0; index < MeterMath.EnergyUnits.Length; ++index)
      {
        if ((int) MeterMath.EnergyUnits[index].LinearUnitIndex == LinearUnitIndex)
          return index == MeterMath.EnergyUnits.Length - 1 || (int) MeterMath.EnergyUnits[index + 1].LinearUnitIndex != LinearUnitIndex ? index : index + 1;
      }
      return -1;
    }

    public static Decimal GetLiterFactorFromUnitText(string UnitText)
    {
      string DisplayValue = "0" + UnitText;
      int volumeUnitIndex = MeterMath.GetVolumeUnitIndex(DisplayValue);
      if (volumeUnitIndex >= 0)
        return (Decimal) MeterMath.LinearVolumeUnits[(int) MeterMath.VolumeUnits[volumeUnitIndex].LinearUnitIndex].UnitFactorFromLiter;
      int energyUnitIndex = MeterMath.GetEnergyUnitIndex(DisplayValue);
      if (energyUnitIndex >= 0)
        return (Decimal) MeterMath.LinearEnergyUnits[(int) MeterMath.EnergyUnits[energyUnitIndex].LinearUnitIndex].UnitFactorFromWh;
      int emptyUnitIndex = MeterMath.GetEmptyUnitIndex(DisplayValue);
      return emptyUnitIndex >= 0 ? (Decimal) MeterMath.LinearEmptyUnits[(int) MeterMath.EmptyUnits[emptyUnitIndex].LinearUnitIndex].UnitFactorFromEmpty : 1M;
    }

    public static Decimal GetLiterFactor(string DisplayValue)
    {
      int volumeUnitIndex = MeterMath.GetVolumeUnitIndex(DisplayValue);
      return volumeUnitIndex < 1 ? -1M : (Decimal) MeterMath.LinearVolumeUnits[(int) MeterMath.VolumeUnits[volumeUnitIndex].LinearUnitIndex].UnitFactorFromLiter;
    }

    public static int GetVolumeUnitIndex(string DisplayValue)
    {
      for (int volumeUnitIndex = 0; volumeUnitIndex < MeterMath.VolumeUnits.Length; ++volumeUnitIndex)
      {
        if (MeterMath.VolumeUnits[volumeUnitIndex].VolumeUnitString.ToUpper() == DisplayValue.ToUpper())
          return volumeUnitIndex;
      }
      return -1;
    }

    public static string GetTrueVolumeUnitString(string TheString)
    {
      for (int index = 0; index < MeterMath.VolumeUnits.Length; ++index)
      {
        if (MeterMath.VolumeUnits[index].VolumeUnitString.ToUpper() == TheString.ToUpper())
          return MeterMath.VolumeUnits[index].VolumeUnitString;
      }
      return "";
    }

    public static string GetVolumeUnitOfID(int OverwriteID)
    {
      string volumeUnitOfId = "";
      for (int index = 0; index < MeterMath.VolumeUnits.Length; ++index)
      {
        if ((int) MeterMath.VolumeUnits[index].OverwriteID == OverwriteID)
          volumeUnitOfId = MeterMath.VolumeUnits[index].VolumeUnitString;
      }
      return volumeUnitOfId;
    }

    public int GetVolumeUnitIndexFromLiniarUnitIndex(int LinearUnitIndex)
    {
      for (int index = 0; index < MeterMath.VolumeUnits.Length; ++index)
      {
        if ((int) MeterMath.VolumeUnits[index].LinearUnitIndex == LinearUnitIndex)
          return index == MeterMath.VolumeUnits.Length - 1 || (int) MeterMath.VolumeUnits[index + 1].LinearUnitIndex != LinearUnitIndex ? index : index + 1;
      }
      return -1;
    }

    public static int GetInputUnitIndex(string DisplayValue)
    {
      for (int inputUnitIndex = 0; inputUnitIndex < MeterMath.InputUnits.Length; ++inputUnitIndex)
      {
        if (MeterMath.InputUnits[inputUnitIndex].InputUnitString.ToUpper() == DisplayValue.ToUpper())
          return inputUnitIndex;
      }
      return -1;
    }

    public static string GetInputUnitOfID(int OverwriteID)
    {
      string inputUnitOfId = "";
      for (int index = 0; index < MeterMath.InputUnits.Length; ++index)
      {
        if ((int) MeterMath.InputUnits[index].OverwriteID == OverwriteID)
          inputUnitOfId = MeterMath.InputUnits[index].InputUnitString;
      }
      return inputUnitOfId;
    }

    public static int GetEmptyUnitIndex(string DisplayValue)
    {
      for (int emptyUnitIndex = 0; emptyUnitIndex < MeterMath.EmptyUnits.Length; ++emptyUnitIndex)
      {
        if (MeterMath.EmptyUnits[emptyUnitIndex].EmptyUnitString.ToUpper() == DisplayValue.ToUpper())
          return emptyUnitIndex;
      }
      return -1;
    }

    public enum Errors
    {
      NoError,
      MathematicError,
      VolumeUnitNotAvailable,
      EnergyUnitNotAvailable,
      PowerUnitNotAvailable,
      PowerOutOfRange,
      FlowOutOfRange,
      PulsValueOutOfRange,
      Input1UnitNotAvailable,
      Input2UnitNotAvailable,
      Input1ToManyDecimalPlaces,
      Input2ToManyDecimalPlaces,
      Input1ToOutOfRange,
      Input2ToOutOfRange,
      InternalError,
    }

    public struct ENERGY_UNIT_DEFS(
      string EnergieUnitStringIn,
      string EnergiePulsValueStringIn,
      string PowerUnitStringIn,
      short AfterPointDigitsIn,
      short LinearUnitIndexIn,
      sbyte OverwriteIDIn)
    {
      public string EnergieUnitString = EnergieUnitStringIn;
      public string EnergiePulsValueString = EnergiePulsValueStringIn;
      public string PowerUnitString = PowerUnitStringIn;
      public short AfterPointDigits = AfterPointDigitsIn;
      public short LinearUnitIndex = LinearUnitIndexIn;
      public sbyte OverwriteID = OverwriteIDIn;
    }

    public struct LINEAR_ENERGY_UNIT_DEFS(
      double UnitFactorFromWhIn,
      short MBusEnergieVIF_In,
      short MBusPowerVIF_In)
    {
      public double UnitFactorFromWh = UnitFactorFromWhIn;
      public short MBusEnergieVIF = MBusEnergieVIF_In;
      public short MBusPowerVIF = MBusPowerVIF_In;
    }

    protected struct ENERGY_FRAMES(string[] EnergieFrameIn, string[] PowerFrameIn)
    {
      public string[] EnergyFrame = EnergieFrameIn;
      public string[] PowerFrame = PowerFrameIn;
    }

    protected struct BC_FRAMES(string[] BC_FrameIn)
    {
      public string[] BC_Frame = BC_FrameIn;
    }

    public struct VOLUME_UNIT_DEFS(
      string VolumeUnitStringIn,
      string VolumePulsValueIn,
      string FlowUnitStringIn,
      short AfterPointDigitsIn,
      short LinearUnitIndexIn,
      sbyte OverwriteIDIn)
    {
      public string VolumeUnitString = VolumeUnitStringIn;
      public string VolumePulsValue = VolumePulsValueIn;
      public string FlowUnitString = FlowUnitStringIn;
      public short AfterPointDigits = AfterPointDigitsIn;
      public short LinearUnitIndex = LinearUnitIndexIn;
      public sbyte OverwriteID = OverwriteIDIn;
    }

    public struct LINEAR_VOLUME_UNIT_DEFS(
      double UnitFactorFromLiterIn,
      short MBusVolumeVIF_In,
      short MBusFlowVIF_In,
      string VisibleUnit_In)
    {
      public double UnitFactorFromLiter = UnitFactorFromLiterIn;
      public short MBusVolumeVIF = MBusVolumeVIF_In;
      public short MBusFlowVIF = MBusFlowVIF_In;
      public string VisibleUnit = VisibleUnit_In;
    }

    public struct VOLUME_FRAMES(string[] VolumeFrameIn, string[] FlowFrameIn)
    {
      public string[] VolumeFrame = VolumeFrameIn;
      public string[] FlowFrame = FlowFrameIn;
    }

    public enum InputFrameType
    {
      Empty,
      Energy,
      Volume,
    }

    public struct INPUT_UNIT_DEFS(
      string InputUnitStringIn,
      MeterMath.InputFrameType FrameTypeIn,
      short AfterPointDigitsIn,
      short LinearUnitIndexIn,
      sbyte OverwriteIDIn)
    {
      public string InputUnitString = InputUnitStringIn;
      public MeterMath.InputFrameType FrameType = FrameTypeIn;
      public short AfterPointDigits = AfterPointDigitsIn;
      public short LinearUnitIndex = LinearUnitIndexIn;
      public sbyte OverwriteID = OverwriteIDIn;
    }

    protected struct INPUT_FRAMES(string[] InputFrameIn)
    {
      public string[] InputFrame = InputFrameIn;
    }

    public struct EMPTY_UNIT_DEFS(
      string EmptyUnitStringIn,
      short AfterPointDigitsIn,
      short LinearUnitIndexIn)
    {
      public string EmptyUnitString = EmptyUnitStringIn;
      public short AfterPointDigits = AfterPointDigitsIn;
      public short LinearUnitIndex = LinearUnitIndexIn;
    }

    public struct LINEAR_EMPTY_UNIT_DEFS(double UnitFactorFromEmptyIn, short MBusEmptyVIF_In)
    {
      public double UnitFactorFromEmpty = UnitFactorFromEmptyIn;
      public short MBusEmptyVIF = MBusEmptyVIF_In;
    }

    public struct EMPTY_FRAMES(string[] EmptyFrameIn)
    {
      public string[] EmptyFrame = EmptyFrameIn;
    }

    public class FrameDescription
    {
      public FrameTypes Type;
      public ZR_Constants.FrameNames FrameName;
      private string NewLine = Environment.NewLine;
      public string FrameType;
      public string[] FrameByteDescription;
      public byte[] FrameByteList;

      private FrameDescription()
      {
      }

      public FrameDescription(string TypeIn, string[] ByteDescription)
      {
        this.FrameByteDescription = (string[]) null;
        this.FrameByteList = (byte[]) null;
        this.Type = FrameTypes.None;
        this.FrameName = ZR_Constants.FrameNames.FrameCode;
        try
        {
          this.FrameName = (ZR_Constants.FrameNames) Enum.Parse(typeof (ZR_Constants.FrameNames), TypeIn, true);
          switch (this.FrameName)
          {
            case ZR_Constants.FrameNames.VolumeFrame:
              this.Type = FrameTypes.Volume;
              break;
            case ZR_Constants.FrameNames.FlowFrame:
              this.Type = FrameTypes.Flow;
              break;
            case ZR_Constants.FrameNames.EnergyFrame:
              this.Type = FrameTypes.Energy;
              break;
            case ZR_Constants.FrameNames.PowerFrame:
              this.Type = FrameTypes.Power;
              break;
            case ZR_Constants.FrameNames.FrameCode:
              this.Type = FrameTypes.Standard;
              break;
            case ZR_Constants.FrameNames.Input1Frame:
              this.Type = FrameTypes.Input1;
              break;
            case ZR_Constants.FrameNames.Input2Frame:
              this.Type = FrameTypes.Input2;
              break;
            case ZR_Constants.FrameNames.Input1ImpValFrame:
              this.Type = FrameTypes.Input1ImpVal;
              break;
            case ZR_Constants.FrameNames.Input2ImpValFrame:
              this.Type = FrameTypes.Input2ImpVal;
              break;
            case ZR_Constants.FrameNames.BCFrame:
              this.Type = FrameTypes.BC;
              break;
            case ZR_Constants.FrameNames.ImpulsValueFrame:
              this.Type = FrameTypes.ImpulsValue;
              break;
          }
        }
        catch
        {
        }
        bool flag = true;
        this.FrameType = TypeIn;
        this.FrameByteDescription = new string[ByteDescription.Length];
        for (int index = 0; index < ByteDescription.Length; ++index)
        {
          if (ByteDescription[index] != string.Empty)
            flag = false;
          this.FrameByteDescription[index] = ByteDescription[index];
        }
        if (flag)
          throw new ArgumentException("Fehler in FrameDescription:" + ZR_Constants.SystemNewLine + "Einheit nicht darstellbar!" + ZR_Constants.SystemNewLine + "FrameType : " + TypeIn);
      }

      public MeterMath.FrameDescription Clone()
      {
        MeterMath.FrameDescription frameDescription = new MeterMath.FrameDescription();
        frameDescription.Type = this.Type;
        frameDescription.FrameName = this.FrameName;
        frameDescription.FrameType = this.FrameType;
        frameDescription.FrameByteDescription = (string[]) this.FrameByteDescription.Clone();
        if (this.FrameByteList != null)
          frameDescription.FrameByteList = (byte[]) this.FrameByteList.Clone();
        return frameDescription;
      }
    }
  }
}


--- MeterMathRes.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MeterMathRes
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Resources;
using System.Runtime.CompilerServices;

#nullable disable
namespace ZR_ClassLibrary
{
  [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
  [DebuggerNonUserCode]
  [CompilerGenerated]
  internal class MeterMathRes
  {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;

    internal MeterMathRes()
    {
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static ResourceManager ResourceManager
    {
      get
      {
        if (MeterMathRes.resourceMan == null)
          MeterMathRes.resourceMan = new ResourceManager("ZR_ClassLibrary.MeterMathRes", typeof (MeterMathRes).Assembly);
        return MeterMathRes.resourceMan;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static CultureInfo Culture
    {
      get => MeterMathRes.resourceCulture;
      set => MeterMathRes.resourceCulture = value;
    }

    internal static string EnergyUnitNotAvailable
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (EnergyUnitNotAvailable), MeterMathRes.resourceCulture);
      }
    }

    internal static string FlowOutOfRange
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (FlowOutOfRange), MeterMathRes.resourceCulture);
      }
    }

    internal static string Input1ToManyDecimalPlaces
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (Input1ToManyDecimalPlaces), MeterMathRes.resourceCulture);
      }
    }

    internal static string Input1ToOutOfRange
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (Input1ToOutOfRange), MeterMathRes.resourceCulture);
      }
    }

    internal static string Input1UnitNotAvailable
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (Input1UnitNotAvailable), MeterMathRes.resourceCulture);
      }
    }

    internal static string Input2ToManyDecimalPlaces
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (Input2ToManyDecimalPlaces), MeterMathRes.resourceCulture);
      }
    }

    internal static string Input2ToOutOfRange
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (Input2ToOutOfRange), MeterMathRes.resourceCulture);
      }
    }

    internal static string Input2UnitNotAvailable
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (Input2UnitNotAvailable), MeterMathRes.resourceCulture);
      }
    }

    internal static string MathematicError
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (MathematicError), MeterMathRes.resourceCulture);
      }
    }

    internal static string NoError
    {
      get => MeterMathRes.ResourceManager.GetString(nameof (NoError), MeterMathRes.resourceCulture);
    }

    internal static string PowerOutOfRange
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (PowerOutOfRange), MeterMathRes.resourceCulture);
      }
    }

    internal static string PowerUnitNotAvailable
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (PowerUnitNotAvailable), MeterMathRes.resourceCulture);
      }
    }

    internal static string PulsValueOutOfRange
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (PulsValueOutOfRange), MeterMathRes.resourceCulture);
      }
    }

    internal static string VolumeUnitNotAvailable
    {
      get
      {
        return MeterMathRes.ResourceManager.GetString(nameof (VolumeUnitNotAvailable), MeterMathRes.resourceCulture);
      }
    }
  }
}


--- MeterResources.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MeterResources
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum MeterResources
  {
    Zelsius,
    Energy,
    CEnergy,
    LCDZ1,
    opto,
    seriell,
    PT500,
    NoResource,
    CustomerIdFunction,
    CustomerId,
    Out1,
    Out2,
    Inp1,
    Inp2,
    InOut1,
    InOut2,
    Inp1On,
    Inp2On,
    Out1On,
    Out2On,
    Inp1Factor,
    Inp2Factor,
    Inp1IdNumber,
    Inp2IdNumber,
    EnToOut1,
    SpecialToOut1,
    EnToOut2,
    CEnToOut2,
    VolToOut2,
    ErrToOut2,
    SpecialToOut2,
    Inp1MUnit,
    Inp2MUnit,
    Inp1Type,
    Inp2Type,
    DueDateFunction,
    DueDate,
    DueDateEnergy,
    DueDateEnergyConsumtion,
    DueDateLastEnergy,
    DueDateCEnergy,
    DueDateLastCEnergy,
    DueDateVolume,
    DueDateLastVolume,
    DueDateInp1Value,
    DueDateInp1LastValue,
    DueDateInp2Value,
    DueDateInp2LastValue,
    MBus,
    ZRBus,
    RS232,
    ZMOD,
    TAR_Energy,
    NeedEndOfBattery,
    NeedEndOfCalibration,
    EndOfBattery,
    EndOfCalibration,
  }
}


--- MeterType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MeterType
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class MeterType
  {
    public int MeterTypeID;
    public string MTypeTableName;
    public string Typename;
    public DateTime GenerateDate;
    public string Description;

    public override string ToString() => this.Description;
  }
}


--- MeterTypeData.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MeterTypeData
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class MeterTypeData
  {
    public int MeterTypeID;
    public byte[] EEPdata;
    public string TypeOverrideString;

    public override string ToString() => this.MeterTypeID.ToString();
  }
}


--- MeterUnits.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MeterUnits
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;

#nullable disable
namespace ZR_ClassLibrary
{
  public static class MeterUnits
  {
    public static ResolutionData[] AllUnits = new ResolutionData[50]
    {
      new ResolutionData("0.0000L", "m\u00B3", 0.001M, 10000M, -1),
      new ResolutionData("0.000L", "m\u00B3", 0.001M, 1000M, 16),
      new ResolutionData("0.00L", "m\u00B3", 0.001M, 100M, 17),
      new ResolutionData("0.0L", "m\u00B3", 0.001M, 10M, 18),
      new ResolutionData("0L", "m\u00B3", 0.001M, 1M, 19),
      new ResolutionData("0.000m\u00B3", "m\u00B3", 1M, 1000M, 19),
      new ResolutionData("0.00m\u00B3", "m\u00B3", 1M, 100M, 20),
      new ResolutionData("0.0m\u00B3", "m\u00B3", 1M, 10M, 21),
      new ResolutionData("0m\u00B3", "m\u00B3", 1M, 1M, 22),
      new ResolutionData("0.000Wh", "MWh", 0.000001M, 1000M, 0),
      new ResolutionData("0.00Wh", "MWh", 0.000001M, 100M, 1),
      new ResolutionData("0.0Wh", "MWh", 0.000001M, 10M, 2),
      new ResolutionData("0Wh", "MWh", 0.000001M, 1M, 3),
      new ResolutionData("0.000kWh", "MWh", 0.001M, 1000M, 3),
      new ResolutionData("0.00kWh", "MWh", 0.001M, 100M, 4),
      new ResolutionData("0.0kWh", "MWh", 0.001M, 10M, 5),
      new ResolutionData("0kWh", "MWh", 0.001M, 1M, 6),
      new ResolutionData("0.000MWh", "MWh", 1M, 1000M, 6),
      new ResolutionData("0.00MWh", "MWh", 1M, 100M, 7),
      new ResolutionData("0J", "GJ", 0.000000001M, 1M, 8),
      new ResolutionData("0.000kJ", "GJ", 0.000001M, 1000M, 8),
      new ResolutionData("0.00kJ", "GJ", 0.000001M, 100M, 9),
      new ResolutionData("0.0kJ", "GJ", 0.000001M, 10M, 10),
      new ResolutionData("0kJ", "GJ", 0.000001M, 1M, 11),
      new ResolutionData("0.000MJ", "GJ", 0.001M, 1000M, 11),
      new ResolutionData("0.00MJ", "GJ", 0.001M, 100M, 12),
      new ResolutionData("0.0MJ", "GJ", 0.001M, 10M, 13),
      new ResolutionData("0MJ", "GJ", 0.001M, 1M, 14),
      new ResolutionData("0.000GJ", "GJ", 1M, 1000M, 14),
      new ResolutionData("0.00GJ", "GJ", 1M, 100M, 15),
      new ResolutionData("0.0000", "1", 1M, 10000M, 110),
      new ResolutionData("0.000", "1", 1M, 1000M, 110),
      new ResolutionData("0.00", "1", 1M, 100M, 110),
      new ResolutionData("0.0", "1", 1M, 10M, 110),
      new ResolutionData("0", "1", 1M, 1M, 110),
      new ResolutionData("0.0L/h", "L/h", 1M, 10M, 58),
      new ResolutionData("0L/h", "L/h", 1M, 1M, 59),
      new ResolutionData("0.000m\u00B3/h", "L/h", 1000M, 1000M, 59),
      new ResolutionData("0.00m\u00B3/h", "L/h", 1000M, 100M, 60),
      new ResolutionData("0.0m\u00B3/h", "L/h", 1000M, 10M, 61),
      new ResolutionData("0m\u00B3/h", "L/h", 1000M, 10M, 62),
      new ResolutionData("0.000kW", "kW", 1M, 1000M, 43),
      new ResolutionData("0.00kW", "kW", 1M, 100M, 44),
      new ResolutionData("0.0kW", "kW", 1M, 10M, 45),
      new ResolutionData("0kW", "kW", 1M, 1M, 46),
      new ResolutionData("0.000MW", "kW", 1000M, 1000M, 46),
      new ResolutionData("0.00MW", "kW", 1000M, 100M, 47),
      new ResolutionData("0.0000GJ/h", "GJ/h", 1M, 10000M, 53),
      new ResolutionData("0.000GJ/h", "GJ/h", 1M, 1000M, 54),
      new ResolutionData("0.00GJ/h", "GJ/h", 1M, 100M, 55)
    };
    public static SortedList<string, ResolutionData> resolutionDataFromResolutionString = new SortedList<string, ResolutionData>();

    static MeterUnits()
    {
      for (ushort index = 0; (int) index < MeterUnits.AllUnits.Length; ++index)
        MeterUnits.resolutionDataFromResolutionString.Add(MeterUnits.AllUnits[(int) index].resolutionString, MeterUnits.AllUnits[(int) index]);
    }

    public static ResolutionData GetResolutionData(byte vif)
    {
      return new List<ResolutionData>((IEnumerable<ResolutionData>) MeterUnits.AllUnits).Find((Predicate<ResolutionData>) (x => x.mbusVIF == (int) vif));
    }

    public static ResolutionData GetResolutionData(string resolutionString)
    {
      return new List<ResolutionData>((IEnumerable<ResolutionData>) MeterUnits.AllUnits).Find((Predicate<ResolutionData>) (x => x.resolutionString == resolutionString));
    }
  }
}


--- MeterValue.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MeterValue
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public class MeterValue
  {
    public DateTime readoutDate;
    public long meterId;
    public string serialNumber;
    public long valueId;
    public double value;
    public ReadingValueState state;
    public string stateDetails;
  }
}


--- MeterValueRow.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MeterValueRow
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public struct MeterValueRow
  {
    public int MeterId;
    public byte ValueIdentIndex;
    public DateTime TimePoint;
    public double Value;
    public byte PhysicalQuantity;
    public byte MeterType;
    public byte Calculation;
    public byte CalculationStart;
    public byte StorageInterval;
    public byte Creation;
    public string SerialNr;
    public string NodeName;
    public int NodeID;

    public string MeterTypeString
    {
      get => ValueIdent.Translate<ValueIdent.ValueIdPart_MeterType>(this.MeterType);
    }

    public string PhysicalQuantityString
    {
      get => ValueIdent.Translate<ValueIdent.ValueIdPart_PhysicalQuantity>(this.PhysicalQuantity);
    }

    public string CalculationString
    {
      get => ValueIdent.Translate<ValueIdent.ValueIdPart_Calculation>(this.Calculation);
    }

    public string StorageIntervalString
    {
      get => ValueIdent.Translate<ValueIdent.ValueIdPart_StorageInterval>(this.StorageInterval);
    }

    public string CalculationStartString
    {
      get => ValueIdent.Translate<ValueIdent.ValueIdPart_CalculationStart>(this.CalculationStart);
    }

    public string CreationString
    {
      get => ValueIdent.Translate<ValueIdent.ValueIdPart_Creation>(this.Creation);
    }

    public string ValueIdentIndexString
    {
      get => ValueIdent.TranslateIndex(this.PhysicalQuantity, this.ValueIdentIndex);
    }

    public string Unit => ValueIdent.GetUnit(this.PhysicalQuantity);
  }
}


--- MetrologicalCore.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MetrologicalCore
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Text;

#nullable disable
namespace ZR_ClassLibrary
{
  public static class MetrologicalCore
  {
    public static string Get() => MetrologicalCore.GetFileChecksum(string.Empty);

    public static string GetFileChecksum(string filename)
    {
      StringBuilder stringBuilder = new StringBuilder();
      int num = 35678;
      stringBuilder.Append(num.ToString("X04"));
      for (int index = 0; index < 7; ++index)
      {
        stringBuilder.Append('-');
        num *= 3;
        num += 12624;
        num &= (int) ushort.MaxValue;
        stringBuilder.Append(num.ToString("X04"));
      }
      return stringBuilder.ToString();
    }
  }
}


--- Micro_HardwareIdentification.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Micro_HardwareIdentification
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class Micro_HardwareIdentification
  {
    public KOMMUNIKATION_SCHNITTSTELLE Type { get; set; }

    public BATTERIE_TYP Battery { get; set; }

    public COMPLETION Completion { get; set; }

    public string CreateKey()
    {
      return Micro_HardwareIdentification.CreateKey(this.Type.ToString(), this.Battery.ToString(), this.Completion);
    }

    private static string CreateKey(string type, string battery, COMPLETION completion)
    {
      return string.Format("Micro;{0};{1};{2}", (object) type, (object) battery, (object) completion);
    }

    public static Micro_HardwareIdentification ParseKey(
      string type,
      string battery,
      COMPLETION completion)
    {
      return string.IsNullOrEmpty(type) || string.IsNullOrEmpty(battery) ? (Micro_HardwareIdentification) null : Micro_HardwareIdentification.ParseKey(Micro_HardwareIdentification.CreateKey(type, battery, completion));
    }

    public static Micro_HardwareIdentification ParseKey(string key)
    {
      string[] strArray = !string.IsNullOrEmpty(key) ? key.Split(';') : throw new ArgumentException(nameof (key));
      if (strArray.Length < 1)
        throw new ArgumentException(nameof (key));
      if (strArray[0] != "Micro")
        throw new ArgumentException(nameof (key));
      if (strArray.Length != 5)
        return (Micro_HardwareIdentification) null;
      return new Micro_HardwareIdentification()
      {
        Type = (KOMMUNIKATION_SCHNITTSTELLE) Enum.Parse(typeof (KOMMUNIKATION_SCHNITTSTELLE), strArray[1], true),
        Battery = (BATTERIE_TYP) Enum.Parse(typeof (BATTERIE_TYP), strArray[2], true),
        Completion = (COMPLETION) Enum.Parse(typeof (COMPLETION), strArray[3], true)
      };
    }
  }
}


--- MinimalTempDiffSetup.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MinimalTempDiffSetup
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum MinimalTempDiffSetup
  {
    OFF,
    SetTo0,
    SetToMin,
  }
}


--- MinoConnectBaseStates.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MinoConnectBaseStates
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum MinoConnectBaseStates
  {
    off,
    IrCombiHead,
    RS232,
    RS232_3V,
    RS232_7V,
    RS485,
    RS485_3V,
    RS485_7V,
    Radio2Receive,
    Radio3Receive,
    WirelessMBus,
    NDC_MiCon_Module,
    undefined,
  }
}


--- ModuleTypeValues.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ModuleTypeValues
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum ModuleTypeValues
  {
    NoValue = 0,
    Inp1 = 1,
    Out1 = 2,
    IO1Mask = 3,
    InOut1 = 3,
    Inp2 = 4,
    Out2 = 8,
    IO2Mask = 12, // 0x0000000C
    InOut2 = 12, // 0x0000000C
    MBus = 16, // 0x00000010
    ZRBus = 32, // 0x00000020
    BusMask = 48, // 0x00000030
    RS232 = 48, // 0x00000030
  }
}


--- MONTAGE_AM_ZAEHLER.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MONTAGE_AM_ZAEHLER
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum MONTAGE_AM_ZAEHLER
  {
    NONE,
    CLIPS,
    SCHRAUBEN_FUER_CC,
    CLIPS_WO_6RMD,
    CLIPS_SYN,
    SCHRAUBEN_FUER_CC_SYN,
    CLIPS_WO_6RMD_SYN,
  }
}


--- MTypeZelsius.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.MTypeZelsius
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class MTypeZelsius
  {
    public int MeterTypeID;
    public byte[] EEPdata;
    public string TypeOverrideString;

    public override string ToString() => this.MeterTypeID.ToString();
  }
}


--- NativeMethods.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.NativeMethods
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Runtime.InteropServices;

#nullable disable
namespace ZR_ClassLibrary
{
  public static class NativeMethods
  {
    public static void KeepWindowsCEDeviceAwake()
    {
      try
      {
        NativeMethods.SystemIdleTimerReset();
      }
      catch
      {
      }
    }

    [DllImport("coredll.dll")]
    private static extern void SystemIdleTimerReset();
  }
}


--- NodeLayer.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.NodeLayer
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using System.Collections.Generic;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class NodeLayer
  {
    private const string MODUL_NAME = "MeterInstaller";

    public int LayerID { get; set; }

    public string Name { get; set; }

    public string Description { get; set; }

    public string TranslatedName
    {
      get
      {
        switch (this.LayerID)
        {
          case 0:
            return NodeLayer.GetTranslatedLanguageText("MeterInstaller", "PhysicalLayer");
          case 1:
            return NodeLayer.GetTranslatedLanguageText("MeterInstaller", "LogicLayer");
          default:
            return this.Name;
        }
      }
    }

    public bool IsPhysicalLayer => this.LayerID == 0;

    public static List<NodeLayer> GetStaticLayers()
    {
      return new List<NodeLayer>()
      {
        new NodeLayer()
        {
          LayerID = 0,
          Name = "PhysicalLayer",
          Description = NodeLayer.GetTranslatedLanguageText("MeterInstaller", "PhysicalLayerDesc")
        },
        new NodeLayer() { LayerID = 1, Name = "LogicLayer" }
      };
    }

    private static string GetTranslatedLanguageText(string GmmModule, string TextKey)
    {
      string str = GmmModule + TextKey;
      return Ot.Gtt(Tg.Common, str, str);
    }
  }
}


--- NodeList.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.NodeList
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class NodeList
  {
    public int NodeID;
    public int MeterID;
    public int NodeTypeID;
    public string NodeName;
    public string NodeDescription;
    public string NodeSettings;
    public DateTime? ValidFrom;
    public DateTime? ValidTo;
    public string NodeAdditionalInfos;

    public override string ToString()
    {
      return string.Format("NodeID: {0}, MeterID: {1}, NodeName: {2}", (object) this.NodeID, (object) this.MeterID, (object) this.NodeName);
    }
  }
}


--- NodeReferences.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.NodeReferences
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class NodeReferences
  {
    public int NodeID;
    public int ParentID;
    public int LayerID;
    public int NodeOrder;

    public override string ToString()
    {
      return string.Format("NodeID: {0}, ParentID: {1}, LayerID: {2}, NodeOrder: {3}", (object) this.NodeID, (object) this.ParentID, (object) this.LayerID, (object) this.NodeOrder);
    }
  }
}


--- NumberRanges.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.NumberRanges
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public static class NumberRanges
  {
    public static DeviceTypes GetTypeOfMinolDevice(string funkId)
    {
      long funkId1;
      return string.IsNullOrEmpty(funkId) || !Util.TryParseToInt64(funkId, out funkId1) ? DeviceTypes.None : NumberRanges.GetTypeOfMinolDevice(funkId1);
    }

    public static DeviceTypes GetTypeOfMinolDevice(long funkId)
    {
      if (funkId >= 0L && funkId <= 9999999L)
        return DeviceTypes.SmokeDetector;
      if (funkId >= 30000000L && funkId <= 32999999L)
        return funkId % 2L == 0L ? DeviceTypes.TemperatureSensor : DeviceTypes.HumiditySensor;
      if (funkId >= 33000000L && funkId <= 36999999L)
        return DeviceTypes.TemperatureSensor;
      if (funkId >= 40000000L && funkId <= 40002759L || funkId >= 40002760L && funkId <= 40007000L || funkId >= 40007001L && funkId <= 41099999L || funkId >= 41100000L && funkId <= 41999999L)
        return DeviceTypes.MinotelContact;
      if (funkId >= 42000000L && funkId <= 42899999L || funkId >= 42900000L && funkId <= 42999999L)
        return DeviceTypes.MinotelContactRadio3;
      if (funkId >= 50000000L && funkId <= 50999999L || funkId >= 51000000L && funkId <= 51099999L || funkId >= 51100000L && funkId <= 51999999L || funkId >= 52000000L && funkId <= 52099999L)
        return DeviceTypes.Aqua;
      if (funkId >= 52100000L && funkId <= 52199999L || funkId >= 52200000L && funkId <= 52999999L || funkId >= 53000000L && funkId <= 53000999L)
        return DeviceTypes.AquaMicro;
      if (funkId >= 53001000L && funkId <= 53099999L || funkId >= 53100000L && funkId <= 53999999L || funkId >= 54000000L && funkId <= 54999999L)
        return DeviceTypes.AquaMicroRadio3;
      if (funkId >= 56000000L && funkId <= 56999999L)
        return DeviceTypes.EDC;
      if (funkId >= 73000000L && funkId <= 73999999L)
        return DeviceTypes.ZR_Serie3;
      if (funkId >= 80000000L && funkId <= 80020233L || funkId >= 80020234L && funkId <= 80022450L)
        return DeviceTypes.EHCA_M6;
      if (funkId >= 80022451L && funkId <= 80999999L)
        return DeviceTypes.EHCA_M6_Radio3;
      if (funkId >= 81000000L && funkId <= 81099999L || funkId >= 81100000L && funkId <= 82999999L)
        return DeviceTypes.EHCA_M6;
      if (funkId >= 83000000L && funkId <= 89999999L)
        return DeviceTypes.EHCA_M6_Radio3;
      return funkId >= 90000000L && funkId <= 99999999L ? DeviceTypes.SmokeDetector : DeviceTypes.None;
    }

    public static ValueIdent.ValueIdPart_MeterType GetValueIdPart_MeterTypeOfMinolDevice(
      string funkId)
    {
      uint funkId1 = 0;
      if (!Util.TryParseToUInt32(funkId, out funkId1))
        throw new ArgumentException("Can not parse input parameter 'serialnumber' to UInt32! Value: " + funkId);
      return NumberRanges.GetValueIdPart_MeterTypeOfMinolDevice((long) funkId1);
    }

    public static ValueIdent.ValueIdPart_MeterType GetValueIdPart_MeterTypeOfMinolDevice(long funkId)
    {
      ValueIdent.ValueIdPart_MeterType typeOfMinolDevice;
      switch (NumberRanges.GetTypeOfMinolDevice(funkId))
      {
        case DeviceTypes.ZR_Serie1:
        case DeviceTypes.ZR_Serie2:
        case DeviceTypes.ZR_Serie3:
          typeOfMinolDevice = ValueIdent.ValueIdPart_MeterType.Heat;
          break;
        case DeviceTypes.EHCA_M5:
        case DeviceTypes.EHCA_M5p:
        case DeviceTypes.EHCA_M6:
        case DeviceTypes.EHCA_M6_Radio3:
          typeOfMinolDevice = ValueIdent.ValueIdPart_MeterType.HeatCostAllocator;
          break;
        case DeviceTypes.MinotelContact:
        case DeviceTypes.MinotelContactRadio3:
        case DeviceTypes.PDC:
          typeOfMinolDevice = ValueIdent.ValueIdPart_MeterType.PulseCounter;
          break;
        case DeviceTypes.Aqua:
        case DeviceTypes.AquaMicro:
        case DeviceTypes.AquaMicroRadio3:
        case DeviceTypes.ISF:
        case DeviceTypes.EDC:
          typeOfMinolDevice = ValueIdent.ValueIdPart_MeterType.Water;
          break;
        case DeviceTypes.SmokeDetector:
          typeOfMinolDevice = ValueIdent.ValueIdPart_MeterType.SmokeDetector;
          break;
        case DeviceTypes.TemperatureSensor:
          typeOfMinolDevice = ValueIdent.ValueIdPart_MeterType.Thermometer;
          break;
        case DeviceTypes.HumiditySensor:
          typeOfMinolDevice = ValueIdent.ValueIdPart_MeterType.Hygrometer;
          break;
        default:
          typeOfMinolDevice = ValueIdent.ValueIdPart_MeterType.Any;
          break;
      }
      return typeOfMinolDevice;
    }

    public static string GetManufacturer(DeviceTypes t)
    {
      switch (t)
      {
        case DeviceTypes.ZR_Serie1:
        case DeviceTypes.ZR_Serie2:
        case DeviceTypes.ZR_EHCA:
        case DeviceTypes.ZR_RDM:
        case DeviceTypes.ZR_Serie3:
        case DeviceTypes.MinoConnect:
        case DeviceTypes.EDC:
        case DeviceTypes.PDC:
          return "ZENNER";
        case DeviceTypes.WaveFlowDevice:
          return "Wavenis";
        case DeviceTypes.Minol_Device:
        case DeviceTypes.MinomatDevice:
        case DeviceTypes.EHCA_M5:
        case DeviceTypes.EHCA_M5p:
        case DeviceTypes.EHCA_M6:
        case DeviceTypes.EHCA_M6_Radio3:
        case DeviceTypes.MinotelContact:
        case DeviceTypes.MinotelContactRadio3:
        case DeviceTypes.Aqua:
        case DeviceTypes.AquaMicro:
        case DeviceTypes.AquaMicroRadio3:
        case DeviceTypes.ISF:
        case DeviceTypes.SmokeDetector:
        case DeviceTypes.TemperatureSensor:
        case DeviceTypes.HumiditySensor:
          return "Minol";
        case DeviceTypes.RelayDevice:
          return "Relay";
        default:
          return "Unknown";
      }
    }
  }
}


--- OldDbConfigInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.OldDbConfigInfo
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using System.IO;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class OldDbConfigInfo
  {
    public bool NoDataFound = false;
    public string DataBaseTypeName = "";
    public MeterDbTypes dbType;
    public string dbFileName;
    public string dbPassword;
    public string dbUser;
    public string dbDataSource;
    public string dbServer;
    public string dbPort;
    public string dbProviderString;
    private string dbNamescace;

    public OldDbConfigInfo(string DatabaseNamespaceName, GMMConfig opConfig)
    {
      this.dbNamescace = DatabaseNamespaceName;
      OldDbConfigInfo.DbConfigNames dbConfigNames;
      if (opConfig != null)
      {
        GMMConfig gmmConfig = opConfig;
        string strNamespace = DatabaseNamespaceName;
        dbConfigNames = OldDbConfigInfo.DbConfigNames.GMM_DBType;
        string strVariable = dbConfigNames.ToString();
        this.DataBaseTypeName = gmmConfig.GetValue(strNamespace, strVariable);
      }
      if (this.DataBaseTypeName == "")
      {
        this.DataBaseTypeName = "ACCESS";
        this.NoDataFound = true;
      }
      if (opConfig != null)
      {
        GMMConfig gmmConfig = opConfig;
        string strNamespace = DatabaseNamespaceName;
        dbConfigNames = OldDbConfigInfo.DbConfigNames.GMM_DateiName;
        string strVariable = dbConfigNames.ToString();
        this.dbFileName = gmmConfig.GetValue(strNamespace, strVariable);
      }
      if (this.dbFileName == "" && this.DataBaseTypeName == "ACCESS")
      {
        string path1 = Path.Combine(SystemValues.DatabasePath, "MeterDB.mdb");
        if (File.Exists(path1))
        {
          this.dbFileName = path1;
        }
        else
        {
          string path2 = Application.StartupPath + "\\..\\..\\..\\Database\\MeterDB.mdb";
          if (File.Exists(path2))
          {
            this.dbFileName = Path.GetFullPath(path2);
          }
          else
          {
            string path3 = Application.StartupPath + "\\..\\..\\..\\Database\\MeterDB_New.mdb";
            if (File.Exists(path3))
              this.dbFileName = Path.GetFullPath(path3);
          }
        }
      }
      if (opConfig != null)
      {
        GMMConfig gmmConfig1 = opConfig;
        string strNamespace1 = DatabaseNamespaceName;
        dbConfigNames = OldDbConfigInfo.DbConfigNames.GMM_Password;
        string strVariable1 = dbConfigNames.ToString();
        this.dbPassword = this.descrable(gmmConfig1.GetValue(strNamespace1, strVariable1));
        GMMConfig gmmConfig2 = opConfig;
        string strNamespace2 = DatabaseNamespaceName;
        dbConfigNames = OldDbConfigInfo.DbConfigNames.GMM_UserID;
        string strVariable2 = dbConfigNames.ToString();
        this.dbUser = gmmConfig2.GetValue(strNamespace2, strVariable2);
        GMMConfig gmmConfig3 = opConfig;
        string strNamespace3 = DatabaseNamespaceName;
        dbConfigNames = OldDbConfigInfo.DbConfigNames.GMM_DataSource;
        string strVariable3 = dbConfigNames.ToString();
        this.dbDataSource = gmmConfig3.GetValue(strNamespace3, strVariable3);
        GMMConfig gmmConfig4 = opConfig;
        string strNamespace4 = DatabaseNamespaceName;
        dbConfigNames = OldDbConfigInfo.DbConfigNames.GMM_DBServer;
        string strVariable4 = dbConfigNames.ToString();
        this.dbServer = gmmConfig4.GetValue(strNamespace4, strVariable4);
        GMMConfig gmmConfig5 = opConfig;
        string strNamespace5 = DatabaseNamespaceName;
        dbConfigNames = OldDbConfigInfo.DbConfigNames.GMM_DBPort;
        string strVariable5 = dbConfigNames.ToString();
        this.dbPort = gmmConfig5.GetValue(strNamespace5, strVariable5);
        GMMConfig gmmConfig6 = opConfig;
        string strNamespace6 = DatabaseNamespaceName;
        dbConfigNames = OldDbConfigInfo.DbConfigNames.GMM_DataBase;
        string strVariable6 = dbConfigNames.ToString();
        this.dbProviderString = gmmConfig6.GetValue(strNamespace6, strVariable6);
      }
      this.dbType = Datenbankverbindung.DatabaseTypeFromName(this.DataBaseTypeName);
    }

    public DbConnectionInfo GetNewConfigInfo()
    {
      DbConnectionInfo newConfigInfo = new DbConnectionInfo();
      newConfigInfo.DatabaseName = this.dbDataSource;
      int num = this.dbType == MeterDbTypes.Access || this.dbType == MeterDbTypes.LocalDB || this.dbType == MeterDbTypes.SQLite ? 1 : (this.dbType == MeterDbTypes.Microsoft_SQL_Compact ? 1 : 0);
      newConfigInfo.UrlOrPath = num == 0 ? this.dbServer : this.dbFileName;
      newConfigInfo.DbInstance = !(this.dbNamescace == "MainDataBase") ? DbInstances.Secundary : DbInstances.Primary;
      newConfigInfo.DbType = this.dbType;
      newConfigInfo.Password = this.dbPassword;
      newConfigInfo.UserName = this.dbUser;
      return newConfigInfo;
    }

    private string descrable(string inpassword)
    {
      string str = "";
      for (int index = 0; index < inpassword.Length; ++index)
      {
        char ch = (char) ((uint) inpassword[index] - 12U);
        str += ch.ToString();
      }
      return str;
    }

    private enum DbConfigNames
    {
      GMM_DBType,
      GMM_DateiName,
      GMM_Password,
      GMM_UserID,
      GMM_DataSource,
      GMM_DBServer,
      GMM_DBPort,
      GMM_DataBase,
    }
  }
}


--- OnlineTranslationRow.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.OnlineTranslationRow
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class OnlineTranslationRow
  {
    public string TextKey;
    public string TextDE;
    public string TextEN;

    public override string ToString() => this.TextKey;
  }
}


--- OpenNETRAPI.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.OpenNETRAPI
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using OpenNETCF.Desktop.Communication;
using System.Collections;

#nullable disable
namespace ZR_ClassLibrary
{
  public class OpenNETRAPI
  {
    private RAPI m_rapi;

    public event OpenNETRAPI.DeviceConnectionHandler DeviceConnectionEvent;

    public OpenNETRAPI() => this.m_rapi = new RAPI();

    public void InitEvents()
    {
      // ISSUE: method pointer
      this.m_rapi.ActiveSync.Active += new ActiveHandler((object) this, __methodptr(ActiveSync_Active));
      // ISSUE: method pointer
      this.m_rapi.ActiveSync.Disconnect += new DisconnectHandler((object) this, __methodptr(ActiveSync_Disconnect));
      if (!this.m_rapi.DevicePresent || this.DeviceConnectionEvent == null)
        return;
      this.DeviceConnectionEvent(OpenNETRAPI.ActiveSyncState.DeviceConnected);
    }

    public bool ConnectAsync()
    {
      try
      {
        if (!this.m_rapi.DevicePresent)
          return false;
        this.m_rapi.Connect(true, -1);
      }
      catch
      {
        return false;
      }
      return true;
    }

    public bool ConnectSync()
    {
      try
      {
        if (!this.m_rapi.DevicePresent)
          return false;
        this.m_rapi.Connect(true, 3);
      }
      catch
      {
        return false;
      }
      return true;
    }

    public void Disconnect() => this.m_rapi.Disconnect();

    public bool GetFileList(out ArrayList Files, string Filter)
    {
      Files = new ArrayList();
      try
      {
        if (!this.m_rapi.Connected)
          return false;
        foreach (FileInformation enumFile in (CollectionBase) this.m_rapi.EnumFiles("My Documents\\GMM\\Database\\" + Filter))
        {
          if (enumFile.FileName != "")
          {
            if (enumFile.FileSize > 0L)
              Files.Add((object) enumFile.FileName);
            else
              this.m_rapi.DeleteDeviceFile("My Documents\\GMM\\Database\\" + enumFile.FileName);
          }
        }
      }
      catch
      {
        return false;
      }
      return true;
    }

    public bool copyTo(string LocalFilename, string RemoteFileName)
    {
      try
      {
        if (!this.m_rapi.Connected)
          return false;
        this.m_rapi.CopyFileToDevice(LocalFilename, RemoteFileName, true);
      }
      catch
      {
        return false;
      }
      return true;
    }

    public bool copyFrom(string RemoteFileName, string LocalFilename)
    {
      try
      {
        if (!this.m_rapi.Connected)
          return false;
        this.m_rapi.CopyFileFromDevice(LocalFilename, RemoteFileName, true);
      }
      catch
      {
        return false;
      }
      return true;
    }

    public bool deleteFrom(string RemoteFileName)
    {
      try
      {
        if (!this.m_rapi.Connected)
          return false;
        this.m_rapi.DeleteDeviceFile(RemoteFileName);
      }
      catch
      {
        return false;
      }
      return true;
    }

    public bool getDeviceIdentifier(out string DeviceIdentifier)
    {
      DeviceIdentifier = string.Empty;
      try
      {
        CERegistryKey ceRegistryKey = CERegistry.LocalMachine.OpenSubKey("Ident", false);
        if (ceRegistryKey != null)
        {
          object obj = ceRegistryKey.GetValue("Name");
          if (obj != null)
            DeviceIdentifier = obj.ToString();
          ceRegistryKey.Close();
          ceRegistryKey = (CERegistryKey) null;
        }
        ceRegistryKey?.Close();
      }
      catch
      {
        return false;
      }
      return true;
    }

    private void ActiveSync_Active()
    {
      if (this.DeviceConnectionEvent == null)
        return;
      this.DeviceConnectionEvent(OpenNETRAPI.ActiveSyncState.DeviceConnected);
    }

    private void ActiveSync_Disconnect()
    {
      if (this.DeviceConnectionEvent == null)
        return;
      this.DeviceConnectionEvent(OpenNETRAPI.ActiveSyncState.DeviceDisconnected);
    }

    public delegate void DeviceConnectionHandler(OpenNETRAPI.ActiveSyncState activeSyncState);

    public delegate void DeviceTransferHandler(int percentage);

    public enum ActiveSyncState
    {
      DeviceConnected,
      DeviceDisconnected,
    }
  }
}


--- OverrideID.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.OverrideID
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum OverrideID
  {
    Unknown = 0,
    WarmerPipe = 1,
    CustomID = 2,
    ReadingDate = 3,
    MBusIdentificationNo = 4,
    EnergyResolution = 5,
    ChangeOver = 6,
    VolumeResolution = 7,
    VolumePulsValue = 8,
    Input1PulsValue = 9,
    Input1Unit = 10, // 0x0000000A
    Input2PulsValue = 11, // 0x0000000B
    Input2Unit = 12, // 0x0000000C
    Output1Function = 13, // 0x0000000D
    Output2Function = 14, // 0x0000000E
    BaseConfig = 15, // 0x0000000F
    MBusAddress = 16, // 0x00000010
    SerialNumber = 17, // 0x00000011
    MeterID = 18, // 0x00000012
    BaseTypeID = 19, // 0x00000013
    EnergyActualValue = 20, // 0x00000014
    EnergyDueDateValue = 21, // 0x00000015
    EnergyDueDateLastValue = 22, // 0x00000016
    VolumeActualValue = 23, // 0x00000017
    VolumeDueDateValue = 24, // 0x00000018
    VolumeDueDateLastValue = 25, // 0x00000019
    Input1ActualValue = 26, // 0x0000001A
    Input1DueDateValue = 27, // 0x0000001B
    Input1DueDateLastValue = 28, // 0x0000001C
    Input2ActualValue = 29, // 0x0000001D
    Input2DueDateValue = 30, // 0x0000001E
    Input2DueDateLastValue = 31, // 0x0000001F
    CEnergyActualValue = 32, // 0x00000020
    CEnergyDueDateValue = 33, // 0x00000021
    CEnergyDueDateLastValue = 34, // 0x00000022
    FactoryTypeID = 35, // 0x00000023
    ModuleType = 36, // 0x00000024
    IO_Functions = 37, // 0x00000025
    Input1IdNumber = 38, // 0x00000026
    Input2IdNumber = 39, // 0x00000027
    Input1Type = 40, // 0x00000028
    Input2Type = 41, // 0x00000029
    MenuOverride = 42, // 0x0000002A
    MBusListOverride = 43, // 0x0000002B
    ClearNotProtectedValues = 44, // 0x0000002C
    ClearProtectedValues = 45, // 0x0000002D
    Baudrate = 46, // 0x0000002E
    FixedTempSetup = 47, // 0x0000002F
    FixedTempValue = 48, // 0x00000030
    MimTempDiffSetup = 49, // 0x00000031
    MinTempDiffPlusTemp = 50, // 0x00000032
    MinTempDiffMinusTemp = 51, // 0x00000033
    TarifFunction = 52, // 0x00000034
    TarifRefTemp = 53, // 0x00000035
    TarifEnergy0 = 54, // 0x00000036
    TarifEnergy1 = 55, // 0x00000037
    CycleTimeFast = 56, // 0x00000038
    CycleTimeStandard = 57, // 0x00000039
    HeatThresholdTemp = 58, // 0x0000003A
    EndOfBattery = 59, // 0x0000003B
    EndOfCalibration = 60, // 0x0000003C
    CycleTimeDynamic = 61, // 0x0000003D
    DeviceClock = 62, // 0x0000003E
    HCA_Factor_Weighting = 63, // 0x0000003F
    HCA_SensorMode = 64, // 0x00000040
    HCA_Scale = 65, // 0x00000041
    HCA_Factor_CH = 66, // 0x00000042
    HCA_Factor_CHR = 67, // 0x00000043
    HCA_ActualValue = 68, // 0x00000044
    LastErrorDate = 69, // 0x00000045
    SleepMode = 70, // 0x00000046
    NumberOfSubDevices = 71, // 0x00000047
    DeviceName = 72, // 0x00000048
    ErrorDate = 73, // 0x00000049
    Medium = 74, // 0x0000004A
    FirmwareVersion = 75, // 0x0000004B
    DiagnosticString = 76, // 0x0000004C
    DeviceHasError = 77, // 0x0000004D
    DeviceUnit = 78, // 0x0000004E
    DaKonSerialNumber = 79, // 0x0000004F
    DaKonRegisterNumber = 80, // 0x00000050
    InitDevice = 81, // 0x00000051
    StartHKVEReceptionWindow = 82, // 0x00000052
    InputResolution = 83, // 0x00000053
    InputPulsValue = 84, // 0x00000054
    InputActualValue = 85, // 0x00000055
    InputDueDateValue = 86, // 0x00000056
    InputDueDateLastValue = 87, // 0x00000057
    InputDeviceType = 88, // 0x00000058
    DueDate = 89, // 0x00000059
    Manipulation = 90, // 0x0000005A
    TotalTestPulses = 91, // 0x0000005B
    TotalVolumePulses = 92, // 0x0000005C
    PulseCorrectionValue = 93, // 0x0000005D
    PulseCorrectionEnabled = 94, // 0x0000005E
    Protected = 95, // 0x0000005F
    RadioSendInterval = 100, // 0x00000064
    RadioSendOffset = 101, // 0x00000065
    ManipulationDate = 102, // 0x00000066
    RadioProtocol = 103, // 0x00000067
    RadioEnabled = 104, // 0x00000068
    RadioEpsilonOffsetEnabled = 105, // 0x00000069
    Signature = 106, // 0x0000006A
    Manufacturer = 107, // 0x0000006B
    StartDate = 108, // 0x0000006C
    VolMeterFlowPosition = 109, // 0x0000006D
    InputOutputFunction = 110, // 0x0000006E
    InputResolutionStr = 111, // 0x0000006F
    DueDateMonth = 112, // 0x00000070
    MBusThirdPartySupport = 113, // 0x00000071
    OperatingHours = 114, // 0x00000072
    SetSleepMode = 115, // 0x00000073
    SetWriteProtection = 116, // 0x00000074
    ResetAllValues = 117, // 0x00000075
    ClearAllLoggers = 118, // 0x00000076
    SetPcTime = 119, // 0x00000077
    TimeZone = 120, // 0x00000078
    OrderNumber = 121, // 0x00000079
    SetMbusPrimAdrFromSerialNumber = 122, // 0x0000007A
    VirtualDeviceOff = 123, // 0x0000007B
    MinolSerialNumber = 124, // 0x0000007C
    PulseMultiplier = 125, // 0x0000007D
    RegisterDigits = 126, // 0x0000007E
    AESKey = 127, // 0x0000007F
    PulseBlockLimit = 128, // 0x00000080
    PulseLeakLimit = 129, // 0x00000081
    PulseUnleakLimit = 130, // 0x00000082
    PulseLeakLower = 131, // 0x00000083
    PulseLeakUpper = 132, // 0x00000084
    PulseBackLimit = 133, // 0x00000085
    PulseUnbackLimit = 134, // 0x00000086
    OversizeDiff = 135, // 0x00000087
    OversizeLimit = 136, // 0x00000088
    UndersizeDiff = 137, // 0x00000089
    UndersizeLimit = 138, // 0x0000008A
    BurstDiff = 139, // 0x0000008B
    BurstLimit = 140, // 0x0000008C
    CompactMBusList = 141, // 0x0000008D
    RadioFrequence = 142, // 0x0000008E
    ShowVolumeAsMass = 143, // 0x0000008F
    TempRangeUpperLimit = 144, // 0x00000090
    TempRangeLowerLimit = 145, // 0x00000091
    CycleTimeVolume = 146, // 0x00000092
    ErrorCode = 147, // 0x00000093
    Standby = 148, // 0x00000094
    MBusGeneration = 149, // 0x00000095
    SerialNumberSecondary = 150, // 0x00000096
    RadioMode = 151, // 0x00000097
    ListType = 152, // 0x00000098
    ClearWarnings = 153, // 0x00000099
    SerialNumberFull = 154, // 0x0000009A
    WarningInfo = 155, // 0x0000009B
    SelectedRadioList = 156, // 0x0000009C
    ShowEnergyChecker = 158, // 0x0000009E
    ShowGCAL = 159, // 0x0000009F
    Glycol = 160, // 0x000000A0
    CycleTimeRadio = 161, // 0x000000A1
    LongHeader = 162, // 0x000000A2
    ClearManipulation = 163, // 0x000000A3
    MediumSecondary = 164, // 0x000000A4
    Encryption = 165, // 0x000000A5
    ManufacturerSecondary = 166, // 0x000000A6
    SetToDelivery = 167, // 0x000000A7
    PulseEnabled = 168, // 0x000000A8
    TotalPulse = 169, // 0x000000A9
    MaxFlow = 170, // 0x000000AA
    StartCalibration = 171, // 0x000000AB
    CalibrationValues = 172, // 0x000000AC
    Calibrated = 173, // 0x000000AD
    TemperaturRadiator = 174, // 0x000000AE
    TemperaturRoom = 175, // 0x000000AF
    EndOfBatteryDate = 176, // 0x000000B0
    Radio3RussianMode = 177, // 0x000000B1
    VolMeterFlowPositionByUser = 178, // 0x000000B2
    PulseoutMode = 179, // 0x000000B3
    PulseoutWidth = 180, // 0x000000B4
    SapNumber = 181, // 0x000000B5
    DateOfFirstActivation = 182, // 0x000000B6
    CurrentEvents = 183, // 0x000000B7
    PushButtonError = 184, // 0x000000B8
    HornDriveLevel = 185, // 0x000000B9
    RemovingDetection = 186, // 0x000000BA
    NumberSmokeAlarms = 187, // 0x000000BB
    NumberTestAlarms = 188, // 0x000000BC
    ObstructionDetection = 189, // 0x000000BD
    SurroundingProximity = 190, // 0x000000BE
    LedFailure = 191, // 0x000000BF
    StatusOfInterlinkedDevices = 192, // 0x000000C0
    CalVolMaxFlowLiterPerHour = 193, // 0x000000C1
    CalVolMaxErrorPercent = 194, // 0x000000C2
    CalVolNominalFlowLiterPerHour = 195, // 0x000000C3
    CalVolNominalErrorPercent = 196, // 0x000000C4
    CalVolMinFlowLiterPerHour = 197, // 0x000000C5
    CalVolMinErrorPercent = 198, // 0x000000C6
    CalFlowTempMinGrad = 199, // 0x000000C7
    CalFlowTempMinErrorPercent = 200, // 0x000000C8
    CalFlowTempMiddleGrad = 201, // 0x000000C9
    CalFlowTempMiddleErrorPercent = 202, // 0x000000CA
    CalFlowTempMaxGrad = 203, // 0x000000CB
    CalFlowTempMaxErrorPercent = 204, // 0x000000CC
    CalReturnTempMinGrad = 205, // 0x000000CD
    CalReturnTempMinErrorPercent = 206, // 0x000000CE
    CalReturnTempMiddleGrad = 207, // 0x000000CF
    CalReturnTempMiddleErrorPercent = 208, // 0x000000D0
    CalReturnTempMaxGrad = 209, // 0x000000D1
    CalReturnTempMaxErrorPercent = 210, // 0x000000D2
    PulseoutResolution = 211, // 0x000000D3
    TotalVolumePulsesNegativ = 212, // 0x000000D4
    NominalFlow = 213, // 0x000000D5
    InputSampleTime = 214, // 0x000000D6
    InputMode = 215, // 0x000000D7
    SummerOff = 216, // 0x000000D8
    WinterStart = 217, // 0x000000D9
    SummerStart = 218, // 0x000000DA
    TransmissionScenario = 219, // 0x000000DB
    HCA_Metrology = 220, // 0x000000DC
    JoinEUI = 221, // 0x000000DD
    DevEUI = 222, // 0x000000DE
    AppKey = 223, // 0x000000DF
    Activation = 224, // 0x000000E0
    NwkSKey = 225, // 0x000000E1
    AppSKey = 226, // 0x000000E2
    DevAddr = 227, // 0x000000E3
    NetID = 228, // 0x000000E4
    DeviceMode = 229, // 0x000000E5
    SendJoinRequest = 230, // 0x000000E6
    SetOperatingMode = 231, // 0x000000E7
    LoRaWanVersion = 232, // 0x000000E8
    LoRaVersion = 233, // 0x000000E9
    MenuView01 = 234, // 0x000000EA
    MenuView02 = 235, // 0x000000EB
    MenuView03 = 236, // 0x000000EC
    MenuView04 = 237, // 0x000000ED
    MenuView05 = 238, // 0x000000EE
    MenuView06 = 239, // 0x000000EF
    MenuView07 = 240, // 0x000000F0
    MenuView08 = 241, // 0x000000F1
    MenuView09 = 242, // 0x000000F2
    MenuView10 = 243, // 0x000000F3
    ADR = 244, // 0x000000F4
    PrintedSerialNumber = 245, // 0x000000F5
    RadioVersion = 246, // 0x000000F6
    ExitSleep = 247, // 0x000000F7
    RadioTechnology = 248, // 0x000000F8
    Frequence = 249, // 0x000000F9
    RadioActiveMonday = 250, // 0x000000FA
    RadioActiveTuesday = 251, // 0x000000FB
    RadioActiveWednesday = 252, // 0x000000FC
    RadioActiveThursday = 253, // 0x000000FD
    RadioActiveFriday = 254, // 0x000000FE
    RadioActiveSaturday = 255, // 0x000000FF
    RadioActiveSunday = 256, // 0x00000100
    RadioActiveStartTime = 257, // 0x00000101
    RadioActiveStopTime = 258, // 0x00000102
    DisplayMenu = 259, // 0x00000103
    MenuView01_Sel = 260, // 0x00000104
    MenuView02_Sel = 261, // 0x00000105
    MenuView03_Sel = 262, // 0x00000106
    MenuView04_Sel = 263, // 0x00000107
    MenuView05_Sel = 264, // 0x00000108
    MenuView06_Sel = 265, // 0x00000109
    MenuView07_Sel = 266, // 0x0000010A
    MenuView08_Sel = 267, // 0x0000010B
    MenuView09_Sel = 268, // 0x0000010C
    MenuView10_Sel = 269, // 0x0000010D
    MenuView01_Time = 270, // 0x0000010E
    MenuView02_Time = 271, // 0x0000010F
    MenuView03_Time = 272, // 0x00000110
    MenuView04_Time = 273, // 0x00000111
    MenuView05_Time = 274, // 0x00000112
    MenuView06_Time = 275, // 0x00000113
    MenuView07_Time = 276, // 0x00000114
    MenuView08_Time = 277, // 0x00000115
    MenuView09_Time = 278, // 0x00000116
    MenuView10_Time = 279, // 0x00000117
    LeakDetectionOn = 280, // 0x00000118
    BackflowDetectionOn = 281, // 0x00000119
    BurstDetectionOn = 282, // 0x0000011A
    StandstillDetectionOn = 283, // 0x0000011B
    UndersizeDetectionOn = 284, // 0x0000011C
    OversizeDetectionOn = 285, // 0x0000011D
    OutletTempSensorInVolumeMeter = 286, // 0x0000011E
    BatteryCapacity_mAh = 287, // 0x0000011F
    RemainingDiagnosticMessages = 288, // 0x00000120
    RadioScenario = 289, // 0x00000121
    MaxEndOfBatteryDate = 290, // 0x00000122
    PossibleHourDiagnosticYears = 291, // 0x00000123
    MAC_Address = 292, // 0x00000124
    CCID = 293, // 0x00000125
    IMEI = 294, // 0x00000126
    IMSI = 295, // 0x00000127
    Region = 296, // 0x00000128
    FirmwareTimestamp = 297, // 0x00000129
    LteModemVersion = 298, // 0x0000012A
    LteModemModel = 299, // 0x0000012B
    CpuID = 300, // 0x0000012C
    LteAPN = 301, // 0x0000012D
    SmartFunctions = 302, // 0x0000012E
    MinimumFlowQ1 = 303, // 0x0000012F
    PermanentFlowQ3 = 304, // 0x00000130
    CommunicationScenario = 305, // 0x00000131
    ActivateSmartFunctions = 306, // 0x00000132
    BatteryPreWarningMonths = 307, // 0x00000133
    SmartFunctionsActivated = 308, // 0x00000134
    VIF = 309, // 0x00000135
    BatteryDurabilityMonths = 310, // 0x00000136
    ActiveSmartFunctions = 311, // 0x00000137
    SetTimeForTimeZoneFromPcTime = 312, // 0x00000138
    Coefficient = 313, // 0x00000139
    TestVolumeSimulation = 314, // 0x0000013A
    SmartFunctionConfig = 315, // 0x0000013B
    SmartFunctionGroup = 316, // 0x0000013C
    SmartFunctionsGroup = 316, // 0x0000013C
    CommunicationScenarioLoRa = 317, // 0x0000013D
    CommunicationScenarioWmbus = 318, // 0x0000013E
    MinomatResetConfigurationState = 319, // 0x0000013F
    MinomatMinolId = 320, // 0x00000140
    MinomatNodeId = 321, // 0x00000141
    MinomatNetworkId = 322, // 0x00000142
    MinomatSystemTime = 323, // 0x00000143
    MinomatRadioChannel = 324, // 0x00000144
    MinomatTransceiverChannelId = 325, // 0x00000145
    MinomatRoutingTable = 326, // 0x00000146
    MinomatFirmwareVersion = 327, // 0x00000147
    MinomatUserappName = 328, // 0x00000148
    MinomatFirmwareBuildTime = 329, // 0x00000149
    MinomatUserappBuildTime = 330, // 0x0000014A
    MinomatErrorFlags = 331, // 0x0000014B
    MinomatTransmissionPower = 332, // 0x0000014C
    MinomatMultiChannelSettings = 333, // 0x0000014D
    MinomatTransceiverFrequencyOffset = 334, // 0x0000014E
    MinomatTemperatureOffset = 335, // 0x0000014F
    MinomatPhaseDetailsBuffer = 336, // 0x00000150
    MinomatPhaseDetails = 337, // 0x00000151
    MinomatRestartMinomat = 338, // 0x00000152
    MinomatMessUnitNumberMax = 339, // 0x00000153
    MinomatMaxMessUnitNumberNotConfigured = 340, // 0x00000154
    MinomatScenario = 341, // 0x00000155
    MinomatStartTestReception = 342, // 0x00000156
    MinomatTestReceptionResult = 343, // 0x00000157
    MinomatRegisterMessUnit = 344, // 0x00000158
    MinomatResetConfiguration = 345, // 0x00000159
    MinomatStartNetworkSetup = 346, // 0x0000015A
    MinomatDeleteMessUnit = 347, // 0x0000015B
    MinomatInfoOfRegisteredMessUnit = 348, // 0x0000015C
    MinomatRegisteredMessUnits = 349, // 0x0000015D
    MinomatSimPin = 350, // 0x0000015E
    MinomatAPN = 351, // 0x0000015F
    MinomatGPRSUserName = 352, // 0x00000160
    MinomatGPRSPassword = 353, // 0x00000161
    MinomatHttpServer = 354, // 0x00000162
    MinomatHttpResourceName = 355, // 0x00000163
    MinomatStartGSMTestReception = 356, // 0x00000164
    MinomatGSMTestReceptionState = 357, // 0x00000165
    MinomatForceNetworkOptimization = 358, // 0x00000166
    MinomatStartNetworkOptimization = 359, // 0x00000167
    MinomatRegisterSlave = 360, // 0x00000168
    MinomatDeregisterSlave = 361, // 0x00000169
    MinomatRegisteredSlaves = 362, // 0x0000016A
    MinomatFlash = 363, // 0x0000016B
    MinomatEeprom = 364, // 0x0000016C
    MinomatAppInitialSettings = 365, // 0x0000016D
    MinomatActionTimepoint = 366, // 0x0000016E
    MinomatMeasurementData = 367, // 0x0000016F
    MinomatHttpState = 368, // 0x00000170
    MinomatGsmState = 369, // 0x00000171
    MinomatModemBuildDate = 370, // 0x00000172
    MinomatModemDueDate = 371, // 0x00000173
    MinomatStartHttpConnection = 372, // 0x00000174
    MinomatConfigurationString = 373, // 0x00000175
    MinomatSwitchToNetworkModel = 374, // 0x00000176
    MinomatComServerName = 375, // 0x00000177
    MinomatComServerNetworkState = 376, // 0x00000178
    MinomatMessUnitMetadata = 377, // 0x00000179
    MinomatLED = 378, // 0x0000017A
    RegisterHKVE = 379, // 0x0000017B
    DeregisterHKVE = 380, // 0x0000017C
    RegisteredHKVE = 381, // 0x0000017D
    UnregisteredHKVE = 382, // 0x0000017E
    MinomatV2Configuration = 383, // 0x0000017F
    MinomatV2SystemStatus = 384, // 0x00000180
  }
}


--- OverrideIDExtensions.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.OverrideIDExtensions
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.Linq;

#nullable disable
namespace ZR_ClassLibrary
{
  public static class OverrideIDExtensions
  {
    public static bool IsOneOf(this OverrideID self, params OverrideID[] elements)
    {
      return elements != null ? ((IEnumerable<OverrideID>) elements).Contains<OverrideID>(self) : throw new ArgumentNullException(nameof (elements));
    }
  }
}


--- ParameterGroups.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ParameterGroups
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum ParameterGroups
  {
    RSSI,
    Date,
    BatteryLifeCounter,
    DateForEndOfBatteryLifeDetection,
    Firmware,
    GroupNumber,
    OperationModes,
    Status,
    PulseWeights,
    DateForReedFailure,
    DateForWireCutDetection,
    Indices,
    ExtendedIndex,
    WakeUpMode,
    DatalogPeriod,
    WeeklyDatalog,
    MonthlyDatalog,
    DatalogAllInputs,
    Datalog,
    ExtendedDatalog,
    LowLeak,
    HighLeak,
    LeakHistory,
    BackFlow,
    BackflowHistory,
    SpecialBackFlow,
    AlarmConfiguration,
    FactoryConfiguration,
    SolenoidState,
  }
}


--- ParameterService.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ParameterService
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.Text;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ParameterService
  {
    private static ParameterService.S3_ValueTypeTranslation[] S3_ValueTypeCodes = new ParameterService.S3_ValueTypeTranslation[14]
    {
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.INT8, typeof (short), 1),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.UINT8, typeof (byte), 1),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.UINT16, typeof (ushort), 2),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.INT16, typeof (short), 2),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.UINT32, typeof (uint), 4),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.INT32, typeof (int), 4),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.REAL32, typeof (float), 4),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.INT64, typeof (long), 8),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.UINT64, typeof (ulong), 8),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.REAL64, typeof (double), 8),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.MeterTime1980, typeof (uint), 4),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.Address, typeof (uint), 0),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.ByteArray, typeof (byte[]), 1),
      new ParameterService.S3_ValueTypeTranslation(S3_VariableTypes.TDC_Matrix, typeof (float), 1)
    };
    private static char[] CodeTranslatorTable = new char[32]
    {
      'M',
      '1',
      'Z',
      '3',
      'C',
      '4',
      '7',
      '8',
      'R',
      'P',
      'L',
      'H',
      'A',
      '2',
      'B',
      'Y',
      'K',
      'W',
      'E',
      'F',
      'V',
      'G',
      'D',
      'N',
      'T',
      '9',
      'U',
      '5',
      'Q',
      'S',
      '6',
      'X'
    };

    public static int GetNumberOfBytes(S3_VariableTypes VarType)
    {
      return ParameterService.S3_ValueTypeCodes[(int) VarType].Bytes;
    }

    public static SortedList<string, string> NamedParamSE_GetAsSortedList(string ParameterString)
    {
      SortedList<string, string> asSortedList = new SortedList<string, string>();
      string str1 = ParameterString;
      char[] chArray1 = new char[1]{ ';' };
      foreach (string str2 in str1.Split(chArray1))
      {
        char[] chArray2 = new char[1]{ '=' };
        string[] strArray = str2.Split(chArray2);
        if (strArray.Length > 1)
        {
          string key = strArray[0].Trim();
          string str3 = strArray[1].Trim();
          if (!asSortedList.ContainsKey(key))
            asSortedList.Add(key, str3);
        }
      }
      return asSortedList;
    }

    public static Dictionary<long, string> NamedParamSE_GetAsDictionary_Long_String(
      string ParameterString)
    {
      Dictionary<long, string> dictionaryLongString = new Dictionary<long, string>();
      string str1 = ParameterString;
      char[] chArray1 = new char[1]{ ';' };
      foreach (string str2 in str1.Split(chArray1))
      {
        char[] chArray2 = new char[1]{ '=' };
        string[] strArray = str2.Split(chArray2);
        if (strArray.Length > 1)
        {
          long int64 = Convert.ToInt64(strArray[0].Trim());
          string str3 = strArray[1].Trim();
          if (!dictionaryLongString.ContainsKey(int64))
            dictionaryLongString.Add(int64, str3);
        }
      }
      return dictionaryLongString;
    }

    public static string NamedParamSE_GetAsString(SortedList<string, string> ParameterList)
    {
      StringBuilder stringBuilder = new StringBuilder(500);
      if (ParameterList != null)
      {
        for (int index = 0; index < ParameterList.Count; ++index)
        {
          if (index != 0)
            stringBuilder.Append(';');
          stringBuilder.Append(ParameterList.Keys[index]);
          stringBuilder.Append('=');
          stringBuilder.Append(ParameterList.Values[index]);
        }
      }
      return stringBuilder.ToString();
    }

    public static string NamedParamSE_GetAsString(Dictionary<long, string> ParameterList)
    {
      StringBuilder stringBuilder = new StringBuilder(500);
      if (ParameterList != null && ParameterList.Count > 0)
      {
        foreach (KeyValuePair<long, string> parameter in ParameterList)
        {
          stringBuilder.Append(parameter.Key);
          stringBuilder.Append('=');
          stringBuilder.Append(parameter.Value);
          stringBuilder.Append(';');
        }
        stringBuilder.Remove(stringBuilder.Length - 1, 1);
      }
      return stringBuilder.ToString();
    }

    private static bool IsValuePart(string Instring)
    {
      try
      {
        if (Instring == ".")
          return true;
        int.Parse(Instring);
        return true;
      }
      catch
      {
        return false;
      }
    }

    public static void GetValueAndUnit(
      string Instring,
      out string SValue,
      out string SUnit,
      out int decimalCounts)
    {
      string empty = string.Empty;
      SValue = string.Empty;
      SUnit = string.Empty;
      int num = -1;
      decimalCounts = -1;
      Instring = Instring.Trim();
      for (int startIndex = 0; startIndex < Instring.Length; ++startIndex)
      {
        string Instring1 = Instring.Substring(startIndex, 1);
        if (Instring1 == ".")
          num = startIndex;
        if (ParameterService.IsValuePart(Instring1))
        {
          SValue += Instring1;
          if (num > 0)
            decimalCounts = startIndex - num;
        }
        else
          SUnit += Instring1;
      }
    }

    public static string AddParameter(
      string ParameterString,
      string behind,
      string ParameterName,
      string ParameterValue)
    {
      if (ParameterName == null)
        return string.Empty;
      if (ParameterString == null)
        ParameterString = string.Empty;
      ParameterString.Trim();
      ParameterName.Trim();
      ParameterValue.Trim();
      if (ParameterName.Length == 0 || ParameterValue.Length == 0)
        return ParameterString;
      string str = ParameterName + ";" + ParameterValue;
      if (behind == "")
        return ParameterString.Length == 0 ? str : str + ";" + ParameterString;
      int startIndex = ParameterString.IndexOf(behind);
      if (startIndex >= 0)
      {
        int num = ParameterString.IndexOf(';', startIndex);
        if (num >= 0)
          return ParameterString.Substring(0, num) + ";" + str + ParameterString.Substring(num);
      }
      return ParameterString + ";" + str;
    }

    public static string AddOrUpdateParameter(string settings, string key, string value)
    {
      if (ParameterService.GetParameter(settings, key) == value && settings.IndexOf(key + ";") == settings.LastIndexOf(key + ";"))
        return settings;
      ParameterService.DeleteParameter(ref settings, key);
      return ParameterService.AddParameter(settings, "", key, value);
    }

    public static bool DeleteParameter(ref string ParameterString, string ParameterName)
    {
      if (string.IsNullOrEmpty(ParameterString))
        return false;
      string[] strArray = ParameterString.Split(';');
      if (strArray == null || strArray.Length == 0)
        return false;
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; index < strArray.Length; ++index)
      {
        if (strArray[index].Trim() == ParameterName.Trim())
        {
          ++index;
        }
        else
        {
          if (stringBuilder.Length != 0)
            stringBuilder.Append(';');
          stringBuilder.Append(strArray[index].Trim());
        }
      }
      ParameterString = stringBuilder.ToString();
      return true;
    }

    public static string GetParameter(string ParameterString, string ParameterName)
    {
      string parameter = ParameterService.GetParameter(ParameterString, ParameterName, ';');
      if (parameter == "")
        parameter = ParameterService.GetParameter(ParameterString, ParameterName, ',');
      return parameter;
    }

    public static string GetParameter(string ParameterString, string ParameterName, char Sep)
    {
      if (string.IsNullOrEmpty(ParameterString))
        return string.Empty;
      string[] strArray = ParameterString.Split(Sep);
      string parameter = "";
      for (int index = 0; index < strArray.Length; index += 2)
      {
        if ((string) strArray.GetValue(index) == ParameterName)
        {
          parameter = (string) strArray.GetValue(index + 1);
          break;
        }
      }
      return parameter;
    }

    public static string GetParameter(
      string ParameterString,
      string ParameterName,
      char NameValueSep,
      char PairSep)
    {
      string parameter = "";
      string str1 = PairSep.ToString() + ParameterString;
      int num = str1.IndexOf(PairSep.ToString() + ParameterName + NameValueSep.ToString());
      if (num >= 0)
      {
        int startIndex = num + (ParameterName.Length + 2);
        string str2 = str1.Substring(startIndex);
        int length = str2.IndexOf(PairSep);
        if (length < 0)
        {
          if (str2.Length > 0)
            parameter = str2;
        }
        else
          parameter = str2.Substring(0, length);
      }
      return parameter;
    }

    public static Dictionary<string, string> GetAllParametersAsList(
      string ParameterString,
      char PairSep)
    {
      Dictionary<string, string> parametersAsList = new Dictionary<string, string>();
      if (string.IsNullOrEmpty(ParameterString))
        return parametersAsList;
      ParameterString = ParameterString.TrimStart(';');
      string[] strArray = ParameterString.Split(PairSep);
      int num = 0;
      for (int index = 0; index < strArray.Length; index += 2)
      {
        string key = (string) strArray.GetValue(index);
        if (!string.IsNullOrEmpty(key))
        {
          if (parametersAsList.ContainsKey(key))
            key += num.ToString();
          parametersAsList.Add(key, (string) strArray.GetValue(index + 1));
        }
      }
      return parametersAsList;
    }

    public static double DoubleParseWithCheck(string TheInput)
    {
      return TheInput.IndexOf(SystemValues.ZRNumberGroupSeperator) < 0 ? double.Parse(TheInput) : throw new FormatException();
    }

    public static Decimal DecimalParseWithCheck(string TheInput)
    {
      return TheInput.IndexOf(SystemValues.ZRNumberGroupSeperator) < 0 ? Decimal.Parse(TheInput) : throw new FormatException();
    }

    public static float FloatParseWithCheck(string TheInput)
    {
      return !TheInput.Contains(SystemValues.ZRNumberGroupSeperator) ? float.Parse(TheInput) : throw new FormatException();
    }

    public static string GetCheckedDecimalString(string InputString)
    {
      bool flag = false;
      StringBuilder stringBuilder = new StringBuilder(InputString.Trim());
      for (int index = 0; index < stringBuilder.Length; ++index)
      {
        char c = stringBuilder[index];
        if (!char.IsDigit(c) && (c != '-' || index != 0))
        {
          if (c == '.' && !flag)
            flag = true;
          else if (c == ',' && !flag)
          {
            stringBuilder[index] = '.';
            flag = true;
          }
          else
          {
            stringBuilder.Remove(index, 1);
            ++index;
          }
        }
      }
      return stringBuilder.ToString();
    }

    public static string GetIntegerPartFromDecimalString(string InputString)
    {
      int length = InputString.IndexOf('.');
      return length < 0 ? InputString : InputString.Substring(0, length);
    }

    public static long GetIntegerPartFromDecimalStringAsLong(string InputString)
    {
      return long.Parse(ParameterService.GetIntegerPartFromDecimalString(InputString));
    }

    public static string GetFractionPartFromDecimalString(string InputString)
    {
      int num = InputString.IndexOf('.');
      return num < 0 || num == InputString.Length - 1 ? "0" : InputString.Substring(num + 1);
    }

    public static long GetFractionPartFromDecimalStringAsLong(string InputString)
    {
      return long.Parse(ParameterService.GetFractionPartFromDecimalString(InputString));
    }

    public static string FormatStringNumber(
      string InputString,
      int FeldWhite,
      int AfterPoint,
      bool FillWith_0,
      int ShiftExpo)
    {
      StringBuilder stringBuilder = new StringBuilder(InputString.Trim(), 30);
      int num = stringBuilder.ToString().IndexOf('.');
      if (AfterPoint > 0)
      {
        if (num < 0)
        {
          stringBuilder.Append('.');
          num = stringBuilder.Length - 1;
        }
        while (AfterPoint >= stringBuilder.Length - num)
          stringBuilder.Append('0');
        stringBuilder.Length = num + 1 + AfterPoint;
      }
      else if (num >= 0)
        stringBuilder.Length = num;
      while (stringBuilder.Length < FeldWhite)
      {
        if (FillWith_0)
          stringBuilder.Insert(0, "0");
        else
          stringBuilder.Insert(0, " ");
      }
      return stringBuilder.ToString();
    }

    public static void SetStringExpo(ref StringBuilder PValue, int UnitExponent)
    {
      for (int index = 0; index < UnitExponent; ++index)
        PValue.Append('0');
      if (UnitExponent < 0)
      {
        while (PValue.Length <= UnitExponent * -1)
          PValue.Insert(0, "0");
        PValue.Insert(PValue.Length + UnitExponent, ".");
      }
      while (PValue.Length > 1)
      {
        if (PValue[PValue.Length - 1] == '0' && UnitExponent < 0)
        {
          PValue.Remove(PValue.Length - 1, 1);
          ++UnitExponent;
        }
        else if (PValue[PValue.Length - 1] == '.')
        {
          PValue.Remove(PValue.Length - 1, 1);
        }
        else
        {
          if (PValue[0] != '0' || PValue[1] == '.')
            break;
          PValue.Remove(0, 1);
        }
      }
    }

    public static void ResetStringExpo(ref StringBuilder PValue, int UnitExponent)
    {
      int index = PValue.ToString().IndexOf('.');
      for (; UnitExponent > 0; --UnitExponent)
      {
        if (index < 0)
          PValue.Append('0');
        else if (index == PValue.Length - 1)
        {
          PValue[index] = '0';
          index = -1;
        }
        else
        {
          char ch = PValue[index + 1];
          PValue[index + 1] = '.';
          PValue[index] = ch;
          ++index;
        }
      }
      for (; UnitExponent < 0; ++UnitExponent)
      {
        if (index == 0 || PValue.Length < 2)
        {
          PValue[0] = '0';
          PValue.Length = 1;
          return;
        }
        if (index < 0)
        {
          --PValue.Length;
        }
        else
        {
          char ch = PValue[index - 1];
          PValue[index - 1] = '.';
          PValue[index] = ch;
          --index;
        }
      }
      if (index == 0)
      {
        PValue[0] = '0';
        PValue.Length = 1;
      }
      else if (index > 0)
        PValue.Length = index;
      while (PValue.Length > 1 && PValue[0] == '0')
        PValue.Remove(0, 1);
    }

    public static DateTime GetNow()
    {
      DateTime dateTime = !DateTime.Now.IsDaylightSavingTime() ? DateTime.Now : DateTime.Now.AddHours(-1.0);
      return new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, dateTime.Hour, dateTime.Minute, dateTime.Second, 0);
    }

    [Obsolete("Please use GetVersionString(long version, int packetSizeOfResponceByGetVersionCommand)")]
    public static string GetVersionString(long version)
    {
      return ParameterService.GetVersionString(version, 7);
    }

    public static string GetVersionString(long version, int packetSizeOfResponceByGetVersionCommand)
    {
      if (version == 0L)
        return "not defined";
      long num1 = version >> 24 & (long) byte.MaxValue;
      string str1 = num1.ToString() + ".";
      num1 = version >> 16 & (long) byte.MaxValue;
      string str2 = num1.ToString();
      string str3 = str1 + str2 + ".";
      string versionString;
      if (version < 33554432L && packetSizeOfResponceByGetVersionCommand <= 7)
      {
        string str4 = str3;
        num1 = version & (long) ushort.MaxValue;
        string str5 = num1.ToString();
        string str6 = str4 + str5;
        versionString = version >= 17039360L ? str6 + ":C2" : str6 + ":C2e";
      }
      else
      {
        string str7 = str3;
        num1 = (version & 61440L) >> 12;
        string str8 = num1.ToString();
        string str9 = str7 + str8;
        long num2 = version & 4095L;
        long num3 = num2 - 1L;
        if ((ulong) num3 <= 46UL)
        {
          switch ((uint) num3)
          {
            case 0:
              versionString = str9 + ":C2";
              goto label_46;
            case 1:
              versionString = str9 + ":C2a";
              goto label_46;
            case 2:
              versionString = str9 + ":Puls";
              goto label_46;
            case 3:
              versionString = str9 + ":C3";
              goto label_46;
            case 4:
              versionString = str9 + ":C5";
              goto label_46;
            case 5:
              versionString = str9 + ":IUW";
              goto label_46;
            case 6:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 26:
            case 27:
            case 32:
            case 33:
            case 37:
            case 39:
            case 40:
            case 42:
            case 44:
              goto label_45;
            case 7:
              versionString = str9 + ":WR3";
              goto label_46;
            case 8:
              versionString = str9 + ":WR4";
              goto label_46;
            case 15:
              versionString = str9 + ":C4";
              goto label_46;
            case 16:
              versionString = str9 + ":EDC_Radio";
              goto label_46;
            case 17:
              versionString = str9 + ":EDC_mBus";
              goto label_46;
            case 24:
              versionString = str9 + ":EDC_LoRa";
              goto label_46;
            case 25:
              versionString = str9 + ":PDC_LoRa";
              goto label_46;
            case 28:
              versionString = str9 + ":Micro_LoRa";
              goto label_46;
            case 29:
              versionString = str9 + ":Micro_wMBus";
              goto label_46;
            case 30:
              versionString = str9 + ":EDC_wMBus_ST";
              goto label_46;
            case 31:
              versionString = str9 + ":EDC_LoRa_470 ";
              goto label_46;
            case 34:
              versionString = str9 + ":C5_LoRa";
              goto label_46;
            case 35:
              versionString = str9 + ":WR4_LoRa";
              goto label_46;
            case 36:
              versionString = str9 + ":Micro_LoRa_LL";
              goto label_46;
            case 38:
              versionString = str9 + ":NFC_LoRa";
              goto label_46;
            case 41:
              versionString = str9 + ":EDC_NBIoT";
              goto label_46;
            case 43:
              versionString = str9 + ":Micro_wMBus_LL";
              goto label_46;
            case 45:
              versionString = str9 + ":PDC_LoRa_915MHz";
              goto label_46;
            case 46:
              versionString = str9 + ":UDC_LoRa_915MHz";
              goto label_46;
          }
        }
        long num4 = num2 - 54L;
        if ((ulong) num4 <= 22UL)
        {
          switch ((uint) num4)
          {
            case 0:
              versionString = str9 + ":EDC_NBIoT_LCSW";
              goto label_46;
            case 1:
              versionString = str9 + ":NFC_wMBus_Connector";
              goto label_46;
            case 3:
              versionString = str9 + ":EDC_NBIoT_YJSW";
              goto label_46;
            case 4:
              versionString = str9 + ":PDC_LoRa_868MHz_SD";
              goto label_46;
            case 7:
              versionString = str9 + ":EDC_NBIoT_FSNH";
              goto label_46;
            case 8:
              versionString = str9 + ":EDC_NBIoT_XM";
              goto label_46;
            case 14:
              versionString = str9 + ":EDC_NBIoT_Israel";
              goto label_46;
            case 15:
              versionString = str9 + ":EDC_NBIoT_TaiWan";
              goto label_46;
            case 16:
              versionString = str9 + ":PDC_GAS";
              goto label_46;
            case 20:
              versionString = str9 + ":EDC_LoRa_868_v3";
              goto label_46;
            case 21:
              versionString = str9 + ":EDC_LoRa_915_v2_US";
              goto label_46;
            case 22:
              versionString = str9 + ":EDC_LoRa_915_v2_BR";
              goto label_46;
          }
        }
label_45:
        versionString = str9 + ":??";
label_46:;
      }
      return versionString;
    }

    public static string GetVersionNumberString(long version)
    {
      if (version == 0L)
        return "not defined";
      long num = version >> 24 & (long) byte.MaxValue;
      string str1 = num.ToString() + ".";
      num = version >> 16 & (long) byte.MaxValue;
      string str2 = num.ToString();
      string str3 = str1 + str2 + ".";
      num = (version & 61440L) >> 12;
      string str4 = num.ToString();
      return str3 + str4;
    }

    public static string GetHardwareString(uint HardwareMask)
    {
      if (HardwareMask == 0U)
        return "not defined";
      bool flag = false;
      StringBuilder stringBuilder1 = new StringBuilder(100);
      switch (HardwareMask & 3840U)
      {
        case 256:
          stringBuilder1.Append(ParameterService.HardwareMaskElements.UndefDev1.ToString());
          break;
        case 512:
          flag = true;
          stringBuilder1.Append(ParameterService.HardwareMaskElements.WR4.ToString());
          break;
        case 1024:
          stringBuilder1.Append(ParameterService.HardwareMaskElements.UndefDev2.ToString());
          break;
        case 2048:
          stringBuilder1.Append(ParameterService.HardwareMaskElements.C5.ToString());
          break;
        default:
          stringBuilder1.Append("IllegalDevice");
          break;
      }
      ParameterService.HardwareMaskElements hardwareMaskElements;
      switch (HardwareMask & 15U)
      {
        case 1:
          if (!flag)
          {
            StringBuilder stringBuilder2 = stringBuilder1;
            hardwareMaskElements = ParameterService.HardwareMaskElements.MBus;
            string str = ";" + hardwareMaskElements.ToString();
            stringBuilder2.Append(str);
            break;
          }
          break;
        case 2:
          StringBuilder stringBuilder3 = stringBuilder1;
          hardwareMaskElements = ParameterService.HardwareMaskElements.Radio;
          string str1 = ";" + hardwareMaskElements.ToString();
          stringBuilder3.Append(str1);
          break;
        case 4:
          StringBuilder stringBuilder4 = stringBuilder1;
          hardwareMaskElements = ParameterService.HardwareMaskElements.NoCom;
          string str2 = ";" + hardwareMaskElements.ToString();
          stringBuilder4.Append(str2);
          break;
        case 8:
          StringBuilder stringBuilder5 = stringBuilder1;
          hardwareMaskElements = ParameterService.HardwareMaskElements.LoRa;
          string str3 = ";" + hardwareMaskElements.ToString();
          stringBuilder5.Append(str3);
          break;
        default:
          StringBuilder stringBuilder6 = stringBuilder1;
          hardwareMaskElements = ParameterService.HardwareMaskElements.IllegalCom;
          string str4 = ";" + hardwareMaskElements.ToString();
          stringBuilder6.Append(str4);
          break;
      }
      if (!flag)
      {
        switch (HardwareMask & 240U)
        {
          case 16:
            StringBuilder stringBuilder7 = stringBuilder1;
            hardwareMaskElements = ParameterService.HardwareMaskElements.Compact;
            string str5 = ";" + hardwareMaskElements.ToString();
            stringBuilder7.Append(str5);
            break;
          case 32:
            StringBuilder stringBuilder8 = stringBuilder1;
            hardwareMaskElements = ParameterService.HardwareMaskElements.Combi;
            string str6 = ";" + hardwareMaskElements.ToString();
            stringBuilder8.Append(str6);
            break;
          case 64:
            StringBuilder stringBuilder9 = stringBuilder1;
            hardwareMaskElements = ParameterService.HardwareMaskElements.Ultrasonic;
            string str7 = ";" + hardwareMaskElements.ToString();
            stringBuilder9.Append(str7);
            break;
          case 128:
            StringBuilder stringBuilder10 = stringBuilder1;
            hardwareMaskElements = ParameterService.HardwareMaskElements.UltrasonicDirect;
            string str8 = ";" + hardwareMaskElements.ToString();
            stringBuilder10.Append(str8);
            break;
          default:
            stringBuilder1.Append(";IllegalVol");
            break;
        }
      }
      else
      {
        switch (HardwareMask & 240U)
        {
          case 16:
            stringBuilder1.Append("; PT100");
            break;
          case 32:
            stringBuilder1.Append("; PT500");
            break;
          case 64:
            stringBuilder1.Append("; PT1000");
            break;
          default:
            stringBuilder1.Append(";Illegal_PT_sensor");
            break;
        }
      }
      return stringBuilder1.ToString();
    }

    public static ParameterService.HardwareMaskElements GetVolumeHardware(uint HardwareMask)
    {
      return (ParameterService.HardwareMaskElements) ((int) HardwareMask & 240);
    }

    public static bool GetAssamblyVersionParts(
      string FullName,
      out string Name,
      out int Version,
      out string VersionString,
      out int Revision,
      out DateTime BuildTime,
      out int Hashcode)
    {
      Name = "";
      Version = 0;
      Revision = 0;
      VersionString = "";
      BuildTime = new DateTime(2000, 1, 1);
      Hashcode = 0;
      try
      {
        string[] strArray1 = FullName.Split(',');
        if (strArray1.Length != 0)
          Name = strArray1[0];
        if (strArray1.Length > 1)
        {
          string[] strArray2 = strArray1[1].Split('=');
          VersionString = strArray2[1].Trim();
          string[] strArray3 = VersionString.Split('.');
          Version = int.Parse(strArray3[0]);
          Revision = int.Parse(strArray3[1]);
          BuildTime = BuildTime.AddDays((double) int.Parse(strArray3[2]));
          BuildTime = BuildTime.AddSeconds((double) (int.Parse(strArray3[3]) * 2));
        }
        if (strArray1.Length > 4)
        {
          string[] strArray4 = strArray1[4].Split('=');
          if (strArray4.Length == 2 && strArray4[0].Trim() == nameof (Hashcode))
            Hashcode = int.Parse(strArray4[1]);
        }
        return true;
      }
      catch
      {
        return false;
      }
    }

    public static ushort GetFromByteArray_ushort(byte[] TheArray, ref int StartOffset)
    {
      return (ushort) ((int) (ushort) TheArray[StartOffset++] + (int) (ushort) ((uint) TheArray[StartOffset++] << 8));
    }

    public static uint GetFromByteArray_uint(byte[] TheArray, ref int StartOffset)
    {
      return (uint) ((int) TheArray[StartOffset++] + ((int) TheArray[StartOffset++] << 8) + ((int) TheArray[StartOffset++] << 16) + ((int) TheArray[StartOffset++] << 24));
    }

    public static ulong GetFromByteArray_ulong(byte[] TheArray, ref int StartOffset)
    {
      return (ulong) ((long) TheArray[StartOffset++] + ((long) TheArray[StartOffset++] << 8) + ((long) TheArray[StartOffset++] << 16) + ((long) TheArray[StartOffset++] << 24) + ((long) TheArray[StartOffset++] << 32) + ((long) TheArray[StartOffset++] << 40) + ((long) TheArray[StartOffset++] << 48) + ((long) TheArray[StartOffset++] << 56));
    }

    public static short GetFromByteArray_short(byte[] TheArray, ref int StartOffset)
    {
      return (short) ((int) (short) TheArray[StartOffset++] + (int) (short) ((int) TheArray[StartOffset++] << 8));
    }

    public static int GetFromByteArray_int(byte[] TheArray, ref int StartOffset)
    {
      return (int) TheArray[StartOffset++] + ((int) TheArray[StartOffset++] << 8) + ((int) TheArray[StartOffset++] << 16) + ((int) TheArray[StartOffset++] << 24);
    }

    public static long GetFromByteArray_long(byte[] TheArray, ref int StartOffset)
    {
      return (long) TheArray[StartOffset++] + ((long) TheArray[StartOffset++] << 8) + ((long) TheArray[StartOffset++] << 16) + ((long) TheArray[StartOffset++] << 24) + ((long) TheArray[StartOffset++] << 32) + ((long) TheArray[StartOffset++] << 40) + ((long) TheArray[StartOffset++] << 48) + ((long) TheArray[StartOffset++] << 56);
    }

    public static ulong GetFromByteArray_ulong(byte[] TheArray, ushort Size, ref int StartOffset)
    {
      ulong fromByteArrayUlong = 0;
      for (int index = 0; index < (int) Size; ++index)
        fromByteArrayUlong += (ulong) TheArray[StartOffset++] << 8 * index;
      return fromByteArrayUlong;
    }

    public static int GetFromByteArray_int_from_BCD(byte[] TheArray, ref int StartOffset)
    {
      uint fromByteArrayUint = ParameterService.GetFromByteArray_uint(TheArray, ref StartOffset);
      uint byteArrayIntFromBcd = 0;
      uint num = 1;
      for (int index = 0; index < 8; ++index)
      {
        byteArrayIntFromBcd += (fromByteArrayUint & 15U) * num;
        num *= 10U;
        fromByteArrayUint >>= 4;
      }
      return (int) byteArrayIntFromBcd;
    }

    public static void SetToByteArray_ushort(
      ushort Value,
      ref byte[] TheArray,
      ref int StartOffset)
    {
      TheArray[StartOffset++] = (byte) ((uint) Value & (uint) byte.MaxValue);
      TheArray[StartOffset++] = (byte) ((int) Value >> 8 & (int) byte.MaxValue);
    }

    public static void SetToByteArray_uint(uint Value, ref byte[] TheArray, ref int StartOffset)
    {
      TheArray[StartOffset++] = (byte) (Value & (uint) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 8 & (uint) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 16 & (uint) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 24 & (uint) byte.MaxValue);
    }

    public static void SetToByteArray_ulong(ulong Value, ref byte[] TheArray, ref int StartOffset)
    {
      TheArray[StartOffset++] = (byte) (Value & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 8 & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 16 & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 24 & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 32 & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 40 & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 48 & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 56 & (ulong) byte.MaxValue);
    }

    public static void SetToByteArray_short(short Value, ref byte[] TheArray, ref int StartOffset)
    {
      TheArray[StartOffset++] = (byte) ((uint) Value & (uint) byte.MaxValue);
      TheArray[StartOffset++] = (byte) ((int) Value >> 8 & (int) byte.MaxValue);
    }

    public static void SetToByteArray_int(int Value, ref byte[] TheArray, ref int StartOffset)
    {
      TheArray[StartOffset++] = (byte) (Value & (int) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 8 & (int) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 16 & (int) byte.MaxValue);
      TheArray[StartOffset++] = (byte) (Value >> 24 & (int) byte.MaxValue);
    }

    public static void SetToByteArray_long(long Value, ref byte[] TheArray, ref int StartOffset)
    {
      TheArray[StartOffset++] = (byte) ((ulong) Value & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) ((ulong) (Value >> 8) & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) ((ulong) (Value >> 16) & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) ((ulong) (Value >> 24) & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) ((ulong) (Value >> 32) & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) ((ulong) (Value >> 40) & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) ((ulong) (Value >> 48) & (ulong) byte.MaxValue);
      TheArray[StartOffset++] = (byte) ((ulong) (Value >> 56) & (ulong) byte.MaxValue);
    }

    public static char GetCharacterCode(int InChar)
    {
      return ParameterService.CodeTranslatorTable[InChar & 31];
    }

    public static int GetIntFromCharacterCode(char InChar)
    {
      for (int fromCharacterCode = 0; fromCharacterCode < ParameterService.CodeTranslatorTable.Length; ++fromCharacterCode)
      {
        if ((int) ParameterService.CodeTranslatorTable[fromCharacterCode] == (int) InChar)
          return fromCharacterCode;
      }
      return -1;
    }

    public static int GetIntFromCharacterCodeString(string InCharString)
    {
      int characterCodeString = -1;
      int num = 0;
      for (int index = InCharString.Length - 1; index >= 0; --index)
      {
        char InChar = InCharString[index];
        if (InChar != ' ')
        {
          int fromCharacterCode = ParameterService.GetIntFromCharacterCode(InChar);
          if (fromCharacterCode < 0)
            return -1;
          if (num == 0)
            characterCodeString = fromCharacterCode;
          else
            characterCodeString |= fromCharacterCode << num;
          num += 5;
        }
      }
      return characterCodeString;
    }

    public static string GetCharacterCodeStringFromInt(int IntValue, int MinStringLen)
    {
      StringBuilder stringBuilder;
      for (stringBuilder = new StringBuilder(20); IntValue > 0 || stringBuilder.Length < MinStringLen; IntValue >>= 5)
        stringBuilder.Insert(0, ParameterService.GetCharacterCode(IntValue));
      return stringBuilder.ToString();
    }

    public static string GetHexStringFromByteArray(byte[] byteArray, int startOffset)
    {
      return ParameterService.GetHexStringFromByteArray(byteArray, startOffset, byteArray.Length - startOffset - 1);
    }

    public static string GetHexStringFromByteArray(
      byte[] byteArray,
      int startOffset,
      int endOffset)
    {
      if (byteArray == null)
        throw new NullReferenceException(nameof (byteArray));
      if (startOffset < 0 || startOffset >= byteArray.Length)
        throw new IndexOutOfRangeException(nameof (startOffset));
      if (endOffset >= byteArray.Length)
        throw new IndexOutOfRangeException(nameof (endOffset));
      StringBuilder stringBuilder = endOffset >= startOffset ? new StringBuilder(endOffset - startOffset + 1) : throw new Exception("endOffset < startOffset");
      int index = startOffset;
      while (true)
      {
        stringBuilder.Append(byteArray[index].ToString("x02"));
        if (index != endOffset)
        {
          stringBuilder.Append(" ");
          ++index;
        }
        else
          break;
      }
      return stringBuilder.ToString();
    }

    public static string GetHexStringFromByteArray(byte[] ByteArray)
    {
      StringBuilder stringBuilder = new StringBuilder(100);
      for (int index = 0; index < ByteArray.Length; ++index)
        stringBuilder.Append(" " + ByteArray[index].ToString("x02"));
      return stringBuilder.ToString();
    }

    public static string GetStringFromByteArray(byte[] ByteArray)
    {
      StringBuilder stringBuilder = new StringBuilder(100);
      for (int index = 0; index < ByteArray.Length; ++index)
        stringBuilder.Append((char) ByteArray[index]);
      return ParameterService.GetExpandesString(stringBuilder.ToString());
    }

    public static string GetExpandesString(string TheString)
    {
      TheString = TheString.Replace("\r", "\\r");
      TheString = TheString.Replace("\n", "\\n");
      return TheString;
    }

    public static List<string> GetKeys(string zdf)
    {
      List<string> keys = new List<string>();
      string[] strArray1 = zdf.Split(';');
      int num;
      for (int index1 = 0; index1 < strArray1.Length; index1 = num + 1)
      {
        List<string> stringList = keys;
        string[] strArray2 = strArray1;
        int index2 = index1;
        num = index2 + 1;
        string str = strArray2[index2];
        stringList.Add(str);
      }
      return keys;
    }

    public static List<string> GetValues(string zdf)
    {
      List<string> values = new List<string>();
      string[] strArray1 = zdf.Split(';');
      int num;
      for (int index1 = 1; index1 < strArray1.Length; index1 = num + 1)
      {
        List<string> stringList = values;
        string[] strArray2 = strArray1;
        int index2 = index1;
        num = index2 + 1;
        string str = strArray2[index2];
        stringList.Add(str);
      }
      return values;
    }

    public static string ConvertInt32ToHexString(int value)
    {
      byte[] bytes = BitConverter.GetBytes(value);
      return string.Format("{0}{1}{2}{3}", (object) bytes[3].ToString("X2"), (object) bytes[2].ToString("X2"), (object) bytes[1].ToString("X2"), (object) bytes[0].ToString("X2"));
    }

    public static uint ConvertHexStringToUInt32(string value)
    {
      if (string.IsNullOrEmpty(value))
        throw new ArgumentNullException(nameof (value));
      string str = value.Length <= 8 ? value.PadLeft(8, '0') : throw new ArgumentException("Invalid size of value!");
      byte[] numArray = new byte[4]
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        Convert.ToByte(str.Substring(0, 2), 16)
      };
      numArray[2] = Convert.ToByte(str.Substring(2, 2), 16);
      numArray[1] = Convert.ToByte(str.Substring(4, 2), 16);
      numArray[0] = Convert.ToByte(str.Substring(6, 2), 16);
      return BitConverter.ToUInt32(numArray, 0);
    }

    public static string[] GetMemoryInfo(ByteField MemoryData, int BufferAddressOffset)
    {
      int num1 = BufferAddressOffset;
      int num2 = num1 & -16;
      int num3 = BufferAddressOffset + MemoryData.Count - 1;
      int num4 = num3 | 15;
      string[] memoryInfo = new string[(num4 + 1 - num2) / 16];
      StringBuilder stringBuilder = new StringBuilder();
      int num5 = 0;
      for (; num2 <= num4; ++num2)
      {
        if ((num2 & 15) == 0)
        {
          stringBuilder.Length = 0;
          stringBuilder.Append(num2.ToString("x04") + ": ");
        }
        stringBuilder.Append(" ");
        if (num2 < num1 || num2 > num3)
          stringBuilder.Append("..");
        else
          stringBuilder.Append(MemoryData.Data[num2 - BufferAddressOffset].ToString("x02"));
        if ((num2 & 15) == 15)
        {
          memoryInfo[num5++] = stringBuilder.ToString();
          stringBuilder.Length = 0;
        }
      }
      return memoryInfo;
    }

    public static string DeleteAllAsynComSettings(string settings)
    {
      string[] namesOfEnum = Util.GetNamesOfEnum(typeof (AsyncComSettings));
      if (namesOfEnum == null)
        return settings;
      foreach (string ParameterName in namesOfEnum)
        ParameterService.DeleteParameter(ref settings, ParameterName);
      return settings;
    }

    public static string DeleteAllDeviceCollectorSettings(string settings)
    {
      string[] namesOfEnum = Util.GetNamesOfEnum(typeof (DeviceCollectorSettings));
      if (namesOfEnum == null)
        return settings;
      foreach (string ParameterName in namesOfEnum)
        ParameterService.DeleteParameter(ref settings, ParameterName);
      return settings;
    }

    internal struct S3_ValueTypeTranslation
    {
      internal S3_VariableTypes S3_Type;
      internal Type NET_Type;
      internal int Bytes;

      internal S3_ValueTypeTranslation(S3_VariableTypes S3_Type, Type NET_Type, int Bytes)
      {
        this.S3_Type = S3_Type;
        this.NET_Type = NET_Type;
        this.Bytes = Bytes;
      }
    }

    public enum HardwareMaskElements
    {
      MBus = 1,
      Radio = 2,
      NoCom = 4,
      LoRa = 8,
      IllegalCom = 9,
      ComMask = 15, // 0x0000000F
      Compact = 16, // 0x00000010
      Combi = 32, // 0x00000020
      Ultrasonic = 64, // 0x00000040
      UltrasonicDirect = 128, // 0x00000080
      VolTypeMask = 240, // 0x000000F0
      UndefDev1 = 256, // 0x00000100
      WR4 = 512, // 0x00000200
      UndefDev2 = 1024, // 0x00000400
      C5 = 2048, // 0x00000800
      VolDeviceTypeMask = 3840, // 0x00000F00
    }

    public enum HardwareMaskElementsWR4
    {
      PT_100 = 16, // 0x00000010
      PT_500 = 32, // 0x00000020
      PT_1000 = 64, // 0x00000040
      WR4_PT_Mask = 240, // 0x000000F0
    }
  }
}


--- PDC_DeviceIdentity.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.PDC_DeviceIdentity
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum PDC_DeviceIdentity : ushort
  {
    Unknown = 0,
    PDC_WmBus = 19, // 0x0013
    PDC_mBus = 20, // 0x0014
    PDC_Radio3 = 21, // 0x0015
    PDC_LoRa = 26, // 0x001A
  }
}


--- PDC_HardwareIdentification.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.PDC_HardwareIdentification
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class PDC_HardwareIdentification
  {
    public KOMMUNIKATION_SCHNITTSTELLE_PDC Type { get; set; }

    public InputSettings_PDC InputConfig { get; set; }

    public BATTERIE_TYP_PDC Battery { get; set; }

    public string CreateKey()
    {
      return PDC_HardwareIdentification.CreateKey(this.Type.ToString(), this.Battery.ToString());
    }

    private static string CreateKey(string communicationInterface, string batteryType)
    {
      return string.Format("PDC;{0};{1}", (object) communicationInterface, (object) batteryType);
    }

    public static PDC_HardwareIdentification ParseKey(
      string communicationInterface,
      string batteryType)
    {
      if (string.IsNullOrEmpty(communicationInterface))
        throw new ArgumentNullException(nameof (communicationInterface));
      if (string.IsNullOrEmpty(batteryType))
        throw new ArgumentNullException(nameof (batteryType));
      if (!Enum.IsDefined(typeof (KOMMUNIKATION_SCHNITTSTELLE_PDC), (object) communicationInterface))
        throw new ArgumentNullException(nameof (communicationInterface));
      return Enum.IsDefined(typeof (BATTERIE_TYP_PDC), (object) batteryType) ? PDC_HardwareIdentification.ParseKey(PDC_HardwareIdentification.CreateKey(communicationInterface, batteryType)) : throw new ArgumentNullException(nameof (batteryType));
    }

    public static PDC_HardwareIdentification ParseKey(string key)
    {
      string[] strArray = !string.IsNullOrEmpty(key) ? key.Split(';') : throw new NullReferenceException(nameof (key));
      if (strArray.Length < 1)
        throw new ArgumentException(nameof (key));
      if (strArray[0] != "PDC")
        throw new ArgumentException(nameof (key));
      if (strArray.Length != 3)
        return (PDC_HardwareIdentification) null;
      return new PDC_HardwareIdentification()
      {
        Type = (KOMMUNIKATION_SCHNITTSTELLE_PDC) Enum.Parse(typeof (KOMMUNIKATION_SCHNITTSTELLE_PDC), strArray[1], true),
        Battery = (BATTERIE_TYP_PDC) Enum.Parse(typeof (BATTERIE_TYP_PDC), strArray[2], true),
        InputConfig = InputSettings_PDC.NONE
      };
    }

    public override string ToString() => this.CreateKey();
  }
}


--- PointToPointDevices.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.PointToPointDevices
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum PointToPointDevices
  {
    MBus,
    ZR_Serie1,
    ZR_Serie2,
    ZR_Serie3,
    EDC,
    PDC,
    Minol_Device,
    TemperatureSensor,
    HumiditySensor,
  }
}


--- Portal.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Portal
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using CorporateDesign;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class Portal : Form
  {
    public string endtext;
    private Label pl1;
    private Button OkButton;
    private Label pl2;
    private Button myCancelButton;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private TextBox PortalLicenseTB;
    private TextBox VorgabeTextBoxAll;
    private Button buttonHelp;
    private Button buttonLoadFromSoftwareServiceSystem;
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;

    public Portal(string s1, string s2, string s3)
    {
      this.InitializeComponent();
      this.endtext = "Looser";
      string InputString = "" + ParameterService.GetCharacterCode((int) UserRights.LICENSE_CODE_VERSION_PC).ToString() + s1 + s2 + s3;
      this.VorgabeTextBoxAll.Text = UserRights.GetSeparatedString(InputString + UserRights.GetStringCS(InputString));
      this.Text = ZR_ClassLibMessages.ZR_ClassMessage.GetString("1");
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Portal));
      this.pl1 = new Label();
      this.OkButton = new Button();
      this.myCancelButton = new Button();
      this.pl2 = new Label();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.buttonHelp = new Button();
      this.PortalLicenseTB = new TextBox();
      this.VorgabeTextBoxAll = new TextBox();
      this.buttonLoadFromSoftwareServiceSystem = new Button();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.pl1, "pl1");
      this.pl1.Name = "pl1";
      this.OkButton.BackColor = SystemColors.Control;
      this.OkButton.DialogResult = DialogResult.OK;
      componentResourceManager.ApplyResources((object) this.OkButton, "OkButton");
      this.OkButton.Name = "OkButton";
      this.OkButton.UseVisualStyleBackColor = false;
      this.OkButton.Click += new System.EventHandler(this.OkButton_Click);
      this.myCancelButton.BackColor = SystemColors.Control;
      this.myCancelButton.DialogResult = DialogResult.Cancel;
      componentResourceManager.ApplyResources((object) this.myCancelButton, "myCancelButton");
      this.myCancelButton.Name = "myCancelButton";
      this.myCancelButton.UseVisualStyleBackColor = false;
      this.myCancelButton.Click += new System.EventHandler(this.myCancelButton_Click);
      componentResourceManager.ApplyResources((object) this.pl2, "pl2");
      this.pl2.Name = "pl2";
      componentResourceManager.ApplyResources((object) this.zennerCoroprateDesign1, "zennerCoroprateDesign1");
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.buttonHelp.BackColor = SystemColors.Control;
      componentResourceManager.ApplyResources((object) this.buttonHelp, "buttonHelp");
      this.buttonHelp.Name = "buttonHelp";
      this.buttonHelp.UseVisualStyleBackColor = false;
      this.buttonHelp.Click += new System.EventHandler(this.buttonEmail_Click);
      componentResourceManager.ApplyResources((object) this.PortalLicenseTB, "PortalLicenseTB");
      this.PortalLicenseTB.Name = "PortalLicenseTB";
      this.PortalLicenseTB.KeyPress += new KeyPressEventHandler(this.PortalLicenseTB_KeyPress);
      componentResourceManager.ApplyResources((object) this.VorgabeTextBoxAll, "VorgabeTextBoxAll");
      this.VorgabeTextBoxAll.Name = "VorgabeTextBoxAll";
      this.VorgabeTextBoxAll.ReadOnly = true;
      this.buttonLoadFromSoftwareServiceSystem.BackColor = SystemColors.Control;
      componentResourceManager.ApplyResources((object) this.buttonLoadFromSoftwareServiceSystem, "buttonLoadFromSoftwareServiceSystem");
      this.buttonLoadFromSoftwareServiceSystem.Name = "buttonLoadFromSoftwareServiceSystem";
      this.buttonLoadFromSoftwareServiceSystem.UseVisualStyleBackColor = false;
      this.buttonLoadFromSoftwareServiceSystem.Click += new System.EventHandler(this.buttonLoadFromSoftwareServiceSystem_Click);
      componentResourceManager.ApplyResources((object) this, "$this");
      this.BackColor = Color.White;
      this.Controls.Add((Control) this.VorgabeTextBoxAll);
      this.Controls.Add((Control) this.PortalLicenseTB);
      this.Controls.Add((Control) this.buttonHelp);
      this.Controls.Add((Control) this.pl2);
      this.Controls.Add((Control) this.myCancelButton);
      this.Controls.Add((Control) this.buttonLoadFromSoftwareServiceSystem);
      this.Controls.Add((Control) this.OkButton);
      this.Controls.Add((Control) this.pl1);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.FormBorderStyle = FormBorderStyle.FixedDialog;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Portal);
      this.Load += new System.EventHandler(this.Portal_Load);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private void OkButton_Click(object sender, EventArgs e) => this.EndOfWork();

    private void EndOfWork()
    {
      if (!(this.PortalLicenseTB.Text != ""))
        return;
      this.endtext = this.PortalLicenseTB.Text;
    }

    private void Portal_Load(object sender, EventArgs e)
    {
      this.pl2.Text = ZR_ClassLibMessages.ZR_ClassMessage.GetString("7");
      this.pl1.Text = ZR_ClassLibMessages.ZR_ClassMessage.GetString("8");
      this.BringToFront();
    }

    private void buttonEmail_Click(object sender, EventArgs e)
    {
      string ietfLanguageTag = Thread.CurrentThread.CurrentUICulture.IetfLanguageTag;
      string[] strArray = ietfLanguageTag.Split('-');
      if (strArray.GetLength(0) > 1)
        ietfLanguageTag = strArray[0];
      try
      {
        new Process()
        {
          StartInfo = {
            FileName = string.Format("http://zenner.softwareservicesystem.com/downloads/helpfiles/SSS.{0}.pdf", (object) ietfLanguageTag)
          }
        }.Start();
      }
      catch
      {
        int num = (int) GMM_MessageBox.ShowMessage("Global Meter Manager", "Konnte die Hilfedatei nicht herunterladen. Bitte starten Sie Ihren Browser, und laden Sie die Datei manuell herunter:" + Environment.NewLine + string.Format("http://zenner.softwareservicesystem.com/downloads/helpfiles/SSS.{0}.pdf", (object) ietfLanguageTag), true);
      }
    }

    private void PortalLicenseTB_KeyPress(object sender, KeyPressEventArgs e)
    {
      if (!(e.ToString() == Keys.Return.ToString()))
        return;
      this.EndOfWork();
    }

    private void buttonLoadFromSoftwareServiceSystem_Click(object sender, EventArgs e)
    {
      try
      {
        new Process()
        {
          StartInfo = {
            FileName = "http://zenner.softwareservicesystem.com/"
          }
        }.Start();
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("Global Meter Manager", ex.ToString(), true);
      }
    }

    private void myCancelButton_Click(object sender, EventArgs e)
    {
    }
  }
}


--- PPS_CacheClassNames.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.PPS_CacheClassNames
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum PPS_CacheClassNames
  {
    Unknown,
    HeatMeter,
    HeatMeterComponents,
    HeatMeterAccessories,
    HeatMeterCompact,
    HeatCalculator,
    VolumeMeter,
    TempSensor,
    BidirectionalRadio,
    WaterMeter,
    EdcModul,
    WaterMeterWithEdcModul,
    EdcHardwareType,
    HeatMeterComponentry,
    SmokeDetector,
    PdcModul,
    HeatCostAllocator,
    Zentralerfassung,
    ManuallyDefined,
    HeatCostAllocatorNew,
    WaterMeterUltrasonicLora,
    PressureTestComponent,
    Battery,
    LoRaGateway,
    WaterMeterWithPdcModul,
    ThSensor,
    WaterMeterModule,
    PcbA,
    MechanicalWaterMeter,
    FnnDeliveryNote,
    OEM_BaseClass,
    FnnCLSConfig,
    IOTSensor,
    OEMDevices,
  }
}


--- PPS_CacheParmNames.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.PPS_CacheParmNames
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum PPS_CacheParmNames
  {
    ShortText = 1,
    EAN_Number = 2,
    MeterTypeSeries = 3,
    HeatCalculatorType = 4,
    VolMeterType = 5,
    TempSensorType = 6,
    HeatEquipmentType = 7,
    FrontDesign = 8,
    MeterColor = 9,
    Menu = 10, // 0x0000000A
    EnergyCalculation = 11, // 0x0000000B
    EnergyMeterUnit = 12, // 0x0000000C
    TempSensorElement = 13, // 0x0000000D
    TempAsymmetry = 14, // 0x0000000E
    TempMeasurement = 15, // 0x0000000F
    VolTempRange = 16, // 0x00000010
    HeatTempRange = 17, // 0x00000011
    HeatADTempRange = 18, // 0x00000012
    SensorTempRange = 19, // 0x00000013
    SensorConnector = 20, // 0x00000014
    TempFittingList = 21, // 0x00000015
    TempInstallationPoint = 22, // 0x00000016
    TempSensorDimensions = 23, // 0x00000017
    TempSensorCable = 24, // 0x00000018
    TempSensorConnector = 25, // 0x00000019
    VolMeterNominalFlow = 26, // 0x0000001A
    VolMeterLength = 27, // 0x0000001B
    VolMeterConnection = 28, // 0x0000001C
    VolMeterSinglePipeConnection = 29, // 0x0000001D
    VolMeterDimensions = 30, // 0x0000001E
    VolumeUnit = 31, // 0x0000001F
    VolMeterPulseValue = 32, // 0x00000020
    VolMeterPosition = 33, // 0x00000021
    VolMeterMaxFrequency = 34, // 0x00000022
    VolMeterInputType = 35, // 0x00000023
    HeatMeterVolInputType = 36, // 0x00000024
    VolOutputType = 37, // 0x00000025
    VolMeterApproval = 38, // 0x00000026
    VolMeterCalibration = 39, // 0x00000027
    InOut1_Hardware = 40, // 0x00000028
    InOut1_Function = 41, // 0x00000029
    InOut1_PulseValue = 42, // 0x0000002A
    InOut1_Unit = 43, // 0x0000002B
    InOut2_Hardware = 44, // 0x0000002C
    InOut2_Function = 45, // 0x0000002D
    InOut2_PulseValue = 46, // 0x0000002E
    InOut2_Unit = 47, // 0x0000002F
    CommunicationInterface = 48, // 0x00000030
    HeatMeterApproval = 49, // 0x00000031
    HeatMeterTestMethod = 50, // 0x00000032
    HeatMeterCalibration = 51, // 0x00000033
    HeatDTLimits = 52, // 0x00000034
    VolumeMeterMID_qs = 53, // 0x00000035
    VolumeMeterMID_qp = 54, // 0x00000036
    VolumeMeterMID_qi = 55, // 0x00000037
    CalibrationTimePeriod = 56, // 0x00000038
    BatteryEndTime = 57, // 0x00000039
    DueDate = 58, // 0x0000003A
    UTC_TimeZone = 59, // 0x0000003B
    CaseOption = 60, // 0x0000003C
    TypeLabelDevice = 61, // 0x0000003D
    TypeLabelCarton = 62, // 0x0000003E
    MBusParameterList = 63, // 0x0000003F
    AdditionalProperties = 64, // 0x00000040
    BaseParameterSet = 65, // 0x00000041
    Manufacturer = 66, // 0x00000042
    Order_Number = 67, // 0x00000043
    Alias_Number = 68, // 0x00000044
    CreationDate = 69, // 0x00000045
    RadioFrequency = 70, // 0x00000046
    WaveFlowDeviceType = 71, // 0x00000047
    WafeFlowDeviceModel = 72, // 0x00000048
    Input1PulseValue = 73, // 0x00000049
    Input2PulseValue = 74, // 0x0000004A
    Input3PulseValue = 75, // 0x0000004B
    Input4PulseValue = 76, // 0x0000004C
    LoggerInterval = 77, // 0x0000004D
    LoggerDay = 78, // 0x0000004E
    LoggerPeriod = 79, // 0x0000004F
    LogOrStartHour = 80, // 0x00000050
    ManipulationDetection = 81, // 0x00000051
    ManipulationTypeInput1 = 82, // 0x00000052
    ManipulationTypeInput2 = 83, // 0x00000053
    ManipulationTypeInput3 = 84, // 0x00000054
    ManipulationTypeInput4 = 85, // 0x00000055
    TransmitterPower = 86, // 0x00000056
    HardwareTypeID = 87, // 0x00000057
    WaterMeterConnection = 88, // 0x00000058
    WaterMeterModel = 89, // 0x00000059
    WaterMeterLength = 90, // 0x0000005A
    WaterMeterTestMethod = 91, // 0x0000005B
    WaterMeterRemoteIndication = 92, // 0x0000005C
    WaterMeterManufacturer = 93, // 0x0000005D
    WaterMeterNominalFlow = 94, // 0x0000005E
    WaterMeterTempRange = 95, // 0x0000005F
    MaterialNumberRDM = 96, // 0x00000060
    MinCyclusTime = 97, // 0x00000061
    MaxCyclusTime = 98, // 0x00000062
    EnergyCalculationAtDTMin = 99, // 0x00000063
    DTMinHeat = 100, // 0x00000064
    DTMinCooling = 101, // 0x00000065
    HeatCoolingSwitchTemperature = 102, // 0x00000066
    CoolingMeterTestMethod = 103, // 0x00000067
    TarifMeterTestMethod = 104, // 0x00000068
    CoolingMeterApproval = 105, // 0x00000069
    TarifMeterApproval = 106, // 0x0000006A
    CustomerArticleNumber1 = 107, // 0x0000006B
    CustomerArticleNumber2 = 108, // 0x0000006C
    VolMeterModel = 109, // 0x0000006D
    VolMeterTestMethod = 110, // 0x0000006E
    VolMeterCableLength = 111, // 0x0000006F
    VolMeterFlowQS = 112, // 0x00000070
    VolMeterFlowQP = 113, // 0x00000071
    VolMeterFlowQI = 114, // 0x00000072
    VolMeterTestPulseValue = 115, // 0x00000073
    VolMeterNominalPressure = 116, // 0x00000074
    InOut3_Hardware = 117, // 0x00000075
    InOut3_Function = 118, // 0x00000076
    InOut3_PulseValue = 119, // 0x00000077
    InOut3_Unit = 120, // 0x00000078
    VolumeMeterType = 121, // 0x00000079
    WaermeTQ = 122, // 0x0000007A
    DtminQminDirect = 123, // 0x0000007B
    DtminQminPocket = 124, // 0x0000007C
    BatteryType = 125, // 0x0000007D
    Branding = 126, // 0x0000007E
    LeakDetection = 127, // 0x0000007F
    BurstDetection = 128, // 0x00000080
    BackflowDetection = 129, // 0x00000081
    StandstillDetection = 130, // 0x00000082
    FrequencyBand = 131, // 0x00000083
    RadioMode = 132, // 0x00000084
    DismantlingDetection = 133, // 0x00000085
    CoilManipulationDetection = 134, // 0x00000086
    MBusHeaderType = 135, // 0x00000087
    Mounting = 136, // 0x00000088
    OutputModes = 137, // 0x00000089
    TransmissionInterval = 138, // 0x0000008A
    UndersizeDetection = 139, // 0x0000008B
    OversizeDetection = 140, // 0x0000008C
    NumberOfRolls = 141, // 0x0000008D
    EdcType = 142, // 0x0000008E
    PressureLevel = 143, // 0x0000008F
    Ratio = 144, // 0x00000090
    WaterMeterType = 145, // 0x00000091
    MaterialNumberEDCHardware = 146, // 0x00000092
    UserID = 147, // 0x00000093
    EdcHardwareType = 148, // 0x00000094
    AesKey = 149, // 0x00000095
    Model = 150, // 0x00000096
    VolMeterMaximumPressure = 151, // 0x00000097
    InputConfiguration = 152, // 0x00000098
    PulseValueInputA = 153, // 0x00000099
    PulseValueInputB = 154, // 0x0000009A
    HcaModel = 155, // 0x0000009B
    MountingForm = 156, // 0x0000009C
    ProductionStage = 157, // 0x0000009D
    Radio = 158, // 0x0000009E
    Principle = 159, // 0x0000009F
    Type = 160, // 0x000000A0
    CentralCaptureSeries = 161, // 0x000000A1
    BarcodeType = 162, // 0x000000A2
    CombiCableLength = 163, // 0x000000A3
    PulseInputType = 164, // 0x000000A4
    ReedInputA = 165, // 0x000000A5
    ReedInputB = 166, // 0x000000A6
    Senario = 167, // 0x000000A7
    CableProtection = 168, // 0x000000A8
    StartChannel = 169, // 0x000000A9
    UpStreamChannelQuantity = 170, // 0x000000AA
    ActivationMode = 171, // 0x000000AB
    DeliveryMode = 172, // 0x000000AC
    UpDownChannelScenario = 173, // 0x000000AD
    AppSKey = 174, // 0x000000AE
    NwkSKey = 175, // 0x000000AF
    AppKey = 176, // 0x000000B0
    AntennaType = 177, // 0x000000B1
    AntennaCableLength = 178, // 0x000000B2
    Sensor = 179, // 0x000000B3
    JoinEui = 180, // 0x000000B4
    AdaptiveDateRate = 181, // 0x000000B5
    SerialNumberFormat = 182, // 0x000000B6
    SummerTimeCountingStart = 183, // 0x000000B7
    SummerTimeCountingStop = 184, // 0x000000B8
    SummerTimeCountingSuppression = 185, // 0x000000B9
    DinDeviceIdentification = 186, // 0x000000BA
    SerialNumberGenerator = 187, // 0x000000BB
    RatioPulseRotation = 188, // 0x000000BC
    UpLinkStartChannelIndex = 189, // 0x000000BD
    Rx2DownChannelIndex = 190, // 0x000000BE
    TestMethod = 191, // 0x000000BF
    Approval = 192, // 0x000000C0
    SamplingRate = 193, // 0x000000C1
    VolumeResolution = 194, // 0x000000C2
    PermanentFlowRateQ3 = 195, // 0x000000C3
    RadioActiveTime = 196, // 0x000000C4
    MinimumFlowrateQ1 = 197, // 0x000000C5
    WaterMeterAccuracyClass = 198, // 0x000000C6
    PressureTestComponentSapNumber = 199, // 0x000000C7
    MaterialNumberVolumeMeter = 200, // 0x000000C8
    PackingInstruction = 201, // 0x000000C9
    RadioScenario = 202, // 0x000000CA
    RadioTechnologie = 203, // 0x000000CB
    BatteryCapacity = 204, // 0x000000CC
    IncludedBatterys = 205, // 0x000000CD
    TelecomOperator = 206, // 0x000000CE
    RadioProtocolMode = 207, // 0x000000CF
    Channels = 208, // 0x000000D0
    NetType = 209, // 0x000000D1
    GlobalNavigationSatelliteSystem = 210, // 0x000000D2
    PowerType = 211, // 0x000000D3
    SimCard = 213, // 0x000000D5
    PdcType = 214, // 0x000000D6
    VolumeUnitVif = 215, // 0x000000D7
    DN = 216, // 0x000000D8
    PcbaSapNumber = 217, // 0x000000D9
    WmModuleSapNumber = 218, // 0x000000DA
    PartNumberGenerator = 219, // 0x000000DB
    Baudrate = 220, // 0x000000DC
    Parity = 221, // 0x000000DD
    SmartFunctions = 222, // 0x000000DE
    RadioTelegramType = 223, // 0x000000DF
    WaterMeterPulseValue = 224, // 0x000000E0
    WaterMeterTestPulseValue = 225, // 0x000000E1
    Accessories = 226, // 0x000000E2
    IndicatorNumbers = 227, // 0x000000E3
    Released = 228, // 0x000000E4
    ReleasedChangedDate = 229, // 0x000000E5
    ReleasedChanger = 230, // 0x000000E6
    TransducerAmplitudeLimit = 231, // 0x000000E7
    CustomerNumberGenerator = 232, // 0x000000E8
    CustomerNumberFormat = 233, // 0x000000E9
    Code = 234, // 0x000000EA
    BatteryWarningMonths = 235, // 0x000000EB
    Lns = 236, // 0x000000EC
    CellularModem = 237, // 0x000000ED
    LabelType = 238, // 0x000000EE
    PrintedDeviceName = 239, // 0x000000EF
    CounterType = 240, // 0x000000F0
    TransitionalFlowrateQ2 = 241, // 0x000000F1
    PlatformAccessAddress = 242, // 0x000000F2
    NbTestRegister = 243, // 0x000000F3
    DeviceAccessAddress = 244, // 0x000000F4
    DeviceAccessDns = 245, // 0x000000F5
    Environment = 255, // 0x000000FF
    FnnBrandNumber = 256, // 0x00000100
    FnnBrandNumberMessEv = 257, // 0x00000101
    FnnDomesticApproval = 258, // 0x00000102
    FnnMidApproval = 259, // 0x00000103
    ReligionHolidayCounting = 260, // 0x00000104
    FnnNetStaticIP = 261, // 0x00000105
    FnnNetStaticMask = 262, // 0x00000106
    FnnSMGWIP = 263, // 0x00000107
    FnnSMGWPort = 264, // 0x00000108
    FnnCLSCenterIP = 265, // 0x00000109
    FnnCLSCenterPort = 266, // 0x0000010A
    FnnPWRoute = 267, // 0x0000010B
    FnnPWSRV = 268, // 0x0000010C
    SensorType = 269, // 0x0000010D
    Battery = 270, // 0x0000010E
    HazardousMaterialNumber = 271, // 0x0000010F
    DeviceType = 272, // 0x00000110
    SmartFunctionsConfiguration = 273, // 0x00000111
    TypeLabelCartonMultiple = 274, // 0x00000112
    PressureLossClass = 275, // 0x00000113
    SmartFunctionsGroup = 276, // 0x00000114
    ConfigurationKey = 277, // 0x00000115
    CommunicationScenarioConfig = 278, // 0x00000116
  }
}


--- PPS_Lists.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.PPS_Lists
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Collections.Generic;

#nullable disable
namespace ZR_ClassLibrary
{
  public class PPS_Lists
  {
    public static SortedList<PPS_CacheClassNames, string> GetSAPClassNamesList()
    {
      return new SortedList<PPS_CacheClassNames, string>()
      {
        [PPS_CacheClassNames.HeatMeter] = "WÄRMEZÄHLER",
        [PPS_CacheClassNames.HeatMeterComponents] = "WÄRMEZÄHLER_TEILE",
        [PPS_CacheClassNames.HeatMeterAccessories] = "WÄRMEZÄHLER_ZUBEH",
        [PPS_CacheClassNames.HeatMeterCompact] = "WAERMEZAEHLER_KOMP",
        [PPS_CacheClassNames.HeatCalculator] = "RECHENWERKE",
        [PPS_CacheClassNames.VolumeMeter] = "VOLUMENMESSTEIL",
        [PPS_CacheClassNames.TempSensor] = "TEMPERATURFUEHLER",
        [PPS_CacheClassNames.BidirectionalRadio] = "BIDIR_FUNK",
        [PPS_CacheClassNames.WaterMeter] = "WASSERZÄHLER",
        [PPS_CacheClassNames.EdcModul] = "EDC_MODUL",
        [PPS_CacheClassNames.PdcModul] = "PDC_MODUL",
        [PPS_CacheClassNames.WaterMeterWithEdcModul] = "WZ_MIT_EDC_MODUL",
        [PPS_CacheClassNames.EdcHardwareType] = "EDC_HW_TYPE",
        [PPS_CacheClassNames.HeatMeterComponentry] = "WAERMEZAEHLER_BAUG",
        [PPS_CacheClassNames.SmokeDetector] = "SMOKE_DETECTOR",
        [PPS_CacheClassNames.HeatCostAllocator] = "HEIZKOSTENVERTEILE",
        [PPS_CacheClassNames.HeatCostAllocatorNew] = "HEAT_COST_ALLOC",
        [PPS_CacheClassNames.Zentralerfassung] = "ZENTRALERFASSUNG",
        [PPS_CacheClassNames.ManuallyDefined] = "NO_SAP_Type",
        [PPS_CacheClassNames.WaterMeterUltrasonicLora] = "WATER_M_US_LORA",
        [PPS_CacheClassNames.PressureTestComponent] = "PRESSURE_TEST_COMP",
        [PPS_CacheClassNames.Battery] = "BATTERY",
        [PPS_CacheClassNames.LoRaGateway] = "LORA_GATEWAY",
        [PPS_CacheClassNames.WaterMeterWithPdcModul] = "WM_WITH_PDC_MODULE",
        [PPS_CacheClassNames.ThSensor] = "TH_SENSOR",
        [PPS_CacheClassNames.WaterMeterModule] = "WM_MODULE",
        [PPS_CacheClassNames.PcbA] = "PCBA",
        [PPS_CacheClassNames.MechanicalWaterMeter] = "WATER_M_MECHANICAL",
        [PPS_CacheClassNames.FnnDeliveryNote] = "FNN_ELS",
        [PPS_CacheClassNames.FnnCLSConfig] = "FNN_CLS_CONFIG",
        [PPS_CacheClassNames.IOTSensor] = "IOT_SENSOR",
        [PPS_CacheClassNames.OEMDevices] = "OEM_DEVICES"
      };
    }

    public static SortedList<PPS_CacheParmNames, string> GetSAPAttributNamesList()
    {
      return new SortedList<PPS_CacheParmNames, string>()
      {
        [PPS_CacheParmNames.MeterTypeSeries] = "BAUREIHE_WAERMEZAEHLER",
        [PPS_CacheParmNames.FrontDesign] = "FRONT_DESIGN",
        [PPS_CacheParmNames.VolMeterLength] = "BAULAENGE",
        [PPS_CacheParmNames.VolMeterConnection] = "ANSCHLUSS",
        [PPS_CacheParmNames.VolMeterSinglePipeConnection] = "ANSCHLUSS_WAERMEZAEHLER",
        [PPS_CacheParmNames.VolMeterNominalFlow] = "NENNDURCHFLUSS-QN",
        [PPS_CacheParmNames.VolMeterNominalPressure] = "PN",
        [PPS_CacheParmNames.VolMeterMaximumPressure] = "PS",
        [PPS_CacheParmNames.VolMeterFlowQS] = "MAX_DURCHFLUSS_QS",
        [PPS_CacheParmNames.VolMeterFlowQP] = "NENN_DURCHFLUSS_QP",
        [PPS_CacheParmNames.VolMeterFlowQI] = "MIN_DURCHFLUSS_QI",
        [PPS_CacheParmNames.VolMeterPosition] = "EINBAUORT",
        [PPS_CacheParmNames.DueDate] = "STICHTAG",
        [PPS_CacheParmNames.TempSensorElement] = "TEMP_SENSOR_ELEMENT",
        [PPS_CacheParmNames.VolMeterPulseValue] = "IMPULSWERTIGKEIT",
        [PPS_CacheParmNames.VolMeterTestPulseValue] = "TESTIMPULSWERTIGKEIT",
        [PPS_CacheParmNames.TypeLabelDevice] = "DRUCKOPTION_GERAET",
        [PPS_CacheParmNames.TypeLabelCarton] = "DRUCKOPTION_KARTON",
        [PPS_CacheParmNames.TypeLabelCartonMultiple] = "DRUCKOPTION_KARTON_MULTIPLE",
        [PPS_CacheParmNames.CommunicationInterface] = "KOMMUNIKATION_SCHNITTSTELLE",
        [PPS_CacheParmNames.InOut1_Function] = "EIN_AUS_1_FUNKTION",
        [PPS_CacheParmNames.InOut2_Function] = "EIN_AUS_2_FUNKTION",
        [PPS_CacheParmNames.InOut3_Function] = "EIN_AUS_3_FUNKTION",
        [PPS_CacheParmNames.EnergyCalculation] = "ENERGIE_BERECHNUNG",
        [PPS_CacheParmNames.EnergyMeterUnit] = "ENERGIE_ANZEIGE_EINHEIT",
        [PPS_CacheParmNames.VolumeUnit] = "WAERME_VOL_ANZEIGE_EINHEIT",
        [PPS_CacheParmNames.InOut1_PulseValue] = "EIN_AUS_1_PULSWERTIGKEIT",
        [PPS_CacheParmNames.InOut2_PulseValue] = "EIN_AUS_2_PULSWERTIGKEIT",
        [PPS_CacheParmNames.InOut3_PulseValue] = "EIN_AUS_3_PULSWERTIGKEIT",
        [PPS_CacheParmNames.InOut1_Unit] = "EIN_AUS_1_ANZEIGE_EINHEIT",
        [PPS_CacheParmNames.InOut2_Unit] = "EIN_AUS_2_ANZEIGE_EINHEIT",
        [PPS_CacheParmNames.InOut3_Unit] = "EIN_AUS_3_ANZEIGE_EINHEIT",
        [PPS_CacheParmNames.Menu] = "GERAETE_MENU",
        [PPS_CacheParmNames.MBusParameterList] = "MBUS_PARAMETER_LIST",
        [PPS_CacheParmNames.TempMeasurement] = "TEMP_MESSUNG",
        [PPS_CacheParmNames.UTC_TimeZone] = "UTC_ZEIT_ZONE",
        [PPS_CacheParmNames.HeatMeterCalibration] = "WAERME_EICHKLASSE",
        [PPS_CacheParmNames.HeatMeterTestMethod] = "BEGLAUBIGUNG",
        [PPS_CacheParmNames.HeatTempRange] = "WAERME_TEMP_BEREICH",
        [PPS_CacheParmNames.HeatMeterApproval] = "WAERME_ZULASSUNG",
        [PPS_CacheParmNames.VolMeterType] = "VOL_TYPE",
        [PPS_CacheParmNames.HeatEquipmentType] = "TEMP_ZUBEHOER",
        [PPS_CacheParmNames.TempSensorType] = "TEMP_SENSOR_TYP",
        [PPS_CacheParmNames.TempAsymmetry] = "TEMP_ASYMMETRIE",
        [PPS_CacheParmNames.TempFittingList] = "TEMP_PASSENDE_EINBAUSTELLEN",
        [PPS_CacheParmNames.TempInstallationPoint] = "TEMP_EINBAUSTELLE",
        [PPS_CacheParmNames.TempSensorConnector] = "TEMP_ANSCHLUSS",
        [PPS_CacheParmNames.TempSensorDimensions] = "TEMP_FUEHLER_GROESSE",
        [PPS_CacheParmNames.TempSensorCable] = "TEMP_FUEHLER_KABEL",
        [PPS_CacheParmNames.HeatDTLimits] = "WAERME_DT_BEREICH",
        [PPS_CacheParmNames.VolumeMeterMID_qi] = "VOL_MID_QI",
        [PPS_CacheParmNames.VolumeMeterMID_qp] = "VOL_MID_QP",
        [PPS_CacheParmNames.VolumeMeterMID_qs] = "VOL_MID_QS",
        [PPS_CacheParmNames.SensorConnector] = "WAERME_TEMP_ANSCHLUSS",
        [PPS_CacheParmNames.SensorTempRange] = "TEMP_TEMPERATURBEREICH",
        [PPS_CacheParmNames.VolMeterCalibration] = "VOL_KALIBRIERUNG",
        [PPS_CacheParmNames.VolTempRange] = "VOL_TEMPERATURBEREICH",
        [PPS_CacheParmNames.VolMeterApproval] = "VOL_ZULASSUNG",
        [PPS_CacheParmNames.VolOutputType] = "VOL_AUSGANGSTYP",
        [PPS_CacheParmNames.VolMeterInputType] = "WAERME_VOL_EINGANGS_TYP",
        [PPS_CacheParmNames.VolMeterMaxFrequency] = "WAERME_VOL_MAX_FREQUENZ",
        [PPS_CacheParmNames.VolMeterModel] = "BAUART-VOLUMENMESSTEIL",
        [PPS_CacheParmNames.VolMeterTestMethod] = "BEGLAUBIGUNG",
        [PPS_CacheParmNames.VolMeterCableLength] = "KABELLAENGE",
        [PPS_CacheParmNames.InOut1_Hardware] = "EIN_AUS_1_HARDWARE",
        [PPS_CacheParmNames.InOut2_Hardware] = "EIN_AUS_2_HARDWARE",
        [PPS_CacheParmNames.InOut3_Hardware] = "EIN_AUS_3_HARDWARE",
        [PPS_CacheParmNames.HeatADTempRange] = "WAERME_AD_MESSBEREICH",
        [PPS_CacheParmNames.BatteryEndTime] = "BATTERIE_ENDE_DATUM",
        [PPS_CacheParmNames.CalibrationTimePeriod] = "EICHPERIODE",
        [PPS_CacheParmNames.AdditionalProperties] = "ZUSAETZLICHE_EIGENSCHAFTEN",
        [PPS_CacheParmNames.BaseParameterSet] = "BASIS_PARAMETER_SET",
        [PPS_CacheParmNames.Manufacturer] = "GEFERTIGT_VON",
        [PPS_CacheParmNames.MinCyclusTime] = "MIN_ZYKLUSZEIT",
        [PPS_CacheParmNames.MaxCyclusTime] = "MAX_ZYKLUSZEIT",
        [PPS_CacheParmNames.EnergyCalculationAtDTMin] = "ENERGIE_DTMIN",
        [PPS_CacheParmNames.DTMinHeat] = "DTMIN_WAERME",
        [PPS_CacheParmNames.DTMinCooling] = "DTMIN_KAELTE",
        [PPS_CacheParmNames.HeatCoolingSwitchTemperature] = "T_WK_UMSCHALT",
        [PPS_CacheParmNames.CoolingMeterTestMethod] = "KAELTE_BEGLAUBIGUNG",
        [PPS_CacheParmNames.TarifMeterTestMethod] = "TARIF_BEGLAUBIGUNG",
        [PPS_CacheParmNames.CoolingMeterApproval] = "KAELTE_ZULASSUNG",
        [PPS_CacheParmNames.TarifMeterApproval] = "TARIF_ZULASSUNG",
        [PPS_CacheParmNames.RadioFrequency] = "FREQUENZ",
        [PPS_CacheParmNames.WaveFlowDeviceType] = "GERAETEART",
        [PPS_CacheParmNames.WafeFlowDeviceModel] = "GERAETETYP",
        [PPS_CacheParmNames.Input1PulseValue] = "IMP_WERT_1",
        [PPS_CacheParmNames.Input2PulseValue] = "IMP_WERT_2",
        [PPS_CacheParmNames.Input3PulseValue] = "IMP_WERT_3",
        [PPS_CacheParmNames.Input4PulseValue] = "IMP_WERT_4",
        [PPS_CacheParmNames.LoggerInterval] = "LOGGERINTERVALL",
        [PPS_CacheParmNames.LoggerDay] = "LOGGERTAG",
        [PPS_CacheParmNames.LoggerPeriod] = "LOGINTERVALL_FREIER_LOGGER",
        [PPS_CacheParmNames.LogOrStartHour] = "LOGZEIT_ODER_STARTZEIT",
        [PPS_CacheParmNames.ManipulationDetection] = "MANIPULATIONSERKENNUNG",
        [PPS_CacheParmNames.ManipulationTypeInput1] = "MANIPULATIONSART_1",
        [PPS_CacheParmNames.ManipulationTypeInput2] = "MANIPULATIONSART_2",
        [PPS_CacheParmNames.ManipulationTypeInput3] = "MANIPULATIONSART_3",
        [PPS_CacheParmNames.ManipulationTypeInput4] = "MANIPULATIONSART_4",
        [PPS_CacheParmNames.TransmitterPower] = "SENDELEISTUNG",
        [PPS_CacheParmNames.HardwareTypeID] = "HARDWARETYPEID",
        [PPS_CacheParmNames.WaterMeterConnection] = "ANSCHLUSS",
        [PPS_CacheParmNames.WaterMeterModel] = "BAUART-WASSERZAEHLER",
        [PPS_CacheParmNames.WaterMeterLength] = "BAULAENGE",
        [PPS_CacheParmNames.WaterMeterTestMethod] = "BEGLAUBIGUNG",
        [PPS_CacheParmNames.WaterMeterRemoteIndication] = "FERNANZEIGE",
        [PPS_CacheParmNames.WaterMeterManufacturer] = "HERSTELLER",
        [PPS_CacheParmNames.WaterMeterNominalFlow] = "NENNDURCHFLUSS-QN",
        [PPS_CacheParmNames.WaterMeterTempRange] = "TEMPERATURBEREICH",
        [PPS_CacheParmNames.CustomerArticleNumber1] = "FREMD_ART_NR_1",
        [PPS_CacheParmNames.CustomerArticleNumber2] = "FREMD_ART_NR_2",
        [PPS_CacheParmNames.VolumeMeterType] = "VOLUMENMESSTEIL_TYP",
        [PPS_CacheParmNames.WaermeTQ] = "WAERME_TQ",
        [PPS_CacheParmNames.DtminQminDirect] = "DTMIN_QMIN_DIRECT",
        [PPS_CacheParmNames.DtminQminPocket] = "DTMIN_QMIN_POCKET",
        [PPS_CacheParmNames.Battery] = "BATTERIE",
        [PPS_CacheParmNames.BatteryType] = "BATTERIE_TYP",
        [PPS_CacheParmNames.Branding] = "BRANDING",
        [PPS_CacheParmNames.LeakDetection] = "ERKENNUNG_LECKAGE",
        [PPS_CacheParmNames.BurstDetection] = "ERKENNUNG_ROHRBRUCH",
        [PPS_CacheParmNames.BackflowDetection] = "ERKENNUNG_RUECKFLUSS",
        [PPS_CacheParmNames.StandstillDetection] = "ERKENNUNG_ZAEHLERSTILLSTAND",
        [PPS_CacheParmNames.FrequencyBand] = "FREQUENZBAND",
        [PPS_CacheParmNames.RadioMode] = "FUNKMODUS",
        [PPS_CacheParmNames.CaseOption] = "GEHAEUSEOPTIONEN",
        [PPS_CacheParmNames.DismantlingDetection] = "MANIPULATIONSERKENN_DEMONTAGE",
        [PPS_CacheParmNames.CoilManipulationDetection] = "MANIPULATIONSERKENN_SPULE",
        [PPS_CacheParmNames.MBusHeaderType] = "MBUS_HEADER_TYP",
        [PPS_CacheParmNames.Mounting] = "MONTAGE_AM_ZAEHLER",
        [PPS_CacheParmNames.OutputModes] = "OUTPUT_MODES",
        [PPS_CacheParmNames.TransmissionInterval] = "SENDE_INTERVALL",
        [PPS_CacheParmNames.UndersizeDetection] = "ERKENNUNG_UNTERDIMENSIONIERT",
        [PPS_CacheParmNames.OversizeDetection] = "ERKENNUNG_UEBERDIMENSIONIERT",
        [PPS_CacheParmNames.NumberOfRolls] = "ANZAHL_ROLLEN",
        [PPS_CacheParmNames.WaterMeterTestMethod] = "BEGLAUBIGUNG",
        [PPS_CacheParmNames.PressureLevel] = "DRUCKSTUFE",
        [PPS_CacheParmNames.Ratio] = "RATIO",
        [PPS_CacheParmNames.WaterMeterType] = "WZ_TYP",
        [PPS_CacheParmNames.EdcHardwareType] = "EDC_HARDWARETYPE",
        [PPS_CacheParmNames.AesKey] = "AES_KEY",
        [PPS_CacheParmNames.Model] = "AUSFUEHRUNG",
        [PPS_CacheParmNames.InputConfiguration] = "INPUT_CONFIGURATION",
        [PPS_CacheParmNames.PulseValueInputA] = "EINGANG_A_PULSWERTIGKEIT",
        [PPS_CacheParmNames.PulseValueInputB] = "EINGANG_B_PULSWERTIGKEIT",
        [PPS_CacheParmNames.HcaModel] = "AUSFUEHRUNG-HEIZKOSTENV",
        [PPS_CacheParmNames.MountingForm] = "BAUFORM",
        [PPS_CacheParmNames.ProductionStage] = "FERTIGUNGSSTUFE",
        [PPS_CacheParmNames.Principle] = "PRINZIP",
        [PPS_CacheParmNames.Type] = "TYP",
        [PPS_CacheParmNames.Radio] = "FUNK",
        [PPS_CacheParmNames.CentralCaptureSeries] = "BAUREIHE_ZENTRALERFASSUNG",
        [PPS_CacheParmNames.BarcodeType] = "BARCODETYPE",
        [PPS_CacheParmNames.CombiCableLength] = "COMBI_KABEL_LAENGE",
        [PPS_CacheParmNames.PulseInputType] = "IMPULSAUFNAHME",
        [PPS_CacheParmNames.Sensor] = "FUEHLER",
        [PPS_CacheParmNames.JoinEui] = "JOIN_EUI",
        [PPS_CacheParmNames.AdaptiveDateRate] = "ADAPTIVE_DATA_RATE",
        [PPS_CacheParmNames.SerialNumberFormat] = "SERIAL_NUMBER_FORMAT",
        [PPS_CacheParmNames.SummerTimeCountingStart] = "SUMMERTIME_COUNTING_START",
        [PPS_CacheParmNames.SummerTimeCountingStop] = "SUMMERTIME_COUNTING_STOP",
        [PPS_CacheParmNames.SummerTimeCountingSuppression] = "SUMMERTIME_COUNTING_SUPPRESION",
        [PPS_CacheParmNames.DinDeviceIdentification] = "DIN_DEVICE_IDENTIFICATION",
        [PPS_CacheParmNames.SerialNumberGenerator] = "SERIAL_NUMBER_GENERATOR",
        [PPS_CacheParmNames.RatioPulseRotation] = "RATIO_PULSE_ROTATION",
        [PPS_CacheParmNames.UpLinkStartChannelIndex] = "UP_LINK_START_CHANNEL_INDEX",
        [PPS_CacheParmNames.UpStreamChannelQuantity] = "UP_STREAM_CHANNEL_QUANTITY",
        [PPS_CacheParmNames.UpDownChannelScenario] = "UP_DOWN_CHANNEL_SCENARIO",
        [PPS_CacheParmNames.Rx2DownChannelIndex] = "RX2_DOWN_LINK_CHANNEL_INDEX",
        [PPS_CacheParmNames.ActivationMode] = "ACTIVATION_MODE",
        [PPS_CacheParmNames.TestMethod] = "PRUEFVERFAHREN",
        [PPS_CacheParmNames.Approval] = "ZULASSUNG",
        [PPS_CacheParmNames.SamplingRate] = "SAMPLING_RATE",
        [PPS_CacheParmNames.VolumeResolution] = "VOLUME_RESOLUTION",
        [PPS_CacheParmNames.PermanentFlowRateQ3] = "PERMANENT_FLOW_RATE_Q3",
        [PPS_CacheParmNames.MinimumFlowrateQ1] = "MINIMUM_FLOW_RATE_Q1",
        [PPS_CacheParmNames.WaterMeterAccuracyClass] = "ACCURACY_CLASS",
        [PPS_CacheParmNames.RadioActiveTime] = "RADIO_ACTIVE_TIME",
        [PPS_CacheParmNames.PackingInstruction] = "PACKING_INSTRUCTION",
        [PPS_CacheParmNames.RadioScenario] = "RADIO_SCENARIO",
        [PPS_CacheParmNames.RadioTechnologie] = "RADIO_TECHNOLOGY",
        [PPS_CacheParmNames.BatteryCapacity] = "CAPACITY",
        [PPS_CacheParmNames.IncludedBatterys] = "INCLUDED_BATTERIES",
        [PPS_CacheParmNames.TelecomOperator] = "TELECOM_OPERATOR",
        [PPS_CacheParmNames.RadioProtocolMode] = "RADIO_PROTOCOL_MODE",
        [PPS_CacheParmNames.Channels] = "CHANNELS",
        [PPS_CacheParmNames.NetType] = "NET_TYPE",
        [PPS_CacheParmNames.GlobalNavigationSatelliteSystem] = "GNSS",
        [PPS_CacheParmNames.PowerType] = "POWER_TYPE",
        [PPS_CacheParmNames.SimCard] = "SIM_CARD",
        [PPS_CacheParmNames.AntennaType] = "ANTENNA_TYPE",
        [PPS_CacheParmNames.VolumeUnitVif] = "VOLUME_UNIT",
        [PPS_CacheParmNames.DN] = "DN",
        [PPS_CacheParmNames.PartNumberGenerator] = "PART_NUMBER_GENERATOR",
        [PPS_CacheParmNames.Baudrate] = "BAUDRATE",
        [PPS_CacheParmNames.Parity] = "PARITY",
        [PPS_CacheParmNames.SmartFunctions] = "SMART_FUNCTIONS",
        [PPS_CacheParmNames.SmartFunctionsConfiguration] = "SMART_FUNCTION_CONFIG",
        [PPS_CacheParmNames.SmartFunctionsGroup] = "SMART_FUNCTIONS_GROUP",
        [PPS_CacheParmNames.RadioTelegramType] = "RADIO_TELEGRAM_TYPE",
        [PPS_CacheParmNames.WaterMeterPulseValue] = "IMPULSWERTIGKEIT",
        [PPS_CacheParmNames.WaterMeterTestPulseValue] = "TESTIMPULSWERTIGKEIT",
        [PPS_CacheParmNames.Accessories] = "ACCESSORIES",
        [PPS_CacheParmNames.IndicatorNumbers] = "INDICATOR_NUMBERS",
        [PPS_CacheParmNames.TransducerAmplitudeLimit] = "TRANSDUCER_AMPLITUDE_LIMIT",
        [PPS_CacheParmNames.CustomerNumberGenerator] = "CUSTOMER_NUMBER_GENERATOR",
        [PPS_CacheParmNames.CustomerNumberFormat] = "CUSTOMER_NUMBER_FORMAT",
        [PPS_CacheParmNames.Code] = "CODE",
        [PPS_CacheParmNames.BatteryWarningMonths] = "BATTERY_WARNING_MONTHS",
        [PPS_CacheParmNames.Lns] = "LNS",
        [PPS_CacheParmNames.CellularModem] = "CELLULAR_MODEM",
        [PPS_CacheParmNames.LabelType] = "LABEL_TYPE",
        [PPS_CacheParmNames.PrintedDeviceName] = "PRINTED_DEVICE_NAME",
        [PPS_CacheParmNames.CounterType] = "COUNTER_TYPE",
        [PPS_CacheParmNames.TransitionalFlowrateQ2] = "TRANSITIONAL_FLOW_RATE_Q2",
        [PPS_CacheParmNames.PlatformAccessAddress] = "PLATFORM_ACCESS_ADDRESS",
        [PPS_CacheParmNames.NbTestRegister] = "NB_TEST_REGISTER",
        [PPS_CacheParmNames.DeviceAccessAddress] = "DEVICE_ACCESS_ADDRESS",
        [PPS_CacheParmNames.DeviceAccessDns] = "DEVICE_ACCESS_DNS",
        [PPS_CacheParmNames.Environment] = "UMG",
        [PPS_CacheParmNames.FnnBrandNumber] = "FNN_MARKENNUMMER",
        [PPS_CacheParmNames.FnnBrandNumberMessEv] = "FNN_MARKENNUMMERMESSEV",
        [PPS_CacheParmNames.FnnDomesticApproval] = "FNN_INNERSTAATLICHEZULASSUNG",
        [PPS_CacheParmNames.FnnMidApproval] = "FNN_PRUEFBESCHEINIGUNGNACHMID",
        [PPS_CacheParmNames.ReligionHolidayCounting] = "RELIGION_HOLIDAY_COUNTING",
        [PPS_CacheParmNames.FnnNetStaticIP] = "FNN_NET_STATIC_IP",
        [PPS_CacheParmNames.FnnNetStaticMask] = "FNN_NET_STATIC_MASK",
        [PPS_CacheParmNames.FnnSMGWIP] = "FNN_SMGW_IP",
        [PPS_CacheParmNames.FnnSMGWPort] = "FNN_SMGW_PORT",
        [PPS_CacheParmNames.FnnCLSCenterIP] = "FNN_CLSCENTER_IP",
        [PPS_CacheParmNames.FnnCLSCenterPort] = "FNN_CLSCENTER_PORT",
        [PPS_CacheParmNames.FnnPWRoute] = "FNN_PW_ROUTE",
        [PPS_CacheParmNames.FnnPWSRV] = "FNN_PW_SRV",
        [PPS_CacheParmNames.SensorType] = "SENSOR_TYPE",
        [PPS_CacheParmNames.HazardousMaterialNumber] = "GEFAHRSTOFFNUMMER",
        [PPS_CacheParmNames.DeviceType] = "DEVICE_TYPE",
        [PPS_CacheParmNames.CommunicationScenarioConfig] = "COMMUNICATION_SCENARIO_CONFIG",
        [PPS_CacheParmNames.ConfigurationKey] = "CONFIGURATION_KEY",
        [PPS_CacheParmNames.PressureLossClass] = "PRESSURE_LOSS_CLASS"
      };
    }
  }
}


--- PPS_SourceParmNames.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.PPS_SourceParmNames
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum PPS_SourceParmNames
  {
    WMZ_Gruppe = 1,
    WMZ_Kurzinfo = 2,
    WMZ_BestNr = 3,
    WMZ_EanNr = 4,
    WMZ_AltArtNr = 5,
    WMZ_Freigabe = 6,
    WMZ_Typ11 = 7,
    WMZ_Qn21 = 8,
    WMZ_Einbaulaenge22 = 9,
    WMZ_AnschlussGewinde23 = 10, // 0x0000000A
    WMZ_Fuehlertyp31 = 11, // 0x0000000B
    WMZ_Einbauort32 = 12, // 0x0000000C
    WMZ_Asymmetrie33 = 13, // 0x0000000D
    WMZ_Fuehlerdurchmesser41 = 14, // 0x0000000E
    WMZ_Fuehlerlaenge42 = 15, // 0x0000000F
    WMZ_Fuehlerform43 = 16, // 0x00000010
    WMZ_Aufdruck51 = 17, // 0x00000011
    WMZ_Eichzustand52 = 18, // 0x00000012
    WMZ_Schnittstelle61 = 19, // 0x00000013
    WMZ_Menue62 = 20, // 0x00000014
    WMZ_IO1Funktion71 = 21, // 0x00000015
    WMZ_IO2Funktion72 = 22, // 0x00000016
    WMZ_EnergieNormierung81 = 23, // 0x00000017
    WMZ_VolumenNormierung82 = 24, // 0x00000018
    WMZ_Unbekannt91 = 25, // 0x00000019
    WMZ_Zulassung92 = 26, // 0x0000001A
    WMZ_Stichtag101 = 27, // 0x0000001B
    WMZ_IO1Normierung111 = 28, // 0x0000001C
    WMZ_IO2Normierung112 = 29, // 0x0000001D
    WMZ_FuehlerTempBereich121 = 30, // 0x0000001E
    WMZ_Fuehlersystem122 = 31, // 0x0000001F
    WMZ_Kabelform131 = 32, // 0x00000020
    WMZ_Kabellaenge132 = 33, // 0x00000021
    WMZ_UnbekanntTyp141 = 34, // 0x00000022
    WMZ_Klasse142 = 35, // 0x00000023
    WMZ_UKlasse143 = 36, // 0x00000024
    WMZ_Aufloesung151 = 37, // 0x00000025
    WMZ_DeltaT152 = 38, // 0x00000026
    WMZ_qs161 = 39, // 0x00000027
    WMZ_qp162 = 40, // 0x00000028
    WMZ_qi163 = 41, // 0x00000029
    RW_Gruppe = 42, // 0x0000002A
    RW_Kurzinfo = 43, // 0x0000002B
    RW_BestNr = 44, // 0x0000002C
    RW_EanNr = 45, // 0x0000002D
    RW_AltArtNr = 46, // 0x0000002E
    RW_Freigabe = 47, // 0x0000002F
    RW_Typ11 = 48, // 0x00000030
    RW_Fuehlertyp21 = 49, // 0x00000031
    RW_Temperaturtyp22 = 50, // 0x00000032
    RW_Volumenpulswertigkeit31 = 51, // 0x00000033
    RW_Einbauort32 = 52, // 0x00000034
    RW_Maxfrequenz33 = 53, // 0x00000035
    RW_IO1Funktion41 = 54, // 0x00000036
    RW_IO2Funktion42 = 55, // 0x00000037
    RW_Schnittstelle51 = 56, // 0x00000038
    RW_IO1Hardware52 = 57, // 0x00000039
    RW_IO2Hardware53 = 58, // 0x0000003A
    RW_Farbe61 = 59, // 0x0000003B
    RW_Zulassung_unbenutzt_62 = 60, // 0x0000003C
    RW_Stichtag71 = 61, // 0x0000003D
    RW_Menu72 = 62, // 0x0000003E
    RW_Folie81 = 63, // 0x0000003F
    RW_EnergieNormierung91 = 64, // 0x00000040
    RW_VolumenNormierung92 = 65, // 0x00000041
    RW_IO1Normierung101 = 66, // 0x00000042
    RW_IO2Normierung102 = 67, // 0x00000043
    RW_VerschraubungA111 = 68, // 0x00000044
    RW_VerschraubungB112 = 69, // 0x00000045
    RW_VerschraubungC113 = 70, // 0x00000046
    RW_Qn121 = 71, // 0x00000047
    RW_Klasse122 = 72, // 0x00000048
    RW_Zulassung171 = 73, // 0x00000049
    RW_BasisparametersatzA201 = 74, // 0x0000004A
    RW_BasisparametersatzB202 = 75, // 0x0000004B
    TF_Gruppe = 76, // 0x0000004C
    TF_Kurzinfo = 77, // 0x0000004D
    TF_BestNr = 78, // 0x0000004E
    TF_EanNr = 79, // 0x0000004F
    TF_AltArtNr = 80, // 0x00000050
    TF_Freigabe = 81, // 0x00000051
    TF_Fuehlertyp11 = 82, // 0x00000052
    TF_Fuehlerform12 = 83, // 0x00000053
    TF_Bauform13 = 84, // 0x00000054
    TF_TempMin21 = 85, // 0x00000055
    TF_TempMax22 = 86, // 0x00000056
    TF_Fuehlersystem23 = 87, // 0x00000057
    TF_Fuehlerdurchmesser31 = 88, // 0x00000058
    TF_Fuehlerlaenge32 = 89, // 0x00000059
    TF_Kabelform41 = 90, // 0x0000005A
    TF_Kabellaenge42 = 91, // 0x0000005B
    TF_KabelFarbe51 = 92, // 0x0000005C
    TF_KabelMaterial52 = 93, // 0x0000005D
    TF_Einbaustelle61 = 94, // 0x0000005E
    TF_Kabelanschluss71 = 95, // 0x0000005F
    TF_Beglaubigung81 = 96, // 0x00000060
    TF_Zulassung91 = 97, // 0x00000061
  }
}


--- PrintDataGridView.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.PrintDataGridView
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Printing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class PrintDataGridView
  {
    private static StringFormat StrFormat;
    private static StringFormat StrFormatComboBox;
    private static Button CellButton;
    private static CheckBox CellCheckBox;
    private static ComboBox CellComboBox;
    private static int TotalWidth;
    private static int RowPos;
    private static bool NewPage;
    private static bool NoWrap;
    private static int PageNo;
    private static ArrayList ColumnLefts = new ArrayList();
    private static ArrayList ColumnWidths = new ArrayList();
    private static ArrayList ColumnTypes = new ArrayList();
    private static int CellHeight;
    private static int RowsPerPage;
    private static PrintDocument printDoc = new PrintDocument();
    private static string PrintTitle = "";
    private static DataGridView dgv;
    private static List<string> SelectedColumns = new List<string>();
    private static List<string> AvailableColumns = new List<string>();
    private static bool PrintAllRows = true;
    private static bool FitToPageWidth = true;
    private static int HeaderHeight = 0;

    public static void Print(DataGridView dgv1) => PrintDataGridView.Print(dgv1, string.Empty);

    public static void Print(DataGridView dgv1, string titel, bool nowrap = false)
    {
      try
      {
        PrintDataGridView.dgv = dgv1;
        PrintDataGridView.AvailableColumns.Clear();
        foreach (DataGridViewColumn column in (BaseCollection) PrintDataGridView.dgv.Columns)
        {
          if (column.Visible)
            PrintDataGridView.AvailableColumns.Add(column.HeaderText);
        }
        PrintDataGridViewOptions dataGridViewOptions = new PrintDataGridViewOptions(PrintDataGridView.AvailableColumns);
        dataGridViewOptions.PrintTitle = titel;
        if (dataGridViewOptions.ShowDialog() != DialogResult.OK)
          return;
        PrintDataGridView.PrintTitle = dataGridViewOptions.PrintTitle;
        PrintDataGridView.PrintAllRows = dataGridViewOptions.PrintAllRows;
        PrintDataGridView.FitToPageWidth = dataGridViewOptions.FitToPageWidth;
        PrintDataGridView.SelectedColumns = dataGridViewOptions.GetSelectedColumns();
        PrintDataGridView.NoWrap = nowrap;
        PrintDataGridView.RowsPerPage = 0;
        if (new PrintDialog()
        {
          AllowSomePages = true,
          Document = PrintDataGridView.printDoc,
          PrinterSettings = PrintDataGridView.printDoc.PrinterSettings
        }.ShowDialog() != DialogResult.OK)
          return;
        PrintPreviewDialog printPreviewDialog = new PrintPreviewDialog();
        printPreviewDialog.Document = PrintDataGridView.printDoc;
        PrintDataGridView.printDoc.BeginPrint += new PrintEventHandler(PrintDataGridView.PrintDoc_BeginPrint);
        PrintDataGridView.printDoc.PrintPage += new PrintPageEventHandler(PrintDataGridView.PrintDoc_PrintPage);
        if (printPreviewDialog.ShowDialog() != DialogResult.OK)
        {
          PrintDataGridView.printDoc.BeginPrint -= new PrintEventHandler(PrintDataGridView.PrintDoc_BeginPrint);
          PrintDataGridView.printDoc.PrintPage -= new PrintPageEventHandler(PrintDataGridView.PrintDoc_PrintPage);
        }
        else
        {
          PrintDataGridView.printDoc.Print();
          PrintDataGridView.printDoc.BeginPrint -= new PrintEventHandler(PrintDataGridView.PrintDoc_BeginPrint);
          PrintDataGridView.printDoc.PrintPage -= new PrintPageEventHandler(PrintDataGridView.PrintDoc_PrintPage);
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      finally
      {
      }
    }

    private static void PrintDoc_BeginPrint(object sender, PrintEventArgs e)
    {
      try
      {
        PrintDataGridView.StrFormat = new StringFormat();
        PrintDataGridView.StrFormat.Alignment = StringAlignment.Near;
        PrintDataGridView.StrFormat.LineAlignment = StringAlignment.Center;
        if (PrintDataGridView.NoWrap)
          PrintDataGridView.StrFormat.FormatFlags = StringFormatFlags.NoWrap;
        PrintDataGridView.StrFormat.Trimming = StringTrimming.EllipsisCharacter;
        PrintDataGridView.StrFormatComboBox = new StringFormat();
        PrintDataGridView.StrFormatComboBox.LineAlignment = StringAlignment.Center;
        PrintDataGridView.StrFormatComboBox.FormatFlags = StringFormatFlags.NoWrap;
        PrintDataGridView.StrFormatComboBox.Trimming = StringTrimming.EllipsisCharacter;
        PrintDataGridView.ColumnLefts.Clear();
        PrintDataGridView.ColumnWidths.Clear();
        PrintDataGridView.ColumnTypes.Clear();
        PrintDataGridView.CellHeight = 0;
        PrintDataGridView.RowsPerPage = 0;
        PrintDataGridView.CellButton = new Button();
        PrintDataGridView.CellCheckBox = new CheckBox();
        PrintDataGridView.CellComboBox = new ComboBox();
        PrintDataGridView.TotalWidth = 0;
        foreach (DataGridViewColumn column in (BaseCollection) PrintDataGridView.dgv.Columns)
        {
          if (column.Visible && PrintDataGridView.SelectedColumns.Contains(column.HeaderText))
            PrintDataGridView.TotalWidth += column.Width;
        }
        PrintDataGridView.PageNo = 1;
        PrintDataGridView.NewPage = true;
        PrintDataGridView.RowPos = 0;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private static void PrintDoc_PrintPage(object sender, PrintPageEventArgs e)
    {
      int y1 = e.MarginBounds.Top;
      int left1 = e.MarginBounds.Left;
      try
      {
        if (PrintDataGridView.PageNo == 1)
        {
          foreach (DataGridViewColumn column in (BaseCollection) PrintDataGridView.dgv.Columns)
          {
            if (column.Visible && PrintDataGridView.SelectedColumns.Contains(column.HeaderText))
            {
              int width = !PrintDataGridView.FitToPageWidth ? column.Width : (int) Math.Floor((double) column.Width / (double) PrintDataGridView.TotalWidth * (double) PrintDataGridView.TotalWidth * ((double) e.MarginBounds.Width / (double) PrintDataGridView.TotalWidth));
              PrintDataGridView.HeaderHeight = (int) e.Graphics.MeasureString(column.HeaderText, column.InheritedStyle.Font, width).Height + 11;
              PrintDataGridView.ColumnLefts.Add((object) left1);
              PrintDataGridView.ColumnWidths.Add((object) width);
              PrintDataGridView.ColumnTypes.Add((object) column.GetType());
              left1 += width;
            }
          }
        }
        while (PrintDataGridView.RowPos <= PrintDataGridView.dgv.Rows.Count - 1)
        {
          DataGridViewRow row = PrintDataGridView.dgv.Rows[PrintDataGridView.RowPos];
          if (row.IsNewRow || !PrintDataGridView.PrintAllRows && !row.Selected)
          {
            ++PrintDataGridView.RowPos;
          }
          else
          {
            PrintDataGridView.CellHeight = row.Height;
            int num1 = y1 + PrintDataGridView.CellHeight;
            Rectangle marginBounds = e.MarginBounds;
            int height1 = marginBounds.Height;
            marginBounds = e.MarginBounds;
            int top1 = marginBounds.Top;
            int num2 = height1 + top1;
            if (num1 >= num2)
            {
              PrintDataGridView.DrawFooter(e, PrintDataGridView.RowsPerPage);
              PrintDataGridView.NewPage = true;
              ++PrintDataGridView.PageNo;
              e.HasMorePages = true;
              return;
            }
            if (PrintDataGridView.NewPage)
            {
              Graphics graphics1 = e.Graphics;
              string printTitle1 = PrintDataGridView.PrintTitle;
              Font font1 = new Font(PrintDataGridView.dgv.Font, FontStyle.Bold);
              Brush black1 = Brushes.Black;
              marginBounds = e.MarginBounds;
              double left2 = (double) marginBounds.Left;
              marginBounds = e.MarginBounds;
              double top2 = (double) marginBounds.Top;
              Graphics graphics2 = e.Graphics;
              string printTitle2 = PrintDataGridView.PrintTitle;
              Font font2 = new Font(PrintDataGridView.dgv.Font, FontStyle.Bold);
              marginBounds = e.MarginBounds;
              int width1 = marginBounds.Width;
              double height2 = (double) graphics2.MeasureString(printTitle2, font2, width1).Height;
              double y2 = top2 - height2 - 13.0;
              graphics1.DrawString(printTitle1, font1, black1, (float) left2, (float) y2);
              string str = DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToShortTimeString();
              Graphics graphics3 = e.Graphics;
              string s = str;
              Font font3 = new Font(PrintDataGridView.dgv.Font, FontStyle.Bold);
              Brush black2 = Brushes.Black;
              marginBounds = e.MarginBounds;
              double left3 = (double) marginBounds.Left;
              marginBounds = e.MarginBounds;
              double width2 = (double) marginBounds.Width;
              Graphics graphics4 = e.Graphics;
              string text = str;
              Font font4 = new Font(PrintDataGridView.dgv.Font, FontStyle.Bold);
              marginBounds = e.MarginBounds;
              int width3 = marginBounds.Width;
              double width4 = (double) graphics4.MeasureString(text, font4, width3).Width;
              double num3 = width2 - width4;
              double x = left3 + num3;
              marginBounds = e.MarginBounds;
              double top3 = (double) marginBounds.Top;
              Graphics graphics5 = e.Graphics;
              string printTitle3 = PrintDataGridView.PrintTitle;
              Font font5 = new Font(new Font(PrintDataGridView.dgv.Font, FontStyle.Bold), FontStyle.Bold);
              marginBounds = e.MarginBounds;
              int width5 = marginBounds.Width;
              double height3 = (double) graphics5.MeasureString(printTitle3, font5, width5).Height;
              double y3 = top3 - height3 - 13.0;
              graphics3.DrawString(s, font3, black2, (float) x, (float) y3);
              marginBounds = e.MarginBounds;
              int top4 = marginBounds.Top;
              int index = 0;
              foreach (DataGridViewColumn column in (BaseCollection) PrintDataGridView.dgv.Columns)
              {
                if (column.Visible && PrintDataGridView.SelectedColumns.Contains(column.HeaderText))
                {
                  e.Graphics.FillRectangle((Brush) new SolidBrush(Color.LightGray), new Rectangle((int) PrintDataGridView.ColumnLefts[index], top4, (int) PrintDataGridView.ColumnWidths[index], PrintDataGridView.HeaderHeight));
                  e.Graphics.DrawRectangle(Pens.Black, new Rectangle((int) PrintDataGridView.ColumnLefts[index], top4, (int) PrintDataGridView.ColumnWidths[index], PrintDataGridView.HeaderHeight));
                  e.Graphics.DrawString(column.HeaderText, column.InheritedStyle.Font, (Brush) new SolidBrush(column.InheritedStyle.ForeColor), new RectangleF((float) (int) PrintDataGridView.ColumnLefts[index], (float) top4, (float) (int) PrintDataGridView.ColumnWidths[index], (float) PrintDataGridView.HeaderHeight), PrintDataGridView.StrFormat);
                  ++index;
                }
              }
              PrintDataGridView.NewPage = false;
              y1 = top4 + PrintDataGridView.HeaderHeight;
            }
            int index1 = 0;
            foreach (DataGridViewCell cell in (BaseCollection) row.Cells)
            {
              if (cell.OwningColumn.Visible && PrintDataGridView.SelectedColumns.Contains(cell.OwningColumn.HeaderText))
              {
                if (((System.Type) PrintDataGridView.ColumnTypes[index1]).Name == "DataGridViewTextBoxColumn" || ((System.Type) PrintDataGridView.ColumnTypes[index1]).Name == "DataGridViewLinkColumn")
                  e.Graphics.DrawString(cell.Value.ToString(), cell.InheritedStyle.Font, (Brush) new SolidBrush(cell.InheritedStyle.ForeColor), new RectangleF((float) (int) PrintDataGridView.ColumnLefts[index1], (float) y1, (float) (int) PrintDataGridView.ColumnWidths[index1], (float) PrintDataGridView.CellHeight), PrintDataGridView.StrFormat);
                else if (((System.Type) PrintDataGridView.ColumnTypes[index1]).Name == "DataGridViewButtonColumn")
                {
                  PrintDataGridView.CellButton.Text = cell.Value.ToString();
                  PrintDataGridView.CellButton.Size = new Size((int) PrintDataGridView.ColumnWidths[index1], PrintDataGridView.CellHeight);
                  Bitmap bitmap = new Bitmap(PrintDataGridView.CellButton.Width, PrintDataGridView.CellButton.Height);
                  PrintDataGridView.CellButton.DrawToBitmap(bitmap, new Rectangle(0, 0, bitmap.Width, bitmap.Height));
                  e.Graphics.DrawImage((Image) bitmap, new Point((int) PrintDataGridView.ColumnLefts[index1], y1));
                }
                else if (((System.Type) PrintDataGridView.ColumnTypes[index1]).Name == "DataGridViewCheckBoxColumn")
                {
                  PrintDataGridView.CellCheckBox.Size = new Size(14, 14);
                  PrintDataGridView.CellCheckBox.Checked = (bool) cell.Value;
                  Bitmap bitmap = new Bitmap((int) PrintDataGridView.ColumnWidths[index1], PrintDataGridView.CellHeight);
                  Graphics.FromImage((Image) bitmap).FillRectangle(Brushes.White, new Rectangle(0, 0, bitmap.Width, bitmap.Height));
                  PrintDataGridView.CellCheckBox.DrawToBitmap(bitmap, new Rectangle((bitmap.Width - PrintDataGridView.CellCheckBox.Width) / 2, (bitmap.Height - PrintDataGridView.CellCheckBox.Height) / 2, PrintDataGridView.CellCheckBox.Width, PrintDataGridView.CellCheckBox.Height));
                  e.Graphics.DrawImage((Image) bitmap, new Point((int) PrintDataGridView.ColumnLefts[index1], y1));
                }
                else if (((System.Type) PrintDataGridView.ColumnTypes[index1]).Name == "DataGridViewComboBoxColumn")
                {
                  PrintDataGridView.CellComboBox.Size = new Size((int) PrintDataGridView.ColumnWidths[index1], PrintDataGridView.CellHeight);
                  Bitmap bitmap = new Bitmap(PrintDataGridView.CellComboBox.Width, PrintDataGridView.CellComboBox.Height);
                  PrintDataGridView.CellComboBox.DrawToBitmap(bitmap, new Rectangle(0, 0, bitmap.Width, bitmap.Height));
                  e.Graphics.DrawImage((Image) bitmap, new Point((int) PrintDataGridView.ColumnLefts[index1], y1));
                  e.Graphics.DrawString(cell.Value.ToString(), cell.InheritedStyle.Font, (Brush) new SolidBrush(cell.InheritedStyle.ForeColor), new RectangleF((float) ((int) PrintDataGridView.ColumnLefts[index1] + 1), (float) y1, (float) ((int) PrintDataGridView.ColumnWidths[index1] - 16), (float) PrintDataGridView.CellHeight), PrintDataGridView.StrFormatComboBox);
                }
                else if (((System.Type) PrintDataGridView.ColumnTypes[index1]).Name == "DataGridViewImageColumn")
                {
                  Rectangle rectangle = new Rectangle((int) PrintDataGridView.ColumnLefts[index1], y1, (int) PrintDataGridView.ColumnWidths[index1], PrintDataGridView.CellHeight);
                  Size size = ((Image) cell.FormattedValue).Size;
                  e.Graphics.DrawImage((Image) cell.FormattedValue, new Rectangle((int) PrintDataGridView.ColumnLefts[index1] + (rectangle.Width - size.Width) / 2, y1 + (rectangle.Height - size.Height) / 2, ((Image) cell.FormattedValue).Width, ((Image) cell.FormattedValue).Height));
                }
                e.Graphics.DrawRectangle(Pens.Black, new Rectangle((int) PrintDataGridView.ColumnLefts[index1], y1, (int) PrintDataGridView.ColumnWidths[index1], PrintDataGridView.CellHeight));
                ++index1;
              }
            }
            y1 += PrintDataGridView.CellHeight;
            ++PrintDataGridView.RowPos;
            if (PrintDataGridView.PageNo == 1)
              ++PrintDataGridView.RowsPerPage;
          }
        }
        if (PrintDataGridView.RowsPerPage == 0)
          return;
        PrintDataGridView.DrawFooter(e, PrintDataGridView.RowsPerPage);
        e.HasMorePages = false;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private static void DrawFooter(PrintPageEventArgs e, int RowsPerPage)
    {
      double num = !PrintDataGridView.PrintAllRows ? (double) PrintDataGridView.dgv.SelectedRows.Count : (!PrintDataGridView.dgv.Rows[PrintDataGridView.dgv.Rows.Count - 1].IsNewRow ? (double) (PrintDataGridView.dgv.Rows.Count - 1) : (double) (PrintDataGridView.dgv.Rows.Count - 2));
      string str = PrintDataGridView.PageNo.ToString() + " of " + Math.Ceiling(num / (double) RowsPerPage).ToString();
      e.Graphics.DrawString(str, PrintDataGridView.dgv.Font, Brushes.Black, (float) e.MarginBounds.Left + (float) (((double) e.MarginBounds.Width - (double) e.Graphics.MeasureString(str, PrintDataGridView.dgv.Font, e.MarginBounds.Width).Width) / 2.0), (float) (e.MarginBounds.Top + e.MarginBounds.Height + 31));
    }
  }
}


--- PrintDataGridViewOptions.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.PrintDataGridViewOptions
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class PrintDataGridViewOptions : Form
  {
    private IContainer components = (IContainer) null;
    internal RadioButton rdoSelectedRows;
    internal RadioButton rdoAllRows;
    internal CheckBox chkFitToPageWidth;
    internal Label lblTitle;
    internal TextBox txtTitle;
    internal GroupBox gboxRowsToPrint;
    internal Label lblColumnsToPrint;
    protected Button btnOK;
    protected Button btnCancel;
    internal CheckedListBox chklst;

    public PrintDataGridViewOptions() => this.InitializeComponent();

    public PrintDataGridViewOptions(List<string> availableFields)
    {
      this.InitializeComponent();
      foreach (object availableField in availableFields)
        this.chklst.Items.Add(availableField, true);
    }

    private void PrintOtions_Load(object sender, EventArgs e)
    {
      this.rdoAllRows.Checked = true;
      this.chkFitToPageWidth.Checked = true;
    }

    private void btnOK_Click(object sender, EventArgs e)
    {
      this.DialogResult = DialogResult.OK;
      this.Close();
    }

    private void btnCancel_Click(object sender, EventArgs e)
    {
      this.DialogResult = DialogResult.Cancel;
      this.Close();
    }

    public List<string> GetSelectedColumns()
    {
      List<string> selectedColumns = new List<string>();
      foreach (object checkedItem in this.chklst.CheckedItems)
        selectedColumns.Add(checkedItem.ToString());
      return selectedColumns;
    }

    public string PrintTitle
    {
      get => this.txtTitle.Text;
      set => this.txtTitle.Text = value;
    }

    public bool PrintAllRows => this.rdoAllRows.Checked;

    public bool FitToPageWidth => this.chkFitToPageWidth.Checked;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (PrintDataGridViewOptions));
      this.rdoSelectedRows = new RadioButton();
      this.rdoAllRows = new RadioButton();
      this.chkFitToPageWidth = new CheckBox();
      this.lblTitle = new Label();
      this.txtTitle = new TextBox();
      this.gboxRowsToPrint = new GroupBox();
      this.lblColumnsToPrint = new Label();
      this.btnOK = new Button();
      this.btnCancel = new Button();
      this.chklst = new CheckedListBox();
      this.gboxRowsToPrint.SuspendLayout();
      this.SuspendLayout();
      this.rdoSelectedRows.AutoSize = true;
      this.rdoSelectedRows.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.rdoSelectedRows.Location = new Point(91, 19);
      this.rdoSelectedRows.Name = "rdoSelectedRows";
      this.rdoSelectedRows.Size = new Size(75, 17);
      this.rdoSelectedRows.TabIndex = 1;
      this.rdoSelectedRows.TabStop = true;
      this.rdoSelectedRows.Text = "Selected";
      this.rdoSelectedRows.UseVisualStyleBackColor = true;
      this.rdoAllRows.AutoSize = true;
      this.rdoAllRows.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.rdoAllRows.Location = new Point(9, 19);
      this.rdoAllRows.Name = "rdoAllRows";
      this.rdoAllRows.Size = new Size(39, 17);
      this.rdoAllRows.TabIndex = 0;
      this.rdoAllRows.TabStop = true;
      this.rdoAllRows.Text = "All";
      this.rdoAllRows.UseVisualStyleBackColor = true;
      this.chkFitToPageWidth.AutoSize = true;
      this.chkFitToPageWidth.CheckAlign = ContentAlignment.MiddleRight;
      this.chkFitToPageWidth.FlatStyle = FlatStyle.System;
      this.chkFitToPageWidth.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.chkFitToPageWidth.Location = new Point(187, 78);
      this.chkFitToPageWidth.Name = "chkFitToPageWidth";
      this.chkFitToPageWidth.Size = new Size((int) sbyte.MaxValue, 18);
      this.chkFitToPageWidth.TabIndex = 21;
      this.chkFitToPageWidth.Text = "Fit to page width";
      this.chkFitToPageWidth.UseVisualStyleBackColor = true;
      this.lblTitle.AutoSize = true;
      this.lblTitle.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblTitle.Location = new Point(184, 107);
      this.lblTitle.Name = "lblTitle";
      this.lblTitle.Size = new Size(80, 13);
      this.lblTitle.TabIndex = 20;
      this.lblTitle.Text = "Title of print ";
      this.txtTitle.AcceptsReturn = true;
      this.txtTitle.Location = new Point(184, 124);
      this.txtTitle.Multiline = true;
      this.txtTitle.Name = "txtTitle";
      this.txtTitle.ScrollBars = ScrollBars.Vertical;
      this.txtTitle.Size = new Size(176, 77);
      this.txtTitle.TabIndex = 19;
      this.gboxRowsToPrint.Controls.Add((Control) this.rdoSelectedRows);
      this.gboxRowsToPrint.Controls.Add((Control) this.rdoAllRows);
      this.gboxRowsToPrint.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.gboxRowsToPrint.Location = new Point(184, 22);
      this.gboxRowsToPrint.Name = "gboxRowsToPrint";
      this.gboxRowsToPrint.Size = new Size(173, 42);
      this.gboxRowsToPrint.TabIndex = 18;
      this.gboxRowsToPrint.TabStop = false;
      this.gboxRowsToPrint.Text = "Rows to print";
      this.lblColumnsToPrint.AutoSize = true;
      this.lblColumnsToPrint.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblColumnsToPrint.Location = new Point(8, 9);
      this.lblColumnsToPrint.Name = "lblColumnsToPrint";
      this.lblColumnsToPrint.Size = new Size(102, 13);
      this.lblColumnsToPrint.TabIndex = 17;
      this.lblColumnsToPrint.Text = "Columns to print ";
      this.btnOK.BackColor = SystemColors.Control;
      this.btnOK.Cursor = Cursors.Default;
      this.btnOK.FlatStyle = FlatStyle.System;
      this.btnOK.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 178);
      this.btnOK.ForeColor = SystemColors.ControlText;
      this.btnOK.Image = (Image) componentResourceManager.GetObject("btnOK.Image");
      this.btnOK.ImageAlign = ContentAlignment.MiddleRight;
      this.btnOK.Location = new Point(184, 247);
      this.btnOK.Name = "btnOK";
      this.btnOK.RightToLeft = RightToLeft.No;
      this.btnOK.Size = new Size(56, 25);
      this.btnOK.TabIndex = 14;
      this.btnOK.Text = "&OK";
      this.btnOK.UseVisualStyleBackColor = false;
      this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
      this.btnCancel.BackColor = SystemColors.Control;
      this.btnCancel.Cursor = Cursors.Default;
      this.btnCancel.DialogResult = DialogResult.Cancel;
      this.btnCancel.FlatStyle = FlatStyle.System;
      this.btnCancel.Font = new Font("Arial", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 178);
      this.btnCancel.ForeColor = SystemColors.ControlText;
      this.btnCancel.Image = (Image) componentResourceManager.GetObject("btnCancel.Image");
      this.btnCancel.Location = new Point(246, 247);
      this.btnCancel.Name = "btnCancel";
      this.btnCancel.RightToLeft = RightToLeft.No;
      this.btnCancel.Size = new Size(56, 25);
      this.btnCancel.TabIndex = 15;
      this.btnCancel.Text = "&Cancel";
      this.btnCancel.UseVisualStyleBackColor = false;
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.chklst.CheckOnClick = true;
      this.chklst.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.chklst.FormattingEnabled = true;
      this.chklst.Location = new Point(8, 28);
      this.chklst.Name = "chklst";
      this.chklst.Size = new Size(170, 244);
      this.chklst.TabIndex = 13;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(369, 281);
      this.Controls.Add((Control) this.chkFitToPageWidth);
      this.Controls.Add((Control) this.lblTitle);
      this.Controls.Add((Control) this.txtTitle);
      this.Controls.Add((Control) this.gboxRowsToPrint);
      this.Controls.Add((Control) this.lblColumnsToPrint);
      this.Controls.Add((Control) this.btnOK);
      this.Controls.Add((Control) this.btnCancel);
      this.Controls.Add((Control) this.chklst);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.Name = "PrintOptions";
      this.SizeGripStyle = SizeGripStyle.Show;
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Print Options";
      this.Load += new System.EventHandler(this.PrintOtions_Load);
      this.gboxRowsToPrint.ResumeLayout(false);
      this.gboxRowsToPrint.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- ProgFiles.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ProgFiles
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class ProgFiles
  {
    public int MapID { get; set; }

    public string ProgFileName { get; set; }

    public string Options { get; set; }

    public string HexText { get; set; }

    public string SourceInfo { get; set; }
  }
}


--- ProgFileTools.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ProgFileTools
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.Globalization;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ProgFileTools
  {
    public SortedDictionary<uint, byte[]> parseTextfile(string firmwareFileString)
    {
      SortedDictionary<uint, byte[]> textfile = new SortedDictionary<uint, byte[]>();
      string[] strArray = firmwareFileString.Split('\n');
      string empty1 = string.Empty;
      uint key1 = 0;
      foreach (string str1 in strArray)
      {
        if (str1.Contains("@"))
        {
          uint num = key1;
          key1 = uint.Parse(str1.Substring(1), NumberStyles.HexNumber);
          uint key2 = num == 0U ? key1 : num;
          byte[] numArray = new byte[0];
          if (empty1 != string.Empty)
          {
            numArray = Util.HexStringToByteArray(empty1);
            empty1 = string.Empty;
          }
          if (!textfile.ContainsKey(key2))
            textfile.Add(key2, numArray);
          else
            textfile[key2] = numArray;
        }
        else if (str1.Contains("q"))
        {
          byte[] numArray = new byte[0];
          if (empty1 != string.Empty)
          {
            numArray = Util.HexStringToByteArray(empty1);
            empty1 = string.Empty;
          }
          textfile.Add(key1, numArray);
        }
        else
        {
          string empty2 = string.Empty;
          string str2 = str1.Replace(" ", "").Replace("\r", "").Replace("\n", "");
          empty1 += str2;
        }
      }
      return textfile;
    }

    public static SortedDictionary<uint, byte[]> parseINTEL_HEX_file(string firmwareFileString)
    {
      SortedDictionary<uint, byte[]> intelHexFile = new SortedDictionary<uint, byte[]>();
      string[] strArray = firmwareFileString.Split('\r');
      string empty1 = string.Empty;
      sbyte chkSUM = 0;
      uint num1 = 0;
      string empty2 = string.Empty;
      string str1 = string.Empty;
      string str2 = string.Empty;
      foreach (string str3 in strArray)
      {
        string empty3 = string.Empty;
        if (str3.Contains(":"))
        {
          string str4 = str3.Replace("\n", "");
          byte[] numArray = new byte[0];
          uint length = uint.Parse(str4.Substring(1, 2), NumberStyles.HexNumber) * 2U;
          string s1 = str4.Substring(3, 4);
          uint num2 = uint.Parse(str4.Substring(7, 2), NumberStyles.HexNumber);
          if (num2 == 0U)
          {
            numArray = Util.HexStringToByteArray(str4.Substring(9, (int) length));
            chkSUM = sbyte.Parse(str4.Substring(9 + (int) length, 2), NumberStyles.HexNumber);
          }
          if (num2 == 1U)
          {
            chkSUM = sbyte.Parse(str4.Substring(9), NumberStyles.HexNumber);
            if (chkSUM == (sbyte) -1)
              break;
          }
          if (num2 == 2U)
          {
            num1 = uint.Parse(str4.Substring(9, 4), NumberStyles.HexNumber) * 16U;
            chkSUM = sbyte.Parse(str4.Substring(13, 2), NumberStyles.HexNumber);
          }
          if (num2 == 3U)
          {
            uint num3 = uint.Parse(str4.Substring(9, 4), NumberStyles.HexNumber);
            uint num4 = uint.Parse(str4.Substring(13, 4), NumberStyles.HexNumber);
            chkSUM = sbyte.Parse(str4.Substring(17, 2), NumberStyles.HexNumber);
            num1 = num3 * 16U + num4;
          }
          if (num2 == 4U)
          {
            str1 = str4.Substring(9, 4);
            chkSUM = sbyte.Parse(str4.Substring(13, 2), NumberStyles.HexNumber);
          }
          if (num2 == 5U)
          {
            str2 = str4.Substring(9, 8);
            chkSUM = sbyte.Parse(str4.Substring(17, 2), NumberStyles.HexNumber);
          }
          if (!ProgFileTools.chkSumTEST(Util.HexStringToByteArray(str4.Substring(1, str4.Length - 3)), chkSUM))
            throw new Exception("CHECKSUM ERROR in firmware file !!!\nAdress: " + s1 + "\nPlease check the firmware file and replace with working file.\n");
          string s2 = string.IsNullOrEmpty(str2) ? str1 + s1 : str2;
          uint key = num1 != 0U ? num1 + uint.Parse(s1, NumberStyles.HexNumber) : uint.Parse(s2, NumberStyles.HexNumber);
          if (num2 == 0U && !intelHexFile.ContainsKey(key + num1))
            intelHexFile.Add(key, numArray);
        }
      }
      return intelHexFile;
    }

    public static bool chkSumTEST(byte[] chkBA, sbyte chkSUM)
    {
      byte num1 = 0;
      foreach (byte num2 in chkBA)
        num1 += num2;
      sbyte num3 = (sbyte) (((int) (sbyte) ((int) num1 & (int) byte.MaxValue) ^ (int) byte.MaxValue) + 1);
      return (int) chkSUM == (int) num3;
    }
  }
}


--- RadioFrequence.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.RadioFrequence
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum RadioFrequence
  {
    Europa_868_3_MHz,
    Russia_868_95_MHz,
  }
}


--- RadioMode.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.RadioMode
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum RadioMode : byte
  {
    Radio2,
    Radio3,
    wMBusS1,
    wMBusS1M,
    wMBusS2,
    wMBusT1,
    wMBusT2_meter,
    wMBusT2_other,
    wMBusC1A,
    wMBusC1B,
    wMBusT1_867_2,
    Radio3_868_95,
    Radio_840,
  }
}


--- RadioProtocol.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.RadioProtocol
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum RadioProtocol : byte
  {
    Scenario0 = 0,
    Scenario1 = 1,
    Scenario2 = 2,
    Scenario3 = 3,
    Scenario4 = 4,
    Scenario5 = 5,
    Scenario6 = 6,
    Undefined = 255, // 0xFF
  }
}


--- RadioScenario.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.RadioScenario
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum RadioScenario
  {
    Scenario_NotDefined = 0,
    Scenario_201_LoRaMonthly = 201, // 0x000000C9
    Scenario_202_LoRaDaily = 202, // 0x000000CA
    Scenario_203_LoRaHourly = 203, // 0x000000CB
    Scenario_311_wMBus180s = 311, // 0x00000137
    Scenario_312_wMBus900s = 312, // 0x00000138
  }
}


--- RadioTechnology.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.RadioTechnology
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum RadioTechnology
  {
    None,
    radio2,
    radio3,
    wMBus,
    LoRa,
    SixFox,
    LoRa_and_wMBus,
  }
}


--- Range`1.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Range`1
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Diagnostics;

#nullable disable
namespace ZR_ClassLibrary
{
  [DebuggerDisplay("{Start} - {End}")]
  public class Range<T> where T : IComparable<T>
  {
    private T end;
    private T start;

    public Range(T start, T end)
    {
      if (start.CompareTo(end) <= 0)
      {
        this.start = start;
        this.end = end;
      }
      else
      {
        this.start = end;
        this.end = start;
      }
    }

    public T Start => this.start;

    public T End => this.end;

    public bool Contains(T valueToFind)
    {
      ref T local1 = ref valueToFind;
      T obj;
      if ((object) default (T) == null)
      {
        obj = local1;
        local1 = ref obj;
      }
      T start = this.Start;
      int num;
      if (local1.CompareTo(start) >= 0)
      {
        ref T local2 = ref valueToFind;
        obj = default (T);
        if ((object) obj == null)
        {
          obj = local2;
          local2 = ref obj;
        }
        T end = this.End;
        num = local2.CompareTo(end) <= 0 ? 1 : 0;
      }
      else
        num = 0;
      return num != 0;
    }
  }
}


--- RangeSet`1.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.RangeSet`1
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.Diagnostics;

#nullable disable
namespace ZR_ClassLibrary
{
  [DebuggerDisplay("{Start} - {End}")]
  [Serializable]
  public class RangeSet<T> : List<Range<T>> where T : IComparable<T>, new()
  {
    private T end;
    private T start;

    public T Start => this.start;

    public T End => this.end;

    public bool Contains(T valueToFind)
    {
      foreach (Range<T> range in (List<Range<T>>) this)
      {
        if (range.Contains(valueToFind))
          return true;
      }
      return false;
    }

    public new void Clear()
    {
      this.start = new T();
      this.end = new T();
      base.Clear();
    }

    public void Add(T startRange, T endRange) => this.Add(new Range<T>(startRange, endRange));

    public new void Add(Range<T> range)
    {
      this.UpdateStartAndEnd(range);
      base.Add(range);
    }

    public new void Insert(int index, Range<T> range)
    {
      this.UpdateStartAndEnd(range);
      base.Insert(index, range);
    }

    private void UpdateStartAndEnd(Range<T> range)
    {
      if (this.Count == 0)
      {
        this.start = range.Start;
        this.end = range.End;
      }
      if (range.Start.CompareTo(this.start) < 0)
        this.start = range.Start;
      if (range.End.CompareTo(this.end) <= 0)
        return;
      this.end = range.End;
    }
  }
}


--- ReadingValue.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ReadingValue
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public class ReadingValue
  {
    public double value;
    public ReadingValueState state;
    public string StateDetails;
  }
}


--- ReadingValueState.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ReadingValueState
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum ReadingValueState
  {
    ok,
    error,
    notavailable,
  }
}


--- ReadInterval.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ReadInterval
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class ReadInterval
  {
    public DateTime StartTime { get; set; }

    public int Repetitions { get; set; }

    public TimeSpan Interval { get; set; }

    public string ReadIntervalString
    {
      get
      {
        return string.Format("{0:u}|{1}|{2}", (object) this.StartTime, (object) this.Repetitions, (object) this.Interval);
      }
    }

    public ReadInterval(int minutes)
      : this(minutes, DateTime.Now)
    {
    }

    public ReadInterval(int minutes, DateTime startDate)
      : this(new TimeSpan(0, minutes, 0), startDate)
    {
    }

    public ReadInterval(TimeSpan interval, DateTime startDate)
    {
      this.StartTime = startDate;
      this.Interval = interval;
    }

    public static ReadInterval TryParse(string readIntervalString) => (ReadInterval) null;

    public object GetNextReadDateTime(DateTime now) => throw new NotImplementedException();
  }
}


--- ReadoutGmmSettings.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ReadoutGmmSettings
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class ReadoutGmmSettings
  {
    public int ReadoutSettingsID { get; set; }

    public string Settings { get; set; }

    public override string ToString()
    {
      return Ot.GetTranslatedLanguageText("ReadoutSettingsID", this.ReadoutSettingsID.ToString());
    }
  }
}


--- ReadoutSettings.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ReadoutSettings
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum ReadoutSettings
  {
    BusMode,
    FromTime,
    ToTime,
    DaKonId,
    Password,
    MaxRequestRepeat,
    SelectedDeviceMBusType,
  }
}


--- ReadoutSettingsEditorForm.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ReadoutSettingsEditorForm
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Windows.Forms.Layout;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ReadoutSettingsEditorForm : Form
  {
    private IContainer components = (IContainer) null;
    private Button btnUpdateDeviceType;
    private Button btnRemoveDeviceType;
    private Button btnAddDeviceType;
    private DataGridView tableReadoutType;
    private Panel panel1;
    private Label label2;
    private Label label3;
    private DataGridView tableReadoutSettings;
    private FlowLayoutPanel imageList;
    private GroupBox gboxImages;
    private GroupBox gboxReadoutTypes;
    private GroupBox gboxDeviceTypes;
    private Button btnSelectreadingTypes;
    private DataGridViewTextBoxColumn colReadoutDeviceType;
    private DataGridViewTextBoxColumn ReadoutSettings;
    private Button btnSelectImages;

    public ReadoutSettingsEditorForm() => this.InitializeComponent();

    public static void Show() => ReadoutSettingsEditorForm.Show((Form) null);

    public static void Show(Form owner)
    {
      using (ReadoutSettingsEditorForm settingsEditorForm = new ReadoutSettingsEditorForm())
      {
        if (owner != null)
          settingsEditorForm.Owner = owner;
        int num = (int) settingsEditorForm.ShowDialog();
      }
    }

    private void ReadoutSettingsEditorForm_Load(object sender, EventArgs e)
    {
      this.LoadReadoutType();
    }

    private void tableReadoutType_SelectionChanged(object sender, EventArgs e)
    {
      this.LoadReadoutSettings();
    }

    private void tableReadoutSettings_SelectionChanged(object sender, EventArgs e)
    {
      this.LoadImages();
    }

    private void btnAddDeviceType_Click(object sender, EventArgs e)
    {
      string str = AddReadoutTypeForm.Show((Form) this);
      if (string.IsNullOrEmpty(str))
        return;
      MeterDatabase.AddReadoutType(str);
      ZR_ClassLibMessages.ShowAndClearErrors();
      this.LoadReadoutType();
      this.SelectDeviceType(str);
    }

    private void btnRemoveDeviceType_Click(object sender, EventArgs e)
    {
      ReadoutType selectedDeviceType = this.GetSelectedDeviceType();
      if (selectedDeviceType == null || DialogResult.Yes != MessageBox.Show((IWin32Window) this, this.GetTranslatedLanguageText("MeterInstaller", "ConfirmReally"), this.GetTranslatedLanguageText("MeterReader", "Delete"), MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2))
        return;
      MeterDatabase.DeleteReadoutType(selectedDeviceType.ReadoutDeviceTypeID);
      ZR_ClassLibMessages.ShowAndClearErrors();
      this.LoadReadoutType();
    }

    private string GetTranslatedLanguageText(string GmmModule, string TextKey)
    {
      string str = GmmModule + TextKey;
      return Ot.Gtt(Tg.Common, str, str);
    }

    private void btnUpdateDeviceType_Click(object sender, EventArgs e)
    {
      ReadoutType selectedDeviceType = this.GetSelectedDeviceType();
      if (selectedDeviceType == null)
        return;
      string newReadoutDeviceType = AddReadoutTypeForm.Show((Form) this, selectedDeviceType.ReadoutDeviceType);
      if (string.IsNullOrEmpty(newReadoutDeviceType))
        return;
      MeterDatabase.UpdateReadoutType(selectedDeviceType, newReadoutDeviceType);
      this.LoadReadoutType();
      this.SelectDeviceType(selectedDeviceType);
    }

    private void btnSelectreadingTypes_Click(object sender, EventArgs e)
    {
      ReadoutType selectedDeviceType = this.GetSelectedDeviceType();
      if (selectedDeviceType == null)
        return;
      SelectReadoutSettingsForm.Show((Form) this, selectedDeviceType);
      this.LoadReadoutSettings();
      this.SelectDeviceType(selectedDeviceType);
    }

    private void btnSelectImages_Click(object sender, EventArgs e)
    {
      ReadoutType selectedReadoutSettings = this.GetSelectedReadoutSettings();
      if (selectedReadoutSettings == null)
        return;
      SelectImagesForm.Show((Form) this, selectedReadoutSettings);
      this.LoadReadoutSettings();
      this.SelectDeviceType(selectedReadoutSettings);
      this.LoadImages();
    }

    private void LoadReadoutType()
    {
      this.tableReadoutType.Rows.Clear();
      List<ReadoutType> readoutTypeList = MeterDatabase.LoadReadoutType();
      ZR_ClassLibMessages.ShowAndClearErrors();
      if (readoutTypeList != null)
      {
        SortedList sortedList = new SortedList();
        foreach (ReadoutType readoutType in readoutTypeList)
        {
          if (!sortedList.ContainsKey((object) readoutType.ReadoutDeviceType))
          {
            sortedList.Add((object) readoutType.ReadoutDeviceType, (object) null);
            this.tableReadoutType.Rows[this.tableReadoutType.Rows.Add(new object[1]
            {
              (object) readoutType.ReadoutDeviceType
            })].Tag = (object) readoutType;
          }
        }
      }
      this.tableReadoutType.ClearSelection();
      if (this.tableReadoutType.Rows.Count <= 0)
        return;
      this.tableReadoutType.Rows[0].Selected = true;
    }

    private ReadoutType GetSelectedDeviceType()
    {
      return this.tableReadoutType.SelectedRows != null && this.tableReadoutType.SelectedRows.Count == 1 ? this.tableReadoutType.SelectedRows[0].Tag as ReadoutType : (ReadoutType) null;
    }

    private ReadoutType GetSelectedReadoutSettings()
    {
      return this.tableReadoutSettings.SelectedRows != null && this.tableReadoutSettings.SelectedRows.Count == 1 ? this.tableReadoutSettings.SelectedRows[0].Tag as ReadoutType : (ReadoutType) null;
    }

    private void SelectDeviceType(string newDeviceType)
    {
      if (string.IsNullOrEmpty(newDeviceType))
        return;
      foreach (DataGridViewRow row in (IEnumerable) this.tableReadoutType.Rows)
      {
        if (row.Cells[this.colReadoutDeviceType.Name].Value.ToString() == newDeviceType)
          row.Selected = true;
      }
    }

    private void SelectDeviceType(ReadoutType readoutType)
    {
      if (readoutType == null)
        return;
      this.tableReadoutSettings.ClearSelection();
      foreach (DataGridViewRow row in (IEnumerable) this.tableReadoutSettings.Rows)
      {
        if (((ReadoutType) row.Tag).ReadoutSettingsID == readoutType.ReadoutSettingsID)
        {
          row.Selected = true;
          break;
        }
      }
    }

    private void LoadReadoutSettings()
    {
      ReadoutType selectedDeviceType = this.GetSelectedDeviceType();
      if (selectedDeviceType == null)
        return;
      this.tableReadoutSettings.Rows.Clear();
      List<ReadoutType> readoutTypeList = MeterDatabase.LoadReadoutType(new int?(selectedDeviceType.ReadoutDeviceTypeID));
      ZR_ClassLibMessages.ShowAndClearErrors();
      if (readoutTypeList != null)
      {
        foreach (ReadoutType readoutType in readoutTypeList)
        {
          if (readoutType.ReadoutSettingsID != 0)
          {
            int index = this.tableReadoutSettings.Rows.Add();
            this.tableReadoutSettings.Rows[index].Cells[0].Value = (object) readoutType.ReadoutSettings;
            this.tableReadoutSettings.Rows[index].Tag = (object) readoutType;
          }
        }
      }
      this.tableReadoutSettings.ClearSelection();
      if (this.tableReadoutSettings.Rows.Count <= 0)
        return;
      this.tableReadoutSettings.Rows[0].Selected = true;
    }

    private void LoadImages()
    {
    }

    private void AddImage(GMMImage image)
    {
      PictureBox pictureBox = new PictureBox();
      pictureBox.SizeMode = PictureBoxSizeMode.AutoSize;
      pictureBox.Visible = true;
      pictureBox.Image = image.ImageSmall;
      pictureBox.MouseDown += new MouseEventHandler(this.pbox_MouseDown);
      pictureBox.DragOver += new DragEventHandler(this.pbox_DragOver);
      pictureBox.DragDrop += new DragEventHandler(this.pbox_DragDrop);
      pictureBox.AllowDrop = true;
      pictureBox.Tag = (object) image;
      this.imageList.Controls.Add((Control) pictureBox);
    }

    private void pbox_DragDrop(object sender, DragEventArgs e)
    {
      StringBuilder stringBuilder = new StringBuilder();
      foreach (Control control in (ArrangedElementCollection) this.imageList.Controls)
      {
        GMMImage tag = control.Tag as GMMImage;
        if (stringBuilder.Length > 0)
          stringBuilder.Append(",");
        stringBuilder.Append(tag.ImageID);
      }
      ReadoutType selectedReadoutSettings = this.GetSelectedReadoutSettings();
      if (selectedReadoutSettings == null || selectedReadoutSettings.ImageIdList == stringBuilder.ToString())
        return;
      MeterDatabase.UpdateReadoutType(selectedReadoutSettings.ReadoutDeviceTypeID, selectedReadoutSettings.ReadoutSettingsID, stringBuilder.ToString());
      this.LoadReadoutSettings();
      this.SelectDeviceType(selectedReadoutSettings);
    }

    private void pbox_DragOver(object sender, DragEventArgs e)
    {
      this.OnDragOver(e);
      if (e.Data.GetData(typeof (PictureBox)) == null)
        return;
      FlowLayoutPanel parent = (FlowLayoutPanel) (sender as PictureBox).Parent;
      int childIndex = parent.Controls.GetChildIndex((Control) (sender as PictureBox));
      PictureBox data = (PictureBox) e.Data.GetData(typeof (PictureBox));
      parent.Controls.SetChildIndex((Control) data, childIndex);
      e.Effect = e.AllowedEffect;
    }

    private void pbox_MouseDown(object sender, MouseEventArgs e)
    {
      this.OnMouseDown(e);
      int num = (int) this.DoDragDrop(sender, DragDropEffects.All);
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (ReadoutSettingsEditorForm));
      this.btnUpdateDeviceType = new Button();
      this.btnRemoveDeviceType = new Button();
      this.btnAddDeviceType = new Button();
      this.tableReadoutType = new DataGridView();
      this.colReadoutDeviceType = new DataGridViewTextBoxColumn();
      this.panel1 = new Panel();
      this.label2 = new Label();
      this.label3 = new Label();
      this.tableReadoutSettings = new DataGridView();
      this.ReadoutSettings = new DataGridViewTextBoxColumn();
      this.imageList = new FlowLayoutPanel();
      this.gboxImages = new GroupBox();
      this.btnSelectImages = new Button();
      this.gboxReadoutTypes = new GroupBox();
      this.btnSelectreadingTypes = new Button();
      this.gboxDeviceTypes = new GroupBox();
      ((ISupportInitialize) this.tableReadoutType).BeginInit();
      this.panel1.SuspendLayout();
      ((ISupportInitialize) this.tableReadoutSettings).BeginInit();
      this.gboxImages.SuspendLayout();
      this.gboxReadoutTypes.SuspendLayout();
      this.gboxDeviceTypes.SuspendLayout();
      this.SuspendLayout();
      this.btnUpdateDeviceType.Image = (Image) componentResourceManager.GetObject("btnUpdateDeviceType.Image");
      this.btnUpdateDeviceType.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnUpdateDeviceType.ImeMode = ImeMode.NoControl;
      this.btnUpdateDeviceType.Location = new Point(89, 19);
      this.btnUpdateDeviceType.Name = "btnUpdateDeviceType";
      this.btnUpdateDeviceType.Size = new Size(76, 27);
      this.btnUpdateDeviceType.TabIndex = 27;
      this.btnUpdateDeviceType.Text = "Update...";
      this.btnUpdateDeviceType.TextAlign = ContentAlignment.MiddleRight;
      this.btnUpdateDeviceType.UseVisualStyleBackColor = true;
      this.btnUpdateDeviceType.Click += new System.EventHandler(this.btnUpdateDeviceType_Click);
      this.btnRemoveDeviceType.Image = (Image) componentResourceManager.GetObject("btnRemoveDeviceType.Image");
      this.btnRemoveDeviceType.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnRemoveDeviceType.ImeMode = ImeMode.NoControl;
      this.btnRemoveDeviceType.Location = new Point(173, 19);
      this.btnRemoveDeviceType.Name = "btnRemoveDeviceType";
      this.btnRemoveDeviceType.Size = new Size(76, 27);
      this.btnRemoveDeviceType.TabIndex = 26;
      this.btnRemoveDeviceType.Text = "Remove";
      this.btnRemoveDeviceType.TextAlign = ContentAlignment.MiddleRight;
      this.btnRemoveDeviceType.UseVisualStyleBackColor = true;
      this.btnRemoveDeviceType.Click += new System.EventHandler(this.btnRemoveDeviceType_Click);
      this.btnAddDeviceType.Image = (Image) componentResourceManager.GetObject("btnAddDeviceType.Image");
      this.btnAddDeviceType.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnAddDeviceType.ImeMode = ImeMode.NoControl;
      this.btnAddDeviceType.Location = new Point(6, 19);
      this.btnAddDeviceType.Name = "btnAddDeviceType";
      this.btnAddDeviceType.Size = new Size(76, 27);
      this.btnAddDeviceType.TabIndex = 25;
      this.btnAddDeviceType.Text = "Add...";
      this.btnAddDeviceType.TextAlign = ContentAlignment.MiddleRight;
      this.btnAddDeviceType.UseVisualStyleBackColor = true;
      this.btnAddDeviceType.Click += new System.EventHandler(this.btnAddDeviceType_Click);
      this.tableReadoutType.AllowUserToAddRows = false;
      this.tableReadoutType.AllowUserToDeleteRows = false;
      this.tableReadoutType.AllowUserToResizeRows = false;
      this.tableReadoutType.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tableReadoutType.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
      this.tableReadoutType.BackgroundColor = Color.White;
      this.tableReadoutType.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.tableReadoutType.ColumnHeadersVisible = false;
      this.tableReadoutType.Columns.AddRange((DataGridViewColumn) this.colReadoutDeviceType);
      this.tableReadoutType.Location = new Point(6, 52);
      this.tableReadoutType.MultiSelect = false;
      this.tableReadoutType.Name = "tableReadoutType";
      this.tableReadoutType.ReadOnly = true;
      this.tableReadoutType.RowHeadersVisible = false;
      this.tableReadoutType.ScrollBars = ScrollBars.Vertical;
      this.tableReadoutType.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
      this.tableReadoutType.Size = new Size(243, 428);
      this.tableReadoutType.TabIndex = 23;
      this.tableReadoutType.SelectionChanged += new System.EventHandler(this.tableReadoutType_SelectionChanged);
      this.colReadoutDeviceType.HeaderText = "ReadoutDeviceType";
      this.colReadoutDeviceType.Name = "colReadoutDeviceType";
      this.colReadoutDeviceType.ReadOnly = true;
      this.panel1.BackColor = Color.White;
      this.panel1.Controls.Add((Control) this.label2);
      this.panel1.Controls.Add((Control) this.label3);
      this.panel1.Dock = DockStyle.Top;
      this.panel1.Location = new Point(0, 0);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(784, 64);
      this.panel1.TabIndex = 28;
      this.label2.AutoSize = true;
      this.label2.Font = new Font("Microsoft Sans Serif", 9f);
      this.label2.ImeMode = ImeMode.NoControl;
      this.label2.Location = new Point(40, 32);
      this.label2.Name = "label2";
      this.label2.Size = new Size(178, 15);
      this.label2.TabIndex = 1;
      this.label2.Text = "Tool to create read-out settings.";
      this.label3.AutoSize = true;
      this.label3.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold);
      this.label3.ImeMode = ImeMode.NoControl;
      this.label3.Location = new Point(23, 13);
      this.label3.Name = "label3";
      this.label3.Size = new Size(177, 16);
      this.label3.TabIndex = 0;
      this.label3.Text = "Read-out Settings Editor";
      this.tableReadoutSettings.AllowUserToAddRows = false;
      this.tableReadoutSettings.AllowUserToDeleteRows = false;
      this.tableReadoutSettings.AllowUserToResizeRows = false;
      this.tableReadoutSettings.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tableReadoutSettings.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
      this.tableReadoutSettings.BackgroundColor = Color.White;
      this.tableReadoutSettings.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.tableReadoutSettings.ColumnHeadersVisible = false;
      this.tableReadoutSettings.Columns.AddRange((DataGridViewColumn) this.ReadoutSettings);
      this.tableReadoutSettings.Location = new Point(6, 52);
      this.tableReadoutSettings.MultiSelect = false;
      this.tableReadoutSettings.Name = "tableReadoutSettings";
      this.tableReadoutSettings.ReadOnly = true;
      this.tableReadoutSettings.RowHeadersVisible = false;
      this.tableReadoutSettings.ScrollBars = ScrollBars.Vertical;
      this.tableReadoutSettings.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
      this.tableReadoutSettings.Size = new Size(498, 114);
      this.tableReadoutSettings.TabIndex = 24;
      this.tableReadoutSettings.SelectionChanged += new System.EventHandler(this.tableReadoutSettings_SelectionChanged);
      this.ReadoutSettings.HeaderText = "colReadoutSettings";
      this.ReadoutSettings.Name = "ReadoutSettings";
      this.ReadoutSettings.ReadOnly = true;
      this.imageList.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.imageList.BackColor = Color.White;
      this.imageList.BorderStyle = BorderStyle.FixedSingle;
      this.imageList.Location = new Point(9, 52);
      this.imageList.Name = "imageList";
      this.imageList.Size = new Size(498, 250);
      this.imageList.TabIndex = 29;
      this.gboxImages.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.gboxImages.Controls.Add((Control) this.btnSelectImages);
      this.gboxImages.Controls.Add((Control) this.imageList);
      this.gboxImages.Location = new Point(267, 248);
      this.gboxImages.Name = "gboxImages";
      this.gboxImages.Size = new Size(513, 310);
      this.gboxImages.TabIndex = 30;
      this.gboxImages.TabStop = false;
      this.gboxImages.Text = "Images";
      this.btnSelectImages.Image = (Image) componentResourceManager.GetObject("btnSelectImages.Image");
      this.btnSelectImages.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSelectImages.ImeMode = ImeMode.NoControl;
      this.btnSelectImages.Location = new Point(6, 19);
      this.btnSelectImages.Name = "btnSelectImages";
      this.btnSelectImages.Size = new Size(88, 27);
      this.btnSelectImages.TabIndex = 35;
      this.btnSelectImages.Text = "Select...";
      this.btnSelectImages.TextAlign = ContentAlignment.MiddleRight;
      this.btnSelectImages.UseVisualStyleBackColor = true;
      this.btnSelectImages.Click += new System.EventHandler(this.btnSelectImages_Click);
      this.gboxReadoutTypes.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.gboxReadoutTypes.Controls.Add((Control) this.btnSelectreadingTypes);
      this.gboxReadoutTypes.Controls.Add((Control) this.tableReadoutSettings);
      this.gboxReadoutTypes.Location = new Point(267, 70);
      this.gboxReadoutTypes.Name = "gboxReadoutTypes";
      this.gboxReadoutTypes.Size = new Size(510, 172);
      this.gboxReadoutTypes.TabIndex = 32;
      this.gboxReadoutTypes.TabStop = false;
      this.gboxReadoutTypes.Text = "Read-out Types";
      this.btnSelectreadingTypes.Image = (Image) componentResourceManager.GetObject("btnSelectreadingTypes.Image");
      this.btnSelectreadingTypes.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSelectreadingTypes.ImeMode = ImeMode.NoControl;
      this.btnSelectreadingTypes.Location = new Point(7, 19);
      this.btnSelectreadingTypes.Name = "btnSelectreadingTypes";
      this.btnSelectreadingTypes.Size = new Size(88, 27);
      this.btnSelectreadingTypes.TabIndex = 34;
      this.btnSelectreadingTypes.Text = "Select...";
      this.btnSelectreadingTypes.TextAlign = ContentAlignment.MiddleRight;
      this.btnSelectreadingTypes.UseVisualStyleBackColor = true;
      this.btnSelectreadingTypes.Click += new System.EventHandler(this.btnSelectreadingTypes_Click);
      this.gboxDeviceTypes.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left;
      this.gboxDeviceTypes.Controls.Add((Control) this.tableReadoutType);
      this.gboxDeviceTypes.Controls.Add((Control) this.btnAddDeviceType);
      this.gboxDeviceTypes.Controls.Add((Control) this.btnUpdateDeviceType);
      this.gboxDeviceTypes.Controls.Add((Control) this.btnRemoveDeviceType);
      this.gboxDeviceTypes.Location = new Point(6, 70);
      this.gboxDeviceTypes.Name = "gboxDeviceTypes";
      this.gboxDeviceTypes.Size = new Size((int) byte.MaxValue, 488);
      this.gboxDeviceTypes.TabIndex = 34;
      this.gboxDeviceTypes.TabStop = false;
      this.gboxDeviceTypes.Text = "Device Types";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(784, 562);
      this.Controls.Add((Control) this.gboxDeviceTypes);
      this.Controls.Add((Control) this.gboxReadoutTypes);
      this.Controls.Add((Control) this.gboxImages);
      this.Controls.Add((Control) this.panel1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (ReadoutSettingsEditorForm);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Readout Settings Editor";
      this.Load += new System.EventHandler(this.ReadoutSettingsEditorForm_Load);
      ((ISupportInitialize) this.tableReadoutType).EndInit();
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      ((ISupportInitialize) this.tableReadoutSettings).EndInit();
      this.gboxImages.ResumeLayout(false);
      this.gboxReadoutTypes.ResumeLayout(false);
      this.gboxDeviceTypes.ResumeLayout(false);
      this.ResumeLayout(false);
    }
  }
}


--- ReadoutSettingsManager.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ReadoutSettingsManager
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml.Serialization;

#nullable disable
namespace ZR_ClassLibrary
{
  [XmlRoot]
  [Serializable]
  public sealed class ReadoutSettingsManager
  {
    private const string DEFAULT_SETTINGS_NAME = "ReadoutSettings.xml";
    private static object syncLock = new object();
    private static ReadoutSettingsManager _instance;

    public List<ReadoutSettingsManager.ReadoutDeviceSettings> Settings { get; set; }

    public ReadoutSettingsManager()
    {
      this.Settings = new List<ReadoutSettingsManager.ReadoutDeviceSettings>();
    }

    public static ReadoutSettingsManager Instance
    {
      get
      {
        if (ReadoutSettingsManager._instance == null)
          ReadoutSettingsManager._instance = new ReadoutSettingsManager();
        return ReadoutSettingsManager._instance;
      }
    }

    public static void Save() => ReadoutSettingsManager.Save("ReadoutSettings.xml");

    public static void Save(string fileName)
    {
      if (SystemValues.SettingsPath == null)
        return;
      lock (ReadoutSettingsManager.syncLock)
      {
        string path = Path.Combine(SystemValues.SettingsPath, fileName);
        using (FileStream fileStream = File.Create(path))
          new XmlSerializer(typeof (ReadoutSettingsManager)).Serialize((Stream) fileStream, (object) ReadoutSettingsManager.Instance);
      }
    }

    public static void SetSettings(int meterID, int readoutSettingsID, string settings)
    {
      if (meterID == 0)
        return;
      lock (ReadoutSettingsManager.syncLock)
      {
        List<ReadoutSettingsManager.ReadoutDeviceSettings> settings1 = ReadoutSettingsManager.Instance.Settings;
        if (settings1 == null)
          return;
        ReadoutSettingsManager.ReadoutDeviceSettings readoutDeviceSettings = settings1.Find((Predicate<ReadoutSettingsManager.ReadoutDeviceSettings>) (e => e.MeterID == meterID));
        if (readoutDeviceSettings != null)
        {
          readoutDeviceSettings.ReadoutSettingsID = readoutSettingsID;
          readoutDeviceSettings.Settings = settings;
        }
        else
          settings1.Add(new ReadoutSettingsManager.ReadoutDeviceSettings()
          {
            MeterID = meterID,
            ReadoutSettingsID = readoutSettingsID,
            Settings = settings
          });
      }
    }

    public static void Reload() => ReadoutSettingsManager.InternalLoad("ReadoutSettings.xml");

    public static void Load()
    {
      if (ReadoutSettingsManager._instance != null && ReadoutSettingsManager._instance.Settings.Count > 0)
        return;
      ReadoutSettingsManager.InternalLoad("ReadoutSettings.xml");
    }

    private static void InternalLoad(string fileName)
    {
      if (SystemValues.SettingsPath == null)
        return;
      string path = Path.Combine(SystemValues.SettingsPath, fileName);
      if (!File.Exists(path))
        return;
      lock (ReadoutSettingsManager.syncLock)
      {
        try
        {
          XmlSerializer xmlSerializer = new XmlSerializer(typeof (ReadoutSettingsManager));
          using (FileStream fileStream = File.OpenRead(path))
          {
            try
            {
              ReadoutSettingsManager._instance = xmlSerializer.Deserialize((Stream) fileStream) as ReadoutSettingsManager;
            }
            catch (Exception ex)
            {
              Debug.WriteLine("Wrong settings file detected! Remove it. Error: " + ex.Message);
              File.Delete(path);
            }
          }
        }
        catch (Exception ex)
        {
          Debug.WriteLine(ex.Message);
        }
      }
    }

    public sealed class ReadoutDeviceSettings
    {
      public int MeterID { get; set; }

      public string Settings { get; set; }

      public int ReadoutSettingsID { get; set; }
    }
  }
}


--- ReadoutType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ReadoutType
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class ReadoutType
  {
    public int ReadoutDeviceTypeID { get; set; }

    public int ReadoutSettingsID { get; set; }

    public string ImageIdList { get; set; }

    public string ReadoutDeviceType
    {
      get
      {
        return Ot.GetTranslatedLanguageText("ReadoutDeviceTypeID", this.ReadoutDeviceTypeID.ToString());
      }
    }

    public string ReadoutSettings
    {
      get => Ot.GetTranslatedLanguageText("ReadoutSettingsID", this.ReadoutSettingsID.ToString());
    }

    public override string ToString()
    {
      return Ot.GetTranslatedLanguageText("ReadoutDeviceTypeID", this.ReadoutDeviceTypeID.ToString()) + " " + Ot.GetTranslatedLanguageText("ReadoutSettingsID", this.ReadoutSettingsID.ToString());
    }
  }
}


--- Region.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Region
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum Region
  {
    EU_863_870,
    RU_864_870,
    US_902_928,
    CN_470_510,
    AU_915_928,
  }
}


--- ResolutionData.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ResolutionData
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ResolutionData
  {
    public string resolutionString;
    public string baseUnitString;
    public string displayUnitString;
    public Decimal baseUnitFactor;
    public Decimal displayFactor;
    public int mbusVIF;
    public string PulsValueUnitString;
    public Decimal MeterPulsValue_To_DisplayPulsValue_Factor;
    public Decimal DisplayPulsValue_To_MeterPulsValue_Factor;

    public ResolutionData(
      string resolutionString,
      string baseUnitString,
      Decimal baseUnitFactor,
      Decimal displayFactor,
      int mbusVIF)
    {
      this.resolutionString = resolutionString;
      this.baseUnitString = baseUnitString;
      this.displayUnitString = "";
      this.baseUnitFactor = baseUnitFactor;
      this.displayFactor = displayFactor;
      this.mbusVIF = mbusVIF;
      for (int index = 0; index < resolutionString.Length; ++index)
      {
        if (resolutionString[index] != '0' && resolutionString[index] != '.')
        {
          this.displayUnitString = resolutionString.Substring(index);
          break;
        }
      }
      this.DisplayPulsValue_To_MeterPulsValue_Factor = displayFactor;
      this.PulsValueUnitString = this.displayUnitString.Length != 0 ? this.displayUnitString + "/Imp" : this.displayUnitString + "1/Imp";
      if (this.displayUnitString == "m\u00B3")
      {
        this.PulsValueUnitString = "l/Imp";
        this.DisplayPulsValue_To_MeterPulsValue_Factor = displayFactor / 1000M;
      }
      else if (this.displayUnitString == "MWh")
      {
        this.PulsValueUnitString = "kWh/Imp";
        this.DisplayPulsValue_To_MeterPulsValue_Factor = displayFactor / 1000M;
      }
      else if (this.displayUnitString == "GJ")
      {
        this.PulsValueUnitString = "MJ/Imp";
        this.DisplayPulsValue_To_MeterPulsValue_Factor = displayFactor / 1000M;
      }
      this.MeterPulsValue_To_DisplayPulsValue_Factor = 1M / this.DisplayPulsValue_To_MeterPulsValue_Factor;
    }
  }
}


--- Resourcen.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Resourcen
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Resources;
using System.Runtime.CompilerServices;

#nullable disable
namespace ZR_ClassLibrary
{
  [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
  [DebuggerNonUserCode]
  [CompilerGenerated]
  internal class Resourcen
  {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;

    internal Resourcen()
    {
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static ResourceManager ResourceManager
    {
      get
      {
        if (Resourcen.resourceMan == null)
          Resourcen.resourceMan = new ResourceManager("ZR_ClassLibrary.Resourcen", typeof (Resourcen).Assembly);
        return Resourcen.resourceMan;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static CultureInfo Culture
    {
      get => Resourcen.resourceCulture;
      set => Resourcen.resourceCulture = value;
    }

    internal static string confirm_question
    {
      get
      {
        return Resourcen.ResourceManager.GetString(nameof (confirm_question), Resourcen.resourceCulture);
      }
    }

    internal static string delete
    {
      get => Resourcen.ResourceManager.GetString(nameof (delete), Resourcen.resourceCulture);
    }
  }
}


--- S3_MemorySegment.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.S3_MemorySegment
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum S3_MemorySegment
  {
    LinkedRam,
    InfoMemory,
    BackupStorage0,
    Backup0,
    BackupRuntimeVars0,
    BackupStorage1,
    Backup1,
    BackupRuntimeVars1,
    RAM,
    LinkedVars,
    Backup,
    BackupRuntimeVars,
    RuntimeVars,
    FlashBlock0,
    ProtectedConfigValues,
    WriteProt,
    WriteProtTable,
    ProtectedDisplayCode,
    FlashBlock1,
    ConfigValues,
    FunctionTable,
    DisplayCode,
    ResetRuntimeCode,
    MesurementRuntimeCode,
    CycleRuntimeCode,
    MBusRuntimeCode,
    RuntimeConstants,
    FlashBlock2,
    LoggerTable,
    LoggerHeader,
    LoggerChanal,
    LoggerChanalData,
    TransmitParameterTable,
    FlashBlock3,
    LoggerData,
    CompleteMeter,
    Parameter,
    FunctionLayer,
    Function,
    DisplayFunction,
    FixedBlock,
    PointerBlock,
    JumperBlock,
    LoggerRamData,
    RuntimeCode,
    DisplayMenu,
    DisplayJumpBlock,
    Pointer,
    DataBlock,
    DataTransmitter,
    MBusList,
    MBusTransmitter,
    MBusParameter,
    RadioTransmitter,
    RadioListHeader,
    RadioListHeaderItem,
    RadioParameterList,
    ListLink,
    Heap,
    MBusParameterGroup,
    RadioList,
    HandlerInfos,
  }
}


--- S3_VariableTypes.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.S3_VariableTypes
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum S3_VariableTypes
  {
    INT8,
    UINT8,
    UINT16,
    INT16,
    UINT32,
    INT32,
    REAL32,
    INT64,
    UINT64,
    REAL64,
    MeterTime1980,
    Address,
    ByteArray,
    TDC_Matrix,
  }
}


--- SelectImagesForm.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.SelectImagesForm
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class SelectImagesForm : Form
  {
    private ReadoutType readoutType;
    private List<int> selectedImageIDs;
    private IContainer components = (IContainer) null;
    private Panel panel1;
    private Label label2;
    private Label lblTitle;
    private Button btnOK;
    private Button btnGoToImagesForm;
    private CheckedListBox listImages;
    private PictureBox picture;

    public SelectImagesForm()
    {
      this.InitializeComponent();
      this.selectedImageIDs = new List<int>();
    }

    private void SelectImagesForm_Load(object sender, EventArgs e) => this.LoadImages();

    private void listImages_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (this.listImages.SelectedItem == null)
      {
        this.picture.Image = (Image) null;
      }
      else
      {
        if (!(this.listImages.SelectedItem is GMMImage selectedItem))
          return;
        this.picture.Image = selectedItem.ImageSmall;
      }
    }

    public static void Show(ReadoutType readoutType)
    {
      SelectImagesForm.Show((Form) null, readoutType);
    }

    public static void Show(Form owner, ReadoutType readoutType)
    {
      if (readoutType == null)
        throw new ArgumentNullException(nameof (readoutType));
      using (SelectImagesForm selectImagesForm = new SelectImagesForm())
      {
        if (owner != null)
          selectImagesForm.Owner = owner;
        selectImagesForm.lblTitle.Text = readoutType.ToString();
        selectImagesForm.readoutType = readoutType;
        int num = (int) selectImagesForm.ShowDialog();
      }
    }

    private void btnGoToImagesForm_Click(object sender, EventArgs e)
    {
      AddImagesForm.Show((Form) this);
      this.LoadImages();
    }

    private void btnOK_Click(object sender, EventArgs e)
    {
      StringBuilder stringBuilder = new StringBuilder();
      foreach (GMMImage checkedItem in this.listImages.CheckedItems)
      {
        if (stringBuilder.Length != 0)
          stringBuilder.Append(",");
        stringBuilder.Append(checkedItem.ImageID);
      }
      MeterDatabase.UpdateReadoutType(this.readoutType, new ReadoutType()
      {
        ReadoutSettingsID = this.readoutType.ReadoutSettingsID,
        ReadoutDeviceTypeID = this.readoutType.ReadoutDeviceTypeID,
        ImageIdList = stringBuilder.ToString()
      });
      this.DialogResult = DialogResult.OK;
      this.Close();
    }

    private void LoadImages()
    {
      this.listImages.Items.Clear();
      this.selectedImageIDs.Clear();
      if (string.IsNullOrEmpty(this.readoutType.ImageIdList))
        return;
      string[] strArray = this.readoutType.ImageIdList.Split(',');
      if (strArray != null)
      {
        foreach (string str in strArray)
        {
          if (!string.IsNullOrEmpty(str))
            this.selectedImageIDs.Add(Convert.ToInt32(str));
        }
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (SelectImagesForm));
      this.panel1 = new Panel();
      this.label2 = new Label();
      this.lblTitle = new Label();
      this.btnOK = new Button();
      this.btnGoToImagesForm = new Button();
      this.listImages = new CheckedListBox();
      this.picture = new PictureBox();
      this.panel1.SuspendLayout();
      ((ISupportInitialize) this.picture).BeginInit();
      this.SuspendLayout();
      this.panel1.BackColor = Color.White;
      this.panel1.Controls.Add((Control) this.label2);
      this.panel1.Controls.Add((Control) this.lblTitle);
      this.panel1.Dock = DockStyle.Top;
      this.panel1.Location = new Point(0, 0);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(784, 64);
      this.panel1.TabIndex = 34;
      this.label2.AutoSize = true;
      this.label2.Font = new Font("Microsoft Sans Serif", 9f);
      this.label2.ImeMode = ImeMode.NoControl;
      this.label2.Location = new Point(40, 38);
      this.label2.Name = "label2";
      this.label2.Size = new Size(237, 15);
      this.label2.TabIndex = 1;
      this.label2.Text = "Please select images of read-out settings. ";
      this.lblTitle.AutoSize = true;
      this.lblTitle.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblTitle.ImeMode = ImeMode.NoControl;
      this.lblTitle.Location = new Point(23, 8);
      this.lblTitle.Name = "lblTitle";
      this.lblTitle.Size = new Size(275, 24);
      this.lblTitle.TabIndex = 0;
      this.lblTitle.Text = "{Images of read-out settings}";
      this.btnOK.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnOK.DialogResult = DialogResult.Cancel;
      this.btnOK.Image = (Image) componentResourceManager.GetObject("btnOK.Image");
      this.btnOK.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnOK.ImeMode = ImeMode.NoControl;
      this.btnOK.Location = new Point(696, 531);
      this.btnOK.Name = "btnOK";
      this.btnOK.Size = new Size(76, 23);
      this.btnOK.TabIndex = 36;
      this.btnOK.Text = "OK";
      this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
      this.btnGoToImagesForm.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.btnGoToImagesForm.Location = new Point(497, 531);
      this.btnGoToImagesForm.Name = "btnGoToImagesForm";
      this.btnGoToImagesForm.Size = new Size(50, 23);
      this.btnGoToImagesForm.TabIndex = 35;
      this.btnGoToImagesForm.Text = "...";
      this.btnGoToImagesForm.UseVisualStyleBackColor = true;
      this.btnGoToImagesForm.Click += new System.EventHandler(this.btnGoToImagesForm_Click);
      this.listImages.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left;
      this.listImages.FormattingEnabled = true;
      this.listImages.Location = new Point(7, 70);
      this.listImages.Name = "listImages";
      this.listImages.Size = new Size(484, 484);
      this.listImages.TabIndex = 37;
      this.listImages.SelectedIndexChanged += new System.EventHandler(this.listImages_SelectedIndexChanged);
      this.picture.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.picture.BackColor = Color.White;
      this.picture.BorderStyle = BorderStyle.FixedSingle;
      this.picture.Location = new Point(497, 71);
      this.picture.Name = "picture";
      this.picture.Size = new Size(280, 278);
      this.picture.TabIndex = 51;
      this.picture.TabStop = false;
      this.AcceptButton = (IButtonControl) this.btnOK;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(784, 562);
      this.Controls.Add((Control) this.picture);
      this.Controls.Add((Control) this.listImages);
      this.Controls.Add((Control) this.btnOK);
      this.Controls.Add((Control) this.btnGoToImagesForm);
      this.Controls.Add((Control) this.panel1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (SelectImagesForm);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Select Images";
      this.Load += new System.EventHandler(this.SelectImagesForm_Load);
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      ((ISupportInitialize) this.picture).EndInit();
      this.ResumeLayout(false);
    }
  }
}


--- SelectReadoutSettingsForm.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.SelectReadoutSettingsForm
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class SelectReadoutSettingsForm : Form
  {
    private ReadoutType readoutType;
    private List<int> selectedReadoutSettingsIDs;
    private List<ReadoutGmmSettings> allSettings;
    private IContainer components = (IContainer) null;
    private CheckedListBox listReadoutSettings;
    private Button btnGoToReadoutSettings;
    private Panel panel1;
    private Label label2;
    private Label lblTitle;
    private Button btnOK;

    public SelectReadoutSettingsForm()
    {
      this.InitializeComponent();
      this.selectedReadoutSettingsIDs = new List<int>();
    }

    private void SelectReadoutSettingsForm_Load(object sender, EventArgs e)
    {
      this.LoadReadoutTypes();
    }

    public static void Show(ReadoutType readoutType)
    {
      SelectReadoutSettingsForm.Show((Form) null, readoutType);
    }

    public static void Show(Form owner, ReadoutType readoutType)
    {
      if (readoutType == null)
        throw new ArgumentNullException(nameof (readoutType));
      using (SelectReadoutSettingsForm readoutSettingsForm = new SelectReadoutSettingsForm())
      {
        if (owner != null)
          readoutSettingsForm.Owner = owner;
        readoutSettingsForm.lblTitle.Text = readoutType.ReadoutDeviceType;
        readoutSettingsForm.readoutType = readoutType;
        int num = (int) readoutSettingsForm.ShowDialog();
      }
    }

    private void btnOK_Click(object sender, EventArgs e)
    {
      foreach (ReadoutGmmSettings readoutGmmSettings in (ListBox.ObjectCollection) this.listReadoutSettings.Items)
      {
        if (this.listReadoutSettings.CheckedItems.Contains((object) readoutGmmSettings))
        {
          if (!this.selectedReadoutSettingsIDs.Contains(readoutGmmSettings.ReadoutSettingsID))
            MeterDatabase.AddReadoutType(this.readoutType.ReadoutDeviceTypeID, readoutGmmSettings.ReadoutSettingsID, string.Empty);
        }
        else if (this.selectedReadoutSettingsIDs.Contains(readoutGmmSettings.ReadoutSettingsID))
          MeterDatabase.DeleteReadoutType(this.readoutType.ReadoutDeviceTypeID, readoutGmmSettings.ReadoutSettingsID);
      }
      this.DialogResult = DialogResult.OK;
      this.Close();
    }

    private void btnGoToReadoutSettings_Click(object sender, EventArgs e)
    {
      AddReadoutSettingsForm.Show((Form) this);
      this.LoadReadoutTypes();
    }

    private void LoadReadoutTypes()
    {
      this.listReadoutSettings.Items.Clear();
      foreach (ReadoutType readoutType in MeterDatabase.LoadReadoutType(new int?(this.readoutType.ReadoutDeviceTypeID)))
      {
        if (readoutType.ReadoutSettingsID != 0)
          this.selectedReadoutSettingsIDs.Add(readoutType.ReadoutSettingsID);
      }
      this.allSettings = MeterDatabase.LoadReadoutSettings();
      if (this.allSettings == null)
        return;
      foreach (ReadoutGmmSettings allSetting in this.allSettings)
      {
        bool isChecked = this.selectedReadoutSettingsIDs.Contains(allSetting.ReadoutSettingsID);
        this.listReadoutSettings.Items.Add((object) allSetting, isChecked);
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (SelectReadoutSettingsForm));
      this.listReadoutSettings = new CheckedListBox();
      this.btnGoToReadoutSettings = new Button();
      this.panel1 = new Panel();
      this.label2 = new Label();
      this.lblTitle = new Label();
      this.btnOK = new Button();
      this.panel1.SuspendLayout();
      this.SuspendLayout();
      this.listReadoutSettings.CheckOnClick = true;
      this.listReadoutSettings.FormattingEnabled = true;
      this.listReadoutSettings.Location = new Point(8, 72);
      this.listReadoutSettings.Name = "listReadoutSettings";
      this.listReadoutSettings.Size = new Size(519, 259);
      this.listReadoutSettings.TabIndex = 0;
      this.btnGoToReadoutSettings.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnGoToReadoutSettings.Location = new Point(538, 72);
      this.btnGoToReadoutSettings.Name = "btnGoToReadoutSettings";
      this.btnGoToReadoutSettings.Size = new Size(76, 23);
      this.btnGoToReadoutSettings.TabIndex = 1;
      this.btnGoToReadoutSettings.Text = "...";
      this.btnGoToReadoutSettings.UseVisualStyleBackColor = true;
      this.btnGoToReadoutSettings.Click += new System.EventHandler(this.btnGoToReadoutSettings_Click);
      this.panel1.BackColor = Color.White;
      this.panel1.Controls.Add((Control) this.label2);
      this.panel1.Controls.Add((Control) this.lblTitle);
      this.panel1.Dock = DockStyle.Top;
      this.panel1.Location = new Point(0, 0);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(620, 64);
      this.panel1.TabIndex = 33;
      this.label2.AutoSize = true;
      this.label2.Font = new Font("Microsoft Sans Serif", 9f);
      this.label2.ImeMode = ImeMode.NoControl;
      this.label2.Location = new Point(40, 38);
      this.label2.Name = "label2";
      this.label2.Size = new Size(257, 15);
      this.label2.TabIndex = 1;
      this.label2.Text = "Please select read-out settings for this device. ";
      this.lblTitle.AutoSize = true;
      this.lblTitle.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblTitle.ImeMode = ImeMode.NoControl;
      this.lblTitle.Location = new Point(23, 8);
      this.lblTitle.Name = "lblTitle";
      this.lblTitle.Size = new Size(135, 24);
      this.lblTitle.TabIndex = 0;
      this.lblTitle.Text = "{DeviceType}";
      this.btnOK.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnOK.Image = (Image) componentResourceManager.GetObject("btnOK.Image");
      this.btnOK.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnOK.ImeMode = ImeMode.NoControl;
      this.btnOK.Location = new Point(538, 311);
      this.btnOK.Name = "btnOK";
      this.btnOK.Size = new Size(76, 23);
      this.btnOK.TabIndex = 34;
      this.btnOK.Text = "OK";
      this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
      this.AcceptButton = (IButtonControl) this.btnOK;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(620, 346);
      this.Controls.Add((Control) this.btnOK);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.btnGoToReadoutSettings);
      this.Controls.Add((Control) this.listReadoutSettings);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (SelectReadoutSettingsForm);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Select Readout Settings";
      this.Load += new System.EventHandler(this.SelectReadoutSettingsForm_Load);
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.ResumeLayout(false);
    }
  }
}


--- SerialDeviceSystemData.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.SerialDeviceSystemData
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public class SerialDeviceSystemData
  {
    public string Name;
    public string SpecialDeviceName;
    public string DeviceID;
    public string Manufacturer;
    public string Service;
    public string Status;

    public SerialDeviceSystemData()
    {
      this.Name = string.Empty;
      this.SpecialDeviceName = string.Empty;
      this.DeviceID = string.Empty;
      this.Manufacturer = string.Empty;
      this.Service = string.Empty;
      this.Status = string.Empty;
    }
  }
}


--- SpecialStorageTimeTranslation.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.SpecialStorageTimeTranslation
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum SpecialStorageTimeTranslation
  {
    None,
    SetCurrentYear,
    MinusOneYear,
    DefaultDueDate,
    LastMonth,
  }
}


--- SpecialTranslation.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.SpecialTranslation
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum SpecialTranslation
  {
    None = 0,
    DigiInput = 2,
    BitIndex = 3,
    BitMask = 4,
    Serialnumber = 5,
    MeterType = 6,
    NumberNibble1 = 7,
    NumberNibble2 = 8,
  }
}


--- StatusNumber.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.StatusNumber
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum StatusNumber
  {
  }
}


--- StructureNodeSorter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.StructureNodeSorter
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections;

#nullable disable
namespace ZR_ClassLibrary
{
  public class StructureNodeSorter : IComparer
  {
    private StructureSortMode mode;
    private StructureSortOrder order;

    public StructureNodeSorter(StructureSortMode mode, StructureSortOrder order)
    {
      this.mode = mode;
      this.order = order;
    }

    public virtual int Compare(object x, object y)
    {
      ISortable sortable1 = x as ISortable;
      ISortable sortable2 = y as ISortable;
      int num = 0;
      if (sortable1 == null || sortable2 == null)
        return num;
      if (this.mode != StructureSortMode.NodeOrder)
        throw new NotImplementedException();
      if (sortable1.NodeOrder > sortable2.NodeOrder)
        num = -1;
      else if (sortable1.NodeOrder < sortable2.NodeOrder)
        num = 1;
      return this.order == StructureSortOrder.Ascending ? -num : num;
    }
  }
}


--- StructureNodeType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.StructureNodeType
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum StructureNodeType
  {
    Unknown,
    Meter,
    MobileDevice,
    Country,
    City,
    CityArea,
    Street,
    House,
    Floor,
    DeviceGroup,
    Flat,
    WaveFlowNode,
    ESatzNodeLiegenschaft,
    NodeUserGroupe,
    NodeUser,
    ESatzNodeHaus,
    ESatzNodeWohnung,
    ESatzNodeRechenzentrum,
    BerechnungsNodeNutzungsgrad,
    BerechnungsNodeSumIN,
    BerechnungsNodeSumOUT,
    Repeater,
    Manifold,
    COMserver,
    Converter,
  }
}


--- StructureSortMode.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.StructureSortMode
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum StructureSortMode
  {
    NodeOrder,
  }
}


--- StructureSortOrder.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.StructureSortOrder
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum StructureSortOrder
  {
    Ascending,
    Descending,
  }
}


--- StructureTreeNode.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.StructureTreeNode
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Xml;
using ZR_ClassLibrary.Properties;

#nullable disable
namespace ZR_ClassLibrary
{
  public class StructureTreeNode : ISortable
  {
    public const string MODUL_NAME = "MeterInstaller";
    private const string TAG_FILTER = "FILTER";
    private const string TAG_SERIALNUMBER = "SID";
    private const string TAG_MANUFACTURER = "MAN";
    private const string TAG_MEDIUM = "MED";
    private const string TAG_MEDIUM_SUB_DEVICE = "TYPE[0][{0}]";
    private const string TAG_SERIALNUMBER_SUB_DEVICE = "CID[0][{0}]";
    private const string TAG_ADDRESS = "RADR";
    private const string TAG_RSSI = "RSSI_dBm";
    private const string TAG_INTERVAL = "INTERVAL";
    private const string TAG_SUB_DEVICE_IDX = "SUB_DEVICE_IDX";
    private const string TAG_READ_ENABLED = "READ_ENABLED";
    private const string TAG_READOUT_TYPE = "READOUT_TYPE";
    private string nodeSettings;
    private string _name;

    public StructureTreeNode()
    {
      this.Parent = (StructureTreeNode) null;
      this.Children = new StructureTreeNodeList(this);
      this.NodeTyp = StructureNodeType.Unknown;
      this.NodeErrors = new List<string>();
      this.NodeSettings = string.Empty;
      this.NodeDescription = string.Empty;
      this.NodeAdditionalInfos = string.Empty;
      this.MeterReplacementHistoryList = new StructureTreeNodeList();
      this.ReadEnabled = false;
    }

    public StructureTreeNode(StructureTreeNode parent)
      : this()
    {
      this.Parent = parent;
    }

    public StructureTreeNode(StructureTreeNodeList children)
      : this()
    {
      this.Children = children;
    }

    public StructureTreeNode(StructureTreeNode parent, StructureTreeNodeList children)
      : this()
    {
      this.Parent = parent;
      this.Children = children;
      this.Children.Parent = this;
    }

    public StructureTreeNode(string name, StructureNodeType type)
      : this()
    {
      this.Name = name;
      this.NodeTyp = type;
    }

    public StructureTreeNode Parent { get; set; }

    public StructureTreeNode OldParent { get; set; }

    public StructureTreeNodeList Children { get; set; }

    public int Depth
    {
      get
      {
        int depth = 0;
        StructureTreeNode structureTreeNode = this;
        while (structureTreeNode.Parent != null)
        {
          structureTreeNode = structureTreeNode.Parent;
          ++depth;
        }
        return depth;
      }
    }

    public string NamePath
    {
      get
      {
        StructureTreeNode structureTreeNode = this;
        string namePath = structureTreeNode.Name;
        while (structureTreeNode.Parent != null)
        {
          structureTreeNode = structureTreeNode.Parent;
          namePath = structureTreeNode.Name + "->" + namePath;
        }
        return namePath;
      }
    }

    public int? NodeID { get; set; }

    public int? MeterID { get; set; }

    public DateTime ValidFrom { get; set; }

    public DateTime? InstallationDate
    {
      get => this.ValidFrom == DateTime.MinValue ? new DateTime?() : new DateTime?(this.ValidFrom);
    }

    public DateTime? ValidTo { get; set; }

    public string SerialNumber
    {
      get
      {
        if (this.NodeTyp != StructureNodeType.Meter)
          return string.Empty;
        string key = "SID";
        if (this.SubDeviceIndex > 0)
        {
          key = TranslationRulesManager.TryGetSpecialTranslationKeyOfSubDevice(this.nodeSettings, this.SubDeviceIndex, SpecialTranslation.Serialnumber);
          if (string.IsNullOrEmpty(key))
            key = string.Format("CID[0][{0}]", (object) this.SubDeviceIndex);
        }
        if (string.IsNullOrEmpty(key))
          return string.Empty;
        string nodeSettingsValue = this.GetNodeSettingsValue(key);
        if (string.IsNullOrEmpty(nodeSettingsValue))
          return string.Empty;
        string str = nodeSettingsValue.Trim();
        return new List<char>((IEnumerable<char>) str.ToCharArray()).FindAll((Predicate<char>) (e => e == '0')).Count == str.Length ? string.Empty : str;
      }
      set
      {
        string key = "SID";
        if (this.SubDeviceIndex > 0)
        {
          key = TranslationRulesManager.TryGetSpecialTranslationKeyOfSubDevice(this.nodeSettings, this.SubDeviceIndex, SpecialTranslation.Serialnumber);
          if (string.IsNullOrEmpty(key))
            key = string.Format("CID[0][{0}]", (object) this.SubDeviceIndex);
        }
        if (string.IsNullOrEmpty(key))
          return;
        this.SetNodeSettingsValue(key, value);
      }
    }

    public string Manufacturer
    {
      get
      {
        return this.NodeTyp != StructureNodeType.Meter ? string.Empty : this.GetNodeSettingsValue("MAN");
      }
    }

    public string MediumString
    {
      get => this.Medium != MBusDeviceType.UNKNOWN ? this.Medium.ToString() : string.Empty;
    }

    public MBusDeviceType Medium
    {
      get
      {
        if (this.NodeTyp != StructureNodeType.Meter)
          return MBusDeviceType.UNKNOWN;
        string key = "MED";
        if (this.SubDeviceIndex > 0)
        {
          key = TranslationRulesManager.TryGetSpecialTranslationKeyOfSubDevice(this.nodeSettings, this.SubDeviceIndex, SpecialTranslation.MeterType);
          if (string.IsNullOrEmpty(key))
            key = string.Format("TYPE[0][{0}]", (object) this.SubDeviceIndex);
        }
        if (string.IsNullOrEmpty(key))
          return MBusDeviceType.UNKNOWN;
        string nodeSettingsValue = this.GetNodeSettingsValue(key);
        return Enum.IsDefined(typeof (MBusDeviceType), (object) nodeSettingsValue) ? (MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), nodeSettingsValue, true) : MBusDeviceType.UNKNOWN;
      }
      set
      {
        if (this.NodeTyp != StructureNodeType.Meter)
          return;
        string key = "MED";
        if (this.SubDeviceIndex > 0)
        {
          key = TranslationRulesManager.TryGetSpecialTranslationKeyOfSubDevice(this.nodeSettings, this.SubDeviceIndex, SpecialTranslation.MeterType);
          if (string.IsNullOrEmpty(key))
            key = string.Format("TYPE[0][{0}]", (object) this.SubDeviceIndex);
        }
        if (string.IsNullOrEmpty(key))
          return;
        this.SetNodeSettingsValue(key, value.ToString());
      }
    }

    public int SubDeviceIndex
    {
      get
      {
        if (string.IsNullOrEmpty(this.NodeSettings))
          return 0;
        string nodeSettingsValue = this.GetNodeSettingsValue("SUB_DEVICE_IDX");
        return string.IsNullOrEmpty(nodeSettingsValue) ? 0 : Convert.ToInt32(nodeSettingsValue);
      }
      set => this.UpdateNodeSettingsValue("SUB_DEVICE_IDX", (object) value);
    }

    public bool ReadEnabled
    {
      get
      {
        if (string.IsNullOrEmpty(this.NodeSettings))
          return true;
        string nodeSettingsValue = this.GetNodeSettingsValue("READ_ENABLED");
        return string.IsNullOrEmpty(nodeSettingsValue) || Convert.ToBoolean(nodeSettingsValue);
      }
      set => this.UpdateNodeSettingsValue("READ_ENABLED", (object) value);
    }

    public StructureNodeType NodeTyp { get; set; }

    public int? LayerID { get; set; }

    public string Name
    {
      get => this._name;
      set
      {
        this._name = value == null || value.Length <= 50 ? value : throw new ArgumentException("The name should be less as 50 chars! Actually is: " + value.Length.ToString());
      }
    }

    public List<string> NodeErrors { get; set; }

    public string NodeSettings
    {
      get => this.nodeSettings;
      set
      {
        if (!(this.nodeSettings != value))
          return;
        this.nodeSettings = value;
      }
    }

    public string DeviceInfo => StructureTreeNode.GenerateDeviceInfo(this.NodeSettings);

    public string NodeDescription { get; set; }

    public int? Interval
    {
      get
      {
        if (string.IsNullOrEmpty(this.NodeSettings))
          return new int?();
        string nodeSettingsValue = this.GetNodeSettingsValue("INTERVAL");
        return string.IsNullOrEmpty(nodeSettingsValue) || !Util.IsNumeric((object) nodeSettingsValue) ? new int?() : new int?(Convert.ToInt32(nodeSettingsValue));
      }
      set => this.UpdateNodeSettingsValue("INTERVAL", (object) value);
    }

    public GMMSettings CommunicationSettings
    {
      get
      {
        if (this.NodeTyp != StructureNodeType.Meter || !this.MeterID.HasValue || !this.ReadoutDeviceTypeID.HasValue)
          return (GMMSettings) null;
        ReadoutSettingsManager.ReadoutDeviceSettings readoutDeviceSettings = ReadoutSettingsManager.Instance.Settings.Find((Predicate<ReadoutSettingsManager.ReadoutDeviceSettings>) (e => e.MeterID == this.MeterID.Value));
        if (readoutDeviceSettings == null || string.IsNullOrEmpty(readoutDeviceSettings.Settings))
          return (GMMSettings) null;
        GMMSettings communicationSettings = new GMMSettings();
        communicationSettings.ReadoutType = new ReadoutType()
        {
          ReadoutSettingsID = readoutDeviceSettings.ReadoutSettingsID,
          ReadoutDeviceTypeID = this.ReadoutDeviceTypeID.Value
        };
        communicationSettings.SetSettings(readoutDeviceSettings.Settings);
        return communicationSettings;
      }
    }

    public int NodeOrder { get; set; }

    public string NodeAdditionalInfos { get; set; }

    public int? ValueIdentFilter
    {
      get
      {
        if (string.IsNullOrEmpty(this.NodeSettings))
          return new int?();
        string nodeSettingsValue = this.GetNodeSettingsValue("FILTER");
        if (string.IsNullOrEmpty(nodeSettingsValue))
          return new int?();
        return !Util.IsNumeric((object) nodeSettingsValue) ? new int?() : new int?(Convert.ToInt32(nodeSettingsValue));
      }
      set => this.UpdateNodeSettingsValue("FILTER", (object) value);
    }

    public static List<Filter> GecachedFilterList { get; set; }

    public string FilterName
    {
      get
      {
        if (!this.ValueIdentFilter.HasValue)
          return string.Empty;
        if (StructureTreeNode.GecachedFilterList == null)
          StructureTreeNode.GecachedFilterList = MeterDatabase.LoadFilter();
        if (StructureTreeNode.GecachedFilterList == null)
          return string.Empty;
        Filter filter = StructureTreeNode.GecachedFilterList.Find((Predicate<Filter>) (e => e.FilterId == this.ValueIdentFilter.Value));
        return filter == null ? string.Empty : filter.Name;
      }
    }

    public int? ReadoutDeviceTypeID
    {
      get
      {
        if (string.IsNullOrEmpty(this.NodeSettings))
          return new int?();
        if (this.NodeSettings.IndexOf("READOUT_TYPE") < 0)
          return new int?();
        try
        {
          return new int?(int.Parse(this.GetNodeSettingsValue("READOUT_TYPE")));
        }
        catch
        {
          return new int?();
        }
      }
      set => this.UpdateNodeSettingsValue("READOUT_TYPE", (object) value);
    }

    public string ReadoutDeviceType
    {
      get
      {
        string translatedLanguageText = StructureTreeNode.GetTranslatedLanguageText("ReadoutDeviceTypeID", this.ReadoutDeviceTypeID.ToString());
        return translatedLanguageText != null && translatedLanguageText != "ReadoutDeviceTypeID" ? translatedLanguageText : string.Empty;
      }
    }

    public bool IsLeaf => this.Children.Count == 0;

    public Image StateImage
    {
      get
      {
        return this.NodeErrors.Count > 0 ? (Image) Resources.AlertIcon : (Image) Resources.SuccessIconTransporent;
      }
    }

    public Image NodeImage
    {
      get
      {
        switch (this.NodeTyp)
        {
          case StructureNodeType.Unknown:
            return (Image) null;
          case StructureNodeType.Meter:
            return Images.pics.Device_16x16.Image;
          case StructureNodeType.MobileDevice:
            return Images.pics.BaseNodeMobileDevice_16x16.Image;
          case StructureNodeType.Country:
            return (Image) Resources.CountryNode;
          case StructureNodeType.City:
            return (Image) Resources.CityNode;
          case StructureNodeType.CityArea:
            return Images.pics.AddressTypeCityArea_16x16.Image;
          case StructureNodeType.Street:
            return (Image) Resources.StreetNode;
          case StructureNodeType.House:
          case StructureNodeType.ESatzNodeHaus:
            return Images.pics.AddressTypeHouse_16x16.Image;
          case StructureNodeType.Floor:
            return Images.pics.AddressTypeFloor_16x16.Image;
          case StructureNodeType.DeviceGroup:
            return (Image) Resources.DeviceGroup;
          case StructureNodeType.Flat:
            return (Image) Resources.FlatNode;
          case StructureNodeType.WaveFlowNode:
            return Images.pics.WaveFlowDevice_16x16.Image;
          case StructureNodeType.ESatzNodeLiegenschaft:
            return Images.pics.Liegenschaft_16x16.Image;
          case StructureNodeType.NodeUserGroupe:
            return Images.pics.Nutzergruppe_16x16.Image;
          case StructureNodeType.NodeUser:
            return Images.pics.Nutzer_16x16.Image;
          case StructureNodeType.ESatzNodeWohnung:
            return Images.pics.Wohnung_16x16.Image;
          case StructureNodeType.ESatzNodeRechenzentrum:
            return Images.pics.Rechenzentrum_16x16.Image;
          case StructureNodeType.BerechnungsNodeNutzungsgrad:
            return Images.pics.Nutzungsgrad_16x16.Image;
          case StructureNodeType.BerechnungsNodeSumIN:
            return Images.pics.Berechnung_Input_16x16.Image;
          case StructureNodeType.BerechnungsNodeSumOUT:
            return Images.pics.Berechnung_Output_16x16.Image;
          case StructureNodeType.Repeater:
            return (Image) Resources.RepeaterNode;
          case StructureNodeType.Manifold:
            return (Image) Resources.ManifoldNode;
          case StructureNodeType.COMserver:
            return (Image) Resources.COMserver;
          case StructureNodeType.Converter:
            return (Image) Resources.ConverterNode;
          default:
            throw new Exception("Unknown MeterInstaller node type detected! Name: " + this.NodeTyp.ToString());
        }
      }
    }

    public StructureTreeNodeList MeterReplacementHistoryList { get; set; }

    public string MeterReplacementHistoryListCount
    {
      get
      {
        return this.MeterReplacementHistoryList == null || this.MeterReplacementHistoryList.Count == 0 ? string.Empty : this.MeterReplacementHistoryList.Count.ToString();
      }
    }

    public override string ToString()
    {
      string str = string.Format("Name={0}, Serial={1}, NodeID={2}, Depth={3}, Children={4}, MeterID={5}, LayerID={6}, Order={7}, Typ={8}", (object) this.Name, (object) this.SerialNumber, (object) this.NodeID, (object) this.Depth, (object) this.Children.Count, (object) this.MeterID, (object) this.LayerID, (object) this.NodeOrder, (object) this.NodeTyp);
      if (this.Parent == null)
        str = str.Insert(0, "(Root) ");
      return str;
    }

    public List<StructureTreeNode> GetDownNodes(StructureNodeType type)
    {
      List<StructureTreeNode> downNodes = new List<StructureTreeNode>();
      foreach (StructureTreeNode structureTreeNode in StructureTreeNode.ForEach(this, type))
        downNodes.Add(structureTreeNode);
      return downNodes;
    }

    public bool ContainsNode(long nodeId) => this.ContainsNode(nodeId, this.Children);

    private bool ContainsNode(long nodeId, StructureTreeNodeList children)
    {
      foreach (StructureTreeNode child in (List<StructureTreeNode>) children)
      {
        int? nodeId1 = child.NodeID;
        long? nullable = nodeId1.HasValue ? new long?((long) nodeId1.GetValueOrDefault()) : new long?();
        long num = nodeId;
        if (nullable.GetValueOrDefault() == num & nullable.HasValue || this.ContainsNode(nodeId, child.Children))
          return true;
      }
      return false;
    }

    public void UpdateNodeSettingsValue(string key, object value)
    {
      if (value == null || string.IsNullOrEmpty(key) || this.NodeSettings == null)
        return;
      this.NodeSettings = ParameterService.AddOrUpdateParameter(this.NodeSettings, key, value.ToString());
    }

    public string GetNodeSettingsValue(string key)
    {
      return string.IsNullOrEmpty(key) || string.IsNullOrEmpty(this.NodeSettings) ? string.Empty : ParameterService.GetParameter(this.NodeSettings, key);
    }

    private void SetNodeSettingsValue(string key, string value)
    {
      if (string.IsNullOrEmpty(key))
        return;
      this.NodeSettings = ParameterService.AddOrUpdateParameter(this.NodeSettings, key, value);
    }

    public static IEnumerable<StructureTreeNode> ForEachChild(StructureTreeNode root)
    {
      if (root != null)
      {
        foreach (StructureTreeNode node in (List<StructureTreeNode>) root.Children)
        {
          yield return node;
          foreach (StructureTreeNode child in StructureTreeNode.ForEachChild(node))
            yield return child;
        }
      }
    }

    public static IEnumerable<StructureTreeNode> ForEach(StructureTreeNode root)
    {
      if (root != null)
      {
        yield return root;
        foreach (StructureTreeNode child in StructureTreeNode.ForEachChild(root))
          yield return child;
      }
    }

    public static IEnumerable<StructureTreeNode> ForEach(
      StructureTreeNode root,
      StructureNodeType type)
    {
      foreach (StructureTreeNode node in StructureTreeNode.ForEach(root))
      {
        if (node.NodeTyp == type)
          yield return node;
      }
    }

    public static StructureNodeType TryParseNodeType(int nodeTypeID)
    {
      return (StructureNodeType) Enum.ToObject(typeof (StructureNodeType), nodeTypeID);
    }

    public static StructureTreeNodeList GetTemplateNodes(NodeLayer layer)
    {
      if (layer.IsPhysicalLayer)
      {
        StructureTreeNodeList list = new StructureTreeNodeList();
        StructureTreeNode.AddNode(list, "SettingsNode");
        StructureTreeNode.AddNode(list[0].Children, StructureNodeType.Meter);
        StructureTreeNode.AddNode(list, "GenaralNodes");
        StructureTreeNodeList children = list[1].Children;
        StructureTreeNode.AddNode(children, StructureNodeType.Country);
        StructureTreeNode.AddNode(children, StructureNodeType.City);
        StructureTreeNode.AddNode(children, StructureNodeType.CityArea);
        StructureTreeNode.AddNode(children, StructureNodeType.Street);
        StructureTreeNode.AddNode(children, StructureNodeType.House);
        StructureTreeNode.AddNode(children, StructureNodeType.Floor);
        StructureTreeNode.AddNode(children, StructureNodeType.DeviceGroup);
        StructureTreeNode.AddNode(children, StructureNodeType.Flat);
        StructureTreeNode.AddNode(children, StructureNodeType.NodeUser);
        StructureTreeNode.AddNode(children, StructureNodeType.NodeUserGroupe);
        StructureTreeNode.AddNode(children, StructureNodeType.COMserver);
        StructureTreeNode.AddNode(children, StructureNodeType.Converter);
        StructureTreeNode.AddNode(children, StructureNodeType.Manifold);
        StructureTreeNode.AddNode(children, StructureNodeType.Repeater);
        return list;
      }
      StructureTreeNodeList list1 = new StructureTreeNodeList();
      StructureTreeNode.AddNode(list1, "GenaralNodes");
      StructureTreeNodeList children1 = list1[0].Children;
      StructureTreeNode.AddNode(children1, StructureNodeType.Country);
      StructureTreeNode.AddNode(children1, StructureNodeType.City);
      StructureTreeNode.AddNode(children1, StructureNodeType.CityArea);
      StructureTreeNode.AddNode(children1, StructureNodeType.Street);
      StructureTreeNode.AddNode(children1, StructureNodeType.House);
      StructureTreeNode.AddNode(children1, StructureNodeType.Floor);
      StructureTreeNode.AddNode(children1, StructureNodeType.DeviceGroup);
      StructureTreeNode.AddNode(children1, StructureNodeType.Flat);
      StructureTreeNode.AddNode(children1, StructureNodeType.NodeUser);
      StructureTreeNode.AddNode(children1, StructureNodeType.NodeUserGroupe);
      StructureTreeNode.AddNode(list1, "DeviceNodes");
      list1[1].Children.AddRange((IEnumerable<StructureTreeNode>) MeterDatabase.LoadMeterInstallerTreesByLayerID(0));
      return list1;
    }

    private static StructureTreeNode AddNode(StructureTreeNodeList list, string name)
    {
      return list.Add(new StructureTreeNode()
      {
        Name = StructureTreeNode.GetTranslatedLanguageText("MeterInstaller", name),
        NodeOrder = list.Count
      });
    }

    private static StructureTreeNode AddNode(StructureTreeNodeList list, StructureNodeType t)
    {
      return list.Add(new StructureTreeNode()
      {
        Name = StructureTreeNode.GetTranslatedLanguageText("MeterInstaller", t.ToString()),
        NodeTyp = t,
        NodeOrder = list.Count
      });
    }

    public static string GenerateDeviceInfo(string zdf)
    {
      if (string.IsNullOrEmpty(zdf) || string.IsNullOrEmpty(ParameterService.GetParameter(zdf, "SID")))
        return string.Empty;
      string parameter1 = ParameterService.GetParameter(zdf, "RADR");
      if (!string.IsNullOrEmpty(parameter1))
        return string.Format("RADR: {0,2}", (object) parameter1);
      string parameter2 = ParameterService.GetParameter(zdf, "RSSI_dBm");
      return !string.IsNullOrEmpty(parameter2) ? string.Format("{0,4} dBm", (object) parameter2) : string.Empty;
    }

    public bool SaveToXML(string fileName)
    {
      XmlDocument xml = new XmlDocument();
      XmlComment comment = xml.CreateComment("Global Meter Manager www.zenner.de " + DateTime.Now.ToString("u"));
      XmlNode refChild = xml.AppendChild((XmlNode) xml.CreateElement("L" + this.LayerID.ToString()));
      xml.InsertBefore((XmlNode) comment, refChild);
      XmlNode xmlNode = xml.DocumentElement.AppendChild(this.CreateXmlNode(xml, this));
      this.CreateXML(xml, xmlNode, this);
      xml.Save(fileName);
      return true;
    }

    private void CreateXML(XmlDocument xml, XmlNode xmlNode, StructureTreeNode node)
    {
      foreach (StructureTreeNode child in (List<StructureTreeNode>) node.Children)
      {
        XmlNode xmlNode1 = this.CreateXmlNode(xml, child);
        xmlNode?.AppendChild(xmlNode1);
        if (child.Children.Count > 0)
          this.CreateXML(xml, xmlNode1, child);
      }
    }

    private XmlNode CreateXmlNode(XmlDocument xml, StructureTreeNode node)
    {
      XmlElement element = xml.CreateElement(node.NodeTyp.ToString());
      element.Attributes.Append(xml.CreateAttribute("N"));
      element.Attributes["N"].Value = node.Name;
      element.Attributes.Append(xml.CreateAttribute("S"));
      element.Attributes["S"].Value = node.NodeSettings;
      return (XmlNode) element;
    }

    public static StructureTreeNode LoadStructureFromXML(string fileName)
    {
      XmlDocument xml = new XmlDocument();
      xml.Load(fileName);
      string name = xml.DocumentElement.Name;
      if (name.StartsWith("L"))
        return StructureTreeNode.CreateStructure(xml);
      return name == "ROOT" ? StructureTreeNode.CreateOldStructure(xml) : (StructureTreeNode) null;
    }

    private static StructureTreeNode CreateStructure(XmlDocument xml)
    {
      int int32 = Convert.ToInt32(xml.DocumentElement.Name.Substring(1));
      StructureTreeNode parent = new StructureTreeNode();
      parent.LayerID = new int?(int32);
      StructureTreeNode.CreateStructure(parent, xml.ChildNodes[1].ChildNodes);
      return parent;
    }

    private static void CreateStructure(StructureTreeNode parent, XmlNodeList xmlNodeList)
    {
      foreach (XmlNode xmlNode in xmlNodeList)
      {
        string name = xmlNode.Name;
        string str1 = xmlNode.Attributes["N"].Value;
        string str2 = xmlNode.Attributes["S"].Value;
        if (Enum.IsDefined(typeof (StructureNodeType), (object) name))
        {
          StructureTreeNode structureTreeNode = new StructureTreeNode();
          structureTreeNode.Name = str1;
          structureTreeNode.NodeTyp = (StructureNodeType) Enum.Parse(typeof (StructureNodeType), name, true);
          structureTreeNode.NodeSettings = str2;
          structureTreeNode.LayerID = parent.LayerID;
          structureTreeNode.Parent = parent;
          structureTreeNode.NodeOrder = parent.Children.Count + 1;
          parent.Children.Add(structureTreeNode);
          StructureTreeNode.CreateStructure(structureTreeNode, xmlNode.ChildNodes);
        }
      }
    }

    private static StructureTreeNode CreateOldStructure(XmlDocument xml)
    {
      StructureTreeNode parent = new StructureTreeNode();
      parent.LayerID = new int?(0);
      StructureTreeNode.CreateOldStructure(parent, xml.ChildNodes[0].ChildNodes);
      return parent;
    }

    private static void CreateOldStructure(StructureTreeNode parent, XmlNodeList xmlNodeList)
    {
      foreach (XmlNode xmlNode in xmlNodeList)
      {
        StructureNodeType structureNodeType = StructureTreeNode.GetNodeType(xmlNode.Name);
        string str1 = xmlNode.Attributes["NodeName"].Value;
        string str2 = xmlNode.Attributes["ParameterList"].Value;
        string str3 = xmlNode.Attributes["ReadingType"].Value;
        string str4 = str2.Replace("VALUE_REQ_ID;1;", "");
        if (structureNodeType != StructureNodeType.Unknown)
        {
          if (xmlNode.Name == "GroupNode")
          {
            if (str4.IndexOf("Type") == -1)
              structureNodeType = StructureNodeType.Country;
            else if (str4.IndexOf(DeviceCollectorSettings.BusMode.ToString()) == -1 && (str3 == "MBus" || str3 == "MBusCom"))
              str4 += ";BusMode;MBus;FromTime;01.01.2000 01:01:01;ToTime;01.01.2030 01:01:01;MaxRequestRepeat;2;ScanStartAddress=;0;ScanStartSerialnumber;fffffff0;OrganizeStartAddress;1;CycleTime;5;OnlySecondaryAddressing;True;FastSecondaryAddressing;False;BeepSignalOnReadResult;False;LogToFileEnabled;False;LogFilePath;";
          }
          StructureTreeNode structureTreeNode = new StructureTreeNode();
          structureTreeNode.Name = str1;
          structureTreeNode.NodeTyp = structureNodeType;
          structureTreeNode.NodeSettings = str4;
          structureTreeNode.LayerID = parent.LayerID;
          structureTreeNode.Parent = parent;
          structureTreeNode.NodeOrder = parent.Children.Count + 1;
          parent.Children.Add(structureTreeNode);
          StructureTreeNode.CreateOldStructure(structureTreeNode, xmlNode.ChildNodes);
        }
      }
    }

    private static StructureNodeType GetNodeType(string oldNameOfNodeType)
    {
      string str = oldNameOfNodeType;
      if (str != null)
      {
        switch (str.Length)
        {
          case 9:
            switch (str[0])
            {
              case 'G':
                if (str == "GroupNode")
                  return StructureNodeType.Country;
                break;
              case 'M':
                if (str == "MeterNode")
                  return StructureNodeType.Meter;
                break;
            }
            break;
          case 12:
            if (str == "WaveFlowNode")
              return StructureNodeType.WaveFlowNode;
            break;
          case 13:
            if (str == "ESatzNodeHaus")
              return StructureNodeType.House;
            break;
          case 15:
            switch (str[0])
            {
              case 'A':
                if (str == "AddressNodeCity")
                  return StructureNodeType.City;
                break;
              case 'E':
                if (str == "ESatzNodeNutzer")
                  return StructureNodeType.NodeUser;
                break;
            }
            break;
          case 16:
            switch (str[11])
            {
              case 'F':
                if (str == "AddressNodeFloor")
                  return StructureNodeType.Floor;
                break;
              case 'H':
                if (str == "AddressNodeHouse")
                  return StructureNodeType.House;
                break;
              case 'h':
                if (str == "ESatzNodeWohnung")
                  return StructureNodeType.Flat;
                break;
            }
            break;
          case 17:
            if (str == "AddressNodeStreet")
              return StructureNodeType.Street;
            break;
          case 18:
            if (str == "AddressNodeCountry")
              return StructureNodeType.Country;
            break;
          case 19:
            switch (str[12])
            {
              case 'i':
                if (str == "AddressNodeCityArea")
                  return StructureNodeType.CityArea;
                break;
              case 'o':
                if (str == "AddressNodeCorridor")
                  return StructureNodeType.DeviceGroup;
                break;
            }
            break;
          case 20:
            switch (str[0])
            {
              case 'B':
                if (str == "BerechnungsNodeSumIN")
                  return StructureNodeType.BerechnungsNodeSumIN;
                break;
              case 'M':
                if (str == "MobileDeviceBaseNode")
                  return StructureNodeType.MobileDevice;
                break;
            }
            break;
          case 21:
            switch (str[9])
            {
              case 'L':
                if (str == "ESatzNodeLiegenschaft")
                  return StructureNodeType.ESatzNodeLiegenschaft;
                break;
              case 'N':
                if (str == "ESatzNodeNutzergruppe")
                  return StructureNodeType.NodeUserGroupe;
                break;
              case 'd':
                if (str == "AddressNodeRoomNumber")
                  return StructureNodeType.NodeUser;
                break;
              case 'g':
                if (str == "BerechnungsNodeSumOUT")
                  return StructureNodeType.BerechnungsNodeSumOUT;
                break;
            }
            break;
          case 22:
            if (str == "ESatzNodeRechenzentrum")
              return StructureNodeType.ESatzNodeRechenzentrum;
            break;
          case 27:
            if (str == "BerechnungsNodeWirkungsgrad")
              return StructureNodeType.BerechnungsNodeNutzungsgrad;
            break;
        }
      }
      return StructureNodeType.Unknown;
    }

    public string FindNodeName(int meterID)
    {
      foreach (StructureTreeNode structureTreeNode in StructureTreeNode.ForEach(this))
      {
        int? meterId = structureTreeNode.MeterID;
        int num1;
        if (meterId.HasValue)
        {
          meterId = structureTreeNode.MeterID;
          int num2 = meterID;
          num1 = meterId.GetValueOrDefault() == num2 & meterId.HasValue ? 1 : 0;
        }
        else
          num1 = 0;
        if (num1 != 0)
          return structureTreeNode.Name;
      }
      return string.Empty;
    }

    public List<StructureTreeNode> FindBySerialNumber(string serialNumber)
    {
      List<StructureTreeNode> bySerialNumber = new List<StructureTreeNode>();
      foreach (StructureTreeNode structureTreeNode in StructureTreeNode.ForEach(this))
      {
        if (structureTreeNode.SerialNumber == serialNumber)
          bySerialNumber.Add(structureTreeNode);
      }
      return bySerialNumber;
    }

    public string FindSerialnumber(int meterID)
    {
      foreach (StructureTreeNode structureTreeNode in StructureTreeNode.ForEach(this))
      {
        int? meterId = structureTreeNode.MeterID;
        int num1;
        if (meterId.HasValue)
        {
          meterId = structureTreeNode.MeterID;
          int num2 = meterID;
          num1 = meterId.GetValueOrDefault() == num2 & meterId.HasValue ? 1 : 0;
        }
        else
          num1 = 0;
        if (num1 != 0)
          return structureTreeNode.SerialNumber;
      }
      return string.Empty;
    }

    public void UpdateNodeSettingsValues(string newNodeSettings)
    {
      if (this.SubDeviceIndex > 0)
        return;
      List<string> keys = ParameterService.GetKeys(newNodeSettings);
      if (keys == null)
        return;
      foreach (string str in keys)
      {
        string parameter = ParameterService.GetParameter(newNodeSettings, str);
        this.UpdateNodeSettingsValue(str, (object) parameter);
      }
    }

    public void UpdateChildren(StructureTreeNodeList unknownChildren)
    {
      if (unknownChildren == null || unknownChildren.Count == 0)
        return;
      foreach (StructureTreeNode unknownChild in (List<StructureTreeNode>) unknownChildren)
      {
        bool flag = false;
        foreach (StructureTreeNode child in (List<StructureTreeNode>) this.Children)
        {
          if (child.SubDeviceIndex == unknownChild.SubDeviceIndex)
          {
            flag = true;
            break;
          }
        }
        if (!flag)
        {
          unknownChild.Parent = this;
          this.Children.Add(unknownChild);
        }
      }
    }

    private static string GetTranslatedLanguageText(string GmmModule, string TextKey)
    {
      string str = GmmModule + TextKey;
      return Ot.Gtt(Tg.Common, str, str);
    }
  }
}


--- StructureTreeNodeList.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.StructureTreeNodeList
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Collections.Generic;

#nullable disable
namespace ZR_ClassLibrary
{
  public class StructureTreeNodeList : List<StructureTreeNode>
  {
    public StructureTreeNode Parent { get; set; }

    public StructureTreeNodeList()
    {
    }

    public StructureTreeNodeList(StructureTreeNode parent) => this.Parent = parent;

    public StructureTreeNode Add(StructureTreeNode node)
    {
      if (node == null)
        return (StructureTreeNode) null;
      base.Add(node);
      return node;
    }

    public void Remove() => this.Clear();

    public void Remove(StructureTreeNode node)
    {
      if (node != null)
        node.Parent = (StructureTreeNode) null;
      base.Remove(node);
    }

    public override string ToString() => string.Format("Count={0}", (object) this.Count);
  }
}


--- SystemValues.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.SystemValues
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Management;
using System.Text;
using System.Threading;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class SystemValues
  {
    public static string AppPath = string.Empty;
    public static string DataPath;
    public static string ImportPath;
    public static string ExportPath;
    public static string DatabasePath;
    public static string CachePath;
    public static string ZDF_DataPath;
    public static string MobileDB_DataPath;
    public static string LoggDataPath;
    public static string BussesPath;
    public static string SettingsPath;
    public static string ExportStylesPath;
    public static string MappingPath;
    private static CultureInfo oldCI;
    private static CultureInfo DeCI = new CultureInfo("de");
    public static string ZRTimeFormatShort;
    public static string ZRTimeFormat;
    public static string ZRTimeFormatLong;
    public static string ZRDateFormat;
    public static string ZRDateTimeFormat;
    public static string ZR_FixedDateTimeFormat = "dd.MM.yyyy HH:mm:ss";
    public static string ZRDezimalSeparator;
    public static string ZRNumberGroupSeperator;
    public static NumberFormatInfo ZRNumberFormatInfo;
    public static string ZRCurrentUserName;
    public static string ZRCurrentMachineName;
    public static string RootPathInfo;
    public static string AppPathInfo;
    public static readonly DateTime GMM_Start = DateTime.Now;
    public static readonly int GMM_StartTicks = Environment.TickCount;

    public static DateTime DateTimeNow => DateTime.Now;

    public static void Dispose()
    {
      SystemValues.AppPathInfo = (string) null;
      SystemValues.RootPathInfo = (string) null;
      SystemValues.ZRCurrentMachineName = (string) null;
      SystemValues.ZRCurrentUserName = (string) null;
      SystemValues.ZRNumberFormatInfo = (NumberFormatInfo) null;
      SystemValues.ZRNumberGroupSeperator = (string) null;
      SystemValues.ZRDezimalSeparator = (string) null;
      SystemValues.ZRDateTimeFormat = (string) null;
      SystemValues.ZRTimeFormatShort = (string) null;
      SystemValues.ZRTimeFormat = (string) null;
      SystemValues.ZRTimeFormatLong = (string) null;
      SystemValues.ZRDateFormat = (string) null;
      SystemValues.oldCI = (CultureInfo) null;
      SystemValues.DataPath = (string) null;
      SystemValues.ImportPath = (string) null;
      SystemValues.ExportPath = (string) null;
      SystemValues.DatabasePath = (string) null;
      SystemValues.CachePath = (string) null;
      SystemValues.ZDF_DataPath = (string) null;
      SystemValues.MobileDB_DataPath = (string) null;
      SystemValues.LoggDataPath = (string) null;
      SystemValues.BussesPath = (string) null;
      SystemValues.SettingsPath = (string) null;
      SystemValues.ExportStylesPath = (string) null;
      SystemValues.MappingPath = (string) null;
      SystemValues.ZR_FixedDateTimeFormat = "dd.MM.yyyy HH:mm:ss";
      SystemValues.AppPath = string.Empty;
      SystemValues.DeCI = new CultureInfo("de");
    }

    public SystemValues()
    {
      if (SystemValues.AppPath.Length == 0)
      {
        string path2 = Path.Combine("ZENNER", "GMM");
        SystemValues.DataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), path2);
        SystemValues.AppPath = Application.StartupPath;
        string path1 = Path.Combine(SystemValues.AppPath, "DataPathOverride.txt");
        if (File.Exists(path1))
        {
          try
          {
            using (StreamReader streamReader = new StreamReader(path1))
            {
              string path3 = streamReader.ReadLine();
              if (Directory.Exists(path3))
                SystemValues.DataPath = path3;
            }
          }
          catch
          {
          }
        }
        SystemValues.ImportPath = Path.Combine(SystemValues.DataPath, "Import");
        SystemValues.ExportPath = Path.Combine(SystemValues.DataPath, "Export");
        SystemValues.DatabasePath = Path.Combine(SystemValues.DataPath, "Database");
        SystemValues.CachePath = Path.Combine(SystemValues.DataPath, "Cache");
        SystemValues.ZDF_DataPath = Path.Combine(SystemValues.DataPath, "ZDF_Data");
        SystemValues.MobileDB_DataPath = Path.Combine(SystemValues.DataPath, "MobileDB_Data");
        SystemValues.LoggDataPath = Path.Combine(SystemValues.DataPath, "LoggData");
        SystemValues.BussesPath = Path.Combine(SystemValues.DataPath, "Busses");
        SystemValues.SettingsPath = Path.Combine(SystemValues.DataPath, "Settings");
        SystemValues.ExportStylesPath = Path.Combine(SystemValues.SettingsPath, "ExportStyles");
        SystemValues.MappingPath = Path.Combine(SystemValues.DataPath, "Mappings");
        Directory.CreateDirectory(SystemValues.DataPath);
        Directory.CreateDirectory(SystemValues.ImportPath);
        Directory.CreateDirectory(SystemValues.ExportPath);
        Directory.CreateDirectory(SystemValues.DatabasePath);
        Directory.CreateDirectory(SystemValues.CachePath);
        Directory.CreateDirectory(SystemValues.ZDF_DataPath);
        Directory.CreateDirectory(SystemValues.MobileDB_DataPath);
        Directory.CreateDirectory(SystemValues.LoggDataPath);
        Directory.CreateDirectory(SystemValues.BussesPath);
        Directory.CreateDirectory(SystemValues.SettingsPath);
        Directory.CreateDirectory(SystemValues.ExportStylesPath);
        Directory.CreateDirectory(SystemValues.MappingPath);
        if (!File.Exists(CsvStyle.GetPath(CsvStyle.DefaultStyle1)))
          CsvStyle.Save(CsvStyle.DefaultStyle1);
        if (!File.Exists(CsvStyle.GetPath(CsvStyle.DefaultStyle2)))
          CsvStyle.Save(CsvStyle.DefaultStyle2);
        if (!File.Exists(CsvStyle.GetPath(CsvStyle.DefaultStyle3)))
          CsvStyle.Save(CsvStyle.DefaultStyle3);
      }
      CultureInfo cultureInfo = new CultureInfo(CultureInfo.CurrentCulture.Name);
      SystemValues.ZRCurrentUserName = Environment.UserDomainName;
      SystemValues.ZRCurrentMachineName = Environment.MachineName;
      SystemValues.AppPathInfo = Application.ExecutablePath.ToLower();
      SystemValues.ZRDateTimeFormat = cultureInfo.DateTimeFormat.ShortDatePattern + " " + cultureInfo.DateTimeFormat.LongTimePattern;
      SystemValues.ZRDateFormat = cultureInfo.DateTimeFormat.ShortDatePattern;
      SystemValues.ZRTimeFormat = cultureInfo.DateTimeFormat.LongTimePattern;
      SystemValues.ZRNumberFormatInfo = cultureInfo.NumberFormat;
      SystemValues.ZRDezimalSeparator = cultureInfo.NumberFormat.NumberDecimalSeparator;
      SystemValues.ZRNumberGroupSeperator = cultureInfo.NumberFormat.NumberGroupSeparator;
      ushort num1 = 0;
      for (int index = 0; index < SystemValues.AppPathInfo.Length; ++index)
        num1 += (ushort) SystemValues.AppPathInfo[index];
      SystemValues.RootPathInfo = Path.GetPathRoot(SystemValues.AppPathInfo);
      SystemValues.AppPathInfo = num1.ToString("d5") + ((ulong) File.GetCreationTime(SystemValues.RootPathInfo).ToUniversalTime().Ticks).ToString("d22");
      string str = string.Empty;
      string empty1 = string.Empty;
      string empty2 = string.Empty;
      string empty3 = string.Empty;
      try
      {
        ManagementObject managementObject = new ManagementObject("win32_logicaldisk.deviceid=\"c:\"");
        managementObject.Get();
        str = managementObject["VolumeSerialNumber"].ToString();
      }
      catch
      {
      }
      if (str == string.Empty)
      {
        try
        {
          ManagementObjectCollection.ManagementObjectEnumerator enumerator = new ManagementClass("Win32_OperatingSystem").GetInstances().GetEnumerator();
          enumerator.MoveNext();
          empty1 = enumerator.Current["SerialNumber"].ToString();
        }
        catch
        {
        }
        str = empty1;
      }
      SystemValues.AppPathInfo = str + "sujkio" + empty2 + "1h78jki" + empty3;
      ushort num2 = 2345;
      for (int index = 0; index < SystemValues.AppPathInfo.Length; ++index)
        num2 += (ushort) SystemValues.AppPathInfo[index];
      SystemValues.AppPathInfo += num2.ToString();
      byte[] numArray = new byte[27];
      int num3 = 0;
      int num4 = 0;
      for (int index = 0; index < 200; ++index)
      {
        if (num4 >= SystemValues.AppPathInfo.Length)
          num4 = 0;
        if (num3 >= numArray.Length)
          num3 = 0;
        numArray[num3++] += (byte) SystemValues.AppPathInfo[num4++];
      }
      StringBuilder stringBuilder = new StringBuilder(27);
      for (int index = 0; index < 27; ++index)
      {
        int num5 = (int) numArray[index] % 10;
        stringBuilder.Append(num5.ToString());
      }
      SystemValues.AppPathInfo = stringBuilder.ToString();
    }

    public static List<string> GetPortNames()
    {
      SortedList<int, SerialDeviceSystemData> TheDeviceList;
      if (!SystemValues.GetInstalledSerialDevicesListFromSystem(SystemValues.SerialDeviceType.All, SystemValues.SerialDeviceManufacturer.All, out TheDeviceList, out string _))
        return (List<string>) null;
      List<string> portNames = new List<string>();
      foreach (KeyValuePair<int, SerialDeviceSystemData> keyValuePair in TheDeviceList)
        portNames.Add("COM" + keyValuePair.Key.ToString());
      return portNames;
    }

    public static bool GetInstalledSerialDevicesListFromSystem(
      SystemValues.SerialDeviceType TheDeviceType,
      SystemValues.SerialDeviceManufacturer TheDeviceManufacturer,
      out SortedList<int, SerialDeviceSystemData> TheDeviceList,
      out string ErrorString)
    {
      ErrorString = string.Empty;
      TheDeviceList = new SortedList<int, SerialDeviceSystemData>();
      try
      {
        ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * from win32_PnPEntity");
        if (managementObjectSearcher != null)
        {
          foreach (ManagementObject managementObject in managementObjectSearcher.Get())
          {
            try
            {
              string str1 = managementObject.GetPropertyValue("Name").ToString();
              string TheSerialDeviceName = str1.Replace(" ", string.Empty);
              if (str1.Contains("(COM"))
              {
                int comPortNumber = SystemValues.GetComPortNumber(TheSerialDeviceName);
                SerialDeviceSystemData deviceSystemData = new SerialDeviceSystemData();
                deviceSystemData.Name = str1;
                deviceSystemData.DeviceID = managementObject.GetPropertyValue("DeviceID").ToString();
                deviceSystemData.Manufacturer = managementObject.GetPropertyValue("Manufacturer").ToString();
                deviceSystemData.Service = managementObject.GetPropertyValue("Service").ToString();
                deviceSystemData.Status = managementObject.GetPropertyValue("Status").ToString();
                try
                {
                  if (deviceSystemData.DeviceID.StartsWith("BTHENUM"))
                  {
                    int num = deviceSystemData.DeviceID.IndexOf("\\8&27BEC276&0&");
                    if (num > 0)
                    {
                      string str2 = deviceSystemData.DeviceID.Substring(num + 22, 4);
                      if (str2.Length == 4 && str2 != "0000")
                        deviceSystemData.SpecialDeviceName = "MinoConnectBT: " + str2;
                    }
                  }
                  else if (deviceSystemData.DeviceID.StartsWith("FTDIBUS"))
                  {
                    int num = deviceSystemData.DeviceID.IndexOf("VID_0403+PID_6001+");
                    if (num > 0)
                    {
                      string str3 = deviceSystemData.DeviceID.Substring(num + 22, 5);
                      if (str3.Length == 5)
                        deviceSystemData.SpecialDeviceName = "MinoConnectUSB: " + str3;
                    }
                  }
                }
                catch
                {
                }
                bool flag = true;
                if (TheDeviceManufacturer == SystemValues.SerialDeviceManufacturer.FTDI && deviceSystemData.Manufacturer.ToUpper().Trim() != "FTDI")
                  flag = false;
                if (TheDeviceType == SystemValues.SerialDeviceType.USB && !deviceSystemData.Name.ToUpper().Trim().Contains("USB"))
                  flag = false;
                if (flag)
                  TheDeviceList[comPortNumber] = deviceSystemData;
              }
            }
            catch
            {
            }
          }
        }
        return true;
      }
      catch (Exception ex)
      {
        ErrorString = ex.ToString();
        return false;
      }
    }

    private static int GetComPortNumber(string TheSerialDeviceName)
    {
      string str = "(COM";
      int startIndex = TheSerialDeviceName.IndexOf(str) + str.Length;
      string empty = string.Empty;
      while (SystemValues.IsNumber(TheSerialDeviceName.Substring(startIndex, 1)))
      {
        empty += TheSerialDeviceName.Substring(startIndex, 1);
        ++startIndex;
        if (startIndex >= TheSerialDeviceName.Length - 1)
          break;
      }
      return int.Parse(empty);
    }

    public static string GetFTDIAddressFromDeviceID(string TheDeviceID)
    {
      try
      {
        if (!(TheDeviceID.Trim().Substring(0, 7) == "FTDIBUS"))
          return string.Empty;
        string str = TheDeviceID.Substring(TheDeviceID.LastIndexOf("+") + 1);
        return str.Remove(str.LastIndexOf("\\"));
      }
      catch
      {
        return string.Empty;
      }
    }

    private static bool IsNumber(string TheCharacter)
    {
      char[] charArray = TheCharacter.ToCharArray(0, 1);
      return charArray[0] >= '0' && charArray[0] <= '9';
    }

    public static string FillRightWithSpaces(string TheString, int TheLengthAfterFilling)
    {
      if (TheString.Length < TheLengthAfterFilling)
      {
        do
        {
          TheString += " ";
        }
        while (TheString.Length < TheLengthAfterFilling);
      }
      return TheString;
    }

    public static string convertGermanNumberFormatToCurrent(string NumberAsString)
    {
      string current = NumberAsString;
      SystemValues.oldCI = Thread.CurrentThread.CurrentUICulture;
      try
      {
        string[] strArray = NumberAsString.Split('.');
        if (strArray.GetLength(0) == 2)
          current = strArray[0] + SystemValues.ZRDezimalSeparator + strArray[1];
      }
      catch
      {
        Thread.CurrentThread.CurrentUICulture = SystemValues.oldCI;
      }
      return current;
    }

    public enum SerialDeviceManufacturer
    {
      All,
      FTDI,
    }

    public enum SerialDeviceType
    {
      All,
      USB,
    }
  }
}


--- TarifSetup.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TarifSetup
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum TarifSetup
  {
    OFF = 0,
    ExtraEnergyInc_TReturn = 5,
    EquEnergyInc_SwitchTr = 7,
    ExtraEnergyInc_TFlow = 9,
    EquEnergyInc_SwitchTf = 11, // 0x0000000B
    EquEnergyInc_SwitchDt = 19, // 0x00000013
    EquEnergyInc_SwitchInp1 = 35, // 0x00000023
    EquEnergyInc_SwitchFunction = 67, // 0x00000043
  }
}


--- TelegramParameter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TelegramParameter
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class TelegramParameter
  {
    public string Name;
    public string Parent;
    public string Description;
    public string Type;
    public string RD_Type;
    public int Address;
    public int BitMask;
    public int ByteLength;
    public int RD_Factor;
    public int RD_Divisor;
    public bool UseK;
    public bool UseMulDiv;
    private System.Type t;
    public long ValueIdent;
    public int OverrideID;
    public string RD_Data;

    public System.Type ParameterType
    {
      get => this.t;
      set
      {
        this.t = value;
        if (value != (System.Type) null)
          this.tParameterType = value.AssemblyQualifiedName;
        else
          this.tParameterType = string.Empty;
      }
    }

    public string tParameterType
    {
      get => this.t != (System.Type) null ? this.t.AssemblyQualifiedName : string.Empty;
      set
      {
        if (string.IsNullOrEmpty(value))
          return;
        this.t = System.Type.GetType(value);
      }
    }

    public override string ToString() => this.Name;
  }
}


--- TemperaturUnit.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TemperaturUnit
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum TemperaturUnit
  {
    C,
    F,
  }
}


--- TestClasses.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TestClasses
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum TestClasses
  {
    UnKnown = -1, // 0xFFFFFFFF
    Adjust = 0,
    Calibration = 1,
    EndtestEHCAII = 3,
    EndTestZelsius = 4,
    EnergieTest = 5,
    EnergieTest_ALT = 6,
    FullMIDWaterMeterTest = 7,
    FullWaterMeterTest = 8,
    FunkabgleichEHCAII = 9,
    HardwaretestSaarius = 10, // 0x0000000A
    HardwaretestZelsius = 11, // 0x0000000B
    HydraulikTest = 12, // 0x0000000C
    MidmasterHydraulikTest = 13, // 0x0000000D
    MT6HydraulikTest = 14, // 0x0000000E
    Q3MIDWaterMeterTest = 15, // 0x0000000F
    QmaxWaterMeterTest = 16, // 0x00000010
    ZelsiusCapsuleTest = 17, // 0x00000011
    ZelsiusModuleTest = 18, // 0x00000012
    ProgramWaveFlow = 19, // 0x00000013
    WaveFlowFactoryEndTest = 20, // 0x00000014
    WaveFlowWaterEndTest = 21, // 0x00000015
    WaveFlowCompactPrintEtikett = 22, // 0x00000016
    WaveFlowSplitPrintEtikett = 23, // 0x00000017
    WaveFlowRefitPrintEtikett = 24, // 0x00000018
    HardwaretestWR3 = 25, // 0x00000019
    EnergieTestWR3 = 26, // 0x0000001A
    AusgangstestWR3 = 27, // 0x0000001B
    PulseCounterTestWR3 = 28, // 0x0000001C
    DualSlopeCalibration = 29, // 0x0000001D
    ExternalEnergyTestWR3 = 30, // 0x0000001E
    ExternalEnergyTestC2 = 31, // 0x0000001F
    CoolingEnergyTestWR3 = 32, // 0x00000020
    FullEnergyTestWR3 = 33, // 0x00000021
    ExternalCalibrationC2 = 34, // 0x00000022
    ExternalCalibrationWR3 = 35, // 0x00000023
    UniversalAirTest = 36, // 0x00000024
    MT6HydraulikTestC3 = 37, // 0x00000025
    EnergyTestC5 = 38, // 0x00000026
    UsVmFunctionTest = 39, // 0x00000027
    MinoMessTest = 40, // 0x00000028
    HydraulikTestC5 = 41, // 0x00000029
    DeviceTestC5 = 42, // 0x0000002A
    TestGroup = 43, // 0x0000002B
    C5Calibration = 44, // 0x0000002C
    HardwaretestC5 = 45, // 0x0000002D
    C5PrintStation = 46, // 0x0000002E
    EDCHardwaretest = 47, // 0x0000002F
    EDCFunctionTestPotted = 48, // 0x00000030
    EDCFinalTest = 49, // 0x00000031
    EDCPCBTest = 50, // 0x00000032
    C5FirmwareUpdate = 51, // 0x00000033
    EDCFunctionTestNotPotted = 52, // 0x00000034
    ScanUnitTest = 53, // 0x00000035
    VolumeMeterTest = 54, // 0x00000036
    C5ComponentTest = 55, // 0x00000037
    HydraulicCheckC5 = 56, // 0x00000038
    HydraulikApprovalC5 = 57, // 0x00000039
    TransducerTest = 58, // 0x0000003A
    UltrasonicVolumeMeterCheck = 59, // 0x0000003B
    HydraulicAdjustmentC5 = 60, // 0x0000003C
    UsVmCheck = 61, // 0x0000003D
    SDPCBTest_T1 = 62, // 0x0000003E
    SDFunctionTES_T2 = 63, // 0x0000003F
    SDTunnelTest_T3 = 64, // 0x00000040
    SDFinalTest_T5 = 65, // 0x00000041
    SDAgingTest_T4 = 66, // 0x00000042
    PDCPCBTest = 67, // 0x00000043
    PDCHardwareTest = 68, // 0x00000044
    PDCFunctionTestPotted = 69, // 0x00000045
    PDCFinalTest = 70, // 0x00000046
    SDCalibration_T3 = 71, // 0x00000047
    EvmRhHydraulicTest = 72, // 0x00000048
    JusturPressureTest = 73, // 0x00000049
    EvmRhFactoryTest = 74, // 0x0000004A
    CounterTestEDC = 75, // 0x0000004B
    EvmRhHydraulicCheck = 76, // 0x0000004C
    EvmRhPrintStation = 77, // 0x0000004D
    ElementaryEnergyTest = 78, // 0x0000004E
    ElementaryCalibration = 79, // 0x0000004F
    CoverPrinting = 80, // 0x00000050
    THFunctionTest = 81, // 0x00000051
    FinishDeviceAfterCoverPrinting = 82, // 0x00000052
    WR4Hardwaretest = 83, // 0x00000053
    DemoTest = 84, // 0x00000054
    WR4DeviceTest = 85, // 0x00000055
    M8FunctionTestT1 = 86, // 0x00000056
    WR4PrintStation = 87, // 0x00000057
    M8FunctionTestT2 = 88, // 0x00000058
    M8FunctionTestT3 = 89, // 0x00000059
    M8FunctionTestT4 = 90, // 0x0000005A
    M8FunctionTestT5 = 91, // 0x0000005B
    NFCCouplerTest = 92, // 0x0000005C
    WR4EnergyTest = 93, // 0x0000005D
    WR4Calibration = 94, // 0x0000005E
    WR4HydraulicTest = 95, // 0x0000005F
    NFCMiConConnectorHardwareTest = 96, // 0x00000060
    WR4EnergyTestWithBox = 97, // 0x00000061
    IUWHydraulicTest = 98, // 0x00000062
    IUWHardwareTest = 99, // 0x00000063
    IUWPottingTest = 100, // 0x00000064
    IUWPrintStation = 101, // 0x00000065
    USTouchPad = 102, // 0x00000066
    MicroPCBTest = 103, // 0x00000067
    MicroHardwaretest = 104, // 0x00000068
    MicroFunctionTestNotPotted = 105, // 0x00000069
    MicroFunctionTestPotted = 106, // 0x0000006A
    MicroFinalTest = 107, // 0x0000006B
    IUWTransducerChecker = 108, // 0x0000006C
    NFCMiConModuleFinalTest = 109, // 0x0000006D
    WR4CalibrationWithBox = 110, // 0x0000006E
    WR4FullEnergyTestWithBox = 111, // 0x0000006F
    NFCSENSUSModuleTest = 112, // 0x00000070
    IUWHydraulicCheck = 113, // 0x00000071
    NotDefined = 114, // 0x00000072
    SingleJetQ2Q1 = 115, // 0x00000073
    SingleJetQ3 = 116, // 0x00000074
    MultipleJetQ2Q1 = 117, // 0x00000075
    MultipleJetQ3 = 118, // 0x00000076
    WR4HydraulicTestUpload = 119, // 0x00000077
    IUWResidentialPressureTest = 120, // 0x00000078
    LoraGatewayLGMTest = 121, // 0x00000079
    LoraGatewayMainboardTest = 122, // 0x0000007A
    LoraGatewayFunctionTest = 123, // 0x0000007B
    LoraGatewayCPUTest = 124, // 0x0000007C
    M8FinalTest = 125, // 0x0000007D
    THLoraTest = 126, // 0x0000007E
    EDCNBIoTSIMInfoUpload = 127, // 0x0000007F
    IUWResidentialDeviceTest = 128, // 0x00000080
    IUWResidentialHydraulicTest = 129, // 0x00000081
    IUWResidentialHydraulicTestCheck = 130, // 0x00000082
    MWMPacking = 131, // 0x00000083
    TransducerInspection = 132, // 0x00000084
    MultipleJetFull = 133, // 0x00000085
    MeterValueCheckStation = 134, // 0x00000086
    C5PressureTest = 135, // 0x00000087
    C5ZeroFlowAdjustment = 136, // 0x00000088
    MicroPrintStation = 137, // 0x00000089
    MicroBarcodeLabelStation = 138, // 0x0000008A
    IUWPrintStationUS = 139, // 0x0000008B
    IUWPrintStationMULDA = 140, // 0x0000008C
    IUWWmModulHydraulicPreeTest = 141, // 0x0000008D
    NDCPCBTest = 142, // 0x0000008E
    NDCHardwareTest = 143, // 0x0000008F
    NDCFunctionTestPotted = 144, // 0x00000090
    NDCFinalTest = 145, // 0x00000091
    SingleJetQ2Q1QC = 146, // 0x00000092
    SingleJetQ3QC = 147, // 0x00000093
    MultipleJetFullQC = 148, // 0x00000094
    MultipleJetQ3QC = 149, // 0x00000095
    IUWLCDTest = 150, // 0x00000096
    EDCConfigTest = 151, // 0x00000097
    BulkMeterFlowTest = 152, // 0x00000098
    UDCPCBTest = 153, // 0x00000099
    UDCHardwareTest = 154, // 0x0000009A
    UDCFinalTest = 155, // 0x0000009B
    MultipleCalibration = 156, // 0x0000009C
    HydraulicCheckWithZeroFlowAdjustmentC5 = 157, // 0x0000009D
    LabelPrintingAndLasering = 158, // 0x0000009E
    HydraulikTestC5Cold = 159, // 0x0000009F
  }
}


--- TransceiverDevice.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TransceiverDevice
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum TransceiverDevice
  {
    None,
    MinoConnect,
    Wavenis,
    MinoHead,
    MinoIR,
  }
}


--- TranslationRule.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TranslationRule
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  [Serializable]
  public sealed class TranslationRule : IEquatable<TranslationRule>
  {
    public string Manufacturer { get; set; }

    public string Medium { get; set; }

    public int VersionMin { get; set; }

    public int VersionMax { get; set; }

    public string MBusZDF { get; set; }

    public long ValueIdent { get; set; }

    public int RuleOrder { get; set; }

    public double Multiplier { get; set; }

    public SpecialTranslation SpecialTranslation { get; set; }

    public int SubDeviceIndex { get; set; }

    public string StorageTimeParam { get; set; }

    public SpecialStorageTimeTranslation StorageTimeTranslation { get; set; }

    public string SubDeviceAttributeIdentifier { get; set; }

    public bool Equals(TranslationRule other)
    {
      return other != null && other.Manufacturer == this.Manufacturer && other.Medium == this.Medium && other.VersionMin == this.VersionMin && other.VersionMax == this.VersionMax && other.MBusZDF == this.MBusZDF && other.ValueIdent == this.ValueIdent && other.RuleOrder == this.RuleOrder && other.StorageTimeParam == this.StorageTimeParam && Util.AreEqual(other.Multiplier, this.Multiplier) && other.SpecialTranslation == this.SpecialTranslation && other.SubDeviceIndex == this.SubDeviceIndex && other.StorageTimeTranslation == this.StorageTimeTranslation && other.SubDeviceAttributeIdentifier == this.SubDeviceAttributeIdentifier;
    }

    public bool IsValidManufacturer()
    {
      return !string.IsNullOrEmpty(this.Manufacturer) && this.Manufacturer.Length < 8;
    }

    public bool IsValidMedium() => !string.IsNullOrEmpty(this.Medium);

    public bool IsValidMBusZDF() => !string.IsNullOrEmpty(this.MBusZDF);

    public bool IsValidVersionMin()
    {
      return this.VersionMin >= -1 && this.VersionMin <= 256 && this.VersionMin <= this.VersionMax;
    }

    public bool IsValidVersionMax()
    {
      return this.VersionMax >= -1 && this.VersionMax <= 256 && this.VersionMax >= this.VersionMin && this.VersionMax != 0;
    }

    public bool IsValidValueIdent() => this.ValueIdent != 0L && ZR_ClassLibrary.ValueIdent.IsValid(this.ValueIdent);

    public bool IsValidMultiplier() => this.Multiplier > 0.0;

    public bool IsValidStorageTimeParam() => this.StorageTimeParam != null;

    public bool IsValidSubDeviceAttributeIdentifier()
    {
      return this.SpecialTranslation == SpecialTranslation.None ? !string.IsNullOrEmpty(this.SubDeviceAttributeIdentifier) : string.IsNullOrEmpty(this.SubDeviceAttributeIdentifier);
    }

    public bool IsValid()
    {
      return this.SubDeviceIndex > 0 ? this.IsValidManufacturer() && this.IsValidMBusZDF() && this.IsValidMedium() && this.IsValidVersionMin() && this.IsValidVersionMax() && this.IsValidSubDeviceAttributeIdentifier() : this.IsValidManufacturer() && this.IsValidMedium() && this.IsValidMBusZDF() && this.IsValidVersionMin() && this.IsValidVersionMax() && this.IsValidValueIdent() && this.IsValidMultiplier() && this.IsValidStorageTimeParam();
    }

    public static string CorrectMedium(string medium)
    {
      if (string.IsNullOrEmpty(medium))
        return (string) null;
      if (medium == "HEAT_OUTLET" || medium == "HEAT_INLET")
        return "HEAT";
      return medium == "COOL_OUTLET" || medium == "COOL_INLET" ? "COOL" : medium;
    }

    public override string ToString()
    {
      if (string.IsNullOrEmpty(this.Manufacturer) || string.IsNullOrEmpty(this.Medium) || string.IsNullOrEmpty(this.MBusZDF))
        return string.Empty;
      return string.Format("Manufacturer: {0}, Medium: {1}, ZDF: {2}, VersionMin: {3}, VersionMax: {4}", (object) this.Manufacturer, (object) this.Medium, (object) this.MBusZDF, (object) this.VersionMin, (object) this.VersionMax);
    }
  }
}


--- TranslationRuleCollection.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TranslationRuleCollection
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.Xml.Serialization;

#nullable disable
namespace ZR_ClassLibrary
{
  [XmlRoot("Rules")]
  [Serializable]
  public sealed class TranslationRuleCollection : List<TranslationRule>
  {
    internal TranslationRuleCollection GetRules(
      string manufacturer,
      string medium,
      int? versionMin,
      int? versionMax)
    {
      TranslationRuleCollection rules = new TranslationRuleCollection();
      medium = TranslationRule.CorrectMedium(medium);
      for (int index = 0; index < this.Count; ++index)
      {
        TranslationRule translationRule = this[index];
        if ((!(manufacturer != string.Empty) || !(translationRule.Manufacturer != manufacturer) || !(manufacturer != "DEFAULT")) && (string.IsNullOrEmpty(medium) || !(medium != "UNKNOWN") || !(translationRule.Medium != medium)))
        {
          int num1 = versionMin.HasValue ? versionMin.Value : 0;
          int num2 = versionMax.HasValue ? versionMax.Value : (int) byte.MaxValue;
          if (translationRule.VersionMin >= num1 && translationRule.VersionMin <= num2 && translationRule.VersionMax <= num2 && translationRule.VersionMax >= num1)
            rules.Add(translationRule);
          else if (num1 >= translationRule.VersionMin && num2 >= translationRule.VersionMin && num2 <= translationRule.VersionMax && num1 <= translationRule.VersionMax)
            rules.Add(translationRule);
        }
      }
      return rules;
    }

    internal TranslationRuleCollection GetSubDeviceRules(
      string manufacturer,
      int version,
      int? subDeviceIndex)
    {
      TranslationRuleCollection subDeviceRules = new TranslationRuleCollection();
      foreach (TranslationRule translationRule in (List<TranslationRule>) this)
      {
        if (translationRule.SubDeviceIndex > 0 && translationRule.Manufacturer == manufacturer && version >= translationRule.VersionMin && version <= translationRule.VersionMax && (!subDeviceIndex.HasValue || subDeviceIndex.Value == translationRule.SubDeviceIndex))
          subDeviceRules.Add(translationRule);
      }
      return subDeviceRules;
    }

    private bool ContainsRule(
      string manufacturer,
      string medium,
      int versionMin,
      int versionMax,
      string zdfValue,
      double multiplier,
      SpecialTranslation specialTranslation)
    {
      foreach (TranslationRule translationRule in (List<TranslationRule>) this)
      {
        if (translationRule.Manufacturer == manufacturer && translationRule.Medium == medium && translationRule.MBusZDF == zdfValue && translationRule.Multiplier == multiplier && translationRule.SpecialTranslation == specialTranslation && translationRule.VersionMin >= versionMin && translationRule.VersionMax <= versionMax)
          return true;
      }
      return false;
    }
  }
}


--- TranslationRulesManager.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TranslationRulesManager
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using NLog;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml.Serialization;

#nullable disable
namespace ZR_ClassLibrary
{
  public class TranslationRulesManager
  {
    private static Logger logger = LogManager.GetLogger(nameof (TranslationRulesManager));
    private TranslationRuleCollection cachedRules;
    private static TranslationRulesManager _instance;

    public event EventHandlerEx<string> MissedTranslationRules;

    private TranslationRulesManager() => this.cachedRules = new TranslationRuleCollection();

    public static TranslationRulesManager Instance
    {
      get
      {
        if (TranslationRulesManager._instance == null)
          TranslationRulesManager._instance = new TranslationRulesManager();
        return TranslationRulesManager._instance;
      }
      set => TranslationRulesManager._instance = value;
    }

    public TranslationRuleCollection LoadRules(bool useCache)
    {
      if (!useCache)
        this.cachedRules.Clear();
      return this.LoadRules(string.Empty, string.Empty, new int?(), new int?());
    }

    public TranslationRuleCollection LoadRules(string zdf, bool loadDefaultRules)
    {
      string empty1 = string.Empty;
      string empty2 = string.Empty;
      string empty3 = string.Empty;
      string parameter1;
      string parameter2;
      string parameter3;
      if (zdf.Contains("SEC_MAN") && zdf.Contains("SEC_VER") && zdf.Contains("SEC_MED"))
      {
        parameter1 = ParameterService.GetParameter(zdf, "SEC_MAN");
        parameter2 = ParameterService.GetParameter(zdf, "SEC_MED");
        parameter3 = ParameterService.GetParameter(zdf, "SEC_VER");
      }
      else
      {
        parameter1 = ParameterService.GetParameter(zdf, "MAN");
        parameter2 = ParameterService.GetParameter(zdf, "MED");
        parameter3 = ParameterService.GetParameter(zdf, "GEN");
      }
      string manufacturer = loadDefaultRules ? "DEFAULT" : parameter1;
      int? nullable = new int?();
      if (!string.IsNullOrEmpty(parameter3))
        nullable = new int?(int.Parse(parameter3));
      return this.LoadRules(manufacturer, parameter2, nullable, nullable);
    }

    public TranslationRuleCollection LoadRules(
      string manufacturer,
      string medium,
      int? versionMin,
      int? versionMax)
    {
      if (this.cachedRules.Count == 0)
      {
        List<TranslationRule> collection = MeterDatabase.LoadTranslationRules();
        if (collection != null && collection.Count > 0)
          this.cachedRules.AddRange((IEnumerable<TranslationRule>) collection);
      }
      return this.cachedRules.GetRules(manufacturer, medium, versionMin, versionMax);
    }

    private TranslationRuleCollection LoadSubDeviceRules(string zdf)
    {
      return this.LoadSubDeviceRules(zdf, new int?());
    }

    private TranslationRuleCollection LoadSubDeviceRules(string zdf, int? subDeviceIndex)
    {
      if (string.IsNullOrEmpty(zdf))
        return (TranslationRuleCollection) null;
      if (this.cachedRules.Count == 0)
      {
        List<TranslationRule> collection = MeterDatabase.LoadTranslationRules();
        if (collection != null && collection.Count > 0)
          this.cachedRules.AddRange((IEnumerable<TranslationRule>) collection);
      }
      string parameter1 = ParameterService.GetParameter(zdf, "MAN");
      string parameter2 = ParameterService.GetParameter(zdf, "GEN");
      return string.IsNullOrEmpty(parameter1) || string.IsNullOrEmpty(parameter2) || !Util.IsNumeric((object) parameter2) ? (TranslationRuleCollection) null : this.cachedRules.GetSubDeviceRules(parameter1, int.Parse(parameter2), subDeviceIndex);
    }

    public bool UpdateRule(TranslationRule oldRule, TranslationRule newRule)
    {
      return MeterDatabase.UpdateTranslationRule(oldRule, newRule) && this.LoadRules(false) != null;
    }

    public bool CreateRule(TranslationRule newRule)
    {
      if (!MeterDatabase.AddTranslationRule(newRule))
        return false;
      this.cachedRules.Add(newRule);
      return true;
    }

    public bool DeleteRule(TranslationRule oldRule)
    {
      if (DbBasis.PrimaryDB == null || oldRule == null || !MeterDatabase.DeleteTranslationRule(oldRule))
        return false;
      this.cachedRules.Remove(oldRule);
      return true;
    }

    public bool TryParse(
      string zdf,
      int subDeviceIndex,
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      if (string.IsNullOrEmpty(zdf))
        return false;
      if (valueList == null)
        valueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      return subDeviceIndex == 0 ? this.TryParseMainDevice(zdf, ref valueList) : this.TryParseSubDevice(zdf, ref valueList, subDeviceIndex);
    }

    private bool TryParseMainDevice(
      string zdf,
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      List<long> filter = (List<long>) null;
      if (valueList.Count > 0)
      {
        filter = new List<long>((IEnumerable<long>) valueList.Keys);
        valueList.Clear();
      }
      TranslationRuleCollection translationRuleCollection = this.LoadRules(zdf, false);
      if (translationRuleCollection == null || translationRuleCollection.Count == 0)
      {
        translationRuleCollection = this.LoadRules(zdf, true);
        if (translationRuleCollection == null || translationRuleCollection.Count == 0)
        {
          if (this.MissedTranslationRules != null)
            this.MissedTranslationRules((object) this, zdf);
          return false;
        }
      }
      foreach (TranslationRule rule in (List<TranslationRule>) translationRuleCollection)
      {
        if (rule.SubDeviceIndex <= 0)
        {
          string parameter = ParameterService.GetParameter(zdf, rule.MBusZDF);
          if (!string.IsNullOrEmpty(parameter) && ValueIdent.IsExpectedValueIdent(filter, rule.ValueIdent))
          {
            DateTime? correctTimePoint = this.GetCorrectTimePoint(zdf, rule);
            if (correctTimePoint.HasValue)
            {
              if (rule.SpecialTranslation != 0)
              {
                if (!this.SpecialTranslation(rule, parameter, correctTimePoint.Value, ref valueList))
                  ;
              }
              else
              {
                double num;
                try
                {
                  num = double.Parse(parameter, (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
                }
                catch
                {
                  continue;
                }
                double y = num * rule.Multiplier;
                ReadingValue readingValue = new ReadingValue();
                readingValue.state = ReadingValueState.ok;
                readingValue.StateDetails = string.Empty;
                readingValue.value = y;
                if (valueList.ContainsKey(rule.ValueIdent))
                {
                  if (valueList[rule.ValueIdent].ContainsKey(correctTimePoint.Value))
                  {
                    if (!Util.AreEqual(valueList[rule.ValueIdent][correctTimePoint.Value].value, y))
                      TranslationRulesManager.logger.Error<long, DateTime?, double>("Duplication values detected! ValueIdent: {0}, TimePoint: {1}, Value: {2}", rule.ValueIdent, correctTimePoint, y);
                  }
                  else
                    valueList[rule.ValueIdent].Add(correctTimePoint.Value, readingValue);
                }
                else if (rule.ValueIdent == 0L)
                  TranslationRulesManager.logger.Error("Wrong rule detected! Value: " + rule.ToString());
                else
                  valueList.Add(rule.ValueIdent, new SortedList<DateTime, ReadingValue>(1)
                  {
                    {
                      correctTimePoint.Value,
                      readingValue
                    }
                  });
              }
            }
          }
        }
      }
      ValueIdent.CleanUpEmptyValueIdents(valueList);
      if (valueList.Count != 0)
        return true;
      if (this.MissedTranslationRules != null)
        this.MissedTranslationRules((object) this, zdf);
      return false;
    }

    private bool TryParseSubDevice(
      string zdf,
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList,
      int subDeviceIndex)
    {
      TranslationRuleCollection translationRuleCollection = this.LoadSubDeviceRules(zdf, new int?(subDeviceIndex));
      if (translationRuleCollection == null || translationRuleCollection.Count == 0)
      {
        if (this.MissedTranslationRules != null)
          this.MissedTranslationRules((object) this, zdf);
        return false;
      }
      string valueOfSubDevice1 = TranslationRulesManager.TryGetSpecialTranslationValueOfSubDevice(zdf, subDeviceIndex, ZR_ClassLibrary.SpecialTranslation.Serialnumber);
      if (string.IsNullOrEmpty(valueOfSubDevice1))
        return false;
      string valueOfSubDevice2 = TranslationRulesManager.TryGetSpecialTranslationValueOfSubDevice(zdf, subDeviceIndex, ZR_ClassLibrary.SpecialTranslation.MeterType);
      if (string.IsNullOrEmpty(valueOfSubDevice2))
        return false;
      string parameter1 = ParameterService.GetParameter(zdf, "MAN");
      string parameter2 = ParameterService.GetParameter(zdf, "GEN");
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("SID;").Append(valueOfSubDevice1).Append(";");
      stringBuilder.Append("MAN;").Append(parameter1).Append(";");
      stringBuilder.Append("GEN;").Append(parameter2).Append(";");
      stringBuilder.Append("MED;").Append(valueOfSubDevice2).Append(";");
      string str1 = stringBuilder.ToString();
      foreach (TranslationRule translationRule in (List<TranslationRule>) translationRuleCollection)
      {
        if (translationRule.SubDeviceIndex == subDeviceIndex && translationRule.SpecialTranslation == 0)
        {
          string parameter3 = ParameterService.GetParameter(zdf, translationRule.MBusZDF);
          if (!string.IsNullOrEmpty(parameter3))
          {
            string str2 = string.IsNullOrEmpty(translationRule.StorageTimeParam) ? "RTIME" : translationRule.StorageTimeParam;
            string parameter4 = ParameterService.GetParameter(zdf, str2);
            if (!string.IsNullOrEmpty(parameter3))
            {
              str1 = ParameterService.AddOrUpdateParameter(str1, translationRule.SubDeviceAttributeIdentifier, parameter3);
              str1 = ParameterService.AddOrUpdateParameter(str1, str2, parameter4);
            }
          }
        }
      }
      return this.TryParseMainDevice(str1, ref valueList);
    }

    public static List<GlobalDeviceId> GetSubDevices(string zdf)
    {
      if (string.IsNullOrEmpty(zdf) || zdf == "NoParameter")
        return (List<GlobalDeviceId>) null;
      List<GlobalDeviceId> subDevices = new List<GlobalDeviceId>();
      TranslationRuleCollection translationRuleCollection = TranslationRulesManager.Instance.LoadSubDeviceRules(zdf);
      if (translationRuleCollection == null || translationRuleCollection.Count == 0)
        return (List<GlobalDeviceId>) null;
      foreach (TranslationRule translationRule in (List<TranslationRule>) translationRuleCollection)
      {
        TranslationRule rule = translationRule;
        if (zdf.IndexOf(rule.MBusZDF) != -1 && rule.SubDeviceIndex != 0)
        {
          GlobalDeviceId globalDeviceId1 = subDevices.Find((Predicate<GlobalDeviceId>) (e => Convert.ToInt32(e.MeterNumber) == rule.SubDeviceIndex));
          if (globalDeviceId1 == null)
          {
            globalDeviceId1 = new GlobalDeviceId();
            globalDeviceId1.Manufacturer = rule.Manufacturer;
            GlobalDeviceId globalDeviceId2 = globalDeviceId1;
            int num = rule.SubDeviceIndex;
            string str1 = num.ToString();
            globalDeviceId2.MeterNumber = str1;
            GlobalDeviceId globalDeviceId3 = globalDeviceId1;
            num = rule.VersionMax;
            string str2 = num.ToString();
            globalDeviceId3.Generation = str2;
            subDevices.Add(globalDeviceId1);
          }
          if (rule.SpecialTranslation == ZR_ClassLibrary.SpecialTranslation.Serialnumber)
            globalDeviceId1.Serialnumber = ParameterService.GetParameter(zdf, rule.MBusZDF);
          if (rule.SpecialTranslation == ZR_ClassLibrary.SpecialTranslation.MeterType)
          {
            string parameter = ParameterService.GetParameter(zdf, rule.MBusZDF);
            if (Enum.IsDefined(typeof (MBusDeviceType), (object) parameter))
            {
              MBusDeviceType mbusMedium = (MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), parameter, true);
              globalDeviceId1.MeterType = ValueIdent.ConvertToMeterType(mbusMedium);
              globalDeviceId1.DeviceTypeName = parameter;
            }
          }
        }
      }
      return subDevices;
    }

    private DateTime? GetCorrectTimePoint(string zdf, TranslationRule rule)
    {
      if (string.IsNullOrEmpty(zdf))
        return new DateTime?();
      string ParameterName = "RTIME";
      if (!string.IsNullOrEmpty(rule.StorageTimeParam))
        ParameterName = rule.StorageTimeParam;
      string parameter = ParameterService.GetParameter(zdf, ParameterName);
      if (string.IsNullOrEmpty(parameter))
        return new DateTime?();
      try
      {
        DateTime dateTime = DateTime.Parse(parameter, (IFormatProvider) FixedFormates.TheFormates.DateTimeFormat, DateTimeStyles.None);
        switch (rule.StorageTimeTranslation)
        {
          case SpecialStorageTimeTranslation.None:
            return new DateTime?(dateTime);
          case SpecialStorageTimeTranslation.SetCurrentYear:
            return new DateTime?(new DateTime(DateTime.Now.Year, dateTime.Month, dateTime.Day, dateTime.Hour, dateTime.Minute, dateTime.Second));
          case SpecialStorageTimeTranslation.MinusOneYear:
            return new DateTime?(dateTime.AddYears(-1));
          case SpecialStorageTimeTranslation.DefaultDueDate:
            return new DateTime?(new DateTime(dateTime.Year, 1, 1));
          case SpecialStorageTimeTranslation.LastMonth:
            return new DateTime?(new DateTime(dateTime.Year, dateTime.Month, 1));
          default:
            throw new NotImplementedException(rule.StorageTimeTranslation.ToString());
        }
      }
      catch (Exception ex)
      {
        TranslationRulesManager.logger.Error(ex.Message);
        return new DateTime?();
      }
    }

    private bool SpecialTranslation(
      TranslationRule rule,
      string value,
      DateTime timePoint,
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      if (rule == null || string.IsNullOrEmpty(value))
        return false;
      switch (rule.SpecialTranslation)
      {
        case ZR_ClassLibrary.SpecialTranslation.DigiInput:
          return true;
        case ZR_ClassLibrary.SpecialTranslation.BitIndex:
          return !(value == "00000000") || true;
        case ZR_ClassLibrary.SpecialTranslation.BitMask:
          try
          {
            if ((Convert.ToUInt32(value, 16) & Convert.ToUInt32(rule.Multiplier)) > 0U)
            {
              valueList.Add(rule.ValueIdent, new SortedList<DateTime, ReadingValue>());
              valueList[rule.ValueIdent].Add(timePoint, new ReadingValue()
              {
                value = 1.0
              });
            }
            return true;
          }
          catch
          {
            return false;
          }
        case ZR_ClassLibrary.SpecialTranslation.NumberNibble1:
        case ZR_ClassLibrary.SpecialTranslation.NumberNibble2:
          int num = 0;
          if (rule.SpecialTranslation == ZR_ClassLibrary.SpecialTranslation.NumberNibble2)
            num = 4;
          try
          {
            if ((double) (byte) (Convert.ToUInt32(value, 16) >> num & 15U) == rule.Multiplier)
            {
              valueList.Add(rule.ValueIdent, new SortedList<DateTime, ReadingValue>());
              valueList[rule.ValueIdent].Add(timePoint, new ReadingValue()
              {
                value = 1.0
              });
            }
            return true;
          }
          catch
          {
            return false;
          }
        default:
          return false;
      }
    }

    public static long GetValueIdent(
      string manufacturer,
      string medium,
      int version,
      string zdfKey)
    {
      TranslationRule rule = new TranslationRulesManager().TryGetRule(manufacturer, medium, version, zdfKey);
      return rule != null ? Convert.ToInt64(rule.ValueIdent) : -1L;
    }

    public TranslationRule TryGetRule(
      string manufacturer,
      string medium,
      int version,
      string zdfKey)
    {
      TranslationRuleCollection translationRuleCollection = this.LoadRules(manufacturer, medium, new int?(version), new int?(version));
      if (translationRuleCollection == null)
        return (TranslationRule) null;
      foreach (TranslationRule rule in (List<TranslationRule>) translationRuleCollection)
      {
        if (rule.Manufacturer == manufacturer && rule.Medium == medium && rule.MBusZDF == zdfKey)
          return rule;
      }
      return (TranslationRule) null;
    }

    public static string TryGetSpecialTranslationValueOfSubDevice(
      string zdf,
      int subDeviceIndex,
      ZR_ClassLibrary.SpecialTranslation specialTranslation)
    {
      string translationKeyOfSubDevice = TranslationRulesManager.TryGetSpecialTranslationKeyOfSubDevice(zdf, subDeviceIndex, specialTranslation);
      return translationKeyOfSubDevice == null ? (string) null : ParameterService.GetParameter(zdf, translationKeyOfSubDevice);
    }

    public static string TryGetSpecialTranslationKeyOfSubDevice(
      string zdf,
      int subDeviceIndex,
      ZR_ClassLibrary.SpecialTranslation specialTranslation)
    {
      TranslationRuleCollection translationRuleCollection = TranslationRulesManager.Instance.LoadSubDeviceRules(zdf, new int?(subDeviceIndex));
      if (translationRuleCollection == null || translationRuleCollection.Count == 0)
        return (string) null;
      TranslationRule translationRule = translationRuleCollection.Find((Predicate<TranslationRule>) (e => e.SpecialTranslation == specialTranslation));
      if (translationRule != null)
        return translationRule.MBusZDF;
      string str = string.Format("Can not find translation rule of {0} by sub device! SubDeviceIndex: {1} ZDF: {2}", (object) specialTranslation, (object) subDeviceIndex, (object) zdf);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, str);
      TranslationRulesManager.logger.Error(str);
      return (string) null;
    }

    public static void ImportRulesIntoDatabase(string fileName)
    {
      if (string.IsNullOrEmpty(fileName) || !File.Exists(fileName))
        return;
      using (StreamReader streamReader = new StreamReader(fileName))
      {
        TranslationRuleCollection translationRuleCollection = (TranslationRuleCollection) new XmlSerializer(typeof (TranslationRuleCollection)).Deserialize((TextReader) streamReader);
        if (translationRuleCollection == null || translationRuleCollection.Count == 0)
          return;
        foreach (TranslationRule loadTranslationRule in MeterDatabase.LoadTranslationRules())
          MeterDatabase.DeleteTranslationRule(loadTranslationRule);
        foreach (TranslationRule newRule in (List<TranslationRule>) translationRuleCollection)
          MeterDatabase.AddTranslationRule(newRule);
      }
    }
  }
}


--- TranslatorData.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TranslatorData
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using System;
using System.Collections;
using System.Data;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using ZR_ClassLibrary.Schema_Access;

#nullable disable
namespace ZR_ClassLibrary
{
  public class TranslatorData
  {
    internal bool generatingExit = false;
    private string ErrorText;
    private WaitWindow MyWaitWindow;
    private EventTime MyEventTime;
    private long LastTicks;
    private DbBasis MyDB;
    private ZRDataAdapter MyDataAdapter;
    private int LastFieldIndex;
    private string[] FieldNames;
    private string[] TableNames;
    private int[] FieldSizes;

    public TranslatorData()
    {
      this.MyDB = DbBasis.PrimaryDB;
      this.ErrorText = "";
    }

    internal string getLastErrorMsg()
    {
      string errorText = this.ErrorText;
      this.ErrorText = "";
      return errorText;
    }

    private void addErrorText(string Error)
    {
      this.ErrorText += Error;
      this.ErrorText += Environment.NewLine;
    }

    public string[] GetAllTranslatedLanguageNames(string LanguageCode)
    {
      string[] translatedLanguageNames = (string[]) null;
      Schema.DBTranslatorDataTable translatorDataTable = new Schema.DBTranslatorDataTable();
      string SqlCommand = "select * from DBTranslator where TableName = '@BasicLanguageText' AND TableKey = '" + LanguageCode + "'";
      try
      {
        using (IDbConnection dbConnection = this.MyDB.GetDbConnection())
        {
          this.MyDataAdapter = this.MyDB.ZRDataAdapter(SqlCommand, dbConnection);
          this.MyDataAdapter.Fill((DataTable) translatorDataTable);
          if (translatorDataTable.Rows.Count != 1)
          {
            this.MyDataAdapter = this.MyDB.ZRDataAdapter("select * from DBTranslator where TableName = '@BasicLanguageText' AND TableKey = 'en'", dbConnection);
            this.MyDataAdapter.Fill((DataTable) translatorDataTable);
          }
          if (translatorDataTable.Rows.Count == 1)
          {
            ArrayList arrayList = new ArrayList();
            for (int index = 0; index < translatorDataTable.Columns.Count; ++index)
            {
              if (translatorDataTable.Columns[index].ColumnName.ToUpper().StartsWith("LANG_") && !translatorDataTable.Rows[0][index].ToString().StartsWith("!"))
                arrayList.Add((object) translatorDataTable.Rows[0][index].ToString());
            }
            translatedLanguageNames = new string[arrayList.Count];
            arrayList.Sort();
            for (int index = 0; index < arrayList.Count; ++index)
              translatedLanguageNames[index] = arrayList[index].ToString();
          }
          else
            goto label_18;
        }
      }
      catch
      {
        goto label_18;
      }
      return translatedLanguageNames;
label_18:
      int num = (int) GMM_MessageBox.ShowMessage("Global Meter Manager", "Language error on database" + Environment.NewLine, true);
      return new string[1]{ "No language available" };
    }

    public string GetLanguageColumnNameFromTranslatedLanguage(
      string LanguageCode,
      string LanguageName)
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      IDbConnection dbConnection = primaryDb.GetDbConnection();
      bool flag = false;
      try
      {
        DataTable dataTable = new DataTable("DBTranslator");
        string SqlCommand = "select * from DBTranslator where TableName = '@BasicLanguageText' AND TableKey = '" + LanguageCode + "'";
        dbConnection.Open();
        flag = true;
        primaryDb.ZRDataAdapter(SqlCommand, dbConnection).Fill(dataTable);
        dbConnection.Close();
        flag = false;
        if (dataTable.Rows.Count != 1)
        {
          int num = (int) MessageBox.Show("Language error on database");
        }
        else
        {
          for (int index = 0; index < dataTable.Columns.Count; ++index)
          {
            string upper = dataTable.Columns[index].ColumnName.ToUpper();
            if (upper.StartsWith("LANG_") && LanguageName == dataTable.Rows[0][index].ToString())
              return upper;
          }
        }
        return string.Empty;
      }
      catch (Exception ex)
      {
        string text = ex.ToString();
        if (flag)
          dbConnection.Close();
        int num = (int) MessageBox.Show(text);
        return string.Empty;
      }
    }

    public string GetDatabaseLanguageCode()
    {
      string languageColumnName = this.GetDatabaseLanguageColumnName();
      return languageColumnName.Length != 7 ? "" : languageColumnName.Remove(0, 5).ToLower();
    }

    public string GetDatabaseLanguageColumnName()
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      IDbConnection dbConnection = primaryDb.GetDbConnection();
      bool flag = false;
      try
      {
        DataTable dataTable = new DataTable("DBTranslator");
        string SqlCommand = "select * from DBTranslator where TableName = '@BasicLanguageText' AND TableKey = 'actual'";
        dbConnection.Open();
        flag = true;
        primaryDb.ZRDataAdapter(SqlCommand, dbConnection).Fill(dataTable);
        dbConnection.Close();
        flag = false;
        if (dataTable.Rows.Count == 1)
          return dataTable.Rows[0]["FieldName"].ToString().ToUpper();
        int num = (int) MessageBox.Show("Language error on database");
        return string.Empty;
      }
      catch (Exception ex)
      {
        string text = ex.ToString();
        if (flag)
          dbConnection.Close();
        int num = (int) MessageBox.Show(text);
        return string.Empty;
      }
    }

    public string GetTranslatedLanguageText(string LanguageCode, string ColumnName)
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      IDbConnection dbConnection = primaryDb.GetDbConnection();
      bool flag = false;
      try
      {
        DataTable dataTable = new DataTable("DBTranslator");
        string SqlCommand = "select * from DBTranslator where TableName = '@BasicLanguageText' AND TableKey = '" + LanguageCode + "'";
        dbConnection.Open();
        flag = true;
        primaryDb.ZRDataAdapter(SqlCommand, dbConnection).Fill(dataTable);
        dbConnection.Close();
        flag = false;
        if (dataTable.Rows.Count == 1)
          return dataTable.Rows[0][ColumnName].ToString();
        int num = (int) MessageBox.Show("Language error on database");
        return string.Empty;
      }
      catch (Exception ex)
      {
        string text = ex.ToString();
        if (flag)
          dbConnection.Close();
        int num = (int) MessageBox.Show(text);
        return string.Empty;
      }
    }

    public string GetDatabaseLanguageName()
    {
      string languageColumnName = this.GetDatabaseLanguageColumnName();
      string str = languageColumnName.Remove(0, 5);
      DbBasis primaryDb = DbBasis.PrimaryDB;
      IDbConnection dbConnection = primaryDb.GetDbConnection();
      bool flag = false;
      try
      {
        DataTable dataTable = new DataTable("DBTranslator");
        string SqlCommand = "select * from DBTranslator where TableName = '@BasicLanguageText' AND TableKey = '" + str + "'";
        dbConnection.Open();
        flag = true;
        primaryDb.ZRDataAdapter(SqlCommand, dbConnection).Fill(dataTable);
        dbConnection.Close();
        flag = false;
        if (dataTable.Rows.Count == 1)
          return dataTable.Rows[0][languageColumnName].ToString().ToUpper();
        int num = (int) MessageBox.Show("Language error on database");
        return string.Empty;
      }
      catch (Exception ex)
      {
        string text = ex.ToString();
        if (flag)
          dbConnection.Close();
        int num = (int) MessageBox.Show(text);
        return string.Empty;
      }
    }

    public bool translateDBToLanguage(
      string LanguageCode,
      string toLanguageFieldName,
      bool IncludeTextIds,
      bool showWaitWindow)
    {
      DbBasis primaryDb = DbBasis.PrimaryDB;
      IDbConnection dbConnection = primaryDb.GetDbConnection();
      primaryDb.DbCommand(dbConnection);
      bool flag = false;
      try
      {
        string str = "** Translating database language **" + Environment.NewLine + Environment.NewLine + "to '" + this.GetTranslatedLanguageText(LanguageCode, toLanguageFieldName) + "'" + Environment.NewLine + Environment.NewLine + "This may take several minutes. " + Environment.NewLine + "Do not interrupt!";
        if (showWaitWindow)
        {
          this.MyWaitWindow = new WaitWindow();
          this.MyWaitWindow.labelWaitText.Text = str;
          this.MyWaitWindow.StartPosition = FormStartPosition.CenterParent;
          this.MyWaitWindow.Show();
        }
        Application.DoEvents();
        this.MyEventTime = new EventTime();
        this.LastTicks = this.MyEventTime.GetTimeTicks();
        DataTable dataTable1 = new DataTable("TransTab");
        string SqlCommand1 = "select TextID," + toLanguageFieldName + ",LANG_en,LANG_de,FieldName,TableKey,TableName from DBTranslator WHERE LANG_de NOT LIKE '##=%' AND TableName NOT LIKE '@%'";
        dbConnection.Open();
        flag = true;
        primaryDb.ZRDataAdapter(SqlCommand1, dbConnection).Fill(dataTable1);
        string Fehlerstring;
        if (!this.transferlanguageText(dataTable1, toLanguageFieldName, IncludeTextIds, out Fehlerstring))
        {
          if (flag)
            dbConnection.Close();
          int num = (int) MessageBox.Show(Fehlerstring, "Translate", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return false;
        }
        DataTable dataTable2 = new DataTable("TransTabDouble");
        string SqlCommand2 = "select TextID," + toLanguageFieldName + ",LANG_en,LANG_de,FieldName,TableKey,TableName from DBTranslator WHERE LANG_de LIKE '##=%' AND TableName NOT LIKE '@%'";
        primaryDb.ZRDataAdapter(SqlCommand2, dbConnection).Fill(dataTable2);
        if (!this.transferlanguageTextDouble(dataTable1, dataTable2, toLanguageFieldName, IncludeTextIds, out Fehlerstring))
        {
          if (flag)
            dbConnection.Close();
          int num = (int) MessageBox.Show(Fehlerstring, "Translate", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return false;
        }
        Schema.DBTranslatorDataTable MyDataTable = new Schema.DBTranslatorDataTable();
        string SqlCommand3 = "Select * from  DBTranslator where TableKey = 'actual' AND TableName = '@BasicLanguageText'";
        ZRDataAdapter zrDataAdapter = primaryDb.ZRDataAdapter(SqlCommand3, dbConnection);
        zrDataAdapter.Fill((DataTable) MyDataTable);
        MyDataTable[0].FieldName = toLanguageFieldName;
        zrDataAdapter.Update((DataTable) MyDataTable);
        dbConnection.Close();
        flag = false;
        if (showWaitWindow)
        {
          this.MyWaitWindow.Close();
          this.MyWaitWindow = (WaitWindow) null;
        }
        return true;
      }
      catch (Exception ex)
      {
        string text = ex.ToString();
        if (flag)
          dbConnection.Close();
        int num = (int) MessageBox.Show(text, "Translate", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
    }

    private bool transferlanguageText(
      DataTable SourceTab,
      string toLanguageName,
      bool IncludeTextIds,
      out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      int num = 0;
      DbBasis primaryDb = DbBasis.PrimaryDB;
      IDbConnection dbConnection = primaryDb.GetDbConnection();
      IDbCommand DbCommand = primaryDb.DbCommand(dbConnection);
      bool flag = false;
      try
      {
        dbConnection.Open();
        flag = true;
        foreach (DataRow row in (InternalDataCollectionBase) SourceTab.Rows)
        {
          string str = this.GetFieldText(row, toLanguageName, IncludeTextIds);
          if (str.IndexOf("'") > 0)
            str = str.Replace("'", "''");
          StringBuilder stringBuilder = new StringBuilder(10000);
          stringBuilder.Append("select * from  ");
          stringBuilder.Append(row["TableName"].ToString());
          stringBuilder.Append(" WHERE ");
          stringBuilder.Append(row["TableKey"].ToString());
          DataTable dataTable = new DataTable();
          primaryDb.ZRDataAdapter(stringBuilder.ToString(), dbConnection).Fill(dataTable);
          if (dataTable.Rows.Count != 0)
          {
            dataTable.Rows[0][row["FieldName"].ToString()] = (object) str;
            DbCommand.CommandText = "select * from  " + row["TableName"].ToString();
            primaryDb.ZRDataAdapter(DbCommand).Update(dataTable);
            ++num;
          }
        }
        dbConnection.Close();
        flag = false;
        return true;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
        if (flag)
          dbConnection.Close();
        return false;
      }
    }

    private string GetFieldText(DataRow TheRow, string LanguageName, bool IncludeTextIds)
    {
      string fieldText = TheRow[LanguageName].ToString();
      if (fieldText == "")
      {
        fieldText = TheRow["LANG_en"].ToString();
        if (fieldText == "")
        {
          TheRow["TableName"].ToString();
          TheRow["FieldName"].ToString();
          fieldText = TheRow["LANG_de"].ToString();
          if (fieldText == "")
            fieldText = "Text undefined";
        }
      }
      if (IncludeTextIds)
      {
        int maxFieldSize = this.GetMaxFieldSize(TheRow["TableName"].ToString(), TheRow["FieldName"].ToString());
        if (maxFieldSize > 0)
        {
          fieldText = "#" + TheRow["TextID"].ToString() + " " + fieldText;
          if (fieldText.Length > maxFieldSize)
            fieldText = fieldText.Substring(0, maxFieldSize);
        }
      }
      return fieldText;
    }

    private bool transferlanguageTextDouble(
      DataTable SourceTab,
      DataTable SourceDoubleTab,
      string toLanguageName,
      bool IncludeTextIds,
      out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      int num = 0;
      DbBasis primaryDb = DbBasis.PrimaryDB;
      IDbConnection dbConnection = primaryDb.GetDbConnection();
      IDbCommand DbCommand = primaryDb.DbCommand(dbConnection);
      bool flag = false;
      try
      {
        foreach (DataRow row in (InternalDataCollectionBase) SourceDoubleTab.Rows)
        {
          string str1 = row["LANG_de"].ToString().Remove(0, 3);
          DataRow[] dataRowArray = SourceTab.Select("TextID = " + str1);
          if (dataRowArray.Length == 1)
          {
            string str2 = this.GetFieldText(dataRowArray[0], toLanguageName, IncludeTextIds);
            if (str2.IndexOf("'") > 0)
              str2 = str2.Replace("'", "''");
            StringBuilder stringBuilder = new StringBuilder(10000);
            stringBuilder.Append("Select * from ");
            stringBuilder.Append(row["TableName"].ToString());
            stringBuilder.Append(" WHERE ");
            stringBuilder.Append(row["TableKey"].ToString());
            DataTable dataTable = new DataTable();
            primaryDb.ZRDataAdapter(stringBuilder.ToString(), dbConnection).Fill(dataTable);
            dataTable.Rows[0][row["FieldName"].ToString()] = (object) str2;
            DbCommand.CommandText = "select * from  " + row["TableName"].ToString();
            primaryDb.ZRDataAdapter(DbCommand).Update(dataTable);
            ++num;
          }
        }
        dbConnection.Close();
        flag = false;
        return true;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
        if (flag)
          dbConnection.Close();
        return false;
      }
    }

    internal int GetMaxFieldSize(string TableName, string FieldName)
    {
      try
      {
        if (this.FieldNames == null)
        {
          DataTable dataTable = new DataTable("DBTranslatorStruct");
          using (IDbConnection dbConnection = this.MyDB.GetDbConnection())
          {
            this.MyDataAdapter = this.MyDB.ZRDataAdapter("Select * from DBTranslatorStruct", dbConnection);
            this.MyDataAdapter.Fill(dataTable);
          }
          this.FieldNames = new string[dataTable.Rows.Count];
          this.TableNames = new string[dataTable.Rows.Count];
          this.FieldSizes = new int[dataTable.Rows.Count];
          for (int index = 0; index < dataTable.Rows.Count; ++index)
          {
            this.FieldNames[index] = dataTable.Rows[index][nameof (FieldName)].ToString();
            this.TableNames[index] = dataTable.Rows[index][nameof (TableName)].ToString();
            this.FieldSizes[index] = int.Parse(dataTable.Rows[index]["FieldSize"].ToString());
            if (this.FieldNames[index] == FieldName && this.TableNames[index] == TableName)
              this.LastFieldIndex = index;
          }
          return this.FieldSizes[this.LastFieldIndex];
        }
        if (this.FieldNames[this.LastFieldIndex] == FieldName && this.TableNames[this.LastFieldIndex] == TableName)
          return this.FieldSizes[this.LastFieldIndex];
        for (int index = 0; index < this.FieldSizes.Length; ++index)
        {
          if (this.FieldNames[index] == FieldName && this.TableNames[index] == TableName)
          {
            this.LastFieldIndex = index;
            return this.FieldSizes[this.LastFieldIndex];
          }
        }
        return 0;
      }
      catch
      {
        return 0;
      }
    }

    public ArrayList GetTranslatorTextBlock(string BlockName)
    {
      try
      {
        string str = "LANG_" + Thread.CurrentThread.CurrentUICulture.ToString();
        int length;
        if ((length = str.IndexOf('-')) >= 0)
          str = str.Substring(0, length);
        string SqlCommand = "SELECT  FieldName," + str + " FROM DBTranslator WHERE TableName = '" + BlockName + "' ORDER BY TableKey";
        DataTable dataTable = new DataTable();
        using (IDbConnection dbConnection = this.MyDB.GetDbConnection())
        {
          this.MyDataAdapter = this.MyDB.ZRDataAdapter(SqlCommand, dbConnection);
          this.MyDataAdapter.Fill(dataTable);
        }
        ArrayList translatorTextBlock = new ArrayList();
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
          translatorTextBlock.Add((object) new TranslatorData.TranslatorTextItem()
          {
            TextInfo = row[0].ToString(),
            Text = row[1].ToString()
          });
        return translatorTextBlock;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Error at GetTranslatorTextBlock" + Environment.NewLine + ex.ToString(), "Read database error!");
        return (ArrayList) null;
      }
    }

    public struct TranslatorTextItem
    {
      public string TextInfo;
      public string Text;
    }
  }
}


--- TranslatorRecources.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TranslatorRecources
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Collections;
using System.Data;
using System.IO;
using System.Resources;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class TranslatorRecources
  {
    private ResXResourceWriter MyResourceWriter;
    internal string StandardResPath;
    internal string CompareResPath;
    internal string TranslateResPath;
    internal string RecourcePathRoot = "";
    internal string[] FullFileList;
    internal string[] RecourceNameList;
    internal string[] LanguageNameList;
    internal DataTable TextList;
    private ArrayList MyResource;

    internal bool SearchRecourcePath(string LastPath)
    {
      try
      {
        FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
        folderBrowserDialog.Description = "Select the recource base folder";
        folderBrowserDialog.SelectedPath = this.RecourcePathRoot;
        if (folderBrowserDialog.ShowDialog() != DialogResult.OK)
          return false;
        this.RecourcePathRoot = Path.GetFullPath(folderBrowserDialog.SelectedPath);
      }
      catch
      {
        int num = (int) GMM_MessageBox.ShowMessage("Translator", "Path error");
        return false;
      }
      ArrayList TheFiles = new ArrayList();
      this.GetFileList(this.RecourcePathRoot, TheFiles);
      TheFiles.Sort();
      ArrayList arrayList1 = new ArrayList();
      bool flag = false;
      string str1 = "";
      for (int index = 0; index < TheFiles.Count; ++index)
      {
        string[] strArray = Path.GetFileName(TheFiles[index].ToString()).Split('.');
        if (strArray[0] == str1)
        {
          if (flag)
          {
            arrayList1.Add(TheFiles[index - 1]);
            flag = false;
          }
          arrayList1.Add(TheFiles[index]);
        }
        else
        {
          flag = true;
          str1 = strArray[0];
        }
      }
      this.FullFileList = new string[arrayList1.Count];
      for (int index = 0; index < this.FullFileList.Length; ++index)
        this.FullFileList[index] = arrayList1[index].ToString();
      string str2 = "";
      arrayList1.Clear();
      ArrayList arrayList2 = new ArrayList();
      for (int index = 0; index < this.FullFileList.Length; ++index)
      {
        string fullFile = this.FullFileList[index];
        string[] strArray = Path.GetFileName(fullFile).Split('.');
        string str3;
        switch (strArray.Length)
        {
          case 2:
            str3 = strArray[1];
            break;
          case 3:
            str3 = strArray[1] + "." + strArray[2];
            break;
          default:
            continue;
        }
        string str4 = Path.Combine(this.GetRelevantPath(fullFile), strArray[0]);
        if (str2 != str4)
        {
          str2 = str4;
          foreach (string str5 in arrayList1)
          {
            if (str5.ToString() == str2)
            {
              int num = (int) MessageBox.Show("Doppelete Resourcen: " + fullFile);
              break;
            }
          }
          arrayList1.Add((object) str2);
          arrayList2.Add((object) str3);
        }
        else
          arrayList2[arrayList2.Count - 1] = (object) (arrayList2[arrayList2.Count - 1]?.ToString() + ";" + str3);
      }
      this.RecourceNameList = new string[arrayList1.Count];
      this.LanguageNameList = new string[this.RecourceNameList.Length];
      for (int index = 0; index < this.RecourceNameList.Length; ++index)
      {
        this.RecourceNameList[index] = arrayList1[index].ToString();
        this.LanguageNameList[index] = arrayList2[index].ToString();
      }
      return true;
    }

    private string GetRelevantPath(string PathAndFilename)
    {
      return Path.GetDirectoryName(PathAndFilename.Remove(0, this.RecourcePathRoot.Length + 1));
    }

    private string GetRelevantPathAndFileName(string PathAndFilename)
    {
      return PathAndFilename.Remove(0, this.RecourcePathRoot.Length + 1);
    }

    internal int GetResourceIndex(string FileName)
    {
      for (int resourceIndex = 0; resourceIndex < this.RecourceNameList.Length; ++resourceIndex)
      {
        if (this.RecourceNameList[resourceIndex] == FileName)
          return resourceIndex;
      }
      return -1;
    }

    private bool GetFileList(string RecourcePath, ArrayList TheFiles)
    {
      foreach (object file in Directory.GetFiles(RecourcePath, "*.resx"))
        TheFiles.Add(file);
      foreach (string directory in Directory.GetDirectories(RecourcePath))
        this.GetFileList(directory, TheFiles);
      return true;
    }

    internal bool LoadRecources(string Name, string SourceLanguage, string TranslateLanguage)
    {
      string str1 = Name + ".resx";
      for (int index1 = 0; index1 < this.FullFileList.Length; ++index1)
      {
        if (this.GetRelevantPathAndFileName(this.FullFileList[index1]) == str1)
        {
          this.StandardResPath = this.FullFileList[index1];
          ResXResourceReader resXresourceReader1 = new ResXResourceReader(this.StandardResPath);
          string str2 = Name + "." + SourceLanguage;
          this.CompareResPath = "";
          ResXResourceReader resXresourceReader2;
          if (str2 != str1)
          {
            for (int index2 = 0; index2 < this.FullFileList.Length; ++index2)
            {
              if (this.GetRelevantPathAndFileName(this.FullFileList[index2]) == str2)
              {
                this.CompareResPath = this.FullFileList[index2];
                resXresourceReader2 = new ResXResourceReader(this.CompareResPath);
                goto label_13;
              }
            }
            return false;
          }
          resXresourceReader2 = (ResXResourceReader) null;
label_13:
          string str3 = Name + "." + TranslateLanguage;
          for (int index3 = 0; index3 < this.FullFileList.Length; ++index3)
          {
            if (this.GetRelevantPathAndFileName(this.FullFileList[index3]) == str3)
            {
              this.TranslateResPath = this.FullFileList[index3];
              ResXResourceReader resXresourceReader3 = new ResXResourceReader(this.TranslateResPath);
              this.MyResource = new ArrayList();
              foreach (DictionaryEntry dictionaryEntry in resXresourceReader1)
              {
                string str4 = dictionaryEntry.Key.ToString();
                if (dictionaryEntry.Value != null)
                {
                  string str5 = dictionaryEntry.Value.ToString();
                  if (str5.Length != 0)
                  {
                    TranslatorRecources.RecourceItem recourceItem = new TranslatorRecources.RecourceItem();
                    recourceItem.Key = str4;
                    recourceItem.StandardValue = str5;
                    if (str4.EndsWith(".Text") || str4.EndsWith(".Caption") || str4.IndexOf('.') < 0)
                      recourceItem.TextItem = true;
                    this.MyResource.Add((object) recourceItem);
                  }
                }
              }
              resXresourceReader1.Close();
              if (resXresourceReader2 != null)
              {
                foreach (DictionaryEntry dictionaryEntry in resXresourceReader2)
                {
                  string str6 = dictionaryEntry.Key.ToString();
                  foreach (TranslatorRecources.RecourceItem recourceItem in this.MyResource)
                  {
                    if (recourceItem.Key == str6)
                    {
                      recourceItem.SourceValue = dictionaryEntry.Value.ToString();
                      break;
                    }
                  }
                }
                resXresourceReader2.Close();
              }
              foreach (DictionaryEntry dictionaryEntry in resXresourceReader3)
              {
                string str7 = dictionaryEntry.Key.ToString();
                foreach (TranslatorRecources.RecourceItem recourceItem in this.MyResource)
                {
                  if (recourceItem.Key == str7)
                  {
                    recourceItem.TranslateValue = dictionaryEntry.Value.ToString();
                    break;
                  }
                }
              }
              resXresourceReader3.Close();
              this.TextList = new DataTable("RecourceData");
              this.TextList.Columns.Add(new DataColumn()
              {
                ColumnName = "Key"
              });
              this.TextList.Columns.Add(new DataColumn()
              {
                ColumnName = "Compare Language"
              });
              this.TextList.Columns.Add(new DataColumn()
              {
                ColumnName = "Translate Language"
              });
              foreach (TranslatorRecources.RecourceItem recourceItem in this.MyResource)
              {
                if (recourceItem.TextItem)
                {
                  DataRow row = this.TextList.NewRow();
                  row[0] = (object) recourceItem.Key;
                  row[1] = !(recourceItem.SourceValue == "") ? (object) recourceItem.SourceValue : (object) recourceItem.StandardValue;
                  row[2] = (object) recourceItem.TranslateValue;
                  this.TextList.Rows.Add(row);
                }
              }
              return true;
            }
          }
          return false;
        }
      }
      return false;
    }

    internal bool SaveText(string IdentString, string TextToSave)
    {
      this.MyResourceWriter = new ResXResourceWriter(this.TranslateResPath);
      foreach (TranslatorRecources.RecourceItem recourceItem in this.MyResource)
      {
        if (recourceItem.Key == IdentString)
          recourceItem.TranslateValue = TextToSave;
        if (recourceItem.TranslateValue.Length > 0)
          this.MyResourceWriter.AddResource(recourceItem.Key, recourceItem.TranslateValue);
      }
      this.MyResourceWriter.Generate();
      this.MyResourceWriter.Close();
      foreach (DataRow row in (InternalDataCollectionBase) this.TextList.Rows)
      {
        if (row[0].ToString() == IdentString)
        {
          row[2] = (object) TextToSave;
          break;
        }
      }
      return true;
    }

    internal bool ExportResources()
    {
      WaitWindow waitWindow;
      try
      {
        FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
        folderBrowserDialog.Description = "Select the base folder of the copy";
        folderBrowserDialog.SelectedPath = this.RecourcePathRoot;
        if (folderBrowserDialog.ShowDialog() != DialogResult.OK)
          return false;
        string fullPath = Path.GetFullPath(folderBrowserDialog.SelectedPath);
        waitWindow = new WaitWindow();
        waitWindow.labelWaitText.Text = "Copy Files";
        waitWindow.progressBarWait2.Visible = false;
        waitWindow.progressBarWait1.Minimum = 0;
        waitWindow.progressBarWait1.Maximum = this.FullFileList.Length;
        waitWindow.Show();
        waitWindow.BringToFront();
        for (int index = 0; index < this.FullFileList.Length; ++index)
        {
          waitWindow.progressBarWait1.Value = index;
          waitWindow.Refresh();
          string fullFile = this.FullFileList[index];
          string str = Path.Combine(fullPath, this.GetRelevantPathAndFileName(fullFile));
          Directory.CreateDirectory(Path.GetDirectoryName(str));
          File.Copy(fullFile, str, true);
          string fileName = Path.GetFileName(fullFile);
          if (Path.GetExtension(fileName.Substring(0, fileName.Length - 5)).Length == 0)
          {
            string destFileName = str.Insert(str.Length - 5, ".std");
            File.Copy(fullFile, destFileName, true);
          }
        }
      }
      catch
      {
        int num = (int) GMM_MessageBox.ShowMessage("Translator", "Copy path error");
        return false;
      }
      waitWindow?.Close();
      return true;
    }

    private class RecourceItem
    {
      internal bool TextItem;
      internal string Key;
      internal string StandardValue;
      internal string SourceValue;
      internal string TranslateValue;

      public RecourceItem()
      {
        this.TextItem = false;
        this.SourceValue = "";
        this.TranslateValue = "";
      }
    }
  }
}


--- TypeLabelsCarton.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TypeLabelsCarton
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum TypeLabelsCarton
  {
    AQUAMETRO,
    ZELSIUS,
    MINOCAL,
    MINOCAL_RUS,
    NEUTRAL,
    ZELSIUS_HSI,
  }
}


--- TypeLabelsCartonWR3.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TypeLabelsCartonWR3
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum TypeLabelsCartonWR3
  {
    ZR_WR3_MID,
    COMET_GASMONITOR,
    ZR_WR3_IZM,
    NEUTRAL,
    MM_WR3,
    WS_WR3,
    NoLabel,
    MM_WR3_MIC,
    ZR_WR3_IZM_MIC,
  }
}


--- TypeLabelsDevice.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TypeLabelsDevice
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum TypeLabelsDevice
  {
    AQUAMETRO,
    ZELSIUS,
    ZELSIUS_MID,
    MINOCAL,
  }
}


--- TypeLabelsDeviceWR3.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.TypeLabelsDeviceWR3
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum TypeLabelsDeviceWR3
  {
    ZR_WR3_MID,
    COMET_GASMONITOR,
    ZR_WR3_IZM,
    ZR_WR3_CO,
  }
}


--- UniqueIdentification.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.UniqueIdentification
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.Text;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class UniqueIdentification
  {
    public int ShortKey => Util.GetStableHash(this.Key);

    public string Key
    {
      get
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append(this.Manufacturer);
        stringBuilder.Append(this.Version);
        stringBuilder.Append(this.Medium);
        foreach (string parameter in this.ParameterList)
          stringBuilder.Append(parameter);
        return stringBuilder.ToString();
      }
    }

    public string Manufacturer { get; set; }

    public string Version { get; set; }

    public string Medium { get; set; }

    public List<string> ParameterList { get; set; }

    public string ParameterListStringWithSeparator
    {
      get
      {
        StringBuilder stringBuilder = new StringBuilder();
        int num = 0;
        foreach (string parameter in this.ParameterList)
        {
          ++num;
          if (stringBuilder.Length > 0)
            stringBuilder.Append("\r\n");
          stringBuilder.Append(string.Format("[{0:00}]  ", (object) num));
          stringBuilder.Append(parameter);
        }
        return stringBuilder.ToString();
      }
    }

    public string ParameterListString
    {
      get
      {
        StringBuilder stringBuilder = new StringBuilder();
        int num = 0;
        foreach (string parameter in this.ParameterList)
        {
          ++num;
          if (stringBuilder.Length > 0)
            stringBuilder.Append(" ");
          stringBuilder.Append(parameter);
        }
        return stringBuilder.ToString();
      }
    }

    public TranslationRuleCollection TranslationRules
    {
      get
      {
        return TranslationRulesManager.Instance.LoadRules(this.Manufacturer, this.Medium, new int?(Convert.ToInt32(this.Version)), new int?(Convert.ToInt32(this.Version)));
      }
    }

    public UniqueIdentification() => this.ParameterList = new List<string>();

    public override string ToString() => this.Key;
  }
}


--- UniqueIdentificationCollection.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.UniqueIdentificationCollection
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Collections.Generic;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class UniqueIdentificationCollection : Dictionary<string, UniqueIdentification>
  {
    public event UniqueIdentificationCollection.EventHandler UniqueIdentificationAdded;

    public void Add(UniqueIdentification newType)
    {
      if (newType == null || string.IsNullOrEmpty(newType.Key) || this.ContainsKey(newType.Key) || string.IsNullOrEmpty(newType.ParameterListStringWithSeparator))
        return;
      this.Add(newType.Key, newType);
      if (this.UniqueIdentificationAdded == null)
        return;
      this.UniqueIdentificationAdded(newType);
    }

    public delegate void EventHandler(UniqueIdentification sender);
  }
}


--- UpgradeAction.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.UpgradeAction
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum UpgradeAction
  {
    VerifyDatabase,
    CreateCopyOfSetupDB,
    UpgradeFilter,
    UpgradeFilterValue,
    UpgradeGMM_User,
    UpgradeMeterType,
    UpgradeMeterInfo,
    UpgradeMTypeZelsius,
    UpgradeMeter,
    UpgradeNodeList,
    UpgradeNodeList_1_to_2,
    UpgradeSubdevices_1_to_2,
    UpgradeNodeLayers,
    UpgradeNodeReferences,
    UpgradeNodeReferences_1_to_2,
    UpgradeMeterValues,
    UpgradeMeterValues_1_to_2,
    BackupOldDatabase,
    UseSetupDatabase,
    UseWorkDatabase,
    MergeData,
    DeleteTempDatabase,
    UpgradeUserPermissions,
    UpgradeSoftwareUsers,
  }
}


--- UpgradeActionEventArgs.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.UpgradeActionEventArgs
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class UpgradeActionEventArgs : EventArgs
  {
    public UpgradeAction Action;
    public string State;
  }
}


--- UserRights.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.UserRights
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Resources;
using System.Text;
using System.Windows.Forms;
using ZR_ClassLibrary.Schema_Access;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class UserRights
  {
    internal UserRights.RightsListEntry[] BaseRightsList = new UserRights.RightsListEntry[24]
    {
      new UserRights.RightsListEntry(UserRights.DemoRights, UserRights.Packages.Demo, "StartWindow"),
      new UserRights.RightsListEntry(UserRights.DeveloperRights, UserRights.Packages.Developer, "GMM"),
      new UserRights.RightsListEntry(UserRights.ZR_FactoryRights, UserRights.Packages.ZennerFactory, "GMM"),
      new UserRights.RightsListEntry(UserRights.AutoDataReaderRights, UserRights.Packages.None, "MeterInstaller"),
      new UserRights.RightsListEntry(UserRights.DesignerRights, UserRights.Packages.Designer, "StartWindow"),
      new UserRights.RightsListEntry(UserRights.MeterConfigRights, UserRights.Packages.None, "Designer"),
      new UserRights.RightsListEntry(UserRights.ExternalTestbenchRights, UserRights.Packages.ExternalTestbench, "S3_Handler"),
      new UserRights.RightsListEntry(UserRights.AllRights, UserRights.Packages.AllRights, "GMM"),
      new UserRights.RightsListEntry(UserRights.AutoReaderRights, UserRights.Packages.None, "DeviceCollector"),
      new UserRights.RightsListEntry(UserRights.ManualDataRights, UserRights.Packages.ManualData, "MeterTypist"),
      new UserRights.RightsListEntry(UserRights.DataRights, UserRights.Packages.None, "MeterInstaller"),
      new UserRights.RightsListEntry(UserRights.CompleteRights, UserRights.Packages.Complete, "GMM"),
      new UserRights.RightsListEntry(UserRights.ExternalWaterTestbenchRights, UserRights.Packages.ExternalWaterTestbench, "GMM"),
      new UserRights.RightsListEntry(UserRights.ServiceManagerRights, UserRights.Packages.ServiceManager, "StartWindow"),
      new UserRights.RightsListEntry(UserRights.ConfigurationManagerRights, UserRights.Packages.ConfigurationManager, "StartWindow"),
      new UserRights.RightsListEntry(UserRights.RadioManagerRights, UserRights.Packages.RadioManager, "StartWindow"),
      new UserRights.RightsListEntry(UserRights.SystemManagerRights, UserRights.Packages.SystemManager, "StartWindow"),
      new UserRights.RightsListEntry(UserRights.GlobalMeterManagerRights, UserRights.Packages.GlobalMeterManager, "StartWindow"),
      new UserRights.RightsListEntry(UserRights.SystemManagerLightRights, UserRights.Packages.SystemManagerLight, "StartWindow"),
      new UserRights.RightsListEntry(UserRights.MinolDeviceBasicRights, UserRights.Packages.MinolDeviceBasic, "GMM"),
      new UserRights.RightsListEntry(UserRights.MinolDeviceFullRights, UserRights.Packages.MinolDeviceFull, "GMM"),
      new UserRights.RightsListEntry(UserRights.MinolDeviceProRights, UserRights.Packages.MinolDevicePro, "GMM"),
      new UserRights.RightsListEntry(UserRights.ConfigurationManagerProRights, UserRights.Packages.ConfigurationManagerPro, "StartWindow"),
      new UserRights.RightsListEntry(UserRights.MinolRights, UserRights.Packages.Minol, "GMM")
    };
    internal UserRights.OptionRightsListEntry[] OptionRightsList = new UserRights.OptionRightsListEntry[11]
    {
      new UserRights.OptionRightsListEntry(UserRights.NoRights, UserRights.PackagesOptions.NoOptions),
      new UserRights.OptionRightsListEntry(UserRights.OptionsGraphicRights, UserRights.PackagesOptions.Graphic),
      new UserRights.OptionRightsListEntry(UserRights.OptionsExportRights, UserRights.PackagesOptions.Export),
      new UserRights.OptionRightsListEntry(UserRights.OptionsGraphicExportRights, UserRights.PackagesOptions.GraphicAndExport),
      new UserRights.OptionRightsListEntry(UserRights.OptionsAlarmRights, UserRights.PackagesOptions.Alarm),
      new UserRights.OptionRightsListEntry(UserRights.OptionsGraphicAlarmRights, UserRights.PackagesOptions.GraphicAndAlarm),
      new UserRights.OptionRightsListEntry(UserRights.OptionsExportAlarmRights, UserRights.PackagesOptions.ExportAndAlarm),
      new UserRights.OptionRightsListEntry(UserRights.OptionsGraphicExportAlarmRights, UserRights.PackagesOptions.ExportAndGraphicAndAlarm),
      new UserRights.OptionRightsListEntry(UserRights.OptionChangeMenuRights, UserRights.PackagesOptions.Designer),
      new UserRights.OptionRightsListEntry(UserRights.OptionSerialBusRights, UserRights.PackagesOptions.DeviceCollector),
      new UserRights.OptionRightsListEntry(UserRights.OptionProfessional, UserRights.PackagesOptions.Professional)
    };
    private static UserRights.Rights[] NoRights = new UserRights.Rights[0];
    private static UserRights.Rights[] OnlyManualRights = new UserRights.Rights[4]
    {
      UserRights.Rights.Developer,
      UserRights.Rights.LanguageTranslator,
      UserRights.Rights.DatabaseManager,
      UserRights.Rights.TranslationRules
    };
    private static UserRights.Rights[] DemoRights = new UserRights.Rights[10]
    {
      UserRights.Rights.Autologin,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.Designer,
      UserRights.Rights.MeterInstaller,
      UserRights.Rights.MeterReader,
      UserRights.Rights.MeterData,
      UserRights.Rights.MBus,
      UserRights.Rights.TranslationRules,
      UserRights.Rights.Configurator
    };
    private static UserRights.Rights[] DeveloperRights = new UserRights.Rights[55]
    {
      UserRights.Rights.Developer,
      UserRights.Rights.Administrator,
      UserRights.Rights.LanguageTranslator,
      UserRights.Rights.Database,
      UserRights.Rights.DatabaseManager,
      UserRights.Rights.Autologin,
      UserRights.Rights.ChiefOfEnergyTestCenter,
      UserRights.Rights.ChiefOfWaterTestCenter,
      UserRights.Rights.EquipmentCalibration,
      UserRights.Rights.EquipmentCreation,
      UserRights.Rights.MeterInstaller,
      UserRights.Rights.MeterReader,
      UserRights.Rights.MeterData,
      UserRights.Rights.MeterDataSynchronizer,
      UserRights.Rights.MeterDataGraphics,
      UserRights.Rights.MeterDataAlarm,
      UserRights.Rights.MeterDataExport,
      UserRights.Rights.PDASynchronizer,
      UserRights.Rights.ZelsiusOperator,
      UserRights.Rights.Designer,
      UserRights.Rights.DesignerChangeMenu,
      UserRights.Rights.ProfessionalConfig,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MeterFactory,
      UserRights.Rights.EHCA_Factory,
      UserRights.Rights.EndTest,
      UserRights.Rights.FactoryPrinter,
      UserRights.Rights.WaterTestbench,
      UserRights.Rights.EnergieTestbench,
      UserRights.Rights.HardwareTest,
      UserRights.Rights.HardwareTestZelsius,
      UserRights.Rights.ZelsiusModuleTest,
      UserRights.Rights.CapsuleTest,
      UserRights.Rights.CompleteTestbench,
      UserRights.Rights.MConfigSet1,
      UserRights.Rights.MConfigSet2,
      UserRights.Rights.MConfigSet3,
      UserRights.Rights.MConfigSet4,
      UserRights.Rights.WalkBy,
      UserRights.Rights.Radio3,
      UserRights.Rights.MBus,
      UserRights.Rights.MinomatV2,
      UserRights.Rights.MinomatV4,
      UserRights.Rights.Waveflow,
      UserRights.Rights.ISF,
      UserRights.Rights.MinolExpertHandler,
      UserRights.Rights.Configurator,
      UserRights.Rights.WirelessMBus,
      UserRights.Rights.TranslationRules,
      UserRights.Rights.EDC_Handler,
      UserRights.Rights.S3_Handler,
      UserRights.Rights.EDC_Testbench,
      UserRights.Rights.SmokeDetectorHandler,
      UserRights.Rights.PDC_Handler
    };
    private static UserRights.Rights[] AllRights = new UserRights.Rights[53]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.LanguageTranslator,
      UserRights.Rights.Database,
      UserRights.Rights.DatabaseManager,
      UserRights.Rights.Autologin,
      UserRights.Rights.ChiefOfEnergyTestCenter,
      UserRights.Rights.ChiefOfWaterTestCenter,
      UserRights.Rights.EquipmentCalibration,
      UserRights.Rights.EquipmentCreation,
      UserRights.Rights.MeterInstaller,
      UserRights.Rights.MeterReader,
      UserRights.Rights.MeterData,
      UserRights.Rights.MeterDataSynchronizer,
      UserRights.Rights.MeterDataGraphics,
      UserRights.Rights.MeterDataAlarm,
      UserRights.Rights.MeterDataExport,
      UserRights.Rights.ZelsiusOperator,
      UserRights.Rights.Designer,
      UserRights.Rights.DesignerChangeMenu,
      UserRights.Rights.ProfessionalConfig,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MeterFactory,
      UserRights.Rights.EHCA_Factory,
      UserRights.Rights.EndTest,
      UserRights.Rights.FactoryPrinter,
      UserRights.Rights.WaterTestbench,
      UserRights.Rights.EnergieTestbench,
      UserRights.Rights.HardwareTest,
      UserRights.Rights.HardwareTestZelsius,
      UserRights.Rights.ZelsiusModuleTest,
      UserRights.Rights.CapsuleTest,
      UserRights.Rights.CompleteTestbench,
      UserRights.Rights.MConfigSet1,
      UserRights.Rights.MConfigSet2,
      UserRights.Rights.MConfigSet3,
      UserRights.Rights.MConfigSet4,
      UserRights.Rights.WalkBy,
      UserRights.Rights.Radio3,
      UserRights.Rights.MBus,
      UserRights.Rights.MinomatV2,
      UserRights.Rights.MinomatV4,
      UserRights.Rights.Waveflow,
      UserRights.Rights.ISF,
      UserRights.Rights.MinolExpertHandler,
      UserRights.Rights.Configurator,
      UserRights.Rights.WirelessMBus,
      UserRights.Rights.TranslationRules,
      UserRights.Rights.AutoUpdate,
      UserRights.Rights.EDC_Handler,
      UserRights.Rights.EDC_Testbench,
      UserRights.Rights.SmokeDetectorHandler,
      UserRights.Rights.PDC_Handler
    };
    private static UserRights.Rights[] CompleteRights = new UserRights.Rights[18]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Database,
      UserRights.Rights.Autologin,
      UserRights.Rights.MeterInstaller,
      UserRights.Rights.MeterReader,
      UserRights.Rights.MeterData,
      UserRights.Rights.MeterDataSynchronizer,
      UserRights.Rights.MeterDataGraphics,
      UserRights.Rights.MeterDataAlarm,
      UserRights.Rights.MeterDataExport,
      UserRights.Rights.ZelsiusOperator,
      UserRights.Rights.DesignerChangeMenu,
      UserRights.Rights.Designer,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MBus,
      UserRights.Rights.ISF,
      UserRights.Rights.TranslationRules
    };
    private static UserRights.Rights[] ZR_FactoryRights = new UserRights.Rights[37]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Database,
      UserRights.Rights.ChiefOfEnergyTestCenter,
      UserRights.Rights.ChiefOfWaterTestCenter,
      UserRights.Rights.EquipmentCalibration,
      UserRights.Rights.EquipmentCreation,
      UserRights.Rights.ZelsiusOperator,
      UserRights.Rights.Designer,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MeterFactory,
      UserRights.Rights.EHCA_Factory,
      UserRights.Rights.EndTest,
      UserRights.Rights.FactoryPrinter,
      UserRights.Rights.WaterTestbench,
      UserRights.Rights.EnergieTestbench,
      UserRights.Rights.HardwareTest,
      UserRights.Rights.HardwareTestZelsius,
      UserRights.Rights.ZelsiusModuleTest,
      UserRights.Rights.CapsuleTest,
      UserRights.Rights.CompleteTestbench,
      UserRights.Rights.Radio3,
      UserRights.Rights.MBus,
      UserRights.Rights.ISF,
      UserRights.Rights.TranslationRules,
      UserRights.Rights.MinolExpertHandler,
      UserRights.Rights.EDC_Handler,
      UserRights.Rights.MConfigSet1,
      UserRights.Rights.MConfigSet2,
      UserRights.Rights.MConfigSet3,
      UserRights.Rights.MConfigSet4,
      UserRights.Rights.EDC_Testbench,
      UserRights.Rights.MeterProtocol,
      UserRights.Rights.Waveflow,
      UserRights.Rights.WirelessMBus,
      UserRights.Rights.SmokeDetectorHandler,
      UserRights.Rights.PDC_Handler
    };
    private static UserRights.Rights[] AutoDataReaderRights = new UserRights.Rights[13]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Database,
      UserRights.Rights.DatabaseManager,
      UserRights.Rights.Autologin,
      UserRights.Rights.MeterInstaller,
      UserRights.Rights.MeterReader,
      UserRights.Rights.MeterData,
      UserRights.Rights.MeterDataSynchronizer,
      UserRights.Rights.MeterDataExport,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MBus,
      UserRights.Rights.TranslationRules
    };
    private static UserRights.Rights[] DataRights = new UserRights.Rights[12]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Database,
      UserRights.Rights.Autologin,
      UserRights.Rights.MeterInstaller,
      UserRights.Rights.MeterReader,
      UserRights.Rights.MeterData,
      UserRights.Rights.MeterDataSynchronizer,
      UserRights.Rights.MeterDataExport,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MBus,
      UserRights.Rights.TranslationRules
    };
    private static UserRights.Rights[] AutoReaderRights = new UserRights.Rights[6]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Autologin,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MBus,
      UserRights.Rights.TranslationRules
    };
    private static UserRights.Rights[] ManualDataRights = new UserRights.Rights[6]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Database,
      UserRights.Rights.DatabaseManager,
      UserRights.Rights.Autologin,
      UserRights.Rights.MBus,
      UserRights.Rights.TranslationRules
    };
    private static UserRights.Rights[] MeterConfigRights = new UserRights.Rights[8]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Autologin,
      UserRights.Rights.ZelsiusOperator,
      UserRights.Rights.Designer,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MBus,
      UserRights.Rights.TranslationRules
    };
    private static UserRights.Rights[] DesignerRights = new UserRights.Rights[10]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Autologin,
      UserRights.Rights.ZelsiusOperator,
      UserRights.Rights.Designer,
      UserRights.Rights.DesignerChangeMenu,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MBus,
      UserRights.Rights.TranslationRules,
      UserRights.Rights.Configurator
    };
    private static UserRights.Rights[] ServiceManagerRights = new UserRights.Rights[6]
    {
      UserRights.Rights.Autologin,
      UserRights.Rights.Designer,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MBus,
      UserRights.Rights.Configurator
    };
    private static UserRights.Rights[] ConfigurationManagerRights = new UserRights.Rights[5]
    {
      UserRights.Rights.Autologin,
      UserRights.Rights.Designer,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.Configurator,
      UserRights.Rights.MBus
    };
    private static UserRights.Rights[] ConfigurationManagerProRights = new UserRights.Rights[6]
    {
      UserRights.Rights.Autologin,
      UserRights.Rights.Designer,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.Configurator,
      UserRights.Rights.ProfessionalConfig,
      UserRights.Rights.MBus
    };
    private static UserRights.Rights[] ExternalTestbenchRights = new UserRights.Rights[18]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Database,
      UserRights.Rights.DatabaseManager,
      UserRights.Rights.ChiefOfEnergyTestCenter,
      UserRights.Rights.ChiefOfWaterTestCenter,
      UserRights.Rights.EquipmentCalibration,
      UserRights.Rights.EquipmentCreation,
      UserRights.Rights.Designer,
      UserRights.Rights.DesignerChangeMenu,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.EnergieTestbench,
      UserRights.Rights.MBus,
      UserRights.Rights.TranslationRules,
      UserRights.Rights.S3_Handler,
      UserRights.Rights.Autologin,
      UserRights.Rights.Configurator,
      UserRights.Rights.ProfessionalConfig
    };
    private static UserRights.Rights[] ExternalWaterTestbenchRights = new UserRights.Rights[12]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Database,
      UserRights.Rights.DatabaseManager,
      UserRights.Rights.ChiefOfWaterTestCenter,
      UserRights.Rights.EquipmentCalibration,
      UserRights.Rights.EquipmentCreation,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.WaterTestbench,
      UserRights.Rights.MBus,
      UserRights.Rights.TranslationRules,
      UserRights.Rights.Configurator
    };
    private static UserRights.Rights[] RadioManagerRights = new UserRights.Rights[12]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Database,
      UserRights.Rights.Autologin,
      UserRights.Rights.MeterInstaller,
      UserRights.Rights.MeterData,
      UserRights.Rights.MeterDataSynchronizer,
      UserRights.Rights.MeterDataExport,
      UserRights.Rights.MeterDataGraphics,
      UserRights.Rights.PDASynchronizer,
      UserRights.Rights.Waveflow,
      UserRights.Rights.TranslationRules,
      UserRights.Rights.Configurator
    };
    private static UserRights.Rights[] SystemManagerRights = new UserRights.Rights[15]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Database,
      UserRights.Rights.Autologin,
      UserRights.Rights.MeterInstaller,
      UserRights.Rights.MeterReader,
      UserRights.Rights.MeterData,
      UserRights.Rights.MeterDataSynchronizer,
      UserRights.Rights.MeterDataExport,
      UserRights.Rights.MeterDataGraphics,
      UserRights.Rights.Designer,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MBus,
      UserRights.Rights.TranslationRules,
      UserRights.Rights.Configurator
    };
    private static UserRights.Rights[] SystemManagerLightRights = new UserRights.Rights[15]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Database,
      UserRights.Rights.Autologin,
      UserRights.Rights.MeterInstaller,
      UserRights.Rights.MeterReader,
      UserRights.Rights.MeterData,
      UserRights.Rights.MeterDataSynchronizer,
      UserRights.Rights.MeterDataExport,
      UserRights.Rights.MeterDataGraphics,
      UserRights.Rights.Designer,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MBus,
      UserRights.Rights.TranslationRules,
      UserRights.Rights.Configurator
    };
    private static UserRights.Rights[] GlobalMeterManagerRights = new UserRights.Rights[19]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Database,
      UserRights.Rights.Autologin,
      UserRights.Rights.MeterInstaller,
      UserRights.Rights.MeterReader,
      UserRights.Rights.MeterData,
      UserRights.Rights.MeterDataSynchronizer,
      UserRights.Rights.MeterDataGraphics,
      UserRights.Rights.MeterDataAlarm,
      UserRights.Rights.MeterDataExport,
      UserRights.Rights.Designer,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.PDASynchronizer,
      UserRights.Rights.MBus,
      UserRights.Rights.Waveflow,
      UserRights.Rights.TranslationRules,
      UserRights.Rights.Configurator,
      UserRights.Rights.WirelessMBus
    };
    private static UserRights.Rights[] MinolDeviceBasicRights = new UserRights.Rights[6]
    {
      UserRights.Rights.Database,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.Radio3,
      UserRights.Rights.MConfigSet1,
      UserRights.Rights.MinomatV2
    };
    private static UserRights.Rights[] MinolDeviceProRights = new UserRights.Rights[8]
    {
      UserRights.Rights.Database,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.WalkBy,
      UserRights.Rights.Radio3,
      UserRights.Rights.MConfigSet1,
      UserRights.Rights.MConfigSet2,
      UserRights.Rights.MinomatV2
    };
    private static UserRights.Rights[] MinolDeviceFullRights = new UserRights.Rights[11]
    {
      UserRights.Rights.Database,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MConfigSet1,
      UserRights.Rights.WalkBy,
      UserRights.Rights.Radio3,
      UserRights.Rights.MConfigSet1,
      UserRights.Rights.MConfigSet2,
      UserRights.Rights.MConfigSet3,
      UserRights.Rights.MinomatV2,
      UserRights.Rights.MinomatV4
    };
    private static UserRights.Rights[] MinolRights = new UserRights.Rights[33]
    {
      UserRights.Rights.Administrator,
      UserRights.Rights.Database,
      UserRights.Rights.Designer,
      UserRights.Rights.ProfessionalConfig,
      UserRights.Rights.DeviceCollector,
      UserRights.Rights.AsyncCom,
      UserRights.Rights.MeterData,
      UserRights.Rights.MeterDataSynchronizer,
      UserRights.Rights.MeterInstaller,
      UserRights.Rights.MeterReader,
      UserRights.Rights.DesignerChangeMenu,
      UserRights.Rights.MeterDataGraphics,
      UserRights.Rights.MeterDataExport,
      UserRights.Rights.MeterDataAlarm,
      UserRights.Rights.PDASynchronizer,
      UserRights.Rights.MBus,
      UserRights.Rights.WirelessMBus,
      UserRights.Rights.Autologin,
      UserRights.Rights.MinolExpertHandler,
      UserRights.Rights.Radio3,
      UserRights.Rights.WalkBy,
      UserRights.Rights.MConfigSet1,
      UserRights.Rights.MConfigSet2,
      UserRights.Rights.MConfigSet3,
      UserRights.Rights.MinomatV2,
      UserRights.Rights.MinomatV4,
      UserRights.Rights.Configurator,
      UserRights.Rights.ISF,
      UserRights.Rights.TranslationRules,
      UserRights.Rights.AutoUpdate,
      UserRights.Rights.EDC_Handler,
      UserRights.Rights.SmokeDetectorHandler,
      UserRights.Rights.PDC_Handler
    };
    private static UserRights.Rights[] OptionsGraphicRights = new UserRights.Rights[1]
    {
      UserRights.Rights.MeterDataGraphics
    };
    private static UserRights.Rights[] OptionsExportRights = new UserRights.Rights[1]
    {
      UserRights.Rights.MeterDataExport
    };
    private static UserRights.Rights[] OptionsGraphicExportRights = new UserRights.Rights[2]
    {
      UserRights.Rights.MeterDataGraphics,
      UserRights.Rights.MeterDataExport
    };
    private static UserRights.Rights[] OptionsAlarmRights = new UserRights.Rights[1]
    {
      UserRights.Rights.MeterDataAlarm
    };
    private static UserRights.Rights[] OptionsGraphicAlarmRights = new UserRights.Rights[2]
    {
      UserRights.Rights.MeterDataAlarm,
      UserRights.Rights.MeterDataGraphics
    };
    private static UserRights.Rights[] OptionsExportAlarmRights = new UserRights.Rights[2]
    {
      UserRights.Rights.MeterDataAlarm,
      UserRights.Rights.MeterDataExport
    };
    private static UserRights.Rights[] OptionsGraphicExportAlarmRights = new UserRights.Rights[3]
    {
      UserRights.Rights.MeterDataAlarm,
      UserRights.Rights.MeterDataGraphics,
      UserRights.Rights.MeterDataExport
    };
    private static UserRights.Rights[] OptionChangeMenuRights = new UserRights.Rights[1]
    {
      UserRights.Rights.DesignerChangeMenu
    };
    private static UserRights.Rights[] OptionProfessional = new UserRights.Rights[1]
    {
      UserRights.Rights.ProfessionalConfig
    };
    private static UserRights.Rights[] OptionSerialBusRights = new UserRights.Rights[1]
    {
      UserRights.Rights.DeviceCollector
    };
    internal ResourceManager MyRes;
    public static byte LICENSE_CODE_VERSION_PC = 1;
    public static byte LICENSE_CODE_VERSION_HANDHEALD = 3;
    public static UserRights GlobalUserRights = (UserRights) null;
    internal ZRDataAdapter User_Adapter;
    internal int UserID_RangeMin = -1;
    internal int UserID_RangeMax = -1;
    private bool dbliz = false;
    private bool ohneliz = true;
    private bool lizok = false;
    public string aktCode = "LZC.";
    public int PackageNumber = -1;
    public string CustomerNameCode = string.Empty;
    internal int OptionNumber = -1;
    public string PackageName = string.Empty;
    public string OptionPackageName = string.Empty;
    public UserRights.Packages Package = UserRights.Packages.None;
    public DateTime DemoEndDate = DateTime.MinValue;
    public UserRights.LastErrorCode LastError = UserRights.LastErrorCode.NoError;
    public string PrivatKey = "12345678";
    public string LoginName = string.Empty;
    public int LoginPersonalNumber = 0;
    internal bool[] ActiveRights;
    internal bool[] BasicRights;
    public bool PluginGMMFlag = false;
    internal string TempName = string.Empty;
    internal string TempRightsString = string.Empty;
    internal string TempPersonalNumber = string.Empty;
    internal string TempKey = string.Empty;
    internal bool[] TempRights;
    internal Schema.GMM_UserDataTable Typed_GMM_UserTable;
    private GMMConfig MyConfig;

    public bool IsDistributionLizense
    {
      get
      {
        int num;
        if (this.PackageName.IndexOf(UserRights.Packages.ConfigurationManager.ToString()) <= -1)
        {
          string packageName1 = this.PackageName;
          UserRights.Packages packages = UserRights.Packages.ServiceManager;
          string str1 = packages.ToString();
          if (packageName1.IndexOf(str1) <= -1)
          {
            string packageName2 = this.PackageName;
            packages = UserRights.Packages.RadioManager;
            string str2 = packages.ToString();
            if (packageName2.IndexOf(str2) <= -1)
            {
              string packageName3 = this.PackageName;
              packages = UserRights.Packages.SystemManager;
              string str3 = packages.ToString();
              if (packageName3.IndexOf(str3) <= -1)
              {
                string packageName4 = this.PackageName;
                packages = UserRights.Packages.SystemManagerLight;
                string str4 = packages.ToString();
                num = packageName4.IndexOf(str4) > -1 ? 1 : 0;
                goto label_6;
              }
            }
          }
        }
        num = 1;
label_6:
        return num != 0;
      }
    }

    public event UserRights.PGMMCheckPermission OnPGMMCheckPermission;

    public UserRights()
    {
      this.MyConfig = (GMMConfig) ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.KonfigGroup];
      int length = Util.GetNamesOfEnum(typeof (UserRights.Rights)).Length;
      this.ActiveRights = new bool[length];
      this.BasicRights = new bool[length];
      this.MyRes = new ResourceManager("ZR_ClassLibrary.UserRightsMessages", typeof (UserRights).Assembly);
    }

    public bool IsOneOfThisPackages(UserRights.Packages[] RequestList)
    {
      for (int index = 0; index < RequestList.Length; ++index)
      {
        if (this.Package == RequestList[index])
          return true;
      }
      return false;
    }

    public int NumberOfUsersIntoDb
    {
      get
      {
        this.GarantUserTableLoaded();
        return this.Typed_GMM_UserTable.Count;
      }
    }

    public void LoadFromDatabase()
    {
      this.LoadAllUser();
      ZRDataAdapter zrDataAdapter1 = DbBasis.PrimaryDB.ZRDataAdapter("SELECT * FROM DatabaseIdentification WHERE InfoName = 'DatabaseLocationName'", DbBasis.PrimaryDB.GetDbConnection());
      Schema.DatabaseIdentificationDataTable identificationDataTable = new Schema.DatabaseIdentificationDataTable();
      zrDataAdapter1.Fill((DataTable) identificationDataTable);
      if (identificationDataTable.Rows.Count != 1)
        return;
      ZRDataAdapter zrDataAdapter2 = DbBasis.PrimaryDB.ZRDataAdapter("SELECT * FROM ZRGlobalID  WHERE ZRFieldName = 'UserPersonalNumber' AND DatabaseLocationName = '" + identificationDataTable[0].InfoData + "'", DbBasis.PrimaryDB.GetDbConnection());
      Schema.ZRGlobalIDDataTable globalIdDataTable = new Schema.ZRGlobalIDDataTable();
      zrDataAdapter2.Fill((DataTable) globalIdDataTable);
      if (globalIdDataTable.Rows.Count == 1)
      {
        this.UserID_RangeMin = globalIdDataTable[0].ZRFirstNr;
        this.UserID_RangeMax = globalIdDataTable[0].ZRLastNr;
      }
    }

    public bool NewValueList(int[] wert, string CodeString)
    {
      if (CodeString.Length < 5 || wert.Length < 10)
        return false;
      StringBuilder stringBuilder1 = new StringBuilder(100);
      for (int index = 0; index < wert.Length; ++index)
        stringBuilder1.Append((char) (wert[index] - 19123 - (index + 685) * 5 + (wert.Length - index) * 369));
      string str1 = stringBuilder1.ToString();
      StringBuilder stringBuilder2 = new StringBuilder(100);
      int index1 = 0;
      for (int index2 = 0; index2 < CodeString.Length; ++index2)
      {
        int InChar = (int) str1[index1] % 32 ^ ParameterService.GetIntFromCharacterCode(CodeString[index2]);
        stringBuilder2.Append(ParameterService.GetCharacterCode(InChar));
        ++index1;
        if (index1 >= str1.Length)
          index1 = 0;
      }
      string str2 = stringBuilder2.ToString();
      int num1 = 0;
      string str3;
      try
      {
        for (int index3 = 0; index3 < 6; ++index3)
          num1 += ParameterService.GetIntFromCharacterCode(str2[index3]) << index3 * 5;
        int length = ParameterService.GetIntFromCharacterCode(str2[6]) + (ParameterService.GetIntFromCharacterCode(str2[7]) << 5);
        str3 = str2.Substring(8, length);
      }
      catch
      {
        return false;
      }
      int num2 = 0;
      for (int index4 = 0; index4 < str3.Length; ++index4)
      {
        int fromCharacterCode = ParameterService.GetIntFromCharacterCode(str3[index4]);
        num2 += fromCharacterCode * fromCharacterCode + 74565;
      }
      if (num2 != num1)
        return false;
      bool[] flagArray = new bool[Util.GetNamesOfEnum(typeof (UserRights.Rights)).Length];
      int index5 = 0;
      for (int index6 = 0; index6 < str3.Length; ++index6)
      {
        for (int index7 = 1; index7 < 32 && index5 < flagArray.Length; index7 <<= 1)
        {
          if ((ParameterService.GetIntFromCharacterCode(str3[index6]) & index7) > 0)
            flagArray[index5] = true;
          ++index5;
        }
      }
      this.ActiveRights = flagArray;
      this.ohneliz = false;
      this.dbliz = true;
      this.lizok = true;
      return true;
    }

    public string GetPackageStartComponentName()
    {
      return this.PackageNumber < 0 || this.PackageNumber > this.BaseRightsList.Length - 1 ? string.Empty : this.BaseRightsList[this.PackageNumber].PackageStartComponentName;
    }

    public void SetPackageRights()
    {
      if (this.PackageNumber < 0)
        return;
      if (this.PackageNumber >= this.BaseRightsList.Length || this.BaseRightsList[this.PackageNumber].Package == UserRights.Packages.None)
      {
        int num1 = (int) MessageBox.Show(this.MyRes.GetString("Wrong package number"));
      }
      else
      {
        UserRights.Rights[] availableRights1 = this.BaseRightsList[this.PackageNumber].AvailableRights;
        string str;
        for (int index = 0; index < availableRights1.Length; ++index)
        {
          str = availableRights1[index].ToString();
          this.BasicRights[(int) availableRights1[index]] = true;
        }
        if (this.BaseRightsList[this.PackageNumber].Package == UserRights.Packages.Demo)
        {
          int num2 = DateTime.Now.Year / 10 * 10;
          int num3 = (this.OptionNumber & 960) >> 6;
          if (num3 == 0 && DateTime.Now.Year % 10 == 9)
            num2 += 10;
          this.DemoEndDate = new DateTime(num2 + num3, 1, 1).AddDays((double) ((this.OptionNumber & 63) * 7));
          this.OptionPackageName = this.DemoEndDate.ToShortDateString();
          if (this.DemoEndDate < DateTime.Now)
          {
            int num4 = (int) GMM_MessageBox.ShowMessage("Global Meter Manager", this.MyRes.GetString("DemoVersionExhausted"), true);
            Application.Exit();
            return;
          }
        }
        else
        {
          if (this.OptionNumber >= this.OptionRightsList.Length)
          {
            int num5 = (int) MessageBox.Show("Wrong Option number");
            return;
          }
          UserRights.Rights[] availableRights2 = this.OptionRightsList[this.OptionNumber].AvailableRights;
          for (int index = 0; index < availableRights2.Length; ++index)
          {
            if (!this.BasicRights[(int) availableRights2[index]])
            {
              str = availableRights2[index].ToString();
              this.BasicRights[(int) availableRights2[index]] = true;
            }
          }
        }
        this.ActiveRights = this.BasicRights;
      }
    }

    public void ClearRights()
    {
      this.ActiveRights.Initialize();
      this.TempRights.Initialize();
    }

    internal bool LoadAllUser()
    {
      this.User_Adapter = (ZRDataAdapter) null;
      this.GarantUserTableLoaded();
      return true;
    }

    internal void GarantUserTableLoaded()
    {
      if (this.User_Adapter != null || DbBasis.PrimaryDB == null)
        return;
      this.User_Adapter = DbBasis.PrimaryDB.ZRDataAdapter("SELECT * FROM GMM_User", DbBasis.PrimaryDB.GetDbConnection());
      this.Typed_GMM_UserTable = new Schema.GMM_UserDataTable();
      this.User_Adapter.Fill((DataTable) this.Typed_GMM_UserTable);
    }

    public bool CheckRight(int PersonelNumber, UserRights.Rights TheRight)
    {
      this.GarantUserTableLoaded();
      Schema.GMM_UserRow[] gmmUserRowArray = (Schema.GMM_UserRow[]) this.Typed_GMM_UserTable.Select("UserPersonalNumber = " + PersonelNumber.ToString());
      return gmmUserRowArray.Length == 1 && (" " + gmmUserRowArray[0].UserRights + " ").IndexOf(" " + ((int) TheRight).ToString() + " ") >= 0;
    }

    public bool CheckRight() => !(this.DemoEndDate == DateTime.MinValue);

    public bool CheckRight(UserRights.Rights TheRight)
    {
      bool flag = !this.ohneliz && this.dbliz && this.lizok && TheRight < (UserRights.Rights) this.ActiveRights.Length && this.ActiveRights[(int) TheRight];
      if (this.PluginGMMFlag)
        flag = this.OnPGMMCheckPermission != null && this.OnPGMMCheckPermission(TheRight.ToString());
      return flag;
    }

    public bool CheckPGMM_Right(string theRight)
    {
      return this.OnPGMMCheckPermission != null && this.OnPGMMCheckPermission(theRight);
    }

    public bool CheckLiz(ref bool[] liz)
    {
      if (!liz[1])
      {
        try
        {
          this.aktCode = this.decodeZennerCode(this.aktCode);
          if (this.localCustomScrable(UserRights.LocalInfoScrable(0) + UserRights.LocalInfoScrable(1) + UserRights.LocalInfoScrable(2)) == this.aktCode)
          {
            liz[3] = false;
            this.ohneliz = false;
            this.dbliz = liz[0];
            liz[2] = true;
          }
          else
            liz[3] = true;
        }
        catch
        {
          liz[3] = false;
        }
      }
      return this.lizok;
    }

    public string scrable(string inText)
    {
      string str = "";
      for (int index = 0; index < inText.Length; ++index)
      {
        char ch = (char) ((uint) inText[index] + 12U);
        str += ch.ToString();
      }
      return str;
    }

    public string decodeZennerCode(string intext)
    {
      if (intext.Length == 0 || intext.Length != 24 && intext.Length != 29)
        return "";
      intext = intext.Replace("-", "");
      if (intext.Length != 20 && intext.Length != 24)
        return "";
      int num = 22;
      if ((int) intext[0] != (int) ParameterService.GetCharacterCode((int) UserRights.LICENSE_CODE_VERSION_PC) && (int) intext[0] != (int) ParameterService.GetCharacterCode((int) UserRights.LICENSE_CODE_VERSION_HANDHEALD))
      {
        num = 18;
        if ((int) intext[0] != (int) ParameterService.GetCharacterCode(0))
          return "";
      }
      if (UserRights.GetStringCS(intext.Substring(0, num)) != intext.Substring(num))
        return "";
      if (num == 22)
        this.CustomerNameCode = intext.Substring(18, 4);
      this.PackageNumber = 0;
      this.PackageNumber += ParameterService.GetIntFromCharacterCode(intext[1]);
      this.PackageNumber += ParameterService.GetIntFromCharacterCode(intext[2]) << 5;
      this.OptionNumber = 0;
      this.OptionNumber += ParameterService.GetIntFromCharacterCode(intext[3]);
      this.OptionNumber += ParameterService.GetIntFromCharacterCode(intext[4]) << 5;
      if (this.PackageNumber < 0 || this.PackageNumber >= this.BaseRightsList.Length || this.OptionNumber < 0 || this.PackageNumber != 0 && this.OptionNumber >= this.OptionRightsList.Length)
      {
        this.PackageNumber = -1;
        this.OptionNumber = -1;
        return "";
      }
      this.Package = this.BaseRightsList[this.PackageNumber].Package;
      this.PackageName = this.Package.ToString();
      if (this.PackageNumber > 0)
        this.OptionPackageName = this.OptionRightsList[this.OptionNumber].PackageOption.ToString();
      return intext.Substring(5, 13);
    }

    public string localCustomScrable(string intext)
    {
      uint[] numArray1 = new uint[intext.Length];
      uint[] numArray2 = new uint[13];
      this.lizok = true;
      for (int index = 0; index < intext.Length; ++index)
        numArray1[index] = (uint) intext[index];
      int index1 = 7;
      int index2 = 0;
      for (int index3 = 0; index3 < 133; ++index3)
      {
        if (index2 >= numArray1.Length)
          index2 = 0;
        if (index1 >= numArray2.Length)
          index1 -= numArray2.Length;
        numArray2[index1] += numArray1[index2];
        numArray2[index1] += (uint) this.PackageNumber;
        numArray2[index1] += (uint) this.OptionNumber;
        numArray2[index1] += (uint) index2;
        ++index2;
        index1 += 3;
      }
      StringBuilder stringBuilder = new StringBuilder(30);
      for (int index4 = 0; index4 < numArray2.Length; ++index4)
      {
        uint num = numArray2[index4];
        uint InChar = 0;
        for (; num > 0U; num >>= 5)
          InChar ^= num & 31U;
        stringBuilder.Append(ParameterService.GetCharacterCode((int) InChar));
      }
      return stringBuilder.ToString();
    }

    public static string LocalInfoScrable(int index)
    {
      string s = "";
      char[] destination = new char[9];
      int num1 = 9;
      SystemValues.AppPathInfo.CopyTo(index * num1, destination, 0, 9);
      for (int index1 = 0; index1 < 9; ++index1)
        s += destination[index1].ToString();
      int num2 = int.Parse(s);
      string str = "";
      int num3 = index >= 2 ? 5 : 6;
      for (int index2 = 0; index2 < num3; ++index2)
      {
        str += ParameterService.GetCharacterCode((int) (ushort) (num2 ^ num2 >> 3)).ToString();
        num2 >>= 5;
      }
      return str;
    }

    public static string GetStringCS(string InputString)
    {
      int InChar = 0;
      for (int index = 0; index < InputString.Length; ++index)
        InChar = InChar + index + (InputString.Length - index) + (int) InputString[index];
      char characterCode = ParameterService.GetCharacterCode(InChar);
      string str1 = "" + characterCode.ToString();
      characterCode = ParameterService.GetCharacterCode(InChar >> 6);
      string str2 = characterCode.ToString();
      return str1 + str2;
    }

    public static string GetSeparatedString(string InputString)
    {
      StringBuilder stringBuilder = new StringBuilder(30);
      for (int index = 0; index < InputString.Length; ++index)
      {
        if (index % 4 == 0 && index > 0)
          stringBuilder.Append('-');
        stringBuilder.Append(InputString[index]);
      }
      return stringBuilder.ToString();
    }

    private static int GetPackageCode(string InString)
    {
      char[] charArray = InString.ToCharArray();
      int num1 = ParameterService.GetIntFromCharacterCode(charArray[5]) + (ParameterService.GetIntFromCharacterCode(charArray[7]) << 5) + (ParameterService.GetIntFromCharacterCode(charArray[14]) << 10);
      charArray[5] = '0';
      charArray[7] = '4';
      charArray[14] = 'W';
      int num2 = 0;
      for (int index = 0; index < 18; ++index)
        num2 = (num2 << 1) + (int) charArray[index];
      int num3 = num2 & (int) short.MaxValue ^ num1 ^ 23130;
      return num3 >> 4 | num3 << 11 & 30720;
    }

    private static string CharArrayToString(char[] TheArray)
    {
      string empty = string.Empty;
      for (int index = 0; index < TheArray.Length; ++index)
        empty += TheArray[index].ToString();
      return empty;
    }

    public bool VerifyUser(string UserName, string Password)
    {
      this.User_Adapter = (ZRDataAdapter) null;
      this.GarantUserTableLoaded();
      Schema.GMM_UserRow[] gmmUserRowArray = (Schema.GMM_UserRow[]) this.Typed_GMM_UserTable.Select("UserName = '" + UserName + "'");
      this.LastError = UserRights.LastErrorCode.NoError;
      if (gmmUserRowArray.Length < 1)
        return false;
      string userKey = gmmUserRowArray[0].UserKey;
      string PersonalNr = gmmUserRowArray[0].UserPersonalNumber.ToString();
      string userRights = gmmUserRowArray[0].UserRights;
      return !(this.GenerateKey(UserName, PersonalNr, userRights, Password) != userKey);
    }

    public bool SetNewUser(string UserName, string Password)
    {
      this.User_Adapter = (ZRDataAdapter) null;
      this.GarantUserTableLoaded();
      Schema.GMM_UserRow[] gmmUserRowArray1 = (Schema.GMM_UserRow[]) this.Typed_GMM_UserTable.Select("UserName = '" + UserName + "'");
      this.LastError = UserRights.LastErrorCode.NoError;
      if (gmmUserRowArray1.Length < 1)
      {
        int num = (int) MessageBox.Show(this.MyRes.GetString("User not available"));
        return false;
      }
      string userKey = gmmUserRowArray1[0].UserKey;
      string str = gmmUserRowArray1[0].UserPersonalNumber.ToString();
      string RightsString = gmmUserRowArray1[0].UserRights;
      if (this.GenerateKey(UserName, str, RightsString, Password) != userKey)
      {
        int num = (int) MessageBox.Show(this.MyRes.GetString("Password error"));
        return false;
      }
      Schema.GMM_UserRow[] gmmUserRowArray2 = (Schema.GMM_UserRow[]) this.Typed_GMM_UserTable.Select("UserName = '" + UserName + "'");
      if (gmmUserRowArray2.Length == 1 && !gmmUserRowArray2[0].IsChangedUserRightsNull() && gmmUserRowArray2[0].ChangedUserRights.Length > 0)
      {
        string changedUserRights = gmmUserRowArray2[0].ChangedUserRights;
        if (this.GenerateKey(UserName, str, changedUserRights, "ChangePass") == gmmUserRowArray2[0].ChangedUserKey)
        {
          this.TempName = UserName;
          this.TempPersonalNumber = str;
          this.TempRightsString = changedUserRights;
          RightsString = this.TempRightsString;
          this.TempKey = this.GenerateKey(this.TempName, this.TempPersonalNumber, this.TempRightsString, Password);
          gmmUserRowArray2[0].UserRights = gmmUserRowArray2[0].ChangedUserRights;
          gmmUserRowArray2[0].UserKey = this.TempKey;
        }
        gmmUserRowArray2[0].ChangedUserRights = string.Empty;
        gmmUserRowArray2[0].ChangedUserKey = string.Empty;
        this.User_Adapter.Update((DataTable) this.Typed_GMM_UserTable);
      }
      this.LoginName = UserName;
      this.LoginPersonalNumber = int.Parse(str);
      this.ActiveRights = this.GetRightsFromString(RightsString);
      this.GarantLicenseRights(ref this.ActiveRights);
      ZR_Component.CommonGmmInterface.CreateUserEnabledComponents();
      return true;
    }

    private bool SetAutoLoginUser(string UserName)
    {
      this.GarantUserTableLoaded();
      this.LastError = UserRights.LastErrorCode.NoError;
      Schema.GMM_UserRow[] gmmUserRowArray = (Schema.GMM_UserRow[]) this.Typed_GMM_UserTable.Select("UserName = '" + UserName + "'");
      if (gmmUserRowArray.Length != 1)
      {
        int num = (int) MessageBox.Show(this.MyRes.GetString("User not available"));
        return false;
      }
      string userRights = gmmUserRowArray[0].UserRights;
      this.LoginPersonalNumber = gmmUserRowArray[0].UserPersonalNumber;
      this.LoginName = UserName;
      this.ActiveRights = this.GetRightsFromString(userRights);
      this.GarantLicenseRights(ref this.ActiveRights);
      ZR_Component.CommonGmmInterface.CreateUserEnabledComponents();
      return true;
    }

    public bool autoLogin(string theUserName)
    {
      bool flag;
      if (flag = this.checkAutoLoginOfUser(theUserName))
        flag = this.SetAutoLoginUser(theUserName);
      return flag;
    }

    private bool checkAutoLoginOfUser(string TheUsername)
    {
      this.GarantUserTableLoaded();
      Schema.GMM_UserRow[] gmmUserRowArray = (Schema.GMM_UserRow[]) this.Typed_GMM_UserTable.Select("UserName = '" + TheUsername + "'");
      return gmmUserRowArray.Length == 1 && gmmUserRowArray[0].UserRights.IndexOf(15.ToString()) >= 0;
    }

    internal string GenerateKey(
      string Name,
      string PersonalNr,
      string RightsString,
      string Password)
    {
      StringBuilder stringBuilder = new StringBuilder(150);
      if (RightsString.Length > 154)
      {
        while (true)
        {
          for (int index = 0; index < 150 && index < RightsString.Length; ++index)
            stringBuilder[index] += RightsString[index];
          if (RightsString.Length > 150)
            RightsString = RightsString.Substring(150);
          else
            break;
        }
        RightsString = stringBuilder.ToString();
      }
      string[] strArray = new string[5]
      {
        Name,
        PersonalNr,
        RightsString,
        Password,
        this.PrivatKey
      };
      while (strArray[0].Length < 150 || strArray[1].Length < 150 || strArray[2].Length < 150 || strArray[3].Length < 150 || strArray[4].Length < 150)
      {
        for (int index1 = 0; index1 < 5; ++index1)
        {
          int index2 = index1 + 1;
          if (index2 >= 5)
            index2 = 0;
          if (strArray[index1].Length < 150)
          {
            // ISSUE: explicit reference operation
            ^ref strArray[index1] += strArray[index2];
          }
        }
      }
      stringBuilder.Length = 0;
      int num = 23421;
      for (int index3 = 0; index3 < 150; ++index3)
      {
        num += index3 + 13250;
        for (int index4 = 0; index4 < 5; ++index4)
        {
          if (strArray[index4].Length > index3)
            num += (int) strArray[index4][index3];
        }
        stringBuilder.Append((char) num);
      }
      for (int index = 0; index < stringBuilder.Length; ++index)
      {
        stringBuilder[index] &= '\u007F';
        if (stringBuilder[index] < ' ')
          stringBuilder[index] += ' ';
      }
      return stringBuilder.ToString();
    }

    private void GarantLicenseRights(ref bool[] TheRights)
    {
      if (TheRights[0] && !this.BasicRights[0] && MessageBox.Show(this.MyRes.GetString("Alle Rechte freigeben?"), "Developer login", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == DialogResult.Yes)
      {
        for (int index = 0; index < TheRights.Length; ++index)
          TheRights[index] = true;
        this.DemoEndDate = DateTime.MinValue;
      }
      else
      {
        for (int index = 0; index < TheRights.Length; ++index)
        {
          if (!this.BasicRights[index])
            TheRights[index] = false;
        }
      }
    }

    internal bool[] GetRightsFromString(string RightsString)
    {
      bool[] rightsFromString = new bool[this.ActiveRights.Length];
      string[] strArray = RightsString.Split(' ');
      for (int index = 0; index < this.ActiveRights.Length; ++index)
        rightsFromString[index] = false;
      try
      {
        for (int index1 = 0; index1 < strArray.Length; ++index1)
        {
          if (strArray[index1].Length > 0)
          {
            int index2 = int.Parse(strArray[index1]);
            if (index2 < rightsFromString.Length)
              rightsFromString[index2] = true;
          }
        }
      }
      catch
      {
        int num = (int) MessageBox.Show(this.MyRes.GetString("Rights string error"));
      }
      if (rightsFromString[22] || rightsFromString[17] || rightsFromString[16])
      {
        rightsFromString[49] = true;
        rightsFromString[57] = true;
        rightsFromString[8] = true;
        rightsFromString[9] = true;
      }
      return rightsFromString;
    }

    public bool GarantFirstStartUser()
    {
      string UserName = "Administrator";
      string Password = "start";
      this.GarantUserTableLoaded();
      if (((Schema.GMM_UserRow[]) this.Typed_GMM_UserTable.Select("UserName = '" + UserName + "'")).Length >= 1)
        return true;
      this.TempName = UserName;
      this.TempPersonalNumber = "1";
      List<UserRights.Rights> rightsList = new List<UserRights.Rights>((IEnumerable<UserRights.Rights>) UserRights.OnlyManualRights);
      for (int index = 0; index < this.BasicRights.Length; ++index)
      {
        if (this.BasicRights[index])
        {
          UserRights.Rights rights = (UserRights.Rights) index;
          if (this.CheckRight(UserRights.Rights.Developer) || !rightsList.Contains(rights))
            this.TempRightsString = this.TempRightsString + index.ToString() + " ";
        }
      }
      this.TempRightsString = this.TempRightsString.Trim();
      this.TempKey = this.GenerateKey(this.TempName, this.TempPersonalNumber, this.TempRightsString, Password);
      if (!this.WriteNewUser() || !this.SetNewUser(UserName, Password))
        throw new Exception("Error on start new user.");
      return false;
    }

    internal bool WriteNewUser()
    {
      this.GarantUserTableLoaded();
      if (((Schema.GMM_UserRow[]) this.Typed_GMM_UserTable.Select("UserName = '" + this.TempName + "'")).Length != 0)
      {
        int num = (int) MessageBox.Show(this.MyRes.GetString("User already exists"));
        return false;
      }
      Schema.GMM_UserRow row = this.Typed_GMM_UserTable.NewGMM_UserRow();
      row.UserName = this.TempName;
      row.UserPersonalNumber = int.Parse(this.TempPersonalNumber);
      row.UserRights = this.TempRightsString;
      row.UserKey = this.TempKey;
      this.Typed_GMM_UserTable.AddGMM_UserRow(row);
      this.User_Adapter.Update((DataTable) this.Typed_GMM_UserTable);
      this.LoadAllUser();
      return true;
    }

    internal bool WriteChangeUser()
    {
      Schema.GMM_UserRow[] gmmUserRowArray = (Schema.GMM_UserRow[]) this.Typed_GMM_UserTable.Select("UserName = '" + this.TempName + "'");
      if (gmmUserRowArray.Length != 1)
      {
        int num = (int) MessageBox.Show(this.MyRes.GetString("User not found"));
        return false;
      }
      gmmUserRowArray[0].ChangedUserRights = this.TempRightsString;
      gmmUserRowArray[0].ChangedUserKey = this.TempKey;
      this.User_Adapter.Update((DataTable) this.Typed_GMM_UserTable);
      return true;
    }

    public int GetUserKeyChecksum(string UserName)
    {
      this.GarantUserTableLoaded();
      Schema.GMM_UserRow[] gmmUserRowArray = (Schema.GMM_UserRow[]) this.Typed_GMM_UserTable.Select("UserName = '" + UserName + "'");
      if (gmmUserRowArray.Length != 1)
      {
        ZR_ClassLibMessages.AddWarning(this.MyRes.GetString("User not defined") + " User name: " + UserName);
        return 0;
      }
      string userKey = gmmUserRowArray[0].UserKey;
      int userKeyChecksum = 0;
      int num = 0;
      for (int index = 0; index < userKey.Length; ++index)
      {
        num += 7;
        if (num > 25)
          num -= 25;
        userKeyChecksum += (int) userKey[index] << num;
      }
      if (userKeyChecksum == 0)
        userKeyChecksum = 1267494;
      return userKeyChecksum;
    }

    public int GetLockKeyChecksumFromSecondaryDatabase()
    {
      try
      {
        ZRDataAdapter zrDataAdapter = DbBasis.SecondaryDB.ZRDataAdapter("SELECT * FROM GMM_User where UserName = 'ZelsiusLockKey' ", DbBasis.SecondaryDB.GetDbConnection());
        Schema.GMM_UserDataTable gmmUserDataTable = new Schema.GMM_UserDataTable();
        zrDataAdapter.Fill((DataTable) gmmUserDataTable);
        string userKey = gmmUserDataTable[0].UserKey;
        int secondaryDatabase = 0;
        int num = 0;
        for (int index = 0; index < userKey.Length; ++index)
        {
          num += 7;
          if (num > 25)
            num -= 25;
          secondaryDatabase += (int) userKey[index] << num;
        }
        if (secondaryDatabase == 0)
          secondaryDatabase = 1267494;
        return secondaryDatabase;
      }
      catch
      {
        return 0;
      }
    }

    public void NewLicence()
    {
      if (MessageBox.Show(this.MyRes.GetString("Are you sure to delete the old licence?") + "\r\n\r\n" + this.MyRes.GetString("The program will be terminated") + "\r\n" + this.MyRes.GetString("With the next start of the program you have to type in the new licence code."), this.MyRes.GetString("Change licence"), MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) != DialogResult.OK)
        return;
      this.MyConfig.RemoveValue("GMM", UserRights.GlobalUserRights.scrable("LZC.") + "1");
      this.MyConfig.WriteConfigFile();
      if (this.Typed_GMM_UserTable != null)
      {
        Schema.GMM_UserRow[] gmmUserRowArray = (Schema.GMM_UserRow[]) this.Typed_GMM_UserTable.Select("UserName = 'Administrator'");
        if (gmmUserRowArray.Length == 1)
        {
          string identificationValue = MeterDatabase.TryGetDatabaseIdentificationValue("SingleClientAccess");
          if (!string.IsNullOrEmpty(identificationValue) && Convert.ToBoolean(identificationValue))
          {
            gmmUserRowArray[0].Delete();
            this.User_Adapter.Update((DataTable) this.Typed_GMM_UserTable);
          }
        }
      }
      Application.Exit();
    }

    public enum Packages
    {
      None,
      Developer,
      ZennerFactory,
      AutoDataReader,
      Designer,
      MeterConfig,
      ExternalTestbench,
      AllRights,
      AutoReader,
      ManualData,
      Data,
      Complete,
      ExternalWaterTestbench,
      ServiceManager,
      ConfigurationManager,
      RadioManager,
      SystemManager,
      GlobalMeterManager,
      SystemManagerLight,
      MinolDeviceBasic,
      MinolDeviceFull,
      Demo,
      MinolDevicePro,
      ConfigurationManagerPro,
      Minol,
    }

    public enum PackagesOptions
    {
      NoOptions,
      Graphic,
      Export,
      GraphicAndExport,
      Alarm,
      GraphicAndAlarm,
      ExportAndAlarm,
      ExportAndGraphicAndAlarm,
      Designer,
      DeviceCollector,
      Professional,
    }

    internal struct RightsListEntry
    {
      internal UserRights.Rights[] AvailableRights;
      internal UserRights.Packages Package;
      internal string PackageStartComponentName;

      internal RightsListEntry(
        UserRights.Rights[] AvailableRightsIn,
        UserRights.Packages PackageIn,
        string PackageStartComponentNameIn)
      {
        this.AvailableRights = AvailableRightsIn;
        this.Package = PackageIn;
        this.PackageStartComponentName = PackageStartComponentNameIn;
      }
    }

    internal struct OptionRightsListEntry
    {
      internal UserRights.Rights[] AvailableRights;
      internal UserRights.PackagesOptions PackageOption;

      internal OptionRightsListEntry(
        UserRights.Rights[] AvailableRightsIn,
        UserRights.PackagesOptions PackageOptionIn)
      {
        this.AvailableRights = AvailableRightsIn;
        this.PackageOption = PackageOptionIn;
      }
    }

    public enum Rights
    {
      Developer,
      Administrator,
      Database,
      Designer,
      HardwareTestZelsius,
      EnergieTestbench,
      FactoryPrinter,
      EndTest,
      DeviceCollector,
      AsyncCom,
      MessageLogger,
      ChiefOfEnergyTestCenter,
      ChiefOfWaterTestCenter,
      Logger,
      multidata,
      Autologin,
      RadioTestbench,
      RadioFactory,
      EquipmentCalibration,
      Handler,
      MeterData,
      MeterDataSynchronizer,
      MeterFactory,
      MeterInstaller,
      MeterProtocol,
      MeterReader,
      TestComponents,
      WaterTestbench,
      HardwareTest,
      EHCA_Factory,
      DesignerChangeMenu,
      EquipmentCreation,
      MeterDataGraphics,
      MeterDataExport,
      MeterDataAlarm,
      MeterConfig,
      PPS_Connection,
      PPS_Off,
      ZelsiusModuleTest,
      CompleteTestbench,
      MeterTypist,
      CapsuleTest,
      ZelsiusOperator,
      LanguageTranslator,
      DatabaseManager,
      PDASynchronizer,
      MConfigSet1,
      WalkBy,
      Radio3,
      MBus,
      ProfessionalConfig,
      MConfigSet2,
      MConfigSet3,
      MConfigSet4,
      ISF,
      MinomatV2,
      MinomatV4,
      Waveflow,
      MinolExpertHandler,
      Configurator,
      WirelessMBus,
      TranslationRules,
      AutoUpdate,
      EDC_Handler,
      S3_Handler,
      EDC_Testbench,
      SmokeDetectorHandler,
      PDC_Handler,
    }

    public enum LastErrorCode
    {
      NoError,
      DatabaseError,
    }

    public delegate bool PGMMCheckPermission(string PermissionName);
  }
}


--- UserRightsForm.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.UserRightsForm
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using CorporateDesign;
using GmmDbLib;
using System;
using System.ComponentModel;
using System.Data;
using System.Windows.Forms;
using ZR_ClassLibrary.Schema_Access;

#nullable disable
namespace ZR_ClassLibrary
{
  public class UserRightsForm : Form
  {
    private CheckedListBox checkedListBoxRights;
    private Button buttonQuit;
    private Label label3;
    private TextBox textBoxUserPassword;
    private Label label4;
    private TextBox textBoxUserPassword2;
    private Label label5;
    private Label label6;
    private Button buttonNewUser;
    private Label label7;
    private TextBox textBoxPersonalNumber;
    private Button buttonLoadUserData;
    private Button buttonDeleteUser;
    private ComboBox comboBoxUserName;
    private Button buttonChangeUserData;
    private Button buttonDeleteAllRights;
    private Button buttonSetAllRights;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private Button buttonChangeUserRights;
    private MainMenu mainMenu1;
    private MenuItem menuItem1;
    private MenuItem menuItem2;
    private Label label1;
    private TextBox textBoxUserIdRange;
    private Button buttonNewLicence;
    private Button buttonSetFactoryWorkerPermissions;
    private UserRights MyUserRights;

    public UserRightsForm(GMMConfig GmmKonfigGroupIn, UserRights MyUserRights)
    {
      this.InitializeComponent();
      this.MyUserRights = MyUserRights;
      int length = Util.GetNamesOfEnum(typeof (UserRights.Rights)).Length;
    }

    protected override void Dispose(bool disposing) => base.Dispose(disposing);

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (UserRightsForm));
      this.checkedListBoxRights = new CheckedListBox();
      this.buttonQuit = new Button();
      this.label3 = new Label();
      this.textBoxUserPassword = new TextBox();
      this.label4 = new Label();
      this.textBoxUserPassword2 = new TextBox();
      this.label5 = new Label();
      this.label6 = new Label();
      this.buttonChangeUserData = new Button();
      this.buttonNewUser = new Button();
      this.label7 = new Label();
      this.textBoxPersonalNumber = new TextBox();
      this.buttonLoadUserData = new Button();
      this.buttonDeleteUser = new Button();
      this.comboBoxUserName = new ComboBox();
      this.buttonDeleteAllRights = new Button();
      this.buttonSetAllRights = new Button();
      this.buttonChangeUserRights = new Button();
      this.buttonNewLicence = new Button();
      this.mainMenu1 = new MainMenu();
      this.menuItem1 = new MenuItem();
      this.menuItem2 = new MenuItem();
      this.label1 = new Label();
      this.textBoxUserIdRange = new TextBox();
      this.buttonSetFactoryWorkerPermissions = new Button();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.checkedListBoxRights, "checkedListBoxRights");
      this.checkedListBoxRights.CheckOnClick = true;
      this.checkedListBoxRights.Name = "checkedListBoxRights";
      this.checkedListBoxRights.Sorted = true;
      componentResourceManager.ApplyResources((object) this.buttonQuit, "buttonQuit");
      this.buttonQuit.Name = "buttonQuit";
      this.buttonQuit.Click += new System.EventHandler(this.buttonQuit_Click);
      componentResourceManager.ApplyResources((object) this.label3, "label3");
      this.label3.Name = "label3";
      componentResourceManager.ApplyResources((object) this.textBoxUserPassword, "textBoxUserPassword");
      this.textBoxUserPassword.Name = "textBoxUserPassword";
      componentResourceManager.ApplyResources((object) this.label4, "label4");
      this.label4.Name = "label4";
      componentResourceManager.ApplyResources((object) this.textBoxUserPassword2, "textBoxUserPassword2");
      this.textBoxUserPassword2.Name = "textBoxUserPassword2";
      componentResourceManager.ApplyResources((object) this.label5, "label5");
      this.label5.Name = "label5";
      componentResourceManager.ApplyResources((object) this.label6, "label6");
      this.label6.Name = "label6";
      componentResourceManager.ApplyResources((object) this.buttonChangeUserData, "buttonChangeUserData");
      this.buttonChangeUserData.Name = "buttonChangeUserData";
      this.buttonChangeUserData.Click += new System.EventHandler(this.buttonChangeUserData_Click);
      componentResourceManager.ApplyResources((object) this.buttonNewUser, "buttonNewUser");
      this.buttonNewUser.Name = "buttonNewUser";
      this.buttonNewUser.Click += new System.EventHandler(this.buttonNewUser_Click);
      componentResourceManager.ApplyResources((object) this.label7, "label7");
      this.label7.Name = "label7";
      componentResourceManager.ApplyResources((object) this.textBoxPersonalNumber, "textBoxPersonalNumber");
      this.textBoxPersonalNumber.Name = "textBoxPersonalNumber";
      componentResourceManager.ApplyResources((object) this.buttonLoadUserData, "buttonLoadUserData");
      this.buttonLoadUserData.Name = "buttonLoadUserData";
      this.buttonLoadUserData.Click += new System.EventHandler(this.buttonLoadUserData_Click);
      componentResourceManager.ApplyResources((object) this.buttonDeleteUser, "buttonDeleteUser");
      this.buttonDeleteUser.Name = "buttonDeleteUser";
      this.buttonDeleteUser.Click += new System.EventHandler(this.buttonDeleteUser_Click);
      componentResourceManager.ApplyResources((object) this.comboBoxUserName, "comboBoxUserName");
      this.comboBoxUserName.Name = "comboBoxUserName";
      this.comboBoxUserName.Sorted = true;
      this.comboBoxUserName.SelectedIndexChanged += new System.EventHandler(this.comboBoxUserName_SelectedIndexChanged);
      componentResourceManager.ApplyResources((object) this.buttonDeleteAllRights, "buttonDeleteAllRights");
      this.buttonDeleteAllRights.Name = "buttonDeleteAllRights";
      this.buttonDeleteAllRights.Click += new System.EventHandler(this.buttonDeleteAllRights_Click);
      componentResourceManager.ApplyResources((object) this.buttonSetAllRights, "buttonSetAllRights");
      this.buttonSetAllRights.Name = "buttonSetAllRights";
      this.buttonSetAllRights.Click += new System.EventHandler(this.buttonSetAllRights_Click);
      componentResourceManager.ApplyResources((object) this.buttonChangeUserRights, "buttonChangeUserRights");
      this.buttonChangeUserRights.Name = "buttonChangeUserRights";
      this.buttonChangeUserRights.Click += new System.EventHandler(this.buttonChangeUserRights_Click);
      componentResourceManager.ApplyResources((object) this.buttonNewLicence, "buttonNewLicence");
      this.buttonNewLicence.Name = "buttonNewLicence";
      this.buttonNewLicence.Click += new System.EventHandler(this.buttonNewLicence_Click);
      this.mainMenu1.MenuItems.AddRange(new MenuItem[1]
      {
        this.menuItem1
      });
      this.menuItem1.Index = 0;
      this.menuItem1.MenuItems.AddRange(new MenuItem[1]
      {
        this.menuItem2
      });
      componentResourceManager.ApplyResources((object) this.menuItem1, "menuItem1");
      this.menuItem2.Index = 0;
      componentResourceManager.ApplyResources((object) this.menuItem2, "menuItem2");
      componentResourceManager.ApplyResources((object) this.label1, "label1");
      this.label1.Name = "label1";
      componentResourceManager.ApplyResources((object) this.textBoxUserIdRange, "textBoxUserIdRange");
      this.textBoxUserIdRange.Name = "textBoxUserIdRange";
      componentResourceManager.ApplyResources((object) this.buttonSetFactoryWorkerPermissions, "buttonSetFactoryWorkerPermissions");
      this.buttonSetFactoryWorkerPermissions.Name = "buttonSetFactoryWorkerPermissions";
      this.buttonSetFactoryWorkerPermissions.Click += new System.EventHandler(this.buttonSetFactoryWorkerPermissions_Click);
      componentResourceManager.ApplyResources((object) this.zennerCoroprateDesign1, "zennerCoroprateDesign1");
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      componentResourceManager.ApplyResources((object) this, "$this");
      this.Controls.Add((Control) this.buttonSetFactoryWorkerPermissions);
      this.Controls.Add((Control) this.comboBoxUserName);
      this.Controls.Add((Control) this.label6);
      this.Controls.Add((Control) this.buttonQuit);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.textBoxUserPassword);
      this.Controls.Add((Control) this.textBoxUserPassword2);
      this.Controls.Add((Control) this.textBoxUserIdRange);
      this.Controls.Add((Control) this.textBoxPersonalNumber);
      this.Controls.Add((Control) this.label4);
      this.Controls.Add((Control) this.checkedListBoxRights);
      this.Controls.Add((Control) this.label5);
      this.Controls.Add((Control) this.buttonChangeUserData);
      this.Controls.Add((Control) this.buttonNewUser);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.label7);
      this.Controls.Add((Control) this.buttonLoadUserData);
      this.Controls.Add((Control) this.buttonDeleteUser);
      this.Controls.Add((Control) this.buttonDeleteAllRights);
      this.Controls.Add((Control) this.buttonSetAllRights);
      this.Controls.Add((Control) this.buttonChangeUserRights);
      this.Controls.Add((Control) this.buttonNewLicence);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Menu = this.mainMenu1;
      this.Name = nameof (UserRightsForm);
      this.Activated += new System.EventHandler(this.UserRights_Activated);
      this.Load += new System.EventHandler(this.UserRights_Load);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private void UserRights_Load(object sender, EventArgs e)
    {
      this.MyUserRights.User_Adapter = (ZRDataAdapter) null;
      this.MyUserRights.GarantUserTableLoaded();
      this.textBoxUserPassword.Text = string.Empty;
      this.textBoxUserPassword2.Text = string.Empty;
      this.comboBoxUserName.Items.Clear();
      for (int index = 0; index < this.MyUserRights.Typed_GMM_UserTable.Rows.Count; ++index)
        this.comboBoxUserName.Items.Add((object) this.MyUserRights.Typed_GMM_UserTable[index].UserName);
      UserRights.Rights[] availableRights1 = this.MyUserRights.BaseRightsList[this.MyUserRights.PackageNumber].AvailableRights;
      this.buttonSetFactoryWorkerPermissions.Visible = this.MyUserRights.PackageNumber == 2 || this.MyUserRights.PackageNumber == 1;
      for (int index = 0; index < availableRights1.Length; ++index)
        this.checkedListBoxRights.Items.Add((object) availableRights1[index].ToString());
      UserRights.Rights[] availableRights2 = this.MyUserRights.OptionRightsList[this.MyUserRights.OptionNumber].AvailableRights;
      for (int index = 0; index < availableRights2.Length; ++index)
      {
        if (!this.MyUserRights.BasicRights[(int) availableRights2[index]])
          this.checkedListBoxRights.Items.Add((object) availableRights2[index].ToString());
      }
    }

    private bool LoadAllUser()
    {
      this.MyUserRights.LoadAllUser();
      this.MyUserRights.User_Adapter = (ZRDataAdapter) null;
      this.MyUserRights.GarantUserTableLoaded();
      this.textBoxUserPassword.Text = string.Empty;
      this.textBoxUserPassword2.Text = string.Empty;
      this.comboBoxUserName.Items.Clear();
      for (int index = 0; index < this.MyUserRights.Typed_GMM_UserTable.Rows.Count; ++index)
        this.comboBoxUserName.Items.Add((object) this.MyUserRights.Typed_GMM_UserTable[index].UserName);
      return true;
    }

    private void buttonLoadUserData_Click(object sender, EventArgs e) => this.LoadUserData();

    private void LoadUserData()
    {
      this.MyUserRights.GarantUserTableLoaded();
      Schema.GMM_UserRow[] gmmUserRowArray = (Schema.GMM_UserRow[]) this.MyUserRights.Typed_GMM_UserTable.Select("UserName = '" + this.comboBoxUserName.Text + "'");
      if (gmmUserRowArray.Length != 1)
      {
        int num = (int) MessageBox.Show(this.MyUserRights.MyRes.GetString("User not defined"));
      }
      else
      {
        this.textBoxPersonalNumber.Text = gmmUserRowArray[0].UserPersonalNumber.ToString();
        this.MyUserRights.TempRights = this.MyUserRights.GetRightsFromString(gmmUserRowArray[0].UserRights);
        for (int index1 = 0; index1 < this.checkedListBoxRights.Items.Count; ++index1)
        {
          string str = this.checkedListBoxRights.Items[index1].ToString();
          foreach (object index2 in Enum.GetValues(typeof (UserRights.Rights)))
          {
            if (str == index2.ToString())
            {
              if (this.MyUserRights.TempRights[(int) index2])
              {
                this.checkedListBoxRights.SetItemChecked(index1, true);
                break;
              }
              this.checkedListBoxRights.SetItemChecked(index1, false);
              break;
            }
          }
        }
      }
    }

    private bool GenerateUserInfo()
    {
      this.MyUserRights.TempRightsString = this.GetRightsStringFromListBox();
      this.MyUserRights.TempRights = this.MyUserRights.GetRightsFromString(this.MyUserRights.TempRightsString);
      this.MyUserRights.TempName = this.comboBoxUserName.Text.Trim();
      if (this.MyUserRights.TempName.Length < 7)
      {
        int num = (int) MessageBox.Show(this.MyUserRights.MyRes.GetString("The minimun name size is 7 characters"));
        return false;
      }
      string text = this.textBoxUserPassword.Text;
      if (text.Length < 5)
      {
        int num = (int) MessageBox.Show(this.MyUserRights.MyRes.GetString("The minimun password size is 5 characters"));
        return false;
      }
      if (text != this.textBoxUserPassword2.Text)
      {
        int num = (int) MessageBox.Show(this.MyUserRights.MyRes.GetString("The passwords are not equal."));
        return false;
      }
      long num1;
      try
      {
        num1 = (long) int.Parse(this.textBoxPersonalNumber.Text);
      }
      catch
      {
        int num2 = (int) MessageBox.Show(this.MyUserRights.MyRes.GetString("Illegal personal number."));
        return false;
      }
      if (this.MyUserRights.UserID_RangeMax >= 0 && (num1 < (long) this.MyUserRights.UserID_RangeMin || num1 > (long) this.MyUserRights.UserID_RangeMax))
      {
        int num3 = (int) GMM_MessageBox.ShowMessage("Global Meter Manager", this.MyUserRights.MyRes.GetString("Personal number out of range"), true);
        return false;
      }
      this.MyUserRights.TempPersonalNumber = num1.ToString();
      this.MyUserRights.TempKey = this.MyUserRights.GenerateKey(this.MyUserRights.TempName, this.MyUserRights.TempPersonalNumber, this.MyUserRights.TempRightsString, text);
      return true;
    }

    private string GetRightsStringFromListBox()
    {
      string empty = string.Empty;
      for (int index = 0; index < this.checkedListBoxRights.Items.Count; ++index)
      {
        if (this.checkedListBoxRights.GetItemChecked(index))
        {
          if (empty.Length > 0)
            empty += " ";
          foreach (object obj in Enum.GetValues(typeof (UserRights.Rights)))
          {
            if (this.checkedListBoxRights.Items[index].ToString() == obj.ToString())
            {
              empty += ((int) obj).ToString("d");
              break;
            }
          }
        }
      }
      return empty;
    }

    private void buttonNewUser_Click(object sender, EventArgs e)
    {
      if (!this.GenerateUserInfo() || !this.MyUserRights.WriteNewUser())
        return;
      int num = (int) MessageBox.Show(this.MyUserRights.MyRes.GetString("New user created"));
    }

    private void buttonDeleteUser_Click(object sender, EventArgs e)
    {
      Schema.GMM_UserRow[] gmmUserRowArray = (Schema.GMM_UserRow[]) this.MyUserRights.Typed_GMM_UserTable.Select("UserName = '" + this.comboBoxUserName.Text + "'");
      if (gmmUserRowArray.Length != 1)
      {
        int num1 = (int) GMM_MessageBox.ShowMessage(this.MyUserRights.MyRes.GetString("GMM user rights"), this.MyUserRights.MyRes.GetString("User not found"));
      }
      else
      {
        gmmUserRowArray[0].Delete();
        this.MyUserRights.User_Adapter.Update((DataTable) this.MyUserRights.Typed_GMM_UserTable);
        this.LoadAllUser();
        int num2 = (int) GMM_MessageBox.ShowMessage(this.MyUserRights.MyRes.GetString("GMM user rights"), "User '" + this.comboBoxUserName.Text + "' deleted");
      }
    }

    private void buttonQuit_Click(object sender, EventArgs e) => this.Hide();

    private void buttonChangeUserData_Click(object sender, EventArgs e)
    {
      if (!this.GenerateUserInfo())
        return;
      Schema.GMM_UserRow[] gmmUserRowArray = (Schema.GMM_UserRow[]) this.MyUserRights.Typed_GMM_UserTable.Select("UserName = '" + this.comboBoxUserName.Text + "'");
      if (gmmUserRowArray.Length == 1)
      {
        gmmUserRowArray[0].Delete();
        this.MyUserRights.User_Adapter.Update((DataTable) this.MyUserRights.Typed_GMM_UserTable);
      }
      if (this.MyUserRights.WriteNewUser())
      {
        int num1 = (int) GMM_MessageBox.ShowMessage(this.MyUserRights.MyRes.GetString("GMM user rights"), this.MyUserRights.MyRes.GetString("User data changed"));
      }
      else
      {
        int num2 = (int) GMM_MessageBox.ShowMessage(this.MyUserRights.MyRes.GetString("GMM user rights"), this.MyUserRights.MyRes.GetString("User data not changed"), true);
      }
    }

    private void buttonChangeUserRights_Click(object sender, EventArgs e)
    {
      this.textBoxUserPassword.Text = "ChangePass";
      this.textBoxUserPassword2.Text = "ChangePass";
      bool userInfo = this.GenerateUserInfo();
      this.textBoxUserPassword.Text = "";
      this.textBoxUserPassword2.Text = "";
      if (!userInfo || !this.MyUserRights.WriteChangeUser())
        return;
      int num = (int) MessageBox.Show(this.MyUserRights.MyRes.GetString("User permissions changed"));
    }

    private void buttonSetAllRights_Click(object sender, EventArgs e)
    {
      for (int index = 0; index < this.checkedListBoxRights.Items.Count; ++index)
        this.checkedListBoxRights.SetItemChecked(index, true);
    }

    private void buttonSetFactoryWorkerPermissions_Click(object sender, EventArgs e)
    {
      for (int index = 0; index < this.checkedListBoxRights.Items.Count; ++index)
      {
        UserRights.Rights rights = (UserRights.Rights) Enum.Parse(typeof (UserRights.Rights), this.checkedListBoxRights.GetItemText(this.checkedListBoxRights.Items[index]));
        int num;
        switch (rights)
        {
          case UserRights.Rights.Developer:
          case UserRights.Rights.Administrator:
          case UserRights.Rights.ChiefOfEnergyTestCenter:
          case UserRights.Rights.ChiefOfWaterTestCenter:
          case UserRights.Rights.EquipmentCalibration:
          case UserRights.Rights.EquipmentCreation:
            num = 1;
            break;
          default:
            num = rights == UserRights.Rights.Database ? 1 : 0;
            break;
        }
        if (num != 0)
          this.checkedListBoxRights.SetItemChecked(index, false);
        else
          this.checkedListBoxRights.SetItemChecked(index, true);
      }
    }

    private void buttonDeleteAllRights_Click(object sender, EventArgs e)
    {
      for (int index = 0; index < this.checkedListBoxRights.Items.Count; ++index)
        this.checkedListBoxRights.SetItemChecked(index, false);
    }

    private void comboBoxUserName_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.LoadUserData();
      this.textBoxUserPassword.Text = "";
      this.textBoxUserPassword2.Text = "";
    }

    private void UserRights_Activated(object sender, EventArgs e)
    {
      this.Text = this.MyUserRights.MyRes.GetString("User Rights") + " ( Admin: " + this.MyUserRights.LoginName + " )";
    }

    public int GetUserKeyChecksum(string UserName)
    {
      this.MyUserRights.GarantUserTableLoaded();
      Schema.GMM_UserRow[] gmmUserRowArray = (Schema.GMM_UserRow[]) this.MyUserRights.Typed_GMM_UserTable.Select("UserName = '" + UserName + "'");
      if (gmmUserRowArray.Length != 1)
      {
        int num = (int) MessageBox.Show(this.MyUserRights.MyRes.GetString("User not defined"), nameof (GetUserKeyChecksum));
        return 0;
      }
      string userKey = gmmUserRowArray[0].UserKey;
      int userKeyChecksum = 0;
      int num1 = 0;
      for (int index = 0; index < userKey.Length; ++index)
      {
        num1 += 7;
        if (num1 > 25)
          num1 -= 25;
        userKeyChecksum += (int) userKey[index] << num1;
      }
      if (userKeyChecksum == 0)
        userKeyChecksum = 1267494;
      return userKeyChecksum;
    }

    private void buttonNewLicence_Click(object sender, EventArgs e)
    {
      this.MyUserRights.NewLicence();
    }
  }
}


--- UserRightsMessages.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.UserRightsMessages
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Resources;
using System.Runtime.CompilerServices;

#nullable disable
namespace ZR_ClassLibrary
{
  [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
  [DebuggerNonUserCode]
  [CompilerGenerated]
  internal class UserRightsMessages
  {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;

    internal UserRightsMessages()
    {
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static ResourceManager ResourceManager
    {
      get
      {
        if (UserRightsMessages.resourceMan == null)
          UserRightsMessages.resourceMan = new ResourceManager("ZR_ClassLibrary.UserRightsMessages", typeof (UserRightsMessages).Assembly);
        return UserRightsMessages.resourceMan;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static CultureInfo Culture
    {
      get => UserRightsMessages.resourceCulture;
      set => UserRightsMessages.resourceCulture = value;
    }

    internal static string Alle_Rechte_freigeben_
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("Alle Rechte freigeben?", UserRightsMessages.resourceCulture);
      }
    }

    internal static string Are_you_sure_to_delete_the_old_licence_
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("Are you sure to delete the old licence?", UserRightsMessages.resourceCulture);
      }
    }

    internal static string Change_licence
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("Change licence", UserRightsMessages.resourceCulture);
      }
    }

    internal static string DemoVersionExhausted
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString(nameof (DemoVersionExhausted), UserRightsMessages.resourceCulture);
      }
    }

    internal static string GMM_user_rights
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("GMM user rights", UserRightsMessages.resourceCulture);
      }
    }

    internal static string Illegal_personal_number_
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("Illegal personal number.", UserRightsMessages.resourceCulture);
      }
    }

    internal static string New_user_created
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("New user created", UserRightsMessages.resourceCulture);
      }
    }

    internal static string Not_yet_available
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("Not yet available", UserRightsMessages.resourceCulture);
      }
    }

    internal static string Password_error
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("Password error", UserRightsMessages.resourceCulture);
      }
    }

    internal static string Personal_number_out_of_range
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("Personal number out of range", UserRightsMessages.resourceCulture);
      }
    }

    internal static string Rights_string_error
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("Rights string error", UserRightsMessages.resourceCulture);
      }
    }

    internal static string The_minimun_name_size_is_7_characters
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("The minimun name size is 7 characters", UserRightsMessages.resourceCulture);
      }
    }

    internal static string The_minimun_password_size_is_5_characters
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("The minimun password size is 5 characters", UserRightsMessages.resourceCulture);
      }
    }

    internal static string The_passwords_are_not_equal_
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("The passwords are not equal.", UserRightsMessages.resourceCulture);
      }
    }

    internal static string The_program_will_be_terminated
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("The program will be terminated", UserRightsMessages.resourceCulture);
      }
    }

    internal static string User_already_exists
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("User already exists", UserRightsMessages.resourceCulture);
      }
    }

    internal static string User_data_changed
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("User data changed", UserRightsMessages.resourceCulture);
      }
    }

    internal static string User_data_not_changed
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("User data not changed", UserRightsMessages.resourceCulture);
      }
    }

    internal static string User_not_available
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("User not available", UserRightsMessages.resourceCulture);
      }
    }

    internal static string User_not_defined
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("User not defined", UserRightsMessages.resourceCulture);
      }
    }

    internal static string User_not_found
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("User not found", UserRightsMessages.resourceCulture);
      }
    }

    internal static string User_permissions_changed
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("User permissions changed", UserRightsMessages.resourceCulture);
      }
    }

    internal static string User_Rights
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("User Rights", UserRightsMessages.resourceCulture);
      }
    }

    internal static string With_the_next_start_of_the_program_you_have_to_type_in_the_new_licence_code_
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("With the next start of the program you have to type in the new licence code.", UserRightsMessages.resourceCulture);
      }
    }

    internal static string Wrong_package_number
    {
      get
      {
        return UserRightsMessages.ResourceManager.GetString("Wrong package number", UserRightsMessages.resourceCulture);
      }
    }
  }
}


--- Util.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.Util
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using Microsoft.VisualBasic;
using Microsoft.Win32;
using NLog;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.IO.Ports;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Serialization;

#nullable disable
namespace ZR_ClassLibrary
{
  public static class Util
  {
    private static Logger logger = LogManager.GetLogger(nameof (Util));
    private static Random random = new Random();
    private static DateTime lastCallOfApplicationDoEvents = SystemValues.DateTimeNow;
    private const int UPDATE_GUI_INTERVAL = 300;
    private const int MUST_BE_LESS_THAN = 100000000;
    private const string subkey = "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\";

    public static Version GMM_Version
    {
      get
      {
        try
        {
          return typeof (Util).Assembly.GetName().Version;
        }
        catch (Exception ex)
        {
          Util.logger.Error(ex.Message);
          return new Version(0, 0);
        }
      }
    }

    public static byte[] DecryptCBC_AES_128(byte[] key, byte[] IV, byte[] encrypted)
    {
      if (encrypted == null || encrypted.Length == 0)
        throw new ArgumentNullException(nameof (encrypted));
      if (key == null || key.Length == 0)
        throw new ArgumentNullException(nameof (key));
      if (IV == null || IV.Length == 0)
        throw new ArgumentNullException(nameof (IV));
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      rijndaelManaged.Mode = CipherMode.CBC;
      rijndaelManaged.IV = IV;
      rijndaelManaged.Key = key;
      rijndaelManaged.Padding = PaddingMode.Zeros;
      using (ICryptoTransform decryptor = rijndaelManaged.CreateDecryptor())
      {
        using (MemoryStream memoryStream1 = new MemoryStream(encrypted))
        {
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream1, decryptor, CryptoStreamMode.Read))
          {
            using (MemoryStream memoryStream2 = new MemoryStream())
            {
              byte[] buffer = new byte[encrypted.Length];
              while (true)
              {
                int count = cryptoStream.Read(buffer, 0, buffer.Length);
                if (count > 0)
                  memoryStream2.Write(buffer, 0, count);
                else
                  break;
              }
              return memoryStream2.ToArray();
            }
          }
        }
      }
    }

    public static ushort CalculatesCRC16_CC430(byte[] buffer)
    {
      return Util.CalculatesCRC16_CC430(buffer, 0, buffer.Length);
    }

    public static ushort CalculatesCRC16_CC430(byte[] buffer, int offset, int size)
    {
      ushort crc = ushort.MaxValue;
      for (int index = offset; index < size + offset; ++index)
        crc = Util.crc_calc_ccitt_(crc, buffer[index]);
      return crc;
    }

    public static ushort CalculatesCRC16_CC430(List<byte> buffer)
    {
      ushort crc = ushort.MaxValue;
      foreach (byte data in buffer)
        crc = Util.crc_calc_ccitt_(crc, data);
      return crc;
    }

    private static ushort crc_calc_ccitt_(ushort crc, byte data)
    {
      byte num = 0;
      for (byte index = 0; index < (byte) 8; ++index)
      {
        if (((uint) data & 1U << (int) index) > 0U)
          num |= (byte) (128U >> (int) index);
      }
      crc ^= (ushort) ((uint) num << 8);
      for (byte index = 0; index < (byte) 8; ++index)
      {
        if (((uint) crc & 32768U) > 0U)
          crc = (ushort) ((int) crc << 1 ^ 4129);
        else
          crc <<= 1;
      }
      return crc;
    }

    public static ushort CalculatesCRC16(byte[] data) => Util.CalculatesCRC16(data, 0, data.Length);

    public static ushort CalculatesCRC16(byte[] data, int offset, int length)
    {
      ushort num = ushort.MaxValue;
      for (int index1 = offset; index1 < length; ++index1)
      {
        num ^= (ushort) ((uint) data[index1] << 8);
        for (int index2 = 0; index2 < 8; ++index2)
        {
          if ((ushort) ((uint) num & 32768U) > (ushort) 0)
            num = (ushort) ((uint) (ushort) ((uint) num << 1) ^ 4129U);
          else
            num <<= 1;
        }
      }
      return num;
    }

    public static string SerializeObjectToXML(object item)
    {
      try
      {
        using (XmlTextWriter xmlTextWriter = new XmlTextWriter((Stream) new MemoryStream(), Encoding.UTF8)
        {
          Formatting = Formatting.Indented
        })
        {
          new XmlSerializer(item.GetType()).Serialize((XmlWriter) xmlTextWriter, item);
          MemoryStream baseStream = (MemoryStream) xmlTextWriter.BaseStream;
          byte[] array = baseStream.ToArray();
          string xml = new UTF8Encoding(true).GetString(array, 0, array.Length);
          baseStream.Close();
          return xml;
        }
      }
      catch (Exception ex)
      {
        Debug.Write(ex.ToString());
        return (string) null;
      }
    }

    public static TOutput[] ConvertAll<TInput, TOutput>(
      TInput[] array,
      Converter<TInput, TOutput> converter)
    {
      if (array == null)
        throw new ArgumentNullException(nameof (array));
      if (converter == null)
        throw new ArgumentNullException(nameof (converter));
      TOutput[] outputArray = new TOutput[array.Length];
      for (int index = 0; index < array.Length; ++index)
        outputArray[index] = converter(array[index]);
      return outputArray;
    }

    public static byte[] Zip(byte[] buffer)
    {
      using (MemoryStream src = new MemoryStream(buffer))
      {
        using (MemoryStream memoryStream = new MemoryStream())
        {
          using (GZipStream dest = new GZipStream((Stream) memoryStream, CompressionMode.Compress))
            Util.CopyTo((Stream) src, (Stream) dest);
          return memoryStream.ToArray();
        }
      }
    }

    public static byte[] Unzip(byte[] bytes)
    {
      using (MemoryStream memoryStream = new MemoryStream(bytes))
      {
        using (MemoryStream dest = new MemoryStream())
        {
          using (GZipStream src = new GZipStream((Stream) memoryStream, CompressionMode.Decompress))
            Util.CopyTo((Stream) src, (Stream) dest);
          return dest.ToArray();
        }
      }
    }

    public static void CopyTo(Stream src, Stream dest)
    {
      byte[] buffer = new byte[4096];
      int count;
      while ((count = src.Read(buffer, 0, buffer.Length)) != 0)
        dest.Write(buffer, 0, count);
    }

    public static T[] GetPreFilledArray<T>(T fillItem, int count)
    {
      T[] preFilledArray = new T[count];
      for (int index = 0; index < count; ++index)
        preFilledArray[index] = fillItem;
      return preFilledArray;
    }

    public static bool Wait(long ms, string reason, ICancelable cancelableModul)
    {
      return Util.Wait(ms, reason, cancelableModul, (Logger) null);
    }

    public static bool Wait(long ms, string reason, ICancelable cancelableModul, Logger logger)
    {
      if (ms <= 0L)
        return true;
      DateTime dateTime = SystemValues.DateTimeNow.AddMilliseconds((double) ms);
      if (logger != null && logger.IsTraceEnabled)
        logger.Trace("Wait " + ms.ToString() + "ms " + reason);
      while (!cancelableModul.BreakRequest)
      {
        double totalMilliseconds = dateTime.Subtract(SystemValues.DateTimeNow).TotalMilliseconds;
        int millisecondsTimeout = 0;
        if (totalMilliseconds >= 0.0 && totalMilliseconds <= (double) int.MaxValue)
          millisecondsTimeout = Convert.ToInt32(totalMilliseconds);
        if (millisecondsTimeout > 0)
        {
          Thread.Sleep(millisecondsTimeout);
          if ((SystemValues.DateTimeNow - Util.lastCallOfApplicationDoEvents).TotalMilliseconds >= 300.0)
          {
            Application.DoEvents();
            Util.lastCallOfApplicationDoEvents = SystemValues.DateTimeNow;
          }
        }
        else
          break;
      }
      if (logger != null && logger.IsTraceEnabled && cancelableModul.BreakRequest)
        logger.Trace("User has canceled all processes of " + cancelableModul.ToString());
      return !cancelableModul.BreakRequest;
    }

    public static int GetDivisorWithoutResidue(int number, int divisor)
    {
      for (int divisorWithoutResidue = divisor; divisorWithoutResidue > 1; --divisorWithoutResidue)
      {
        if (number % divisorWithoutResidue == 0)
          return divisorWithoutResidue;
      }
      return 1;
    }

    public static string GetPublicIP()
    {
      WebResponse response = WebRequest.Create("http://checkip.dyndns.org/").GetResponse();
      StreamReader streamReader = new StreamReader(response.GetResponseStream());
      string end = streamReader.ReadToEnd();
      streamReader.Close();
      response.Close();
      int startIndex = end.IndexOf("Address: ") + 9;
      int num = end.LastIndexOf("</body>");
      return end.Substring(startIndex, num - startIndex);
    }

    public static Dictionary<string, bool> GetPortNames()
    {
      Dictionary<string, bool> dictionary = new Dictionary<string, bool>();
      Util.SearchRegistryForPortNames("SYSTEM\\CurrentControlSet\\Enum", dictionary, new List<string>((IEnumerable<string>) SerialPort.GetPortNames()));
      return Util.SortDictionaryByKey(dictionary);
    }

    private static void SearchRegistryForPortNames(
      string startKey,
      Dictionary<string, bool> portNames,
      List<string> portNamesToMatch)
    {
      if (portNames.Count >= portNamesToMatch.Count)
        return;
      RegistryKey localMachine = Registry.LocalMachine;
      RegistryKey registryKey;
      try
      {
        registryKey = localMachine.OpenSubKey(startKey);
        if (registryKey == null)
          return;
      }
      catch (SecurityException ex)
      {
        return;
      }
      List<string> stringList = new List<string>((IEnumerable<string>) registryKey.GetSubKeyNames());
      if (stringList.Contains("Device Parameters") && startKey != "SYSTEM\\CurrentControlSet\\Enum")
      {
        object obj = Registry.GetValue("HKEY_LOCAL_MACHINE\\" + startKey + "\\Device Parameters", "PortName", (object) null);
        if (obj == null)
          return;
        string key = obj.ToString();
        if (!key.StartsWith("COM"))
          return;
        bool flag1 = false;
        foreach (string str in portNamesToMatch)
        {
          if (str.StartsWith(key.ToString()))
          {
            flag1 = true;
            break;
          }
        }
        if (!flag1 || portNames.ContainsKey(key))
          return;
        bool flag2 = registryKey.Name.IndexOf("BTHENUM") > 0;
        if (!portNames.ContainsKey(key))
          portNames.Add(key, flag2);
      }
      else
      {
        foreach (string str in stringList)
          Util.SearchRegistryForPortNames(startKey + "\\" + str, portNames, portNamesToMatch);
      }
    }

    public static Dictionary<string, bool> SortDictionaryByKey(Dictionary<string, bool> values)
    {
      string[] array = new List<string>((IEnumerable<string>) values.Keys).ToArray();
      Array.Sort<string>(array, (IComparer<string>) new Util.AlphanumComparator());
      Dictionary<string, bool> dictionary = new Dictionary<string, bool>();
      foreach (string key in array)
        dictionary.Add(key, values[key]);
      return dictionary;
    }

    public static Dictionary<string, string> SortDictionaryByValue(Dictionary<string, string> values)
    {
      return values.OrderBy<KeyValuePair<string, string>, string>((Func<KeyValuePair<string, string>, string>) (entry => entry.Value)).ToDictionary<KeyValuePair<string, string>, string, string>((Func<KeyValuePair<string, string>, string>) (pair => pair.Key), (Func<KeyValuePair<string, string>, string>) (pair => pair.Value));
    }

    public static bool ArraysEqual(short[] a1, short[] a2)
    {
      if (a1 == a2)
        return true;
      if (a1 == null || a2 == null || a1.Length != a2.Length)
        return false;
      for (int index = 0; index < a1.Length; ++index)
      {
        if ((int) a1[index] != (int) a2[index])
          return false;
      }
      return true;
    }

    public static bool ArraysEqual(byte[] a1, byte[] a2)
    {
      if (a1 == a2)
        return true;
      if (a1 == null || a2 == null || a1.Length != a2.Length)
        return false;
      for (int index = 0; index < a1.Length; ++index)
      {
        if ((int) a1[index] != (int) a2[index])
          return false;
      }
      return true;
    }

    public static bool IsValidPath(string path)
    {
      return new Regex("^(([a-zA-Z]\\:)|(\\\\))(\\\\{1}|((\\\\{1})[^\\\\]([^/:*?<>\"|]*))+)$").IsMatch(path);
    }

    public static byte[] ConvertInt16ArrayToByteArray(short[] data)
    {
      if (data == null || data.Length == 0)
        return (byte[]) null;
      MemoryStream memoryStream = new MemoryStream(data.Length * 2);
      for (int index = 0; index < data.Length; ++index)
      {
        byte num1 = Convert.ToByte((int) data[index] & (int) byte.MaxValue);
        byte num2 = Convert.ToByte((int) data[index] >> 8 & (int) byte.MaxValue);
        memoryStream.WriteByte(num1);
        memoryStream.WriteByte(num2);
      }
      return memoryStream.ToArray();
    }

    public static byte[] ConvertLongToByteArray(long obj, int arrayLength)
    {
      byte[] byteArray = new byte[arrayLength];
      for (int index = 0; index < arrayLength; ++index)
        byteArray[index] = (byte) (obj >> index * 8);
      return byteArray;
    }

    public static short[] ConvertByteArrayToInt16Array(byte[] buffer)
    {
      if (buffer == null || buffer.Length < 1)
        return (short[]) null;
      short[] int16Array = new short[buffer.Length / 2];
      int index1 = 0;
      for (int index2 = 0; index2 < buffer.Length; index2 += 2)
      {
        int16Array[index1] = (short) buffer[index2];
        short num = (short) ((int) (short) buffer[index2 + 1] << 8);
        int16Array[index1] |= num;
        ++index1;
      }
      return int16Array;
    }

    public static byte[] ConvertByteArrayToByteArrayEndianess(byte[] buffer, int byteSize)
    {
      if (buffer == null || buffer.Length < 1 || byteSize % 8 != 0 || byteSize < 16 || byteSize > 64)
        return (byte[]) null;
      byte[] byteArrayEndianess = new byte[buffer.Length];
      int index1 = 0;
      int num = byteSize / 8 - 1;
      try
      {
        for (int index2 = 0; index2 < buffer.Length - num; index2 += num + 1)
        {
          byteArrayEndianess[index1] = buffer[index2 + num];
          byteArrayEndianess[index1 + 1] = buffer[index2 + num - 1];
          if (byteSize == 32)
          {
            byteArrayEndianess[index1 + 2] = buffer[index2 + num - 2];
            byteArrayEndianess[index1 + 3] = buffer[index2 + num - 3];
          }
          if (byteSize == 64)
          {
            byteArrayEndianess[index1 + 4] = buffer[index2 + num - 4];
            byteArrayEndianess[index1 + 5] = buffer[index2 + num - 5];
            byteArrayEndianess[index1 + 6] = buffer[index2 + num - 6];
            byteArrayEndianess[index1 + 7] = buffer[index2 + num - 7];
          }
          index1 += num + 1;
        }
      }
      catch (Exception ex)
      {
        throw ex;
      }
      return byteArrayEndianess;
    }

    public static byte[] HexStringToByteArray(string hex)
    {
      hex = hex.Replace(" ", string.Empty);
      hex = hex.Replace("-", string.Empty);
      hex = hex.Replace(".", string.Empty);
      hex = hex.Replace(":", string.Empty);
      int length = hex.Length;
      byte[] byteArray = length % 2 == 0 ? new byte[length / 2] : throw new ArgumentException("Hex-string is invalid!");
      for (int startIndex = 0; startIndex < length; startIndex += 2)
        byteArray[startIndex / 2] = Convert.ToByte(hex.Substring(startIndex, 2), 16);
      return byteArray;
    }

    public static byte[] StringToByteArray(string str) => new ASCIIEncoding().GetBytes(str);

    public static string ByteArrayToString(byte[] arr)
    {
      return new ASCIIEncoding().GetString(arr, 0, arr.Length);
    }

    public static string ByteArrayToHexStringFormated(byte[] arr)
    {
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; index < arr.Length; ++index)
      {
        if (index > 0)
        {
          if ((index & 7) == 0)
            stringBuilder.Append(':');
          else if ((index & 3) == 0)
            stringBuilder.Append('.');
          else
            stringBuilder.Append(' ');
        }
        stringBuilder.Append(arr[index].ToString("x02"));
      }
      return stringBuilder.ToString();
    }

    public static string ByteArrayToHexString(byte[] buffer)
    {
      return buffer == null ? string.Empty : Util.ByteArrayToHexString(buffer, 0, buffer.Length);
    }

    public static string ByteArrayToHexString(byte[] buffer, int startIndex)
    {
      return buffer == null ? string.Empty : Util.ByteArrayToHexString(buffer, startIndex, buffer.Length - startIndex);
    }

    public static string ByteArrayToHexString(byte[] buffer, int startIndex, int length)
    {
      if (buffer == null)
        return string.Empty;
      char[] chArray = new char[length * 2];
      int num1 = 0;
      int index = 0;
      while (num1 < length)
      {
        byte num2 = (byte) ((uint) buffer[startIndex + num1] >> 4);
        chArray[index] = num2 > (byte) 9 ? (char) ((int) num2 + 55) : (char) ((int) num2 + 48);
        byte num3 = (byte) ((uint) buffer[startIndex + num1] & 15U);
        int num4;
        chArray[num4 = index + 1] = num3 > (byte) 9 ? (char) ((int) num3 + 55) : (char) ((int) num3 + 48);
        ++num1;
        index = num4 + 1;
      }
      return new string(chArray, 0, chArray.Length);
    }

    public static bool AreEqual(object expected, object actual)
    {
      if (expected == null && actual == null)
        return true;
      if (expected == null || actual == null || expected.GetType() != actual.GetType())
        return false;
      int num;
      switch (expected)
      {
        case double x1:
          return Util.AreEqual(x1, (double) actual);
        case Decimal x2:
          return Util.AreEqual(x2, (Decimal) actual);
        case DateTime _:
          num = actual is DateTime ? 1 : 0;
          break;
        default:
          num = 0;
          break;
      }
      if (num != 0)
        return ((DateTime) expected - (DateTime) actual).Duration() <= new TimeSpan(9999999L);
      return expected is DateTime? && actual is DateTime? ? (((DateTime?) expected).Value - ((DateTime?) actual).Value).Duration() <= new TimeSpan(9999999L) : expected.Equals(actual);
    }

    public static bool AreEqual(Decimal x, Decimal y, Decimal epsilon) => Math.Abs(x - y) < epsilon;

    public static bool AreEqual(double x, double y) => Math.Abs(x - y) < 1E-07;

    public static bool AreEqual(Decimal x, Decimal y) => Math.Abs(x - y) < 0.0000001M;

    public static bool ByteArrayCompare(List<byte> a1, byte[] a2, int size)
    {
      if (a1.Count < size || a2.Length < size)
        return false;
      for (int index = 0; index < size; ++index)
      {
        if ((int) a1[index] != (int) a2[index])
          return false;
      }
      return true;
    }

    public static bool ByteArrayCompare(byte[] a1, byte[] a2)
    {
      if (a1.Length != a2.Length)
        return false;
      for (int index = 0; index < a1.Length; ++index)
      {
        if ((int) a1[index] != (int) a2[index])
          return false;
      }
      return true;
    }

    public static Dictionary<int, byte[]> Reverse(SortedList values)
    {
      if (values == null)
        return (Dictionary<int, byte[]>) null;
      Dictionary<int, byte[]> dictionary = new Dictionary<int, byte[]>(values.Count);
      for (int index = values.Count - 1; index >= 0; --index)
      {
        int key = (int) values.GetKey(index);
        byte[] byIndex = (byte[]) values.GetByIndex(index);
        dictionary.Add(key, byIndex);
      }
      return dictionary;
    }

    public static string ReverseString(string s)
    {
      char[] charArray = s.ToCharArray();
      Array.Reverse((Array) charArray);
      return new string(charArray);
    }

    public static bool IsValidBCD(string bcdStr)
    {
      foreach (char ch in bcdStr)
      {
        if (ch < '0' || ch > '9')
          return false;
      }
      return true;
    }

    public static long ConvertInt64ToBcdInt64(long value)
    {
      long bcdInt64 = 0;
      for (int index = 0; index < 8; ++index)
      {
        long num = value % 10L;
        bcdInt64 |= num << index * 4;
        value /= 10L;
      }
      return bcdInt64;
    }

    public static uint ConvertUnt32ToBcdUInt32(uint value)
    {
      uint bcdUint32 = 0;
      for (int index = 0; index < 8; ++index)
      {
        uint num = value % 10U;
        bcdUint32 |= num << index * 4;
        value /= 10U;
      }
      return bcdUint32;
    }

    public static long? ConvertBcdInt64ToInt64(byte byte1, byte byte2, byte byte3, byte byte4)
    {
      if (byte1 == byte.MaxValue && byte2 == byte.MaxValue && byte3 == byte.MaxValue && byte4 == byte.MaxValue)
        return new long?();
      return byte1 == (byte) 0 && byte2 == (byte) 0 && byte3 == (byte) 0 && byte4 == (byte) 0 ? new long?(0L) : new long?(Util.ConvertBcdInt64ToInt64((long) byte1 << 24 | (long) byte2 << 16 | (long) byte3 << 8 | (long) byte4));
    }

    public static uint ConvertBcdUInt32ToUInt32(uint bcd)
    {
      uint num = 1;
      uint uint32 = 0;
      for (; bcd > 0U; bcd >>= 4)
      {
        uint32 += (bcd & 15U) * num;
        num *= 10U;
      }
      return uint32;
    }

    public static int ConvertBcdInt32ToInt32(int bcd)
    {
      int num = 1;
      int int32 = 0;
      for (; bcd > 0; bcd >>= 4)
      {
        int32 += (bcd & 15) * num;
        num *= 10;
      }
      return int32;
    }

    public static long ConvertBcdInt64ToInt64(long bcd)
    {
      long num = 1;
      long int64 = 0;
      for (; bcd > 0L; bcd >>= 4)
      {
        int64 += (bcd & 15L) * num;
        num *= 10L;
      }
      return int64;
    }

    public static string[] GetNamesOfEnum(System.Type enumType)
    {
      FieldInfo[] fields = enumType.GetFields(BindingFlags.Static | BindingFlags.Public);
      List<string> stringList = new List<string>();
      if (fields != null)
      {
        foreach (FieldInfo fieldInfo in fields)
          stringList.Add(fieldInfo.Name);
      }
      return stringList.ToArray();
    }

    public static bool IsValidTimePoint(
      DateTime date,
      DateTime start,
      DateTime end,
      bool ignoreTime)
    {
      if (ignoreTime)
      {
        start = new DateTime(start.Year, start.Month, start.Day, 0, 0, 0, DateTimeKind.Utc);
        end = new DateTime(end.Year, end.Month, end.Day, 23, 59, 59, DateTimeKind.Utc);
      }
      return start <= date && date <= end;
    }

    public static byte[] Combine(byte[] a, byte[] b)
    {
      byte[] dst = new byte[a.Length + b.Length];
      Buffer.BlockCopy((Array) a, 0, (Array) dst, 0, a.Length);
      Buffer.BlockCopy((Array) b, 0, (Array) dst, a.Length, b.Length);
      return dst;
    }

    public static uint GetRandomUInt32(uint min, uint max)
    {
      double num = Util.random.NextDouble();
      return (uint) ((double) (max - min) * num + (double) min);
    }

    public static int GetRandomInteger(int min, int max)
    {
      double num = Util.random.NextDouble();
      return (int) ((double) (max - min) * num) + min;
    }

    public static double GetRandomDouble(double min, double max)
    {
      double num = Util.random.NextDouble();
      return (max - min) * num + min;
    }

    public static Decimal GetRandomDecimal(double min, double max)
    {
      double num = Util.random.NextDouble();
      return Convert.ToDecimal((max - min) * num + min);
    }

    public static uint GetSecureRandomUInt32()
    {
      RandomNumberGenerator randomNumberGenerator = (RandomNumberGenerator) new RNGCryptoServiceProvider();
      byte[] data = new byte[4];
      randomNumberGenerator.GetBytes(data);
      return BitConverter.ToUInt32(data, 0);
    }

    public static ulong GetSecureRandomUInt64()
    {
      RandomNumberGenerator randomNumberGenerator = (RandomNumberGenerator) new RNGCryptoServiceProvider();
      byte[] data = new byte[8];
      randomNumberGenerator.GetBytes(data);
      return BitConverter.ToUInt64(data, 0);
    }

    public static bool IsNumeric(object expression)
    {
      if (expression == null)
        return false;
      if (string.IsNullOrEmpty(expression.ToString()))
        return false;
      try
      {
        double.Parse(Convert.ToString(expression), NumberStyles.Any, (IFormatProvider) NumberFormatInfo.InvariantInfo);
        return true;
      }
      catch
      {
        return false;
      }
    }

    public static bool IsInteger(string num) => new Regex("^\\d+$").Match(num).Success;

    public static bool IsIP(string IP)
    {
      return Regex.IsMatch(IP, "\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\\b");
    }

    public static bool TryParseToUInt32(string strValue, out uint value)
    {
      return uint.TryParse(strValue, out value);
    }

    public static bool TryParseToDateTime(string strValue, out DateTime value)
    {
      value = DateTime.MinValue;
      try
      {
        value = DateTime.Parse(strValue);
        return true;
      }
      catch
      {
        return false;
      }
    }

    public static bool TryParseToInt64(string strValue, out long value)
    {
      return long.TryParse(strValue, out value);
    }

    public static bool TryParseToInt32(string strValue, out int value)
    {
      return int.TryParse(strValue, out value);
    }

    public static bool TryParseToUInt16(string strValue, out ushort value)
    {
      return ushort.TryParse(strValue, out value);
    }

    public static bool TryParseToByte(string strValue, out byte value)
    {
      return byte.TryParse(strValue, out value);
    }

    public static bool TryParseToInt16(string strValue, out short value)
    {
      return short.TryParse(strValue, out value);
    }

    public static int RssiToRssi_dBm(byte rssi)
    {
      int num = (int) rssi;
      if (rssi >= (byte) 128)
        num -= 256;
      return num / 2 - 74;
    }

    public static int RoundDown(int dividend, int divisor)
    {
      return (int) Math.Floor((double) (dividend / divisor));
    }

    public static int RoundUp(int dividend, int divisor)
    {
      int num = dividend / divisor;
      return dividend % divisor == 0 || divisor > 0 != dividend > 0 ? num : num + 1;
    }

    public static int GetStableHash(string s)
    {
      uint num1 = 0;
      foreach (byte num2 in Encoding.Unicode.GetBytes(s))
      {
        uint num3 = num1 + (uint) num2;
        uint num4 = num3 + (num3 << 10);
        num1 = num4 ^ num4 >> 6;
      }
      uint num5 = num1 + (num1 << 3);
      uint num6 = num5 ^ num5 >> 11;
      return (int) ((num6 + (num6 << 15)) % 100000000U);
    }

    public static string ElapsedToString(TimeSpan elapsed)
    {
      if ((long) elapsed.TotalHours > 0L)
        return string.Format("{0:0}h {1:0}m {2:0}s {3:0}ms", (object) elapsed.TotalHours, (object) elapsed.Minutes, (object) elapsed.Seconds, (object) elapsed.Milliseconds);
      if ((long) elapsed.TotalMinutes > 0L)
        return string.Format("{0:0}m {1:0}s {2:0}ms", (object) elapsed.TotalMinutes, (object) elapsed.Seconds, (object) elapsed.Milliseconds);
      if ((long) elapsed.TotalSeconds > 0L)
        return string.Format("{0:0}s {1:0}ms", (object) elapsed.TotalSeconds, (object) elapsed.Milliseconds);
      return (long) elapsed.TotalMilliseconds > 0L ? string.Format("{0:0}ms", (object) elapsed.TotalMilliseconds) : string.Empty;
    }

    public static byte[] ImageToByte(Image img)
    {
      return (byte[]) new ImageConverter().ConvertTo((object) img, typeof (byte[]));
    }

    public static Image ByteToImage(byte[] img)
    {
      return (Image) new ImageConverter().ConvertFrom((object) img);
    }

    public static string[] RemoveEmptyEntries(string[] values)
    {
      if (values == null)
        return (string[]) null;
      List<string> stringList = new List<string>();
      foreach (string str in values)
      {
        if (!string.IsNullOrEmpty(str))
          stringList.Add(str);
      }
      return stringList.ToArray();
    }

    public static bool IsEmptyString(string str) => str == null || str == string.Empty;

    public static bool IsEmptyString(object obj)
    {
      return obj == null || obj == DBNull.Value || obj.ToString() == string.Empty;
    }

    public static string ToString(string str) => str == null ? string.Empty : str;

    public static string ToString(object obj)
    {
      return obj == null || obj == DBNull.Value ? string.Empty : obj.ToString();
    }

    public static object ToDBString(string str)
    {
      return str == null || str == string.Empty ? (object) DBNull.Value : (object) str;
    }

    public static object ToDBString(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return (object) DBNull.Value;
      string str = obj.ToString();
      return str == string.Empty ? (object) DBNull.Value : (object) str;
    }

    public static byte[] ToBinary(object obj)
    {
      return obj == null || obj == DBNull.Value ? new byte[0] : (byte[]) obj;
    }

    public static object ToDBBinary(object obj)
    {
      return obj == null || obj == DBNull.Value ? (object) DBNull.Value : obj;
    }

    public static object ToDBBinary(byte[] aby)
    {
      return aby == null || aby.Length == 0 ? (object) DBNull.Value : (object) aby;
    }

    public static DateTime ToDateTime(DateTime dt) => dt;

    public static DateTime ToDateTime(object obj)
    {
      return obj == null || obj == DBNull.Value || !(obj.GetType() == System.Type.GetType("System.DateTime")) && !Information.IsDate(obj) ? DateTime.MinValue : Convert.ToDateTime(obj);
    }

    public static string ToDateString(object obj)
    {
      return obj == null || obj == DBNull.Value || !(obj.GetType() == System.Type.GetType("System.DateTime")) && !Information.IsDate(obj) ? string.Empty : Convert.ToDateTime(obj).ToShortDateString();
    }

    public static string ToDateString(DateTime dt)
    {
      return dt == DateTime.MinValue ? string.Empty : dt.ToShortDateString();
    }

    public static string ToTimeString(DateTime dt)
    {
      return dt == DateTime.MinValue ? string.Empty : dt.ToShortTimeString();
    }

    public static object ToDBDateTime(DateTime dt)
    {
      return dt == DateTime.MinValue ? (object) DBNull.Value : (object) dt;
    }

    public static object ToDBDateTime(object obj)
    {
      if (obj == null || obj == DBNull.Value || !Information.IsDate(obj))
        return (object) DBNull.Value;
      DateTime dateTime = Convert.ToDateTime(obj);
      return dateTime == DateTime.MinValue ? (object) DBNull.Value : (object) dateTime;
    }

    public static bool IsEmptyGuid(Guid g) => g == Guid.Empty;

    public static bool IsEmptyGuid(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return true;
      string s = obj.ToString();
      return s == string.Empty || XmlConvert.ToGuid(s) == Guid.Empty;
    }

    public static Guid ToGuid(Guid g) => g;

    public static Guid ToGuid(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return Guid.Empty;
      if (obj.GetType() == System.Type.GetType("System.Guid"))
        return (Guid) obj;
      string s = obj.ToString();
      return s == string.Empty ? Guid.Empty : XmlConvert.ToGuid(s);
    }

    public static object ToDBGuid(Guid g) => g == Guid.Empty ? (object) DBNull.Value : (object) g;

    public static object ToDBGuid(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return (object) DBNull.Value;
      if (obj.GetType() == System.Type.GetType("System.Guid"))
        return obj;
      string s = obj.ToString();
      if (s == string.Empty)
        return (object) DBNull.Value;
      Guid guid = XmlConvert.ToGuid(s);
      return guid == Guid.Empty ? (object) DBNull.Value : (object) guid;
    }

    public static int ToInteger(int n) => n;

    public static int ToInteger(object obj) => Util.ToInteger(obj, 0);

    public static int ToInteger(object obj, int defaultValue)
    {
      if (obj == null || obj == DBNull.Value)
        return defaultValue;
      if (obj.GetType() == System.Type.GetType("System.Int32"))
        return Convert.ToInt32(obj);
      if (obj.GetType() == System.Type.GetType("System.Boolean"))
        return Convert.ToBoolean(obj) ? 1 : 0;
      if (obj.GetType() == System.Type.GetType("System.Single"))
        return Convert.ToInt32(Math.Floor((double) (float) obj));
      string s = obj.ToString();
      return s == string.Empty ? defaultValue : int.Parse(s, NumberStyles.Any);
    }

    public static long ToLong(long n) => n;

    public static long ToLong(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return 0;
      System.Type type = obj.GetType();
      if (type == typeof (long) || type == typeof (bool) || type == typeof (double))
        return Convert.ToInt64(obj);
      string s = obj.ToString();
      return s == string.Empty ? 0L : long.Parse(s, NumberStyles.Any);
    }

    public static short ToShort(short n) => n;

    public static short ToShort(int n) => (short) n;

    public static short ToShort(long n) => (short) n;

    public static short ToShort(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return 0;
      if (obj.GetType() == System.Type.GetType("System.Int32") || obj.GetType() == System.Type.GetType("System.Int16"))
        return Convert.ToInt16(obj);
      string s = obj.ToString();
      return s == string.Empty ? (short) 0 : short.Parse(s, NumberStyles.Any);
    }

    public static object ToDBInteger(int n) => (object) n;

    public static object ToDBInteger(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return (object) DBNull.Value;
      if (obj.GetType() == System.Type.GetType("System.Int32"))
        return obj;
      string str = obj.ToString();
      return str == string.Empty || !Information.IsNumeric((object) str) ? (object) DBNull.Value : (object) int.Parse(str, NumberStyles.Any);
    }

    public static float ToFloat(float f) => f;

    public static float ToFloat(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return 0.0f;
      if (obj.GetType() == System.Type.GetType("System.Double"))
        return Convert.ToSingle(obj);
      string str = obj.ToString();
      return str == string.Empty || !Information.IsNumeric((object) str) ? 0.0f : float.Parse(str, NumberStyles.Any);
    }

    public static float ToFloat(string str)
    {
      return str == null || str == string.Empty || !Information.IsNumeric((object) str) ? 0.0f : float.Parse(str, NumberStyles.Any);
    }

    public static object ToDBFloat(float f) => (object) f;

    public static object ToDBFloat(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return (object) DBNull.Value;
      if (obj.GetType() == System.Type.GetType("System.Double"))
        return obj;
      string str = obj.ToString();
      return str == string.Empty || !Information.IsNumeric((object) str) ? (object) DBNull.Value : (object) float.Parse(str, NumberStyles.Any);
    }

    public static double ToDouble(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return 0.0;
      if (obj.GetType() == typeof (double) || obj.GetType() == typeof (Decimal))
        return Convert.ToDouble(obj);
      string str = obj.ToString();
      return str == string.Empty || !Information.IsNumeric((object) str) ? 0.0 : double.Parse(str, NumberStyles.Any);
    }

    public static double ToDouble(string str)
    {
      return str == null || str == string.Empty || !Information.IsNumeric((object) str) ? 0.0 : double.Parse(str, NumberStyles.Any);
    }

    public static Decimal ToDecimal(Decimal d) => d;

    public static Decimal ToDecimal(double d) => Convert.ToDecimal(d);

    public static Decimal ToDecimal(float f) => Convert.ToDecimal(f);

    public static Decimal ToDecimal(long l) => Convert.ToDecimal(l);

    public static Decimal ToDecimal(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return 0M;
      if (obj.GetType() == System.Type.GetType("System.Decimal"))
        return Convert.ToDecimal(obj);
      string s = obj.ToString();
      return s == string.Empty ? 0M : Decimal.Parse(s, NumberStyles.Any);
    }

    public static object ToDBDecimal(Decimal d) => (object) d;

    public static object ToDBDecimal(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return (object) DBNull.Value;
      if (obj.GetType() == System.Type.GetType("System.Decimal"))
        return obj;
      string str = obj.ToString();
      return str == string.Empty || !Information.IsNumeric((object) str) ? (object) DBNull.Value : (object) Decimal.Parse(str, NumberStyles.Any);
    }

    public static bool ToBoolean(bool b) => b;

    public static bool ToBoolean(int n) => n != 0;

    public static bool ToBoolean(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return false;
      if (obj.GetType() == System.Type.GetType("System.Int32"))
        return Convert.ToInt32(obj) != 0;
      if (obj.GetType() == System.Type.GetType("System.SByte"))
        return Convert.ToSByte(obj) != (sbyte) 0;
      if (obj.GetType() == System.Type.GetType("System.Int16"))
        return Convert.ToInt16(obj) != (short) 0;
      if (obj.GetType() == System.Type.GetType("System.Decimal"))
        return !(Convert.ToDecimal(obj) == 0M);
      if (obj.GetType() == System.Type.GetType("System.String"))
      {
        string lower = obj.ToString().ToLower();
        return lower == "true" || lower == "on" || lower == "1";
      }
      return !(obj.GetType() != System.Type.GetType("System.Boolean")) && bool.Parse(obj.ToString());
    }

    public static object ToDBBoolean(bool b) => (object) (b ? 1 : 0);

    public static object ToDBBoolean(object obj)
    {
      if (obj == null || obj == DBNull.Value)
        return (object) DBNull.Value;
      return obj.GetType() != System.Type.GetType("System.Boolean") ? (object) false : (object) (Convert.ToBoolean(obj) ? 1 : 0);
    }

    public static ulong TwoUInt32ToUInt64(uint left, uint right)
    {
      return (ulong) left << 32 | (ulong) right;
    }

    public static void SaveToFileBinary(string path, object obj)
    {
      using (Stream serializationStream = (Stream) new FileStream(path, FileMode.Create))
        new BinaryFormatter().Serialize(serializationStream, obj);
    }

    public static object LoadFromFileBinary(string path)
    {
      using (Stream serializationStream = (Stream) new FileStream(path, FileMode.Open))
        return new BinaryFormatter().Deserialize(serializationStream);
    }

    public static bool IsValidTimePoint(int year, int month, int day, int hour, int minute)
    {
      return year >= 0 && year <= 2060 && month >= 1 && month <= 12 && day >= 1 && day <= 31 && hour >= 0 && hour <= 24 && minute >= 0 && minute <= 60;
    }

    public static DateTime? ConvertToDateTime_MBus_CP32_TypeF(byte[] buffer, int offset)
    {
      if (((int) buffer[offset] & 128) == 128)
        return new DateTime?();
      int minute = (int) buffer[offset] & 63;
      if (minute > 59)
        return new DateTime?();
      int hour = (int) buffer[offset + 1] & 31;
      if (hour > 23)
        return new DateTime?();
      int day = (int) buffer[offset + 2] & 31;
      if (day < 1 || day > 31)
        return new DateTime?();
      int month = (int) buffer[offset + 3] & 15;
      if (month < 1 || month > 12)
        return new DateTime?();
      int num = (int) buffer[offset + 2] >> 5 | ((int) buffer[offset + 3] & 240) >> 1;
      if (num > 99)
        return new DateTime?();
      int year = num + 2000;
      try
      {
        return new DateTime?(new DateTime(year, month, day, hour, minute, 0));
      }
      catch
      {
        return new DateTime?();
      }
    }

    public static DateTime? ConvertToDate_MBus_CP16_TypeG(byte[] buffer, int offset)
    {
      int day = (int) buffer[offset] & 31;
      if (day < 1 || day > 31)
        return new DateTime?();
      int month = (int) buffer[offset + 1] & 15;
      if (month < 1 || month > 12)
        return new DateTime?();
      int num = (int) buffer[offset] >> 5 | ((int) buffer[offset + 1] & 240) >> 1;
      if (num > 99)
        return new DateTime?();
      int year = num + 2000;
      try
      {
        return new DateTime?(new DateTime(year, month, day));
      }
      catch
      {
        return new DateTime?();
      }
    }

    public static byte[] ConvertToMBus_CP16_TypeG_FromDate(DateTime myDate)
    {
      byte[] numArray = new byte[2];
      ushort num = (ushort) ((uint) (ushort) ((uint) (ushort) (0U | (uint) (ushort) myDate.Day) | (uint) (ushort) ((uint) (ushort) myDate.Month << 8)) | (uint) (ushort) ((uint) (ushort) (myDate.Year - 2000) << 5));
      numArray = BitConverter.GetBytes(num);
      try
      {
        return BitConverter.GetBytes(num);
      }
      catch
      {
        return (byte[]) null;
      }
    }

    public static bool TryParse(string s, out int result) => int.TryParse(s, out result);

    public static bool TryParse(
      string s,
      NumberStyles numberStyles,
      IFormatProvider provider,
      out int result)
    {
      return int.TryParse(s, numberStyles, provider, out result);
    }

    public static bool TryParse(string s, out byte result) => byte.TryParse(s, out result);

    public static bool TryParse(string s, out short result) => short.TryParse(s, out result);

    public static bool TryParse(string s, out long result) => long.TryParse(s, out result);

    public static bool TryParse(string s, out Decimal result) => Decimal.TryParse(s, out result);

    public static bool TryParse(string s, out float result) => float.TryParse(s, out result);

    public static bool TryParse(string s, out double result) => double.TryParse(s, out result);

    public static bool TryParse(string s, out sbyte result) => sbyte.TryParse(s, out result);

    public static bool TryParse(string s, out uint result) => uint.TryParse(s, out result);

    public static bool TryParse(
      string s,
      NumberStyles numberStyles,
      IFormatProvider provider,
      out uint result)
    {
      return uint.TryParse(s, numberStyles, provider, out result);
    }

    public static bool TryParse(string s, out ulong result) => ulong.TryParse(s, out result);

    public static bool TryParse(string s, out ushort result) => ushort.TryParse(s, out result);

    public static bool TryParse(string s, out DateTime result) => DateTime.TryParse(s, out result);

    public static bool TryParse(string s, out bool result) => bool.TryParse(s, out result);

    public static bool IsNet45OrNewer()
    {
      return System.Type.GetType("System.Reflection.ReflectionContext", false) != (System.Type) null;
    }

    public static bool checkDotNetVersionOrLater(string version)
    {
      int releaseKeyFromRegistry = Util.getDotNetReleaseKeyFromRegistry();
      return Util.getDotNetReleaseKeyFromString(version) <= releaseKeyFromRegistry;
    }

    public static string getDotNetVersion()
    {
      string dotNetVersion = string.Empty;
      RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey("SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\");
      if (registryKey != null && registryKey.GetValue("Release") != null)
        dotNetVersion = Util.CheckFor45PlusVersion((int) registryKey.GetValue("Release"));
      return dotNetVersion;
    }

    private static string CheckFor45PlusVersion(int releaseKey)
    {
      if (releaseKey >= 533320)
        return "4.8.1 or later";
      if (releaseKey >= 528040)
        return "4.8";
      if (releaseKey >= 461808)
        return "4.7.2";
      if (releaseKey >= 461308)
        return "4.7.1";
      if (releaseKey >= 460798)
        return "4.7";
      if (releaseKey >= 394802)
        return "4.6.2";
      if (releaseKey >= 394254)
        return "4.6.1";
      if (releaseKey >= 393295)
        return "4.6";
      if (releaseKey >= 379893)
        return "4.5.2";
      if (releaseKey >= 378675)
        return "4.5.1";
      return releaseKey >= 378389 ? "4.5" : string.Empty;
    }

    private static int getDotNetReleaseKeyFromRegistry()
    {
      RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey("SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\");
      return registryKey != null && registryKey.GetValue("Release") != null ? (int) registryKey.GetValue("Release") : 0;
    }

    private static int getDotNetReleaseKeyFromString(string dotNetVersion)
    {
      if (dotNetVersion.Contains("4.8.1"))
        return 533320;
      if (dotNetVersion.Contains("4.8"))
        return 528040;
      if (dotNetVersion.Contains("4.7.2"))
        return 461808;
      if (dotNetVersion.Contains("4.7.1"))
        return 461308;
      if (dotNetVersion.Contains("4.7"))
        return 460798;
      if (dotNetVersion.Contains("4.6.2"))
        return 394802;
      if (dotNetVersion.Contains("4.6.1"))
        return 394254;
      if (dotNetVersion.Contains("4.6"))
        return 393295;
      if (dotNetVersion.Contains("4.5.2"))
        return 379893;
      if (dotNetVersion.Contains("4.5.1"))
        return 378675;
      return dotNetVersion.Contains("4.5") ? 378389 : 0;
    }

    public static string ArrayToString(List<long> list, string separator)
    {
      if (list == null)
        return string.Empty;
      StringBuilder stringBuilder = new StringBuilder();
      foreach (long num in list)
        stringBuilder.Append(num.ToString()).Append(separator);
      return stringBuilder.ToString();
    }

    public static ulong SwapBytes(ulong x)
    {
      x = x >> 32 | x << 32;
      x = (x & 18446462603027742720UL) >> 16 | (ulong) (((long) x & 281470681808895L) << 16);
      return (x & 18374966859414961920UL) >> 8 | (ulong) (((long) x & 71777214294589695L) << 8);
    }

    public static uint SwapBytes(uint x)
    {
      x = x >> 16 | x << 16;
      return (x & 4278255360U) >> 8 | (uint) (((int) x & 16711935) << 8);
    }

    public static ushort SwapBytes(ushort x)
    {
      return (ushort) (((int) x & 65280) >> 8 | ((int) x & (int) byte.MaxValue) << 8);
    }

    public static DateTime? ConvertToDateTime_SystemTime48(byte[] buffer, int startIndex = 0)
    {
      int num1 = startIndex;
      byte[] numArray1 = buffer;
      int index1 = num1;
      int num2 = index1 + 1;
      byte num3 = numArray1[index1];
      byte[] numArray2 = buffer;
      int index2 = num2;
      int num4 = index2 + 1;
      byte month = numArray2[index2];
      byte[] numArray3 = buffer;
      int index3 = num4;
      int num5 = index3 + 1;
      byte day = numArray3[index3];
      byte[] numArray4 = buffer;
      int index4 = num5;
      int num6 = index4 + 1;
      byte hour = numArray4[index4];
      byte[] numArray5 = buffer;
      int index5 = num6;
      int num7 = index5 + 1;
      byte minute = numArray5[index5];
      byte[] numArray6 = buffer;
      int index6 = num7;
      int num8 = index6 + 1;
      byte second = numArray6[index6];
      if (month == (byte) 0 || day == (byte) 0)
        return new DateTime?();
      try
      {
        return new DateTime?(new DateTime(2000 + (int) num3, (int) month, (int) day, (int) hour, (int) minute, (int) second));
      }
      catch
      {
        return new DateTime?();
      }
    }

    public class AlphanumComparator : IComparer<string>
    {
      public int Compare(string s1, string s2)
      {
        if (s1 == null || s2 == null)
          return 0;
        int length1 = s1.Length;
        int length2 = s2.Length;
        int index1 = 0;
        int index2 = 0;
        while (index1 < length1 && index2 < length2)
        {
          char c1 = s1[index1];
          char c2 = s2[index2];
          char[] chArray1 = new char[length1];
          int num1 = 0;
          char[] chArray2 = new char[length2];
          int num2 = 0;
          do
          {
            chArray1[num1++] = c1;
            ++index1;
            if (index1 < length1)
              c1 = s1[index1];
            else
              break;
          }
          while (char.IsDigit(c1) == char.IsDigit(chArray1[0]));
          do
          {
            chArray2[num2++] = c2;
            ++index2;
            if (index2 < length2)
              c2 = s2[index2];
            else
              break;
          }
          while (char.IsDigit(c2) == char.IsDigit(chArray2[0]));
          string s = new string(chArray1);
          string str = new string(chArray2);
          int num3 = !char.IsDigit(chArray1[0]) || !char.IsDigit(chArray2[0]) ? s.CompareTo(str) : int.Parse(s).CompareTo(int.Parse(str));
          if (num3 != 0)
            return num3;
        }
        return length1 - length2;
      }
    }
  }
}


--- ValueEventHandler`1.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ValueEventHandler`1
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public delegate void ValueEventHandler<T>(object sender, T e) where T : IComparable, IFormattable, IConvertible, IComparable<T>, IEquatable<T>;
}


--- ValueFilter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ValueFilter
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum ValueFilter
  {
    None,
    OnlyOneValueSetPerDay,
    OnlyOneValueSetPerMonth,
    OnlyOneValueSetPerYear,
  }
}


--- ValueIdent.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ValueIdent
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Resources;
using System.Text;

#nullable disable
namespace ZR_ClassLibrary
{
  public static class ValueIdent
  {
    private static ResourceManager valueIdentResource;
    private static SortedList<long, string> valueIdPart_PhysicalQuantityEnumToTranslation = new SortedList<long, string>();
    private static SortedList<long, string> valueIdPart_MeterTypeEnumToTranslation = new SortedList<long, string>();
    private static SortedList<long, string> valueIdPart_CalculationEnumToTranslation = new SortedList<long, string>();
    private static SortedList<long, string> valueIdPart_CalculationStartEnumToTranslation = new SortedList<long, string>();
    private static SortedList<long, string> valueIdPart_StorageIntervalEnumToTranslation = new SortedList<long, string>();
    private static SortedList<long, string> valueIdPart_CreationEnumToTranslation = new SortedList<long, string>();
    private static SortedList<long, string> valueIdPart_IndexEnumToTranslation = new SortedList<long, string>();
    private static SortedList<long, string> valueIdPart_IndexErrorEnumToTranslation = new SortedList<long, string>();
    private static SortedList<long, string> valueIdPart_IndexWarningEnumToTranslation = new SortedList<long, string>();
    private static SortedList<long, string> valueIdPart_IndexInfoEnumToTranslation = new SortedList<long, string>();
    private static SortedList<long, string> generatedValueIdTranslations = new SortedList<long, string>();
    private static SortedList<long, string> generatedHumanReadableValueIdTranslations = new SortedList<long, string>();
    private static SortedList<long, string> generatedValueId = new SortedList<long, string>();
    private static SortedList<long, string> generatedHumanReadableValueId = new SortedList<long, string>();

    static ValueIdent()
    {
      ValueIdent.valueIdentResource = new ResourceManager("ZR_ClassLibrary.ValueIdentTranslation", typeof (ValueIdent).Assembly);
      ValueIdent.FillSortedList(ValueIdent.valueIdPart_PhysicalQuantityEnumToTranslation, typeof (ValueIdent.ValueIdPart_PhysicalQuantity));
      ValueIdent.FillSortedList(ValueIdent.valueIdPart_MeterTypeEnumToTranslation, typeof (ValueIdent.ValueIdPart_MeterType));
      ValueIdent.FillSortedList(ValueIdent.valueIdPart_CalculationEnumToTranslation, typeof (ValueIdent.ValueIdPart_Calculation));
      ValueIdent.FillSortedList(ValueIdent.valueIdPart_CalculationStartEnumToTranslation, typeof (ValueIdent.ValueIdPart_CalculationStart));
      ValueIdent.FillSortedList(ValueIdent.valueIdPart_StorageIntervalEnumToTranslation, typeof (ValueIdent.ValueIdPart_StorageInterval));
      ValueIdent.FillSortedList(ValueIdent.valueIdPart_CreationEnumToTranslation, typeof (ValueIdent.ValueIdPart_Creation));
      ValueIdent.FillSortedList(ValueIdent.valueIdPart_IndexEnumToTranslation, typeof (ValueIdent.ValueIdPart_Index));
      ValueIdent.FillSortedList(ValueIdent.valueIdPart_IndexErrorEnumToTranslation, typeof (ValueIdent.ValueIdentError));
      ValueIdent.FillSortedList(ValueIdent.valueIdPart_IndexWarningEnumToTranslation, typeof (ValueIdent.ValueIdentWarning));
      ValueIdent.FillSortedList(ValueIdent.valueIdPart_IndexInfoEnumToTranslation, typeof (ValueIdent.ValueIdentInfo));
    }

    public static string GetUnit(long valueIdent)
    {
      return ValueIdent.GetUnit((ValueIdent.ValueIdPart_PhysicalQuantity) (valueIdent & 63L));
    }

    public static string GetUnit(
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity)
    {
      long num = (long) physicalQuantity;
      if ((ulong) num <= 26UL)
      {
        switch ((uint) num)
        {
          case 0:
            return "";
          case 1:
            return "m\u00B3";
          case 2:
            return "MWh";
          case 3:
            return "m\u00B3/h";
          case 4:
            return "MW";
          case 5:
            return "kg";
          case 6:
            return "°C";
          case 7:
            return "°K";
          case 8:
            return "HCA";
          case 9:
            return "HCAW";
          case 10:
            return "1/Imp";
          case 11:
            return "MWh";
          case 12:
            return "°C";
          case 13:
            return "°C";
          case 14:
            return "h";
          case 15:
            return "";
          case 16:
            return "";
          case 17:
            return "";
          case 18:
            return "dBm";
          case 19:
            return "m\u00B3";
          case 20:
            return "%";
          case 21:
            return "";
          case 22:
            return "";
          case 23:
            return "m\u00B3";
          case 24:
            return "L/Imp";
          case 25:
            return "m\u00B3";
          case 26:
            return "";
        }
      }
      throw new ArgumentException("Illegal unit part on ValueID");
    }

    public static string GetUnit(byte physicalQuantityEnumIndex)
    {
      return ValueIdent.GetUnit((long) physicalQuantityEnumIndex);
    }

    public static long GetValueIdent(
      byte valueIdentIndex,
      byte physicalQuantity,
      byte meterType,
      byte calculation,
      byte calculationStart,
      byte storageInterval,
      byte creation)
    {
      return (long) calculation * 4096L + (long) calculationStart * 65536L + (long) creation * 268435456L + (long) meterType * 64L + (long) physicalQuantity + (long) storageInterval * 4194304L + (long) valueIdentIndex * 2147483648L;
    }

    public static List<byte> ValueIdPart_Get<T>(List<long> valueIdents)
    {
      if (valueIdents == null)
        return (List<byte>) null;
      SortedList<byte, T> sortedList = new SortedList<byte, T>();
      foreach (long valueIdent in valueIdents)
      {
        T obj = ValueIdent.ValueIdPart_Get<T>(valueIdent);
        long int64 = Convert.ToInt64((object) obj);
        if (typeof (T) == typeof (ValueIdent.ValueIdPart_Calculation))
          int64 /= 4096L;
        else if (typeof (T) == typeof (ValueIdent.ValueIdPart_CalculationStart))
          int64 /= 65536L;
        else if (typeof (T) == typeof (ValueIdent.ValueIdPart_Creation))
          int64 /= 268435456L;
        else if (typeof (T) == typeof (ValueIdent.ValueIdPart_MeterType))
          int64 /= 64L;
        else if (typeof (T) == typeof (ValueIdent.ValueIdPart_PhysicalQuantity))
          int64 /= 1L;
        else if (typeof (T) == typeof (ValueIdent.ValueIdPart_StorageInterval))
          int64 /= 4194304L;
        else if (typeof (T) == typeof (ValueIdent.ValueIdPart_Index))
          int64 /= 2147483648L;
        byte key = (byte) int64;
        if (!sortedList.ContainsKey(key))
          sortedList.Add(key, obj);
      }
      return new List<byte>((IEnumerable<byte>) sortedList.Keys);
    }

    public static long GetValueIdForValueEnum(
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity,
      ValueIdent.ValueIdPart_MeterType meterType,
      ValueIdent.ValueIdPart_Calculation calculation,
      ValueIdent.ValueIdPart_CalculationStart calculationStart,
      ValueIdent.ValueIdPart_StorageInterval storageInterval,
      ValueIdent.ValueIdPart_Creation creation,
      object index)
    {
      try
      {
        long valueId = (long) (calculation + (long) calculationStart + (long) physicalQuantity + (long) meterType + (long) storageInterval + (long) creation + (long) index);
        ValueIdent.IsValid(valueId, true);
        return valueId;
      }
      catch (Exception ex)
      {
        throw new Exception("Try to create illegal ValueID", ex);
      }
    }

    public static T ValueIdPart_Get<T>(long valueId)
    {
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = (ValueIdent.ValueIdPart_PhysicalQuantity) (valueId & 63L);
      if (typeof (T) == typeof (ValueIdent.ValueIdPart_PhysicalQuantity))
        return Enum.IsDefined(typeof (ValueIdent.ValueIdPart_PhysicalQuantity), (object) physicalQuantity) ? (T) (Enum) physicalQuantity : throw new OverflowException("ValueIdPart_PhysicalQuantity");
      if (typeof (T) == typeof (ValueIdent.ValueIdPart_MeterType))
      {
        ValueIdent.ValueIdPart_MeterType valueIdPartMeterType = (ValueIdent.ValueIdPart_MeterType) (valueId & 4032L);
        return Enum.IsDefined(typeof (ValueIdent.ValueIdPart_MeterType), (object) valueIdPartMeterType) ? (T) (Enum) valueIdPartMeterType : throw new OverflowException("ValueIdPart_PhysicalQuantity");
      }
      if (typeof (T) == typeof (ValueIdent.ValueIdPart_Calculation))
      {
        ValueIdent.ValueIdPart_Calculation idPartCalculation = (ValueIdent.ValueIdPart_Calculation) (valueId & 61440L);
        return Enum.IsDefined(typeof (ValueIdent.ValueIdPart_Calculation), (object) idPartCalculation) ? (T) (Enum) idPartCalculation : throw new OverflowException("ValueIdPart_Calculation");
      }
      if (typeof (T) == typeof (ValueIdent.ValueIdPart_CalculationStart))
      {
        ValueIdent.ValueIdPart_CalculationStart calculationStart = (ValueIdent.ValueIdPart_CalculationStart) (valueId & 4128768L);
        return Enum.IsDefined(typeof (ValueIdent.ValueIdPart_CalculationStart), (object) calculationStart) ? (T) (Enum) calculationStart : throw new OverflowException("ValueIdPart_CalculationStart");
      }
      if (typeof (T) == typeof (ValueIdent.ValueIdPart_StorageInterval))
      {
        ValueIdent.ValueIdPart_StorageInterval partStorageInterval = (ValueIdent.ValueIdPart_StorageInterval) (valueId & 264241152L);
        return Enum.IsDefined(typeof (ValueIdent.ValueIdPart_StorageInterval), (object) partStorageInterval) ? (T) (Enum) partStorageInterval : throw new OverflowException("ValueIdPart_StorageInterval");
      }
      if (typeof (T) == typeof (ValueIdent.ValueIdPart_Creation))
      {
        ValueIdent.ValueIdPart_Creation valueIdPartCreation = (ValueIdent.ValueIdPart_Creation) (valueId & 1879048192L);
        return Enum.IsDefined(typeof (ValueIdent.ValueIdPart_Creation), (object) valueIdPartCreation) ? (T) (Enum) valueIdPartCreation : throw new OverflowException("ValueIdPart_Creation");
      }
      switch (physicalQuantity)
      {
        case ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber:
          if (!(typeof (T) == typeof (ValueIdent.ValueIdentError)))
            throw new Exception("Illegal ValueIdPart_PhysicalQuantity for ValueIdentError");
          ValueIdent.ValueIdentError valueIdentError = (ValueIdent.ValueIdentError) (valueId & 8793945538560L);
          return Enum.IsDefined(typeof (ValueIdent.ValueIdentError), (object) valueIdentError) ? (T) (Enum) valueIdentError : throw new OverflowException("ValueIdentError");
        case ValueIdent.ValueIdPart_PhysicalQuantity.WarningNumber:
          if (!(typeof (T) == typeof (ValueIdent.ValueIdentWarning)))
            throw new Exception("Illegal ValueIdPart_PhysicalQuantity for ValueIdentWarning");
          ValueIdent.ValueIdentWarning valueIdentWarning = (ValueIdent.ValueIdentWarning) (valueId & 8793945538560L);
          return Enum.IsDefined(typeof (ValueIdent.ValueIdentWarning), (object) valueIdentWarning) ? (T) (Enum) valueIdentWarning : throw new OverflowException("ValueIdentWarning");
        case ValueIdent.ValueIdPart_PhysicalQuantity.InfoNumber:
          if (!(typeof (T) == typeof (ValueIdent.ValueIdentInfo)))
            throw new Exception("Illegal ValueIdPart_PhysicalQuantity for ValueIdPart_InfoIndex");
          ValueIdent.ValueIdentInfo valueIdentInfo = (ValueIdent.ValueIdentInfo) (valueId & 8793945538560L);
          return Enum.IsDefined(typeof (ValueIdent.ValueIdentInfo), (object) valueIdentInfo) ? (T) (Enum) valueIdentInfo : throw new OverflowException("ValueIdPart_InfoIndex");
        default:
          if (!(typeof (T) == typeof (ValueIdent.ValueIdPart_Index)))
            throw new Exception("Illegal ValueIdPart_PhysicalQuantity for ValueIdPart_Index");
          ValueIdent.ValueIdPart_Index valueIdPartIndex = (ValueIdent.ValueIdPart_Index) (valueId & 8793945538560L);
          return Enum.IsDefined(typeof (ValueIdent.ValueIdPart_Index), (object) valueIdPartIndex) ? (T) (Enum) valueIdPartIndex : throw new OverflowException("ValueIdPart_Index");
      }
    }

    public static ValueIdent.ValueIdPart_PhysicalQuantity Get_ValueIdPart_PhysicalQuantity(
      long valueId)
    {
      return (ValueIdent.ValueIdPart_PhysicalQuantity) (valueId & 63L);
    }

    public static ValueIdent.ValueIdentInfo Get_ValueIdPart_ValueIdentInfo(long valueId)
    {
      return (ValueIdent.ValueIdentInfo) (valueId & 8793945538560L);
    }

    public static ValueIdent.ValueIdentWarning Get_ValueIdPart_ValueIdentWarning(long valueId)
    {
      return (ValueIdent.ValueIdentWarning) (valueId & 8793945538560L);
    }

    public static ValueIdent.ValueIdentError Get_ValueIdPart_ValueIdentError(long valueId)
    {
      return (ValueIdent.ValueIdentError) (valueId & 8793945538560L);
    }

    public static void ChangePhysicalQuantity(
      ref long valueID,
      ValueIdent.ValueIdPart_PhysicalQuantity newPhysicalQuantity)
    {
      valueID = (long) ((ValueIdent.ValueIdPart_PhysicalQuantity) (valueID & -64L) | newPhysicalQuantity);
    }

    public static void ChangeToInfo(ref long valueID, ValueIdent.ValueIdentInfo newInfo)
    {
      valueID = (long) ((ValueIdent.ValueIdentInfo) (valueID & -8793945538624L | 26L) | newInfo);
    }

    public static void ChangeToWarning(ref long valueID, ValueIdent.ValueIdentWarning newWarning)
    {
      valueID = (long) ((ValueIdent.ValueIdentWarning) (valueID & -8793945538624L | 22L) | newWarning);
    }

    public static void ChangeToError(ref long valueID, ValueIdent.ValueIdentError newError)
    {
      valueID = (long) ((ValueIdent.ValueIdentError) (valueID & -8793945538624L | 15L) | newError);
    }

    public static bool SetValueIdentPart(
      long PartMask,
      long Part,
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList)
    {
      if (ValueList == null)
        return false;
      bool flag1 = false;
      bool flag2;
      do
      {
        flag2 = false;
        for (int index = 0; index < ValueList.Keys.Count; ++index)
        {
          if ((ValueList.Keys[index] & PartMask) == 0L)
          {
            long key = ValueList.Keys[index] | Part;
            SortedList<DateTime, ReadingValue> sortedList = ValueList.Values[index];
            ValueList.RemoveAt(index);
            ValueList.Add(key, sortedList);
            flag1 = true;
            flag2 = true;
            break;
          }
        }
      }
      while (flag2);
      return flag1;
    }

    public static object ValueIdPart_GetIndex(long valueIdent)
    {
      switch (ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(valueIdent))
      {
        case ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber:
          return (object) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdentError>(valueIdent);
        case ValueIdent.ValueIdPart_PhysicalQuantity.WarningNumber:
          return (object) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdentWarning>(valueIdent);
        case ValueIdent.ValueIdPart_PhysicalQuantity.InfoNumber:
          return (object) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdentInfo>(valueIdent);
        default:
          return (object) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Index>(valueIdent);
      }
    }

    public static string GetPredefinedValueID_EnumName(long ValueId)
    {
      string empty = string.Empty;
      Array values = Enum.GetValues(typeof (ValueIdent.ValueId_Predefined));
      for (int index = 0; index < values.Length; ++index)
      {
        long num = (long) values.GetValue(index);
        if (num == ValueId)
        {
          empty = ((ValueIdent.ValueId_Predefined) num).ToString();
          break;
        }
      }
      return empty;
    }

    public static string GetPredefinedValueList()
    {
      StringBuilder stringBuilder = new StringBuilder(2000);
      string[] names = Enum.GetNames(typeof (ValueIdent.ValueId_Predefined));
      SortedList<string, long> sortedList = new SortedList<string, long>();
      for (int index = 0; index < names.Length; ++index)
        sortedList.Add(names[index], 0L);
      for (int index = 0; index < sortedList.Count; ++index)
      {
        string key = sortedList.Keys[index];
        long valueId = (long) Enum.Parse(typeof (ValueIdent.ValueId_Predefined), key);
        string str;
        try
        {
          str = ValueIdent.GetTranslatedValueNameForValueId(valueId, true);
        }
        catch
        {
          str = "translation error";
        }
        stringBuilder.Append(key);
        stringBuilder.Append("; ");
        stringBuilder.Append(valueId.ToString());
        stringBuilder.Append("; ");
        stringBuilder.Append(str);
        stringBuilder.AppendLine();
      }
      return stringBuilder.ToString();
    }

    public static string GetTranslatedEnumsAsHex()
    {
      StringBuilder stringBuilder = new StringBuilder(5000);
      stringBuilder.AppendLine(ValueIdent.GetTranslatedEnumAsHex(typeof (ValueIdent.ValueId_Mask), "Mask:"));
      stringBuilder.AppendLine(ValueIdent.GetTranslatedEnumAsHex(typeof (ValueIdent.ValueId_MinValue), "MinValues:"));
      stringBuilder.AppendLine(ValueIdent.GetTranslatedEnumAsHex(typeof (ValueIdent.ValueIdPart_PhysicalQuantity), "PhysicalQuantity:"));
      stringBuilder.AppendLine(ValueIdent.GetTranslatedEnumAsHex(typeof (ValueIdent.ValueIdPart_MeterType), "MeterType:"));
      stringBuilder.AppendLine(ValueIdent.GetTranslatedEnumAsHex(typeof (ValueIdent.ValueIdPart_StorageInterval), "StorageInterval:"));
      stringBuilder.AppendLine(ValueIdent.GetTranslatedEnumAsHex(typeof (ValueIdent.ValueIdPart_Calculation), "Calculation:"));
      stringBuilder.AppendLine(ValueIdent.GetTranslatedEnumAsHex(typeof (ValueIdent.ValueIdPart_CalculationStart), "CalculationStart:"));
      stringBuilder.AppendLine(ValueIdent.GetTranslatedEnumAsHex(typeof (ValueIdent.ValueIdPart_Creation), "Creation:"));
      return stringBuilder.ToString();
    }

    private static string GetTranslatedEnumAsHex(Type t, string caption)
    {
      StringBuilder stringBuilder = new StringBuilder(2000);
      string[] names = Enum.GetNames(t);
      SortedList<string, long> sortedList1 = new SortedList<string, long>();
      for (int index = 0; index < names.Length; ++index)
        sortedList1.Add(names[index], 0L);
      SortedList<long, string> sortedList2 = new SortedList<long, string>();
      for (int index = 0; index < sortedList1.Count; ++index)
        sortedList2.Add((long) Enum.Parse(t, sortedList1.Keys[index]), sortedList1.Keys[index]);
      stringBuilder.AppendLine(caption);
      for (int index = 0; index < sortedList2.Count; ++index)
      {
        stringBuilder.Append(sortedList2.Keys[index].ToString("x16").ToUpper());
        stringBuilder.Append("->");
        stringBuilder.Append(sortedList2.Values[index]);
        stringBuilder.AppendLine();
      }
      return stringBuilder.ToString();
    }

    public static string GetTranslatedValueNameForPartOfValueId(Enum valueIdPart)
    {
      if (valueIdPart == null)
        return string.Empty;
      long int64 = Convert.ToInt64((object) valueIdPart);
      if (valueIdPart is ValueIdent.ValueIdPart_Calculation)
      {
        if (ValueIdent.valueIdPart_CalculationEnumToTranslation.ContainsKey(int64))
          return ValueIdent.valueIdPart_CalculationEnumToTranslation[int64];
      }
      else if (valueIdPart is ValueIdent.ValueIdPart_CalculationStart)
      {
        if (ValueIdent.valueIdPart_CalculationStartEnumToTranslation.ContainsKey(int64))
          return ValueIdent.valueIdPart_CalculationStartEnumToTranslation[int64];
      }
      else if (valueIdPart is ValueIdent.ValueIdPart_Creation)
      {
        if (ValueIdent.valueIdPart_CreationEnumToTranslation.ContainsKey(int64))
          return ValueIdent.valueIdPart_CreationEnumToTranslation[int64];
      }
      else if (valueIdPart is ValueIdent.ValueIdPart_MeterType)
      {
        if (ValueIdent.valueIdPart_MeterTypeEnumToTranslation.ContainsKey(int64))
          return ValueIdent.valueIdPart_MeterTypeEnumToTranslation[int64];
      }
      else if (valueIdPart is ValueIdent.ValueIdPart_PhysicalQuantity)
      {
        if (ValueIdent.valueIdPart_PhysicalQuantityEnumToTranslation.ContainsKey(int64))
          return ValueIdent.valueIdPart_PhysicalQuantityEnumToTranslation[int64];
      }
      else if (valueIdPart is ValueIdent.ValueIdPart_StorageInterval && ValueIdent.valueIdPart_StorageIntervalEnumToTranslation.ContainsKey(int64))
        return ValueIdent.valueIdPart_StorageIntervalEnumToTranslation[int64];
      return string.Empty;
    }

    public static string GetTranslatedValueNameForValueId(long valueId, bool humanReadable)
    {
      if (!ValueIdent.IsValid(valueId))
        return "Not defined";
      if (humanReadable && ValueIdent.generatedHumanReadableValueIdTranslations.ContainsKey(valueId))
        return ValueIdent.generatedHumanReadableValueIdTranslations[valueId];
      if (!humanReadable && ValueIdent.generatedValueIdTranslations.ContainsKey(valueId))
        return ValueIdent.generatedValueIdTranslations[valueId];
      ValueIdent.ValueIdPart_Calculation key1 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Calculation>(valueId);
      ValueIdent.ValueIdPart_CalculationStart key2 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_CalculationStart>(valueId);
      ValueIdent.ValueIdPart_Creation key3 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Creation>(valueId);
      ValueIdent.ValueIdPart_MeterType key4 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(valueId);
      ValueIdent.ValueIdPart_PhysicalQuantity key5 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(valueId);
      ValueIdent.ValueIdPart_StorageInterval key6 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_StorageInterval>(valueId);
      if (humanReadable)
      {
        string valueNameForValueId = ValueIdent.valueIdPart_PhysicalQuantityEnumToTranslation[(long) key5] + ", " + ValueIdent.valueIdPart_MeterTypeEnumToTranslation[(long) key4] + ", " + ValueIdent.valueIdPart_CalculationEnumToTranslation[(long) key1];
        if (key6 != ValueIdent.ValueIdPart_StorageInterval.None)
          valueNameForValueId = valueNameForValueId + ", " + ValueIdent.valueIdPart_StorageIntervalEnumToTranslation[(long) key6];
        if (key2 != ValueIdent.ValueIdPart_CalculationStart.MeterProduction)
          valueNameForValueId = valueNameForValueId + ", " + ValueIdent.valueIdPart_CalculationStartEnumToTranslation[(long) key2];
        ValueIdent.generatedHumanReadableValueIdTranslations.Add(valueId, valueNameForValueId);
        return valueNameForValueId;
      }
      StringBuilder stringBuilder = new StringBuilder();
      if (ValueIdent.valueIdPart_PhysicalQuantityEnumToTranslation.ContainsKey((long) key5))
      {
        stringBuilder.Append(ValueIdent.valueIdPart_PhysicalQuantityEnumToTranslation[(long) key5]);
        stringBuilder.Append(", ");
      }
      if (ValueIdent.valueIdPart_MeterTypeEnumToTranslation.ContainsKey((long) key4))
      {
        stringBuilder.Append(ValueIdent.valueIdPart_MeterTypeEnumToTranslation[(long) key4]);
        stringBuilder.Append(", ");
      }
      if (ValueIdent.valueIdPart_CalculationEnumToTranslation.ContainsKey((long) key1))
      {
        stringBuilder.Append(ValueIdent.valueIdPart_CalculationEnumToTranslation[(long) key1]);
        stringBuilder.Append(", ");
      }
      if (ValueIdent.valueIdPart_CalculationStartEnumToTranslation.ContainsKey((long) key2))
      {
        stringBuilder.Append(ValueIdent.valueIdPart_CalculationStartEnumToTranslation[(long) key2]);
        stringBuilder.Append(", ");
      }
      if (ValueIdent.valueIdPart_CreationEnumToTranslation.ContainsKey((long) key3))
      {
        stringBuilder.Append(ValueIdent.valueIdPart_CreationEnumToTranslation[(long) key3]);
        stringBuilder.Append(", ");
      }
      if (ValueIdent.valueIdPart_StorageIntervalEnumToTranslation.ContainsKey((long) key6))
      {
        stringBuilder.Append(ValueIdent.valueIdPart_StorageIntervalEnumToTranslation[(long) key6]);
        stringBuilder.Append(", ");
      }
      if (key5 == ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber)
      {
        ValueIdent.ValueIdentError key7 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdentError>(valueId);
        stringBuilder.Append(ValueIdent.valueIdPart_IndexErrorEnumToTranslation[(long) key7]);
      }
      if (key5 == ValueIdent.ValueIdPart_PhysicalQuantity.WarningNumber)
      {
        ValueIdent.ValueIdentWarning key8 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdentWarning>(valueId);
        stringBuilder.Append(ValueIdent.valueIdPart_IndexWarningEnumToTranslation[(long) key8]);
      }
      if (key5 == ValueIdent.ValueIdPart_PhysicalQuantity.InfoNumber)
      {
        ValueIdent.ValueIdentInfo key9 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdentInfo>(valueId);
        stringBuilder.Append(ValueIdent.valueIdPart_IndexInfoEnumToTranslation[(long) key9]);
      }
      ValueIdent.generatedValueIdTranslations.Add(valueId, stringBuilder.ToString());
      return stringBuilder.ToString();
    }

    public static SortedList<long, string> GetTranslatedStringListForValueIdPart(Type valueIdType)
    {
      SortedList<long, string> listForValueIdPart = (SortedList<long, string>) null;
      if (valueIdType == typeof (ValueIdent.ValueIdPart_Calculation))
        listForValueIdPart = ValueIdent.valueIdPart_CalculationEnumToTranslation;
      else if (valueIdType == typeof (ValueIdent.ValueIdPart_CalculationStart))
        listForValueIdPart = ValueIdent.valueIdPart_CalculationStartEnumToTranslation;
      else if (valueIdType == typeof (ValueIdent.ValueIdPart_Creation))
        listForValueIdPart = ValueIdent.valueIdPart_CreationEnumToTranslation;
      else if (valueIdType == typeof (ValueIdent.ValueIdPart_MeterType))
        listForValueIdPart = ValueIdent.valueIdPart_MeterTypeEnumToTranslation;
      else if (valueIdType == typeof (ValueIdent.ValueIdPart_PhysicalQuantity))
        listForValueIdPart = ValueIdent.valueIdPart_PhysicalQuantityEnumToTranslation;
      else if (valueIdType == typeof (ValueIdent.ValueIdPart_StorageInterval))
        listForValueIdPart = ValueIdent.valueIdPart_StorageIntervalEnumToTranslation;
      else if (valueIdType == typeof (ValueIdent.ValueIdPart_Index))
        listForValueIdPart = ValueIdent.valueIdPart_IndexEnumToTranslation;
      else if (valueIdType == typeof (ValueIdent.ValueIdentError))
        listForValueIdPart = ValueIdent.valueIdPart_IndexErrorEnumToTranslation;
      else if (valueIdType == typeof (ValueIdent.ValueIdentWarning))
        listForValueIdPart = ValueIdent.valueIdPart_IndexWarningEnumToTranslation;
      return listForValueIdPart;
    }

    public static string GetShortNameForValueId(long valueId)
    {
      if (!ValueIdent.IsValid(valueId))
        return "Not defined";
      ValueIdent.ValueIdPart_Calculation idPartCalculation = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Calculation>(valueId);
      ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_CalculationStart>(valueId);
      ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Creation>(valueId);
      ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(valueId);
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(valueId);
      ValueIdent.ValueIdPart_StorageInterval partStorageInterval = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_StorageInterval>(valueId);
      ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Index>(valueId);
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(physicalQuantity.ToString()).Append(", ");
      if (partStorageInterval != ValueIdent.ValueIdPart_StorageInterval.None && partStorageInterval != 0)
        stringBuilder.Append(partStorageInterval.ToString()).Append(", ");
      if (idPartCalculation != 0)
        stringBuilder.Append(idPartCalculation.ToString());
      return stringBuilder.ToString();
    }

    public static string GetValueNameForValueId(long valueId, bool humanReadable)
    {
      string empty1 = string.Empty;
      string empty2 = string.Empty;
      if (ValueIdent.generatedHumanReadableValueId.ContainsKey(valueId))
        return humanReadable ? ValueIdent.generatedHumanReadableValueId[valueId] : ValueIdent.generatedValueId[valueId];
      ValueIdent.ValueIdPart_Calculation idPartCalculation = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Calculation>(valueId);
      ValueIdent.ValueIdPart_CalculationStart calculationStart = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_CalculationStart>(valueId);
      ValueIdent.ValueIdPart_Creation valueIdPartCreation = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Creation>(valueId);
      ValueIdent.ValueIdPart_MeterType valueIdPartMeterType = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(valueId);
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(valueId);
      ValueIdent.ValueIdPart_StorageInterval partStorageInterval = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_StorageInterval>(valueId);
      ValueIdent.ValueIdPart_Index valueIdPartIndex = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Index>(valueId);
      string str1 = physicalQuantity.ToString() + ", " + valueIdPartMeterType.ToString() + ", " + idPartCalculation.ToString();
      ValueIdent.generatedHumanReadableValueId.Add(valueId, str1);
      string str2 = physicalQuantity.ToString() + ", " + valueIdPartMeterType.ToString() + ", " + idPartCalculation.ToString() + ", " + calculationStart.ToString() + ", " + valueIdPartCreation.ToString() + ", " + partStorageInterval.ToString() + ", " + valueIdPartIndex.ToString();
      ValueIdent.generatedValueId.Add(valueId, str2);
      return humanReadable ? str1 : str2;
    }

    public static string GetValueIdNameAsPath(long valueId)
    {
      StringBuilder stringBuilder = new StringBuilder();
      string str1 = ((ValueIdent.ValueIdPart_MeterType) (valueId & 4032L)).ToString();
      if (str1 != "Any")
        stringBuilder.Append("/type:" + str1);
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = (ValueIdent.ValueIdPart_PhysicalQuantity) (valueId & 63L);
      string str2 = physicalQuantity.ToString();
      if (str2 != "Any")
        stringBuilder.Append("/physic:" + str2);
      string str3 = ((ValueIdent.ValueIdPart_Calculation) (valueId & 61440L)).ToString();
      if (str3 != "Any")
        stringBuilder.Append("/calc:" + str3);
      string str4 = ((ValueIdent.ValueIdPart_CalculationStart) (valueId & 4128768L)).ToString();
      if (str4 != "Any")
        stringBuilder.Append("/calc_start:" + str4);
      string str5 = ((ValueIdent.ValueIdPart_StorageInterval) (valueId & 264241152L)).ToString();
      if (str5 != "Any")
        stringBuilder.Append("/interval:" + str5);
      string str6 = ((ValueIdent.ValueIdPart_Creation) (valueId & 1879048192L)).ToString();
      if (str6 != "Any")
        stringBuilder.Append("/creation:" + str6);
      string str7 = (string) null;
      switch (physicalQuantity)
      {
        case ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber:
          str7 = ((ValueIdent.ValueIdentError) (valueId & 8793945538560L)).ToString();
          break;
        case ValueIdent.ValueIdPart_PhysicalQuantity.WarningNumber:
          str7 = ((ValueIdent.ValueIdentWarning) (valueId & 8793945538560L)).ToString();
          break;
        case ValueIdent.ValueIdPart_PhysicalQuantity.InfoNumber:
          str7 = ((ValueIdent.ValueIdentInfo) (valueId & 8793945538560L)).ToString();
          break;
      }
      if (str7 != null)
        stringBuilder.Append("/index:" + str7);
      return stringBuilder.ToString();
    }

    public static string GetPhysicalName(long valueId)
    {
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = (ValueIdent.ValueIdPart_PhysicalQuantity) (valueId & 63L);
      string physicalName = physicalQuantity.ToString();
      switch (physicalQuantity)
      {
        case ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber:
          string str1 = ((ValueIdent.ValueIdentError) (valueId & 8793945538560L)).ToString();
          return physicalName + "." + str1;
        case ValueIdent.ValueIdPart_PhysicalQuantity.WarningNumber:
          string str2 = ((ValueIdent.ValueIdentWarning) (valueId & 8793945538560L)).ToString();
          return physicalName + "." + str2;
        case ValueIdent.ValueIdPart_PhysicalQuantity.InfoNumber:
          string str3 = ((ValueIdent.ValueIdentInfo) (valueId & 8793945538560L)).ToString();
          return physicalName + "." + str3;
        default:
          return physicalName;
      }
    }

    public static bool IsValid(long valueId, bool exceptionOnError = false)
    {
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = (ValueIdent.ValueIdPart_PhysicalQuantity) (valueId & 63L);
      if (!Enum.IsDefined(typeof (ValueIdent.ValueIdPart_PhysicalQuantity), (object) physicalQuantity))
      {
        if (exceptionOnError)
          throw new Exception("ValueIdPart_PhysicalQuantity not defined.");
        return false;
      }
      if (!Enum.IsDefined(typeof (ValueIdent.ValueIdPart_MeterType), (object) (ValueIdent.ValueIdPart_MeterType) (valueId & 4032L)))
      {
        if (exceptionOnError)
          throw new Exception("ValueIdPart_MeterType not defined.");
        return false;
      }
      if (!Enum.IsDefined(typeof (ValueIdent.ValueIdPart_Calculation), (object) (ValueIdent.ValueIdPart_Calculation) (valueId & 61440L)))
      {
        if (exceptionOnError)
          throw new Exception("ValueIdPart_Calculation not defined.");
        return false;
      }
      if (!Enum.IsDefined(typeof (ValueIdent.ValueIdPart_CalculationStart), (object) (ValueIdent.ValueIdPart_CalculationStart) (valueId & 4128768L)))
      {
        if (exceptionOnError)
          throw new Exception("ValueIdPart_CalculationStart not defined.");
        return false;
      }
      if (!Enum.IsDefined(typeof (ValueIdent.ValueIdPart_StorageInterval), (object) (ValueIdent.ValueIdPart_StorageInterval) (valueId & 264241152L)))
      {
        if (exceptionOnError)
          throw new Exception("ValueIdPart_StorageInterval not defined.");
        return false;
      }
      if (!Enum.IsDefined(typeof (ValueIdent.ValueIdPart_Creation), (object) (ValueIdent.ValueIdPart_Creation) (valueId & 1879048192L)))
      {
        if (exceptionOnError)
          throw new Exception("ValueIdPart_Creation not defined.");
        return false;
      }
      switch (physicalQuantity)
      {
        case ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber:
          if (!Enum.IsDefined(typeof (ValueIdent.ValueIdentError), (object) (ValueIdent.ValueIdentError) (valueId & 8793945538560L)))
          {
            if (exceptionOnError)
              throw new Exception("ValueIdentError not defined.");
            return false;
          }
          break;
        case ValueIdent.ValueIdPart_PhysicalQuantity.WarningNumber:
          if (!Enum.IsDefined(typeof (ValueIdent.ValueIdentWarning), (object) (ValueIdent.ValueIdentWarning) (valueId & 8793945538560L)))
          {
            if (exceptionOnError)
              throw new Exception("ValueIdentWarning not defined.");
            return false;
          }
          break;
        case ValueIdent.ValueIdPart_PhysicalQuantity.InfoNumber:
          if (!Enum.IsDefined(typeof (ValueIdent.ValueIdentInfo), (object) (ValueIdent.ValueIdentInfo) (valueId & 8793945538560L)))
          {
            if (exceptionOnError)
              throw new Exception("ValueIdPart_InfoIndex not defined.");
            return false;
          }
          break;
        default:
          if (!Enum.IsDefined(typeof (ValueIdent.ValueIdPart_Index), (object) (ValueIdent.ValueIdPart_Index) (valueId & 8793945538560L)))
          {
            if (exceptionOnError)
              throw new Exception("ValueIdPart_Index not defined.");
            return false;
          }
          break;
      }
      return true;
    }

    public static bool IsEvent(long valueId)
    {
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = ValueIdent.Get_ValueIdPart_PhysicalQuantity(valueId);
      return physicalQuantity != ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber || physicalQuantity != ValueIdent.ValueIdPart_PhysicalQuantity.WarningNumber || physicalQuantity != ValueIdent.ValueIdPart_PhysicalQuantity.InfoNumber;
    }

    public static KeyValuePair<long, SortedList<DateTime, ReadingValue>>? TryGetValues(
      long expectedValueIdent,
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity1 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(expectedValueIdent);
      ValueIdent.ValueIdPart_MeterType valueIdPartMeterType1 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(expectedValueIdent);
      ValueIdent.ValueIdPart_Calculation idPartCalculation1 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Calculation>(expectedValueIdent);
      ValueIdent.ValueIdPart_CalculationStart calculationStart1 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_CalculationStart>(expectedValueIdent);
      ValueIdent.ValueIdPart_StorageInterval partStorageInterval1 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_StorageInterval>(expectedValueIdent);
      ValueIdent.ValueIdPart_Creation valueIdPartCreation1 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Creation>(expectedValueIdent);
      foreach (KeyValuePair<long, SortedList<DateTime, ReadingValue>> keyValuePair in valueList)
      {
        if (keyValuePair.Value != null && keyValuePair.Value.Count != 0)
        {
          ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity2 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(keyValuePair.Key);
          ValueIdent.ValueIdPart_MeterType valueIdPartMeterType2 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(keyValuePair.Key);
          ValueIdent.ValueIdPart_Calculation idPartCalculation2 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Calculation>(keyValuePair.Key);
          ValueIdent.ValueIdPart_CalculationStart calculationStart2 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_CalculationStart>(keyValuePair.Key);
          ValueIdent.ValueIdPart_StorageInterval partStorageInterval2 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_StorageInterval>(keyValuePair.Key);
          ValueIdent.ValueIdPart_Creation valueIdPartCreation2 = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Creation>(keyValuePair.Key);
          if ((physicalQuantity1 == ValueIdent.ValueIdPart_PhysicalQuantity.Any || physicalQuantity1 == physicalQuantity2) && (valueIdPartMeterType1 == ValueIdent.ValueIdPart_MeterType.Any || valueIdPartMeterType1 == valueIdPartMeterType2) && (idPartCalculation1 == ValueIdent.ValueIdPart_Calculation.Any || idPartCalculation1 == idPartCalculation2) && (calculationStart1 == ValueIdent.ValueIdPart_CalculationStart.Any || calculationStart1 == calculationStart2) && (partStorageInterval1 == ValueIdent.ValueIdPart_StorageInterval.Any || partStorageInterval1 == partStorageInterval2) && (valueIdPartCreation1 == ValueIdent.ValueIdPart_Creation.Any || valueIdPartCreation1 == valueIdPartCreation2))
            return new KeyValuePair<long, SortedList<DateTime, ReadingValue>>?(keyValuePair);
        }
      }
      return new KeyValuePair<long, SortedList<DateTime, ReadingValue>>?();
    }

    private static KeyValuePair<long, SortedList<DateTime, ReadingValue>>? TryGetCurrentValues(
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      return ValueIdent.TryGetValues(ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.Any, ValueIdent.ValueIdPart_MeterType.Any, ValueIdent.ValueIdPart_Calculation.Accumulated, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.None, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any), valueList);
    }

    private static KeyValuePair<long, SortedList<DateTime, ReadingValue>>? TryGetMonthValues(
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      return ValueIdent.TryGetValues(ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.Any, ValueIdent.ValueIdPart_MeterType.Any, ValueIdent.ValueIdPart_Calculation.Accumulated, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.Month, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any), valueList);
    }

    public static bool Contains(long valueIdent, ValueIdent.ValueIdPart_Calculation calculated)
    {
      return ValueIdent.Contains(valueIdent, (long) calculated);
    }

    public static bool Contains(List<long> valueIdents, ValueIdent.ValueIdentError indexError)
    {
      if (valueIdents == null)
        return false;
      foreach (long valueIdent in valueIdents)
      {
        if (ValueIdent.Contains(valueIdent, (long) indexError))
          return true;
      }
      return false;
    }

    public static bool Contains(List<long> valueIdents, ValueIdent.ValueIdPart_MeterType meterType)
    {
      if (valueIdents == null)
        return false;
      foreach (long valueIdent in valueIdents)
      {
        if (ValueIdent.Contains(valueIdent, (long) meterType))
          return true;
      }
      return false;
    }

    public static bool Contains(
      List<long> valueIdents,
      ValueIdent.ValueIdPart_StorageInterval storageInterval)
    {
      if (valueIdents == null)
        return false;
      foreach (long valueIdent in valueIdents)
      {
        if (ValueIdent.Contains(valueIdent, (long) storageInterval))
          return true;
      }
      return false;
    }

    public static bool Contains(long valueIdentToCheck, long valueIdentMask)
    {
      return ((valueIdentToCheck & 61440L) == 0L || ((ulong) valueIdentMask & 61440UL) <= 0UL || (valueIdentToCheck & 61440L) == (valueIdentMask & 61440L)) && ((valueIdentToCheck & 4128768L) == 0L || ((ulong) valueIdentMask & 4128768UL) <= 0UL || (valueIdentToCheck & 4128768L) == (valueIdentMask & 4128768L)) && ((valueIdentToCheck & 1879048192L) == 0L || ((ulong) valueIdentMask & 1879048192UL) <= 0UL || (valueIdentToCheck & 1879048192L) == (valueIdentMask & 1879048192L)) && ((valueIdentToCheck & 4032L) == 0L || ((ulong) valueIdentMask & 4032UL) <= 0UL || (valueIdentToCheck & 4032L) == (valueIdentMask & 4032L)) && ((valueIdentToCheck & 63L) == 0L || ((ulong) valueIdentMask & 63UL) <= 0UL || (valueIdentToCheck & 63L) == (valueIdentMask & 63L)) && ((valueIdentToCheck & 264241152L) == 0L || ((ulong) valueIdentMask & 264241152UL) <= 0UL || (valueIdentToCheck & 264241152L) == (valueIdentMask & 264241152L)) && ((valueIdentToCheck & 8793945538560L) == 0L || (valueIdentMask & 8793945538560L) == 0L || (valueIdentToCheck & 8793945538560L) == (valueIdentMask & 8793945538560L));
    }

    public static void CleanUpEmptyValueIdents(
      SortedList<long, SortedList<DateTime, ReadingValue>> ValueList)
    {
      if (ValueList == null || ValueList.Count <= 0)
        return;
      for (int index = ValueList.Count - 1; index >= 0; --index)
      {
        if (ValueList.Values[index].Count == 0)
          ValueList.RemoveAt(index);
      }
    }

    public static bool IsExpectedValueIdent(List<long> filter, long fullValueIdent)
    {
      if (filter == null)
        return true;
      foreach (long num1 in filter)
      {
        if (num1 == fullValueIdent)
          return true;
        long num2 = 0;
        if ((num1 & 63L) > 0L)
          num2 |= 63L;
        if ((num1 & 4032L) > 0L)
          num2 |= 4032L;
        if ((num1 & 61440L) > 0L)
          num2 |= 61440L;
        if ((num1 & 4128768L) > 0L)
          num2 |= 4128768L;
        if ((num1 & 264241152L) > 0L)
          num2 |= 264241152L;
        if ((num1 & 1879048192L) > 0L)
          num2 |= 1879048192L;
        if ((num1 & 8793945538560L) > 0L)
          num2 |= 8793945538560L;
        if ((num1 & num2) == (fullValueIdent & num2))
          return true;
      }
      return false;
    }

    public static SortedList<long, SortedList<DateTime, ReadingValue>> GetDefaultValueListTemplate()
    {
      return new SortedList<long, SortedList<DateTime, ReadingValue>>()
      {
        {
          ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.Any, ValueIdent.ValueIdPart_MeterType.Any, ValueIdent.ValueIdPart_Calculation.Accumulated, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.None, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any),
          new SortedList<DateTime, ReadingValue>()
        },
        {
          ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.Any, ValueIdent.ValueIdPart_MeterType.Any, ValueIdent.ValueIdPart_Calculation.Accumulated, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.DueDate, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any),
          new SortedList<DateTime, ReadingValue>()
        },
        {
          ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.Any, ValueIdent.ValueIdPart_MeterType.Any, ValueIdent.ValueIdPart_Calculation.Accumulated, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.Month, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any),
          new SortedList<DateTime, ReadingValue>()
        },
        {
          ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.Any, ValueIdent.ValueIdPart_MeterType.Any, ValueIdent.ValueIdPart_Calculation.Accumulated, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.HalfMonth, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any),
          new SortedList<DateTime, ReadingValue>()
        },
        {
          ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.SignalStrength, ValueIdent.ValueIdPart_MeterType.Any, ValueIdent.ValueIdPart_Calculation.Current, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.None, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any),
          new SortedList<DateTime, ReadingValue>()
        }
      };
    }

    public static SortedList<long, SortedList<DateTime, ReadingValue>> GetValueList(
      long[] ValueIdList)
    {
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      for (int index = 0; index < ValueIdList.Length; ++index)
        valueList.Add(ValueIdList[index], new SortedList<DateTime, ReadingValue>());
      return valueList;
    }

    public static ValueIdent.ValueIdPart_MeterType ConvertToMeterType(MBusDeviceType mbusMedium)
    {
      return ValueIdent.ConvertToMeterType((byte) mbusMedium);
    }

    public static ValueIdent.ValueIdPart_MeterType ConvertToMeterType(byte mbusMedium)
    {
      switch (mbusMedium)
      {
        case 1:
          return ValueIdent.ValueIdPart_MeterType.Oil;
        case 2:
          return ValueIdent.ValueIdPart_MeterType.Electricity;
        case 3:
          return ValueIdent.ValueIdPart_MeterType.Gas;
        case 4:
          return ValueIdent.ValueIdPart_MeterType.Heat;
        case 5:
          return ValueIdent.ValueIdPart_MeterType.Steam;
        case 6:
          return ValueIdent.ValueIdPart_MeterType.HotWater;
        case 7:
          return ValueIdent.ValueIdPart_MeterType.Water;
        case 8:
          return ValueIdent.ValueIdPart_MeterType.HeatCostAllocator;
        case 9:
          return ValueIdent.ValueIdPart_MeterType.Barometer;
        case 10:
          return ValueIdent.ValueIdPart_MeterType.Cooling;
        case 11:
          return ValueIdent.ValueIdPart_MeterType.Cooling;
        case 12:
          return ValueIdent.ValueIdPart_MeterType.Heat;
        case 13:
          return ValueIdent.ValueIdPart_MeterType.ChangeOverHeat;
        case 22:
          return ValueIdent.ValueIdPart_MeterType.ColdWater;
        case 24:
          return ValueIdent.ValueIdPart_MeterType.Barometer;
        default:
          return ValueIdent.ValueIdPart_MeterType.Any;
      }
    }

    public static ValueIdent.ValueIdPart_MeterType ConvertToMeterType(DeviceTypes deviceType)
    {
      switch (deviceType)
      {
        case DeviceTypes.ZR_EHCA:
        case DeviceTypes.EHCA_M5:
        case DeviceTypes.EHCA_M5p:
        case DeviceTypes.EHCA_M6:
        case DeviceTypes.EHCA_M6_Radio3:
          return ValueIdent.ValueIdPart_MeterType.HeatCostAllocator;
        case DeviceTypes.MinotelContact:
        case DeviceTypes.MinotelContactRadio3:
        case DeviceTypes.ISF:
        case DeviceTypes.PDC:
          return ValueIdent.ValueIdPart_MeterType.PulseCounter;
        case DeviceTypes.Aqua:
        case DeviceTypes.AquaMicro:
        case DeviceTypes.AquaMicroRadio3:
        case DeviceTypes.EDC:
          return ValueIdent.ValueIdPart_MeterType.Water;
        case DeviceTypes.MinoConnect:
          return ValueIdent.ValueIdPart_MeterType.Transceiver;
        case DeviceTypes.SmokeDetector:
          return ValueIdent.ValueIdPart_MeterType.SmokeDetector;
        case DeviceTypes.TemperatureSensor:
          return ValueIdent.ValueIdPart_MeterType.Thermometer;
        case DeviceTypes.HumiditySensor:
          return ValueIdent.ValueIdPart_MeterType.Hygrometer;
        default:
          return ValueIdent.ValueIdPart_MeterType.Any;
      }
    }

    private static void FillSortedList(SortedList<long, string> sortedList, Type ValueIdPart)
    {
      foreach (string str1 in Util.GetNamesOfEnum(ValueIdPart))
      {
        string name = ValueIdPart.Name + str1;
        string str2 = ValueIdent.valueIdentResource.GetString(name);
        if (string.IsNullOrEmpty(str2))
        {
          Debug.WriteLine("NOTE: Translation text in ValueIdentTranslatin.resx not found! Key: " + name);
          str2 = str1;
        }
        long key = (long) Enum.Parse(ValueIdPart, str1, true);
        if (sortedList.ContainsKey(key))
          Debug.WriteLine("NOTE: Translation text in ValueIdentTranslatin.resx has not unique result! name: " + str1);
        else
          sortedList.Add(key, str2);
      }
    }

    public static bool TryFindDueDateValuesAndAddToExistingValueList(
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList,
      DateTime expectedDueDatePeriod,
      int minDaysOfDueDatePeriod,
      int maxDaysOfDueDatePeriod)
    {
      if (valueList == null || valueList.Count == 0)
        return false;
      KeyValuePair<long, SortedList<DateTime, ReadingValue>>? nullable1 = new KeyValuePair<long, SortedList<DateTime, ReadingValue>>?();
      KeyValuePair<long, SortedList<DateTime, ReadingValue>>? currentValues = ValueIdent.TryGetCurrentValues(valueList);
      KeyValuePair<long, SortedList<DateTime, ReadingValue>>? nullable2;
      if (currentValues.HasValue)
      {
        nullable2 = currentValues;
      }
      else
      {
        KeyValuePair<long, SortedList<DateTime, ReadingValue>>? monthValues = ValueIdent.TryGetMonthValues(valueList);
        if (!monthValues.HasValue)
          return false;
        nullable2 = monthValues;
      }
      List<DateTime> dateTimeList = new List<DateTime>();
      foreach (KeyValuePair<DateTime, ReadingValue> keyValuePair in nullable2.Value.Value)
      {
        DateTime possibleDueDate = keyValuePair.Key;
        DateTime dueDatePeriod = new DateTime(possibleDueDate.Year, expectedDueDatePeriod.Month, expectedDueDatePeriod.Day);
        DateTime dateTime1 = dueDatePeriod.AddDays((double) minDaysOfDueDatePeriod);
        DateTime dateTime2 = dueDatePeriod.AddDays((double) maxDaysOfDueDatePeriod);
        dateTime2 = dateTime2.AddHours(23.0);
        DateTime dateTime3 = dateTime2.AddMinutes(59.0);
        if (possibleDueDate >= dateTime1 && possibleDueDate <= dateTime3)
        {
          double diff = Math.Abs(dueDatePeriod.Subtract(possibleDueDate).TotalMinutes);
          DateTime dateTime4 = dateTimeList.Find((Predicate<DateTime>) (t => t.Year == possibleDueDate.Year && Math.Abs(dueDatePeriod.Subtract(t).TotalMinutes) > diff));
          if (dateTime4 != DateTime.MinValue)
          {
            dateTimeList.Remove(dateTime4);
            dateTimeList.Add(possibleDueDate);
          }
          else if (!(dateTimeList.Find((Predicate<DateTime>) (t => t.Year == possibleDueDate.Year && Math.Abs(dueDatePeriod.Subtract(t).TotalMinutes) < diff)) != DateTime.MinValue))
            dateTimeList.Add(possibleDueDate);
        }
      }
      if (dateTimeList.Count == 0)
        return false;
      KeyValuePair<long, SortedList<DateTime, ReadingValue>> keyValuePair1 = nullable2.Value;
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(keyValuePair1.Key);
      keyValuePair1 = nullable2.Value;
      ValueIdent.ValueIdPart_MeterType meterType = ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(keyValuePair1.Key);
      long valueIdForValueEnum = ValueIdent.GetValueIdForValueEnum(physicalQuantity, meterType, ValueIdent.ValueIdPart_Calculation.Accumulated, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.DueDate, ValueIdent.ValueIdPart_Creation.ReadingSystem, (object) ValueIdent.ValueIdPart_Index.Any);
      SortedList<DateTime, ReadingValue> sortedList1 = new SortedList<DateTime, ReadingValue>();
      foreach (DateTime key1 in dateTimeList)
      {
        SortedList<DateTime, ReadingValue> sortedList2 = sortedList1;
        DateTime key2 = key1;
        keyValuePair1 = nullable2.Value;
        ReadingValue readingValue = keyValuePair1.Value[key1];
        sortedList2.Add(key2, readingValue);
      }
      if (!valueList.ContainsKey(valueIdForValueEnum))
      {
        valueList.Add(valueIdForValueEnum, sortedList1);
      }
      else
      {
        foreach (KeyValuePair<DateTime, ReadingValue> keyValuePair2 in sortedList1)
        {
          if (!valueList[valueIdForValueEnum].ContainsKey(keyValuePair2.Key))
            valueList[valueIdForValueEnum].Add(keyValuePair2.Key, keyValuePair2.Value);
        }
      }
      return true;
    }

    public static List<string> Translate(List<long> valueIdents)
    {
      List<string> stringList = new List<string>();
      foreach (long valueIdent in valueIdents)
      {
        string str = ValueIdent.GetTranslatedValueNameForValueId(valueIdent, false).Replace(", 0", "");
        stringList.Add("(" + valueIdent.ToString() + ") " + str);
      }
      return stringList;
    }

    public static string Translate<T>(byte enumIndex)
    {
      if (typeof (T) == typeof (ValueIdent.ValueIdPart_Calculation))
      {
        long key = (long) enumIndex * 4096L;
        if (ValueIdent.valueIdPart_CalculationEnumToTranslation.ContainsKey(key))
          return ValueIdent.valueIdPart_CalculationEnumToTranslation[key];
      }
      else if (typeof (T) == typeof (ValueIdent.ValueIdPart_CalculationStart))
      {
        long key = (long) enumIndex * 65536L;
        if (ValueIdent.valueIdPart_CalculationStartEnumToTranslation.ContainsKey(key))
          return ValueIdent.valueIdPart_CalculationStartEnumToTranslation[key];
      }
      else if (typeof (T) == typeof (ValueIdent.ValueIdPart_Creation))
      {
        long key = (long) enumIndex * 268435456L;
        if (ValueIdent.valueIdPart_CreationEnumToTranslation.ContainsKey(key))
          return ValueIdent.valueIdPart_CreationEnumToTranslation[key];
      }
      else if (typeof (T) == typeof (ValueIdent.ValueIdPart_MeterType))
      {
        long key = (long) enumIndex * 64L;
        if (ValueIdent.valueIdPart_MeterTypeEnumToTranslation.ContainsKey(key))
          return ValueIdent.valueIdPart_MeterTypeEnumToTranslation[key];
      }
      else if (typeof (T) == typeof (ValueIdent.ValueIdPart_PhysicalQuantity))
      {
        long key = (long) enumIndex;
        if (ValueIdent.valueIdPart_PhysicalQuantityEnumToTranslation.ContainsKey(key))
          return ValueIdent.valueIdPart_PhysicalQuantityEnumToTranslation[key];
      }
      else if (typeof (T) == typeof (ValueIdent.ValueIdPart_StorageInterval))
      {
        long key = (long) enumIndex * 4194304L;
        if (ValueIdent.valueIdPart_StorageIntervalEnumToTranslation.ContainsKey(key))
          return ValueIdent.valueIdPart_StorageIntervalEnumToTranslation[key];
      }
      return string.Empty;
    }

    public static string TranslateIndex(byte physicalQuantity, byte valueIdentIndex)
    {
      switch (ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(ValueIdent.GetValueIdent(valueIdentIndex, physicalQuantity, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0)))
      {
        case ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber:
          long key1 = (long) valueIdentIndex * 2147483648L;
          if (ValueIdent.valueIdPart_IndexErrorEnumToTranslation.ContainsKey(key1))
            return ValueIdent.valueIdPart_IndexErrorEnumToTranslation[key1];
          break;
        case ValueIdent.ValueIdPart_PhysicalQuantity.WarningNumber:
          long key2 = (long) valueIdentIndex * 2147483648L;
          if (ValueIdent.valueIdPart_IndexWarningEnumToTranslation.ContainsKey(key2))
            return ValueIdent.valueIdPart_IndexWarningEnumToTranslation[key2];
          break;
        case ValueIdent.ValueIdPart_PhysicalQuantity.InfoNumber:
          long key3 = (long) valueIdentIndex * 2147483648L;
          if (ValueIdent.valueIdPart_IndexInfoEnumToTranslation.ContainsKey(key3))
            return ValueIdent.valueIdPart_IndexInfoEnumToTranslation[key3];
          break;
      }
      return string.Empty;
    }

    public static string TranslateIndex(long valueIdent, byte valueIdentIndex)
    {
      switch (ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(valueIdent))
      {
        case ValueIdent.ValueIdPart_PhysicalQuantity.ErrorNumber:
          long key1 = (long) valueIdentIndex * 2147483648L;
          if (ValueIdent.valueIdPart_IndexErrorEnumToTranslation.ContainsKey(key1))
            return ValueIdent.valueIdPart_IndexErrorEnumToTranslation[key1];
          break;
        case ValueIdent.ValueIdPart_PhysicalQuantity.WarningNumber:
          long key2 = (long) valueIdentIndex * 2147483648L;
          if (ValueIdent.valueIdPart_IndexWarningEnumToTranslation.ContainsKey(key2))
            return ValueIdent.valueIdPart_IndexWarningEnumToTranslation[key2];
          break;
        case ValueIdent.ValueIdPart_PhysicalQuantity.InfoNumber:
          long key3 = (long) valueIdentIndex * 2147483648L;
          if (ValueIdent.valueIdPart_IndexInfoEnumToTranslation.ContainsKey(key3))
            return ValueIdent.valueIdPart_IndexInfoEnumToTranslation[key3];
          break;
      }
      return string.Empty;
    }

    public static long GetValueIdentOfError(
      ValueIdent.ValueIdPart_MeterType meterType,
      ValueIdent.ValueIdentError error)
    {
      return (long) (139279L + meterType + 4194304L + 268435456L + (long) error);
    }

    public static long GetValueIdentOfWarninig(
      ValueIdent.ValueIdPart_MeterType meterType,
      ValueIdent.ValueIdentWarning error,
      ValueIdent.ValueIdPart_Creation creation)
    {
      return (long) (139286L + meterType + 4194304L + (long) creation + (long) error);
    }

    public static void AddValueToValueIdentList(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList,
      DateTime timePoint,
      long valueIdent,
      object obj)
    {
      if (valueList == null)
        valueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      ReadingValue readingValue = new ReadingValue();
      readingValue.value = Util.ToDouble(obj);
      readingValue.state = ReadingValueState.ok;
      if (valueList.ContainsKey(valueIdent))
      {
        if (valueList[valueIdent].ContainsKey(timePoint))
          return;
        valueList[valueIdent].Add(timePoint, readingValue);
      }
      else
        valueList.Add(valueIdent, new SortedList<DateTime, ReadingValue>()
        {
          {
            timePoint,
            readingValue
          }
        });
    }

    public static SortedList<long, SortedList<DateTime, ReadingValue>> FilterMeterValues(
      SortedList<long, SortedList<DateTime, ReadingValue>> source,
      List<long> filter)
    {
      if (source == null)
        return (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
      if (filter == null || filter.Count == 0)
        return source;
      for (int index = source.Keys.Count - 1; index >= 0; --index)
      {
        long key = source.Keys[index];
        if (!ValueIdent.IsExpectedValueIdent(filter, key))
          source.Remove(key);
      }
      return source;
    }

    public static string ToString(
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList,
      Dictionary<long, Type> types)
    {
      if (valueList == null)
        return string.Empty;
      StringBuilder stringBuilder = new StringBuilder();
      foreach (KeyValuePair<long, SortedList<DateTime, ReadingValue>> keyValuePair1 in valueList)
      {
        long key1 = keyValuePair1.Key;
        SortedList<DateTime, ReadingValue> sortedList = keyValuePair1.Value;
        string valueNameForValueId = ValueIdent.GetTranslatedValueNameForValueId(key1, false);
        foreach (KeyValuePair<DateTime, ReadingValue> keyValuePair2 in sortedList)
        {
          DateTime key2 = keyValuePair2.Key;
          double num = keyValuePair2.Value.value;
          stringBuilder.Append(key2.ToString("dd.MM.yy HH:mm"));
          stringBuilder.Append(" Value: ");
          stringBuilder.Append(num);
          stringBuilder.Append(" ");
          stringBuilder.Append(ValueIdent.GetUnit(key1));
          stringBuilder.Append(" ");
          if (types != null && types.ContainsKey(key1))
          {
            Type type = types[key1];
            if (type.IsEnum)
            {
              object obj = Enum.Parse(type, Convert.ToInt64(num).ToString(), true);
              stringBuilder.Append(" (");
              stringBuilder.Append(obj);
              stringBuilder.Append(")");
            }
            else
            {
              if (!type.Equals(typeof (bool)))
                throw new NotSupportedException();
              bool boolean = Convert.ToBoolean(Convert.ToInt64(num));
              stringBuilder.Append(" (");
              stringBuilder.Append(boolean);
              stringBuilder.Append(")");
            }
          }
          stringBuilder.Append(" ");
          stringBuilder.Append(key1);
          stringBuilder.Append(": ");
          stringBuilder.AppendLine(valueNameForValueId);
        }
      }
      return stringBuilder.ToString();
    }

    public static string ToPathLikeText(
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      if (valueList == null)
        return string.Empty;
      StringBuilder stringBuilder = new StringBuilder();
      foreach (KeyValuePair<long, SortedList<DateTime, ReadingValue>> keyValuePair1 in valueList)
      {
        long key1 = keyValuePair1.Key;
        SortedList<DateTime, ReadingValue> sortedList = keyValuePair1.Value;
        ValueIdent.GetValueIdNameAsPath(key1);
        foreach (KeyValuePair<DateTime, ReadingValue> keyValuePair2 in sortedList)
        {
          DateTime key2 = keyValuePair2.Key;
          double doubleValue = keyValuePair2.Value.value;
          stringBuilder.AppendLine(ValueIdent.ToPathLine(key2, doubleValue, key1));
        }
      }
      return stringBuilder.ToString();
    }

    public static string ToPathLikeTextByTimeOrder(
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      if (valueList == null)
        return string.Empty;
      List<ValueIdentTimeListItem> timeListFromIdList = ValueIdent.ToTimeListFromIdList(valueList);
      StringBuilder stringBuilder = new StringBuilder();
      int itemNumber = 0;
      foreach (ValueIdentTimeListItem identTimeListItem in timeListFromIdList)
      {
        stringBuilder.AppendLine(identTimeListItem.ToPathLikeString(itemNumber));
        ++itemNumber;
      }
      return stringBuilder.ToString();
    }

    public static string ToPathLikeErrorAndWarningTextByTimeOrder(
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      if (valueList == null)
        return string.Empty;
      List<ValueIdentTimeListItem> eventTimeList = ValueIdent.ToEventTimeList(valueList);
      StringBuilder stringBuilder = new StringBuilder();
      int itemNumber = 0;
      foreach (ValueIdentTimeListItem identTimeListItem in eventTimeList)
      {
        stringBuilder.AppendLine(identTimeListItem.ToPathLikeString(itemNumber));
        ++itemNumber;
      }
      return stringBuilder.ToString();
    }

    public static string ToPathLine(DateTime timePoint, double doubleValue, long valueIdent)
    {
      return timePoint.ToString("dd.MM.yy HH:mm:ss") + (" " + ValueIdent.GetPhysicalName(valueIdent)).PadLeft(40, '.') + ": " + (doubleValue.ToString() + " " + ValueIdent.GetUnit(valueIdent) + " ").PadRight(20, '.') + " " + ValueIdent.GetValueIdNameAsPath(valueIdent) + " (0x" + valueIdent.ToString("x016") + ")";
    }

    public static List<ValueIdentTimeListItem> ToTimeListFromIdList(
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      if (valueList == null)
        return (List<ValueIdentTimeListItem>) null;
      List<ValueIdentTimeListItem> timeListFromIdList = new List<ValueIdentTimeListItem>();
      foreach (KeyValuePair<long, SortedList<DateTime, ReadingValue>> keyValuePair1 in valueList)
      {
        long key1 = keyValuePair1.Key;
        foreach (KeyValuePair<DateTime, ReadingValue> keyValuePair2 in keyValuePair1.Value)
        {
          DateTime key2 = keyValuePair2.Key;
          ReadingValue readingValue = keyValuePair2.Value;
          if (readingValue.state == 0)
            timeListFromIdList.Add(new ValueIdentTimeListItem(key2, key1, readingValue.value));
        }
      }
      timeListFromIdList.Sort();
      return timeListFromIdList;
    }

    public static List<ValueIdentTimeListItem> ToEventTimeList(
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      if (valueList == null)
        return (List<ValueIdentTimeListItem>) null;
      List<ValueIdentTimeListItem> eventTimeList = new List<ValueIdentTimeListItem>();
      foreach (KeyValuePair<long, SortedList<DateTime, ReadingValue>> keyValuePair1 in valueList)
      {
        long key1 = keyValuePair1.Key;
        if (ValueIdent.IsEvent(key1))
        {
          foreach (KeyValuePair<DateTime, ReadingValue> keyValuePair2 in keyValuePair1.Value)
          {
            DateTime key2 = keyValuePair2.Key;
            ReadingValue readingValue = keyValuePair2.Value;
            if (readingValue.state == 0)
              eventTimeList.Add(new ValueIdentTimeListItem(key2, key1, readingValue.value));
          }
        }
      }
      eventTimeList.Sort();
      return eventTimeList;
    }

    public static DataTable ToDataTable(
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      if (valueList == null)
        return (DataTable) null;
      DataTable dataTable = new DataTable();
      dataTable.Columns.Add("#", typeof (int));
      dataTable.Columns.Add(nameof (ValueIdent), typeof (ulong));
      dataTable.Columns.Add("Date", typeof (DateTime));
      dataTable.Columns.Add("Value", typeof (double));
      dataTable.Columns.Add("Unit", typeof (string));
      dataTable.Columns.Add("Description", typeof (string));
      int num1 = 1;
      foreach (KeyValuePair<long, SortedList<DateTime, ReadingValue>> keyValuePair1 in valueList)
      {
        long key1 = keyValuePair1.Key;
        SortedList<DateTime, ReadingValue> sortedList = keyValuePair1.Value;
        string valueNameForValueId = ValueIdent.GetTranslatedValueNameForValueId(key1, false);
        foreach (KeyValuePair<DateTime, ReadingValue> keyValuePair2 in sortedList)
        {
          DateTime key2 = keyValuePair2.Key;
          double num2 = keyValuePair2.Value.value;
          dataTable.Rows.Add((object) num1++, (object) key1, (object) key2, (object) num2, (object) ValueIdent.GetUnit(key1), (object) valueNameForValueId);
        }
      }
      return dataTable;
    }

    public static ValueIdent.ValueIdPart_PhysicalQuantity ConvertToPhysicalQuantity(byte vif)
    {
      byte num = vif;
      if (num <= (byte) 15)
        return ValueIdent.ValueIdPart_PhysicalQuantity.Energy;
      switch (num)
      {
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
          return ValueIdent.ValueIdPart_PhysicalQuantity.Volume;
        case 110:
          return ValueIdent.ValueIdPart_PhysicalQuantity.Pulse;
        default:
          throw new NotSupportedException("VIF 0x" + vif.ToString("X2"));
      }
    }

    public enum ValueId_Mask : long
    {
      PhysicalQuantity = 63, // 0x000000000000003F
      MeterType = 4032, // 0x0000000000000FC0
      Calculation = 61440, // 0x000000000000F000
      CalculationStart = 4128768, // 0x00000000003F0000
      StorageInterval = 264241152, // 0x000000000FC00000
      Creation = 1879048192, // 0x0000000070000000
      Index = 8793945538560, // 0x000007FF80000000
      Tarif = 272678883688448, // 0x0000F80000000000
      full = 9223372036854775807, // 0x7FFFFFFFFFFFFFFF
    }

    public enum ValueId_MinValue : long
    {
      PhysicalQuantity = 1,
      MeterType = 64, // 0x0000000000000040
      Calculation = 4096, // 0x0000000000001000
      CalculationStart = 65536, // 0x0000000000010000
      StorageInterval = 4194304, // 0x0000000000400000
      Creation = 268435456, // 0x0000000010000000
      Index = 2147483648, // 0x0000000080000000
      Tarif = 8796093022208, // 0x0000080000000000
      NotDefined = 281474976710656, // 0x0001000000000000
    }

    public enum ValueIdPart_PhysicalQuantity : long
    {
      Any,
      Volume,
      Energy,
      Flow,
      Power,
      Mass,
      Temperature,
      TempDiff,
      HCA,
      HCA_Weighted,
      Pulse,
      CoolingEnergy,
      TempFlow,
      TempReturn,
      OperatingHours,
      ErrorNumber,
      StatusNumber,
      DigitalInputOutput,
      SignalStrength,
      CoolingVolume,
      Percent,
      DateTime,
      WarningNumber,
      ReturnVolume,
      LiterPerImpuls,
      FlowVolume,
      InfoNumber,
    }

    public enum ValueIdPart_MeterType : long
    {
      Any = 0,
      Water = 64, // 0x0000000000000040
      ColdWater = 128, // 0x0000000000000080
      WarmWater = 192, // 0x00000000000000C0
      HotWater = 256, // 0x0000000000000100
      Heat = 320, // 0x0000000000000140
      Electricity = 384, // 0x0000000000000180
      Gas = 448, // 0x00000000000001C0
      Oil = 512, // 0x0000000000000200
      Steam = 576, // 0x0000000000000240
      HeatCostAllocator = 640, // 0x0000000000000280
      PulseCounter = 704, // 0x00000000000002C0
      VolumeMeter = 768, // 0x0000000000000300
      Cooling = 832, // 0x0000000000000340
      ChangeOverHeat = 896, // 0x0000000000000380
      Barometer = 960, // 0x00000000000003C0
      Other = 1024, // 0x0000000000000400
      Collector = 1088, // 0x0000000000000440
      Thermometer = 1152, // 0x0000000000000480
      Hygrometer = 1216, // 0x00000000000004C0
      Transceiver = 1280, // 0x0000000000000500
      SmokeDetector = 1344, // 0x0000000000000540
    }

    public enum ValueIdPart_Calculation : long
    {
      Any = 0,
      Accumulated = 4096, // 0x0000000000001000
      Current = 8192, // 0x0000000000002000
      Maximum = 12288, // 0x0000000000003000
      Minimum = 16384, // 0x0000000000004000
      Average = 20480, // 0x0000000000005000
      Difference = 24576, // 0x0000000000006000
    }

    public enum ValueIdPart_CalculationStart : long
    {
      Any = 0,
      MeterProduction = 65536, // 0x0000000000010000
      Current = 131072, // 0x0000000000020000
      MeterCycle = 196608, // 0x0000000000030000
      DueDate = 262144, // 0x0000000000040000
      Year = 327680, // 0x0000000000050000
      Month = 393216, // 0x0000000000060000
      HalfMonth = 458752, // 0x0000000000070000
      Week = 524288, // 0x0000000000080000
      Day = 589824, // 0x0000000000090000
      Hour = 655360, // 0x00000000000A0000
      HalfHour = 720896, // 0x00000000000B0000
      QuarterHour = 786432, // 0x00000000000C0000
      Event = 851968, // 0x00000000000D0000
    }

    public enum ValueIdPart_StorageInterval : long
    {
      Any = 0,
      None = 4194304, // 0x0000000000400000
      MeterCycle = 8388608, // 0x0000000000800000
      DueDate = 12582912, // 0x0000000000C00000
      Year = 16777216, // 0x0000000001000000
      Month = 20971520, // 0x0000000001400000
      HalfMonth = 25165824, // 0x0000000001800000
      Week = 29360128, // 0x0000000001C00000
      Day = 33554432, // 0x0000000002000000
      Hour = 37748736, // 0x0000000002400000
      HalfHour = 41943040, // 0x0000000002800000
      QuarterHour = 46137344, // 0x0000000002C00000
    }

    public enum ValueIdPart_Creation : long
    {
      Any = 0,
      Meter = 268435456, // 0x0000000010000000
      ReadingSystem = 536870912, // 0x0000000020000000
      Estimation = 805306368, // 0x0000000030000000
      BitCompression = 1073741824, // 0x0000000040000000
      Manually = 1342177280, // 0x0000000050000000
      MeterLogger = 1610612736, // 0x0000000060000000
    }

    public enum ValueIdPart_Index : long
    {
      Any,
    }

    public enum ValueIdentInfo : long
    {
      Any = 0,
      HornFailureGone = 2147483648, // 0x0000000080000000
      PushButtonFailureGone = 4294967296, // 0x0000000100000000
      Mount = 6442450944, // 0x0000000180000000
      PollutionGone = 8589934592, // 0x0000000200000000
      ObstructionGone = 10737418240, // 0x0000000280000000
      ObjectInSurroundingAreaGone = 12884901888, // 0x0000000300000000
      TestAlarm = 15032385536, // 0x0000000380000000
      DeviceWakeup = 17179869184, // 0x0000000400000000
      WaterInMeasuringTube = 19327352832, // 0x0000000480000000
      ConfigurationChanged = 21474836480, // 0x0000000500000000
      UnitChanged = 23622320128, // 0x0000000580000000
    }

    public enum ValueIdentWarning : long
    {
      Any = 0,
      BatteryLow = 2147483648, // 0x0000000080000000
      RadioDisabled = 4294967296, // 0x0000000100000000
      LoggerDisabled = 6442450944, // 0x0000000180000000
      PulseDisabled = 8589934592, // 0x0000000200000000
      FailedToRead = 10737418240, // 0x0000000280000000
      Leak = 12884901888, // 0x0000000300000000
      Blockage = 15032385536, // 0x0000000380000000
      Backflow = 17179869184, // 0x0000000400000000
      Tamper = 19327352832, // 0x0000000480000000
      Removal = 21474836480, // 0x0000000500000000
      Oversized = 23622320128, // 0x0000000580000000
      Undersized = 25769803776, // 0x0000000600000000
      Burst = 27917287424, // 0x0000000680000000
      TemporaryError = 30064771072, // 0x0000000700000000
      TemperatureOutOfMeasuringRangeLow = 32212254720, // 0x0000000780000000
      TemperatureOutOfMeasuringRangeHigh = 34359738368, // 0x0000000800000000
      ShortCircuitReturnSensor = 36507222016, // 0x0000000880000000
      InterruptionReturnSensor = 38654705664, // 0x0000000900000000
      ShortCircuitSupplySensor = 40802189312, // 0x0000000980000000
      InterruptionSupplySensor = 42949672960, // 0x0000000A00000000
      NoWaterInMeasuringTube = 45097156608, // 0x0000000A80000000
      ReverseWaterFlowDetected = 47244640256, // 0x0000000B00000000
      AirInsideMedium = 49392123904, // 0x0000000B80000000
      VolumeFlowOutOfRange = 51539607552, // 0x0000000C00000000
      OpticalInterfacePowerOff = 53687091200, // 0x0000000C80000000
      TimebaseError = 55834574848, // 0x0000000D00000000
      Manipulation = 57982058496, // 0x0000000D80000000
      BatteryOver = 60129542144, // 0x0000000E00000000
      BatteryForeWarning = 62277025792, // 0x0000000E80000000
      Battery = 64424509440, // 0x0000000F00000000
      Pollution = 66571993088, // 0x0000000F80000000
      SmokeAlarm = 68719476736, // 0x0000001000000000
      ObstructionDetected = 70866960384, // 0x0000001080000000
      ObjectInSurroundingAreaDetected = 73014444032, // 0x0000001100000000
    }

    public enum ValueIdentError : long
    {
      Any = 0,
      DeviceError = 2147483648, // 0x0000000080000000
      Manipulation = 4294967296, // 0x0000000100000000
      BatteryVoltage = 6442450944, // 0x0000000180000000
      HardwareErrorRef1 = 8589934592, // 0x0000000200000000
      HardwareErrorRef2 = 10737418240, // 0x0000000280000000
      HardwareErrorUltrasonic = 12884901888, // 0x0000000300000000
      HardwareErrorInterpreter = 15032385536, // 0x0000000380000000
      ErrorWritePermission = 17179869184, // 0x0000000400000000
      ErrorWirelessInterface = 19327352832, // 0x0000000480000000
      StatusEndOfBattery = 21474836480, // 0x0000000500000000
      StatusInitialVerificationExpired = 23622320128, // 0x0000000580000000
      BatteryFault = 25769803776, // 0x0000000600000000
      HornFailure = 27917287424, // 0x0000000680000000
      PushButtonFailure = 30064771072, // 0x0000000700000000
      LED_Failure = 32212254720, // 0x0000000780000000
      Reset = 34359738368, // 0x0000000800000000
      Watchdog = 36507222016, // 0x0000000880000000
      MeasurementWatchdog = 38654705664, // 0x0000000900000000
      BackupReloaded = 40802189312, // 0x0000000980000000
      RAM_NotPlausible = 42949672960, // 0x0000000A00000000
      CRC_Error = 45097156608, // 0x0000000A80000000
    }

    public enum ValueId_Predefined : long
    {
      Water_Current = 272699457, // 0x0000000010411041
      HCA_Current = 272700040, // 0x0000000010411288
      HCA_CurrentW = 272700041, // 0x0000000010411289
      Pulse_Current = 272700106, // 0x00000000104112CA
      SignalStrength = 272703506, // 0x0000000010412012
      Heat_Volume = 272769345, // 0x0000000010422141
      Heat_Energy = 272769346, // 0x0000000010422142
      Heat_TempDiff = 272769351, // 0x0000000010422147
      Heat_CoolingEnergy = 272769355, // 0x000000001042214B
      Heat_TempFlow = 272769356, // 0x000000001042214C
      Heat_TempReturn = 272769357, // 0x000000001042214D
      T_Current = 272770182, // 0x0000000010422486
      RH_Current = 272770260, // 0x00000000104224D4
      Water_DueDate = 281088065, // 0x0000000010C11041
      HCA_DueDate = 281088648, // 0x0000000010C11288
      HCA_DueDateW = 281088649, // 0x0000000010C11289
      Pulse_DueDate = 281088714, // 0x0000000010C112CA
      Water_Month = 289476673, // 0x0000000011411041
      HCA_Month = 289477256, // 0x0000000011411288
      HCA_MonthW = 289477257, // 0x0000000011411289
      Pulse_Month = 289477322, // 0x00000000114112CA
      RH_Month = 289821652, // 0x00000000114653D4
      T_Month = 289821830, // 0x0000000011465486
      Water_HalfMonth = 293670977, // 0x0000000011811041
      HCA_HalfMonth = 293671560, // 0x0000000011811288
      HCA_HalfMonthW = 293671561, // 0x0000000011811289
      Pulse_HalfMonth = 293671626, // 0x00000000118112CA
      RH_HalfMonth = 294081492, // 0x00000000118753D4
      T_HalfMonth = 294081670, // 0x0000000011875486
      Water_Day = 302059585, // 0x0000000012011041
      HCA_Day = 302060168, // 0x0000000012011288
      HCA_DayW = 302060169, // 0x0000000012011289
      Pulse_Day = 302060234, // 0x00000000120112CA
      RH_Day = 302601172, // 0x00000000120953D4
      T_Day = 302601350, // 0x0000000012095486
      Water_QuarterHour = 314642497, // 0x0000000012C11041
      SD_Month = 1094788432, // 0x0000000041412550
      SD_HalfMonth = 1098982736, // 0x0000000041812550
      SD_Day = 1107371344, // 0x0000000042012550
      TemperatureDistribution_Current = 1107907718, // 0x0000000042095486
      HumidityDistribution_Current = 1107907796, // 0x00000000420954D4
    }
  }
}


--- ValueIdentForm.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ValueIdentForm
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ValueIdentForm : Form
  {
    private bool isReadyValueIdentBoxes = false;
    private static ValueIdentForm instance;
    private IContainer components = (IContainer) null;
    private Label lblValueIdent;
    private Label label2;
    private GroupBox groupBox2;
    private ComboBox cboxPhysicalQuantity;
    private Label label21;
    private Label label16;
    private ComboBox cboxCreation;
    private ComboBox cboxMeterType;
    private Label label17;
    private ComboBox cboxStorageInterval;
    private Label label20;
    private Label label18;
    private ComboBox cboxCalculationStart;
    private ComboBox cboxCalculation;
    private Label label19;
    private Button btnOK;

    public ValueIdentForm()
    {
      this.InitializeComponent();
      this.InitializeComboBoxes();
    }

    public static void Show(long valueIdent)
    {
      if (ValueIdentForm.instance == null)
        ValueIdentForm.instance = new ValueIdentForm();
      ValueIdentForm.instance.lblValueIdent.Text = valueIdent.ToString();
      ValueIdentForm.instance.ChooseValueIdentComboBoxes(valueIdent);
      int num = (int) ValueIdentForm.instance.ShowDialog();
    }

    private void btnOK_Click(object sender, EventArgs e) => this.Close();

    private void InitializeComboBoxes()
    {
      this.cboxPhysicalQuantity.DataSource = (object) new BindingSource()
      {
        DataSource = (object) ValueIdent.GetTranslatedStringListForValueIdPart(typeof (ValueIdent.ValueIdPart_PhysicalQuantity))
      };
      this.cboxCalculation.DataSource = (object) new BindingSource()
      {
        DataSource = (object) ValueIdent.GetTranslatedStringListForValueIdPart(typeof (ValueIdent.ValueIdPart_Calculation))
      };
      this.cboxCalculationStart.DataSource = (object) new BindingSource()
      {
        DataSource = (object) ValueIdent.GetTranslatedStringListForValueIdPart(typeof (ValueIdent.ValueIdPart_CalculationStart))
      };
      this.cboxCreation.DataSource = (object) new BindingSource()
      {
        DataSource = (object) ValueIdent.GetTranslatedStringListForValueIdPart(typeof (ValueIdent.ValueIdPart_Creation))
      };
      this.cboxMeterType.DataSource = (object) new BindingSource()
      {
        DataSource = (object) ValueIdent.GetTranslatedStringListForValueIdPart(typeof (ValueIdent.ValueIdPart_MeterType))
      };
      this.cboxStorageInterval.DataSource = (object) new BindingSource()
      {
        DataSource = (object) ValueIdent.GetTranslatedStringListForValueIdPart(typeof (ValueIdent.ValueIdPart_StorageInterval))
      };
      this.isReadyValueIdentBoxes = true;
    }

    private long CalculateValueIdent()
    {
      if (this.cboxPhysicalQuantity.SelectedItem == null || this.cboxMeterType.SelectedItem == null || this.cboxCalculation.SelectedItem == null || this.cboxCalculationStart.SelectedItem == null || this.cboxStorageInterval.SelectedItem == null || this.cboxCreation.SelectedItem == null)
        return 0;
      long key1 = ((KeyValuePair<long, string>) this.cboxPhysicalQuantity.SelectedItem).Key;
      KeyValuePair<long, string> selectedItem = (KeyValuePair<long, string>) this.cboxMeterType.SelectedItem;
      long key2 = selectedItem.Key;
      selectedItem = (KeyValuePair<long, string>) this.cboxCalculation.SelectedItem;
      long key3 = selectedItem.Key;
      selectedItem = (KeyValuePair<long, string>) this.cboxCalculationStart.SelectedItem;
      long key4 = selectedItem.Key;
      selectedItem = (KeyValuePair<long, string>) this.cboxStorageInterval.SelectedItem;
      long key5 = selectedItem.Key;
      selectedItem = (KeyValuePair<long, string>) this.cboxCreation.SelectedItem;
      long key6 = selectedItem.Key;
      // ISSUE: variable of a boxed type
      __Boxed<ValueIdent.ValueIdPart_Index> index = (Enum) ValueIdent.ValueIdPart_Index.Any;
      return ValueIdent.GetValueIdForValueEnum((ValueIdent.ValueIdPart_PhysicalQuantity) key1, (ValueIdent.ValueIdPart_MeterType) key2, (ValueIdent.ValueIdPart_Calculation) key3, (ValueIdent.ValueIdPart_CalculationStart) key4, (ValueIdent.ValueIdPart_StorageInterval) key5, (ValueIdent.ValueIdPart_Creation) key6, (object) index);
    }

    private void ChooseValueIdentComboBoxes(long valueToShow)
    {
      if (ValueIdent.IsValid(valueToShow))
      {
        this.cboxPhysicalQuantity.SelectedValue = (object) (long) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(valueToShow);
        this.cboxMeterType.SelectedValue = (object) (long) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(valueToShow);
        this.cboxCalculation.SelectedValue = (object) (long) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Calculation>(valueToShow);
        this.cboxCalculationStart.SelectedValue = (object) (long) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_CalculationStart>(valueToShow);
        this.cboxStorageInterval.SelectedValue = (object) (long) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_StorageInterval>(valueToShow);
        this.cboxCreation.SelectedValue = (object) (long) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Creation>(valueToShow);
      }
      else
      {
        int num = (int) MessageBox.Show("Illegel ValueIdent number");
      }
    }

    private void cboxMeterType_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (!this.isReadyValueIdentBoxes)
        return;
      this.lblValueIdent.Text = this.CalculateValueIdent().ToString();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.lblValueIdent = new Label();
      this.label2 = new Label();
      this.groupBox2 = new GroupBox();
      this.cboxPhysicalQuantity = new ComboBox();
      this.label21 = new Label();
      this.label16 = new Label();
      this.cboxCreation = new ComboBox();
      this.cboxMeterType = new ComboBox();
      this.label17 = new Label();
      this.cboxStorageInterval = new ComboBox();
      this.label20 = new Label();
      this.label18 = new Label();
      this.cboxCalculationStart = new ComboBox();
      this.cboxCalculation = new ComboBox();
      this.label19 = new Label();
      this.btnOK = new Button();
      this.groupBox2.SuspendLayout();
      this.SuspendLayout();
      this.lblValueIdent.AutoSize = true;
      this.lblValueIdent.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblValueIdent.Location = new Point(146, 21);
      this.lblValueIdent.Name = "lblValueIdent";
      this.lblValueIdent.Size = new Size(116, 25);
      this.lblValueIdent.TabIndex = 0;
      this.lblValueIdent.Text = "00000000";
      this.label2.AutoSize = true;
      this.label2.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.label2.Location = new Point(12, 21);
      this.label2.Name = "label2";
      this.label2.Size = new Size(131, 25);
      this.label2.TabIndex = 1;
      this.label2.Text = "ValueIdent:";
      this.groupBox2.Controls.Add((Control) this.cboxPhysicalQuantity);
      this.groupBox2.Controls.Add((Control) this.label21);
      this.groupBox2.Controls.Add((Control) this.label16);
      this.groupBox2.Controls.Add((Control) this.cboxCreation);
      this.groupBox2.Controls.Add((Control) this.cboxMeterType);
      this.groupBox2.Controls.Add((Control) this.label17);
      this.groupBox2.Controls.Add((Control) this.cboxStorageInterval);
      this.groupBox2.Controls.Add((Control) this.label20);
      this.groupBox2.Controls.Add((Control) this.label18);
      this.groupBox2.Controls.Add((Control) this.cboxCalculationStart);
      this.groupBox2.Controls.Add((Control) this.cboxCalculation);
      this.groupBox2.Controls.Add((Control) this.label19);
      this.groupBox2.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.groupBox2.Location = new Point(17, 58);
      this.groupBox2.Name = "groupBox2";
      this.groupBox2.Size = new Size(270, 177);
      this.groupBox2.TabIndex = 8;
      this.groupBox2.TabStop = false;
      this.cboxPhysicalQuantity.DisplayMember = "Value";
      this.cboxPhysicalQuantity.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxPhysicalQuantity.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.cboxPhysicalQuantity.FormattingEnabled = true;
      this.cboxPhysicalQuantity.Location = new Point(107, 42);
      this.cboxPhysicalQuantity.Name = "cboxPhysicalQuantity";
      this.cboxPhysicalQuantity.Size = new Size(141, 21);
      this.cboxPhysicalQuantity.TabIndex = 8;
      this.cboxPhysicalQuantity.ValueMember = "Key";
      this.cboxPhysicalQuantity.SelectedIndexChanged += new System.EventHandler(this.cboxMeterType_SelectedIndexChanged);
      this.label21.AutoSize = true;
      this.label21.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label21.Location = new Point(7, 45);
      this.label21.Name = "label21";
      this.label21.Size = new Size(89, 13);
      this.label21.TabIndex = 20;
      this.label21.Text = "Physical quantity:";
      this.label16.AutoSize = true;
      this.label16.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label16.Location = new Point(47, 151);
      this.label16.Name = "label16";
      this.label16.Size = new Size(49, 13);
      this.label16.TabIndex = 30;
      this.label16.Text = "Creation:";
      this.cboxCreation.DisplayMember = "Value";
      this.cboxCreation.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxCreation.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.cboxCreation.FormattingEnabled = true;
      this.cboxCreation.Location = new Point(107, 148);
      this.cboxCreation.Name = "cboxCreation";
      this.cboxCreation.Size = new Size(141, 21);
      this.cboxCreation.TabIndex = 13;
      this.cboxCreation.ValueMember = "Key";
      this.cboxCreation.SelectedIndexChanged += new System.EventHandler(this.cboxMeterType_SelectedIndexChanged);
      this.cboxMeterType.DisplayMember = "Value";
      this.cboxMeterType.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxMeterType.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.cboxMeterType.FormattingEnabled = true;
      this.cboxMeterType.Location = new Point(107, 16);
      this.cboxMeterType.Name = "cboxMeterType";
      this.cboxMeterType.Size = new Size(141, 21);
      this.cboxMeterType.TabIndex = 9;
      this.cboxMeterType.ValueMember = "Key";
      this.cboxMeterType.SelectedIndexChanged += new System.EventHandler(this.cboxMeterType_SelectedIndexChanged);
      this.label17.AutoSize = true;
      this.label17.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label17.Location = new Point(12, 125);
      this.label17.Name = "label17";
      this.label17.Size = new Size(84, 13);
      this.label17.TabIndex = 28;
      this.label17.Text = "Storage interval:";
      this.cboxStorageInterval.DisplayMember = "Value";
      this.cboxStorageInterval.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxStorageInterval.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.cboxStorageInterval.FormattingEnabled = true;
      this.cboxStorageInterval.Location = new Point(107, 121);
      this.cboxStorageInterval.Name = "cboxStorageInterval";
      this.cboxStorageInterval.Size = new Size(141, 21);
      this.cboxStorageInterval.TabIndex = 12;
      this.cboxStorageInterval.ValueMember = "Key";
      this.cboxStorageInterval.SelectedIndexChanged += new System.EventHandler(this.cboxMeterType_SelectedIndexChanged);
      this.label20.AutoSize = true;
      this.label20.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label20.Location = new Point(36, 20);
      this.label20.Name = "label20";
      this.label20.Size = new Size(60, 13);
      this.label20.TabIndex = 22;
      this.label20.Text = "Meter type:";
      this.label18.AutoSize = true;
      this.label18.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label18.Location = new Point(11, 98);
      this.label18.Name = "label18";
      this.label18.Size = new Size(85, 13);
      this.label18.TabIndex = 26;
      this.label18.Text = "Calculation start:";
      this.cboxCalculationStart.DisplayMember = "Value";
      this.cboxCalculationStart.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxCalculationStart.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.cboxCalculationStart.FormattingEnabled = true;
      this.cboxCalculationStart.Location = new Point(107, 94);
      this.cboxCalculationStart.Name = "cboxCalculationStart";
      this.cboxCalculationStart.Size = new Size(141, 21);
      this.cboxCalculationStart.TabIndex = 11;
      this.cboxCalculationStart.ValueMember = "Key";
      this.cboxCalculationStart.SelectedIndexChanged += new System.EventHandler(this.cboxMeterType_SelectedIndexChanged);
      this.cboxCalculation.DisplayMember = "Value";
      this.cboxCalculation.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxCalculation.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.cboxCalculation.FormattingEnabled = true;
      this.cboxCalculation.Location = new Point(107, 68);
      this.cboxCalculation.Name = "cboxCalculation";
      this.cboxCalculation.Size = new Size(141, 21);
      this.cboxCalculation.TabIndex = 10;
      this.cboxCalculation.ValueMember = "Key";
      this.cboxCalculation.SelectedIndexChanged += new System.EventHandler(this.cboxMeterType_SelectedIndexChanged);
      this.label19.AutoSize = true;
      this.label19.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label19.Location = new Point(34, 71);
      this.label19.Name = "label19";
      this.label19.Size = new Size(62, 13);
      this.label19.TabIndex = 24;
      this.label19.Text = "Calculation:";
      this.btnOK.Location = new Point(114, 246);
      this.btnOK.Name = "btnOK";
      this.btnOK.Size = new Size(75, 23);
      this.btnOK.TabIndex = 9;
      this.btnOK.Text = "OK";
      this.btnOK.UseVisualStyleBackColor = true;
      this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
      this.AcceptButton = (IButtonControl) this.btnOK;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.CancelButton = (IButtonControl) this.btnOK;
      this.ClientSize = new Size(303, 281);
      this.Controls.Add((Control) this.btnOK);
      this.Controls.Add((Control) this.groupBox2);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.lblValueIdent);
      this.Name = nameof (ValueIdentForm);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "ValueIdent";
      this.groupBox2.ResumeLayout(false);
      this.groupBox2.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- ValueIdentSet.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ValueIdentSet
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Collections.Generic;

#nullable disable
namespace ZR_ClassLibrary
{
  public sealed class ValueIdentSet : EventArgs
  {
    public string SerialNumber;
    public string DeviceType;
    public int Channel;
    public byte[] Buffer;
    public string ZDF;
    public SortedList<long, SortedList<DateTime, ReadingValue>> AvailableValues;

    public object Tag { get; set; }

    public string Manufacturer { get; set; }

    public string Version { get; set; }

    public string MainDeviceSerialNumber { get; set; }

    public string PrimaryAddress { get; set; }

    public int Total { get; set; }

    public int? Scenario { get; set; }
  }
}


--- ValueIdentTimeListItem.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ValueIdentTimeListItem
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ValueIdentTimeListItem : IComparable<ValueIdentTimeListItem>
  {
    internal DateTime TimePoint;
    internal long ValueID;
    internal double Value;

    public ValueIdentTimeListItem(DateTime timePoint, long valueID, double value)
    {
      this.TimePoint = timePoint;
      this.ValueID = valueID;
      this.Value = value;
    }

    public int CompareTo(ValueIdentTimeListItem toObject)
    {
      int num = this.TimePoint.CompareTo(toObject.TimePoint);
      return num != 0 ? num : this.ValueID.CompareTo(toObject.ValueID);
    }

    public string ToPathLikeString(int itemNumber)
    {
      return itemNumber.ToString() + " " + ValueIdent.ToPathLine(this.TimePoint, this.Value, this.ValueID);
    }
  }
}


--- ValueIdentTranslation.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ValueIdentTranslation
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Resources;
using System.Runtime.CompilerServices;

#nullable disable
namespace ZR_ClassLibrary
{
  [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
  [DebuggerNonUserCode]
  [CompilerGenerated]
  internal class ValueIdentTranslation
  {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;

    internal ValueIdentTranslation()
    {
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static ResourceManager ResourceManager
    {
      get
      {
        if (ValueIdentTranslation.resourceMan == null)
          ValueIdentTranslation.resourceMan = new ResourceManager("ZR_ClassLibrary.ValueIdentTranslation", typeof (ValueIdentTranslation).Assembly);
        return ValueIdentTranslation.resourceMan;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static CultureInfo Culture
    {
      get => ValueIdentTranslation.resourceCulture;
      set => ValueIdentTranslation.resourceCulture = value;
    }

    internal static string ValueIdentErrorAny
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentErrorAny), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentErrorBatteryVoltage
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentErrorBatteryVoltage), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentErrorDeviceError
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentErrorDeviceError), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentErrorErrorWirelessInterface
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentErrorErrorWirelessInterface), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentErrorErrorWritePermission
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentErrorErrorWritePermission), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentErrorHardwareErrorInterpreter
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentErrorHardwareErrorInterpreter), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentErrorHardwareErrorRef1
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentErrorHardwareErrorRef1), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentErrorHardwareErrorRef2
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentErrorHardwareErrorRef2), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentErrorHardwareErrorUltrasonic
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentErrorHardwareErrorUltrasonic), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentErrorManipulation
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentErrorManipulation), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentErrorStatusEndOfBattery
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentErrorStatusEndOfBattery), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentErrorStatusInitialVerificationExpired
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentErrorStatusInitialVerificationExpired), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningAirInsideMedium
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningAirInsideMedium), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningAny
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningAny), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningBackflow
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningBackflow), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningBatteryLow
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningBatteryLow), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningBlockage
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningBlockage), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningBurst
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningBurst), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningFailedToRead
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningFailedToRead), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningInterruptionReturnSensor
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningInterruptionReturnSensor), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningInterruptionSupplySensor
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningInterruptionSupplySensor), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningLeak
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningLeak), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningLoggerDisabled
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningLoggerDisabled), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningNoWaterInMeasuringTube
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningNoWaterInMeasuringTube), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningOpticalInterfacePowerOff
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningOpticalInterfacePowerOff), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningOversized
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningOversized), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningPulseDisabled
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningPulseDisabled), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningRadioDisabled
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningRadioDisabled), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningRemoval
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningRemoval), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningReverseWaterFlowDetected
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningReverseWaterFlowDetected), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningShortCircuitReturnSensor
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningShortCircuitReturnSensor), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningShortCircuitSupplySensor
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningShortCircuitSupplySensor), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningTamper
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningTamper), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningTemperatureOutOfMeasuringRangeHigh
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningTemperatureOutOfMeasuringRangeHigh), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningTemperatureOutOfMeasuringRangeLow
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningTemperatureOutOfMeasuringRangeLow), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningTemporaryError
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningTemporaryError), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningTimebaseError
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningTimebaseError), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningUndersized
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningUndersized), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdentWarningVolumeFlowOutOfRange
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdentWarningVolumeFlowOutOfRange), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationAccumulated
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationAccumulated), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationAny
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationAny), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationAverage
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationAverage), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationCurrent
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationCurrent), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationDifference
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationDifference), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationMaximum
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationMaximum), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationMinimum
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationMinimum), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartAny
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartAny), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartCurrent
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartCurrent), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartDay
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartDay), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartDueDate
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartDueDate), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartHalfHour
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartHalfHour), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartHalfMonth
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartHalfMonth), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartHour
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartHour), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartMeterCycle
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartMeterCycle), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartMeterProduction
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartMeterProduction), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartMonth
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartMonth), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartQuarterHour
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartQuarterHour), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartWeek
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartWeek), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CalculationStartYear
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CalculationStartYear), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CreationAny
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CreationAny), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CreationBitCompression
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CreationBitCompression), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CreationEstimation
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CreationEstimation), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CreationManually
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CreationManually), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CreationMeter
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CreationMeter), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_CreationReadingSystem
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_CreationReadingSystem), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_IndexAny
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_IndexAny), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeAny
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeAny), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeBarometer
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeBarometer), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeChangeOverHeat
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeChangeOverHeat), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeColdWater
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeColdWater), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeCollector
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeCollector), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeCooling
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeCooling), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeElectricity
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeElectricity), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeGas
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeGas), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeHeat
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeHeat), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeHeatCostAllocator
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeHeatCostAllocator), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeHotWater
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeHotWater), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeHygrometer
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeHygrometer), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeOil
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeOil), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeOther
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeOther), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypePulseCounter
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypePulseCounter), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeSmokeDetector
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeSmokeDetector), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeSteam
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeSteam), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeThermometer
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeThermometer), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeTransceiver
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeTransceiver), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeVolumeMeter
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeVolumeMeter), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeWarmWater
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeWarmWater), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_MeterTypeWater
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_MeterTypeWater), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityAny
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityAny), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityCoolingEnergy
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityCoolingEnergy), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityCoolingVolume
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityCoolingVolume), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityDateTime
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityDateTime), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityDigitalInputOutput
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityDigitalInputOutput), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityEnergy
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityEnergy), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityErrorNumber
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityErrorNumber), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityFlow
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityFlow), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityHCA
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityHCA), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityHCA_Weighted
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityHCA_Weighted), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityMass
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityMass), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityOperatingHours
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityOperatingHours), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityPercent
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityPercent), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityPower
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityPower), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityPulse
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityPulse), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityReturnVolume
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityReturnVolume), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantitySignalStrength
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantitySignalStrength), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityStatusNumber
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityStatusNumber), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityTempDiff
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityTempDiff), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityTemperature
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityTemperature), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityTempFlow
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityTempFlow), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityTempReturn
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityTempReturn), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityVolume
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityVolume), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_PhysicalQuantityWarningNumber
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_PhysicalQuantityWarningNumber), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_StorageIntervalAny
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_StorageIntervalAny), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_StorageIntervalDay
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_StorageIntervalDay), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_StorageIntervalDueDate
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_StorageIntervalDueDate), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_StorageIntervalHalfHour
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_StorageIntervalHalfHour), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_StorageIntervalHalfMonth
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_StorageIntervalHalfMonth), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_StorageIntervalHour
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_StorageIntervalHour), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_StorageIntervalMeterCycle
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_StorageIntervalMeterCycle), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_StorageIntervalMonth
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_StorageIntervalMonth), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_StorageIntervalNone
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_StorageIntervalNone), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_StorageIntervalQuarterHour
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_StorageIntervalQuarterHour), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_StorageIntervalWeek
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_StorageIntervalWeek), ValueIdentTranslation.resourceCulture);
      }
    }

    internal static string ValueIdPart_StorageIntervalYear
    {
      get
      {
        return ValueIdentTranslation.ResourceManager.GetString(nameof (ValueIdPart_StorageIntervalYear), ValueIdentTranslation.resourceCulture);
      }
    }
  }
}


--- VolumeInputModes.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.VolumeInputModes
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum VolumeInputModes : byte
  {
    Impulse_10Hz,
    Impulse_100Hz,
    Impulse_10kHz_Active,
    Impulse_10kHz_Passive,
    ImpulseAndDirection_10Hz,
    ImpulseAndDirection_100Hz,
    ImpulseUpAndDown_10Hz,
    ImpulseUpAndDown_100Hz,
    Encoder_A_B_x1_10Hz,
    Encoder_A_B_x1_100Hz,
    Encoder_A_B_x2_10Hz,
    Encoder_A_B_x2_100Hz,
    Encoder_A_B_x4_10Hz,
    Encoder_A_B_x4_100Hz,
    VMCP_Interface,
  }
}


--- WaitWindow.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.WaitWindow
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using CorporateDesign;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class WaitWindow : Form
  {
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    public Label labelWaitText;
    public ProgressBar progressBarWait2;
    public ProgressBar progressBarWait1;
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;

    public WaitWindow() => this.InitializeComponent();

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.labelWaitText = new Label();
      this.progressBarWait2 = new ProgressBar();
      this.progressBarWait1 = new ProgressBar();
      this.SuspendLayout();
      this.zennerCoroprateDesign1.Dock = DockStyle.Fill;
      this.zennerCoroprateDesign1.Location = new Point(0, 0);
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.zennerCoroprateDesign1.Size = new Size(554, 311);
      this.zennerCoroprateDesign1.TabIndex = 0;
      this.labelWaitText.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.labelWaitText.Location = new Point(32, 64);
      this.labelWaitText.Name = "labelWaitText";
      this.labelWaitText.Size = new Size(504, 168);
      this.labelWaitText.TabIndex = 1;
      this.labelWaitText.Text = "Wait info";
      this.labelWaitText.TextAlign = ContentAlignment.TopCenter;
      this.progressBarWait2.Location = new Point(24, 280);
      this.progressBarWait2.Name = "progressBarWait2";
      this.progressBarWait2.Size = new Size(520, 24);
      this.progressBarWait2.TabIndex = 2;
      this.progressBarWait1.Location = new Point(24, 248);
      this.progressBarWait1.Name = "progressBarWait1";
      this.progressBarWait1.Size = new Size(520, 24);
      this.progressBarWait1.TabIndex = 2;
      this.AutoScaleBaseSize = new Size(5, 13);
      this.ClientSize = new Size(554, 311);
      this.ControlBox = false;
      this.Controls.Add((Control) this.labelWaitText);
      this.Controls.Add((Control) this.progressBarWait2);
      this.Controls.Add((Control) this.progressBarWait1);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.Name = nameof (WaitWindow);
      this.Text = "Please Wait ...";
      this.ResumeLayout(false);
    }
  }
}


--- WaveFlowProfiles.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.WaveFlowProfiles
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum WaveFlowProfiles
  {
    Unknown,
    P00_4Inputs,
    P08_2Inputs_BackflowDetection_Specific,
    P09_2Inputs_BackflowDetection_Default,
    P0D_2Inputs_BackflowDetection_CybleSensors,
    P0B_1Input_BackflowDetection_ValveManagement,
  }
}


--- WF_OverrideID.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.WF_OverrideID
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum WF_OverrideID
  {
    NumberOfCounters,
    PulseValue1,
    PulseValue2,
    PulseValue3,
    PulseValue4,
    ManDetect,
    LeakCycle,
    LeakDetectMin,
    LeakDetectMax,
    LeakFlowLimitMin1,
    LeakFlowLimitMin2,
    LeakFlowLimitMin3,
    LeakFlowLimitMin4,
    LeakFlowLimitMax1,
    LeakFlowLimitMax2,
    LeakFlowLimitMax3,
    LeakFlowLimitMax4,
    LeakDayLimitMin1,
    LeakDayLimitMin2,
    LeakDayLimitMin3,
    LeakDayLimitMin4,
    LeakDayLimitMax1,
    LeakDayLimitMax2,
    LeakDayLimitMax3,
    LeakDayLimitMax4,
    LoggerUsed,
    LoggerType,
    LoggerDayOfMonth,
    LoggerHour,
    LoggerDayOfWeek,
    LoggerFactor,
    LoggerInterval,
    LoggerStart,
  }
}


--- WFC_LoggerTypes.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.WFC_LoggerTypes
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum WFC_LoggerTypes
  {
    Inaktiv,
    Zeitintervall,
    Wochenlogger,
    Monatslogger,
  }
}


--- WFC_ManipulationTypes.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.WFC_ManipulationTypes
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

#nullable disable
namespace ZR_ClassLibrary
{
  public enum WFC_ManipulationTypes
  {
    Inaktiv,
    Kabelbruch,
    Abnahme,
    Manipulation,
  }
}


--- ZR_About.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ZR_About
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using CorporateDesign;
using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ZR_About : Form
  {
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private TextBox textBoxAbout;
    private Button buttonCopyTextToClipboard;
    private TextBox textBoxInfos;
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;

    public ZR_About(ArrayList FullNames)
    {
      this.InitializeComponent();
      string path = Path.Combine(Application.StartupPath, "About.txt");
      try
      {
        using (StreamReader streamReader = new StreamReader(path))
        {
          while (true)
          {
            string str = streamReader.ReadLine();
            if (str != null)
              this.textBoxAbout.AppendText(str + Environment.NewLine);
            else
              break;
          }
          streamReader.Close();
        }
      }
      catch
      {
      }
      StringBuilder stringBuilder = new StringBuilder(5000);
      stringBuilder.AppendLine("Metrological core: " + this.GetFileChecksum("DeviceCollector"));
      stringBuilder.AppendLine();
      stringBuilder.AppendLine("------------------------------------------------------------");
      stringBuilder.AppendLine("Assambly versions:");
      stringBuilder.AppendLine();
      foreach (string fullName in FullNames)
      {
        DateTime dateTime = new DateTime(2000, 1, 1);
        string Name;
        int Version;
        string VersionString;
        int Revision;
        DateTime BuildTime;
        if (ParameterService.GetAssamblyVersionParts(fullName, out Name, out Version, out VersionString, out Revision, out BuildTime, out int _))
        {
          stringBuilder.Append(Name.PadRight(40, '.'));
          stringBuilder.Append("Version: ");
          if (!Name.StartsWith("System") && BuildTime < DateTime.Now && BuildTime != DateTime.MinValue && BuildTime != dateTime)
          {
            stringBuilder.Append(Version.ToString("d02"));
            stringBuilder.Append('.');
            stringBuilder.Append(Revision.ToString("d02"));
            stringBuilder.Append("  Build time: ");
            stringBuilder.Append(BuildTime.ToString("dd.MM.yyyy HH:mm"));
          }
          else
            stringBuilder.Append(VersionString);
          stringBuilder.AppendLine();
        }
      }
      this.textBoxInfos.Text = stringBuilder.ToString();
    }

    private string GetFileChecksum(string filename)
    {
      StringBuilder stringBuilder = new StringBuilder();
      int num = 35678;
      stringBuilder.Append(num.ToString("X04"));
      for (int index = 0; index < 7; ++index)
      {
        stringBuilder.Append('-');
        num *= 3;
        num += 12624;
        num &= (int) ushort.MaxValue;
        stringBuilder.Append(num.ToString("X04"));
      }
      return stringBuilder.ToString();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (ZR_About));
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.textBoxAbout = new TextBox();
      this.buttonCopyTextToClipboard = new Button();
      this.textBoxInfos = new TextBox();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.zennerCoroprateDesign1, "zennerCoroprateDesign1");
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      componentResourceManager.ApplyResources((object) this.textBoxAbout, "textBoxAbout");
      this.textBoxAbout.BackColor = SystemColors.Control;
      this.textBoxAbout.BorderStyle = BorderStyle.None;
      this.textBoxAbout.ForeColor = Color.FromArgb(0, 0, 192);
      this.textBoxAbout.Name = "textBoxAbout";
      componentResourceManager.ApplyResources((object) this.buttonCopyTextToClipboard, "buttonCopyTextToClipboard");
      this.buttonCopyTextToClipboard.Name = "buttonCopyTextToClipboard";
      this.buttonCopyTextToClipboard.UseVisualStyleBackColor = true;
      this.buttonCopyTextToClipboard.Click += new System.EventHandler(this.buttonCopyTextToClipboard_Click);
      componentResourceManager.ApplyResources((object) this.textBoxInfos, "textBoxInfos");
      this.textBoxInfos.BackColor = SystemColors.ControlLightLight;
      this.textBoxInfos.Name = "textBoxInfos";
      this.textBoxInfos.ReadOnly = true;
      componentResourceManager.ApplyResources((object) this, "$this");
      this.Controls.Add((Control) this.textBoxInfos);
      this.Controls.Add((Control) this.buttonCopyTextToClipboard);
      this.Controls.Add((Control) this.textBoxAbout);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Name = nameof (ZR_About);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private void buttonOk_Click(object sender, EventArgs e)
    {
    }

    private void buttonCopyTextToClipboard_Click(object sender, EventArgs e)
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine(this.textBoxAbout.Text);
      stringBuilder.AppendLine(this.textBoxInfos.Text);
      Clipboard.SetDataObject((object) stringBuilder.ToString());
    }
  }
}


--- ZR_Calendar.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ZR_Calendar
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ZR_Calendar
  {
    public const uint Cal_SecoundsPerDay = 86400;
    public const uint Cal_SecoundsPerMonth = 2629800;
    public const uint Cal_SecoundsPerYear = 31557600;
    private static uint[] MonthBeginTabel = new uint[26]
    {
      0U,
      31U,
      59U,
      90U,
      120U,
      151U,
      181U,
      212U,
      243U,
      273U,
      304U,
      334U,
      365U,
      0U,
      31U,
      60U,
      91U,
      121U,
      152U,
      182U,
      213U,
      244U,
      274U,
      305U,
      335U,
      366U
    };

    public static uint Cal_GetNow() => ZR_Calendar.Cal_GetMeterTime(DateTime.Now);

    public static uint Cal_GetMeterTime(DateTime TheTime)
    {
      DateTime dateTime = new DateTime(1980, 1, 1);
      return (uint) (TheTime - dateTime).TotalSeconds;
    }

    public static DateTime Cal_GetDateTime(uint TheTime)
    {
      return TheTime == uint.MaxValue ? DateTime.MinValue : new DateTime(1980, 1, 1, 0, 0, 0, DateTimeKind.Unspecified).Add(new TimeSpan(0, 0, (int) TheTime));
    }

    public static CalStruct Cal_Sec80ToStruct(uint Sec80)
    {
      CalTime time = ZR_Calendar.Cal_Sec80ToTime(Sec80);
      CalDate date = ZR_Calendar.Cal_Sec80ToDate(Sec80);
      return new CalStruct()
      {
        Secound = time.Secound,
        Minute = time.Minute,
        Hour = time.Hour,
        Day = date.Day,
        Month = date.Month,
        Year = date.Year
      };
    }

    public static uint Cal_StructToSec80(CalStruct DateTime)
    {
      CalTime Time = new CalTime();
      CalDate Date = new CalDate();
      Time.Secound = DateTime.Secound;
      Time.Minute = DateTime.Minute;
      Time.Hour = DateTime.Hour;
      Date.Day = DateTime.Day;
      Date.Month = DateTime.Month;
      Date.Year = DateTime.Year;
      return ZR_Calendar.Cal_TimeToSec80(Time) + ZR_Calendar.Cal_DateToSec80(Date);
    }

    public static CalTime Cal_Sec80ToTime(uint Sec80)
    {
      return new CalTime()
      {
        Secound = Sec80 % 60U,
        Minute = Sec80 % 3600U / 60U,
        Hour = Sec80 % 86400U / 3600U
      };
    }

    public static uint Cal_TimeToSec80(CalTime Time)
    {
      if (Time.Secound > 59U)
        Time.Secound = 59U;
      if (Time.Minute > 59U)
        Time.Minute = 59U;
      if (Time.Hour > 23U)
        Time.Hour = 23U;
      return Time.Secound + Time.Minute * 60U + Time.Hour * 3600U;
    }

    public static CalDate Cal_Sec80ToDate(uint Sec80)
    {
      CalDate date = new CalDate();
      uint num1 = Sec80 / 86400U;
      uint num2 = (num1 << 2) / 1461U;
      date.Year = 1980U + num2;
      uint num3 = num1 - (num2 * 365U + (num2 + 3U >> 2));
      uint index = num2 % 4U <= 0U ? 13U : 0U;
      while (num3 >= ZR_Calendar.MonthBeginTabel[(int) index + 1])
        ++index;
      date.Month = index <= 12U ? index + 1U : index - 12U;
      date.Day = (uint) ((int) num3 - (int) ZR_Calendar.MonthBeginTabel[(int) index] + 1);
      return date;
    }

    public static uint Cal_DateToSec80(CalDate Date)
    {
      while (Date.Year < 1980U)
        Date.Year += 100U;
      while (Date.Year > 2099U)
        Date.Year -= 100U;
      if (Date.Month < 1U)
      {
        Date.Month = 12U;
        --Date.Year;
      }
      if (Date.Month > 12U)
        Date.Month = 12U;
      if (Date.Day < 1U)
        Date.Day = 1U;
      uint num1 = Date.Year - 1980U;
      uint num2 = num1 % 4U <= 0U ? 13U : 0U;
      uint num3 = ZR_Calendar.MonthBeginTabel[(int) num2 + (int) Date.Month] - ZR_Calendar.MonthBeginTabel[(int) num2 + (int) Date.Month - 1];
      if (Date.Day > num3)
        Date.Day = num3;
      uint index = (uint) ((int) num2 + (int) Date.Month - 1);
      return ((uint) ((int) ZR_Calendar.MonthBeginTabel[(int) index] + (int) Date.Day - 1) + (num1 * 365U + (num1 + 3U >> 2))) * 86400U;
    }

    public static byte Cal_GetWeekdayBit(uint TimePoint)
    {
      return (byte) (1U << (int) ((TimePoint / 86400U + 1U) % 7U));
    }

    public static uint Cal_SetTimeToNextYear(uint Sec80)
    {
      bool flag = true;
      CalDate date = ZR_Calendar.Cal_Sec80ToDate(Sec80);
      while (true)
      {
        if (flag)
        {
          if (Sec80 > ZR_Calendar.Cal_GetNow())
          {
            --date.Year;
          }
          else
          {
            flag = false;
            continue;
          }
        }
        else if (Sec80 < ZR_Calendar.Cal_GetNow())
          ++date.Year;
        else
          break;
        Sec80 = ZR_Calendar.Cal_DateToSec80(date) + Sec80;
      }
      return Sec80;
    }

    public static DateTime Cal_GetWintertime(DateTime AktTime, int WinterUTCVerschiebungInMinuten)
    {
      TimeSpan utcOffset = TimeZone.CurrentTimeZone.GetUtcOffset(AktTime);
      double num1 = (double) (utcOffset.Hours * 60 + utcOffset.Minutes);
      double num2 = (double) WinterUTCVerschiebungInMinuten - num1;
      return AktTime.AddMinutes(num2);
    }

    public static int Cal_UTCVerschiebungInMinuten(int Stunden, ushort Minuten)
    {
      return Stunden >= 0 ? Stunden * 60 + (int) Minuten : Stunden * 60 - (int) Minuten;
    }

    public static string Cal_GetIntervalInfo(uint Sec80)
    {
      switch (Sec80)
      {
        case 3600:
          return "one hour";
        case 86400:
          return "one day";
        case 2629800:
          return "one month";
        case 31557600:
          return "one year";
        default:
          return Sec80.ToString() + " sec";
      }
    }
  }
}


--- ZR_ClassLibMessages.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ZR_ClassLibMessages
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using GmmDbLib;
using NLog;
using System;
using System.Collections.Generic;
using System.Resources;
using System.Text;
using System.Threading;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ZR_ClassLibMessages
  {
    internal static ResourceManager ZR_ClassMessage = new ResourceManager("ZR_ClassLibrary.ZR_ClassLibMessages", typeof (ZR_ClassLibMessages).Assembly);
    public static SortedList<int, ZR_ClassLibMessages> ThreadErrorMsgLists;
    private ZR_ClassLibMessages.LastErrors LastError = ZR_ClassLibMessages.LastErrors.NoError;
    private StringBuilder ErrorDescription = new StringBuilder(200);
    private StringBuilder Warnings = new StringBuilder(200);
    private StringBuilder Infos = new StringBuilder(200);
    private StringBuilder UnhandledData = new StringBuilder();
    private Exception LastException;

    public static void RegisterThreadErrorMsgList()
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.ThreadErrorMsgLists = new SortedList<int, ZR_ClassLibMessages>();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        int managedThreadId = Thread.CurrentThread.ManagedThreadId;
        if (ZR_ClassLibMessages.ThreadErrorMsgLists.ContainsKey(managedThreadId))
          return;
        ZR_ClassLibMessages.ThreadErrorMsgLists.Add(managedThreadId, new ZR_ClassLibMessages());
      }
    }

    public static void DeRegisterThreadErrorMsgList()
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        return;
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        int managedThreadId = Thread.CurrentThread.ManagedThreadId;
        if (ZR_ClassLibMessages.ThreadErrorMsgLists.ContainsKey(managedThreadId))
          return;
        ZR_ClassLibMessages.ThreadErrorMsgLists.Remove(managedThreadId);
      }
    }

    private static ZR_ClassLibMessages GetMessageList()
    {
      return ZR_ClassLibMessages.GetMessageList(Thread.CurrentThread.ManagedThreadId);
    }

    private static ZR_ClassLibMessages GetMessageList(int ThreadId)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      if (!ZR_ClassLibMessages.ThreadErrorMsgLists.ContainsKey(ThreadId))
        ZR_ClassLibMessages.ThreadErrorMsgLists.Add(ThreadId, new ZR_ClassLibMessages());
      int index = ZR_ClassLibMessages.ThreadErrorMsgLists.IndexOfKey(ThreadId);
      if (index < 0)
        throw new Exception("ZR_ClassLibMessages: Thread error handler not available!");
      return ZR_ClassLibMessages.ThreadErrorMsgLists.Values[index];
    }

    public static void ClearErrors()
    {
      ZR_ClassLibMessages.ClearErrors(Thread.CurrentThread.ManagedThreadId);
    }

    public static void ClearErrors(int ThreadId)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        messageList.LastError = ZR_ClassLibMessages.LastErrors.NoError;
        messageList.ErrorDescription.Length = 0;
        messageList.Warnings.Length = 0;
        messageList.Infos.Length = 0;
        messageList.UnhandledData.Length = 0;
        messageList.LastException = (Exception) null;
      }
    }

    public static void ClearErrorText()
    {
      ZR_ClassLibMessages.ClearErrorText(Thread.CurrentThread.ManagedThreadId);
    }

    public static void ClearErrorText(int ThreadId)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        messageList.LastError = ZR_ClassLibMessages.LastErrors.NoError;
        messageList.ErrorDescription.Length = 0;
      }
    }

    public static void ClearErrorWarnings()
    {
      ZR_ClassLibMessages.ClearErrorWarnings(Thread.CurrentThread.ManagedThreadId);
    }

    public static void ClearErrorWarnings(int ThreadId)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        messageList.Warnings.Length = 0;
        messageList.UnhandledData.Length = 0;
      }
    }

    public static void ClearErrorInfo()
    {
      ZR_ClassLibMessages.ClearErrorInfo(Thread.CurrentThread.ManagedThreadId);
    }

    public static void ClearErrorInfo(int ThreadId)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
        ZR_ClassLibMessages.GetMessageList(ThreadId).Infos.Length = 0;
    }

    public static void AddErrorDescriptionAndException(
      ZR_ClassLibMessages.LastErrors TheError,
      string TheDescription,
      Logger theLogger)
    {
      theLogger.Error(TheDescription);
      ZR_ClassLibMessages.AddErrorDescriptionAndException(Thread.CurrentThread.ManagedThreadId, TheError, TheDescription);
    }

    public static void AddErrorDescriptionAndException(
      ZR_ClassLibMessages.LastErrors TheError,
      string TheDescription)
    {
      ZR_ClassLibMessages.AddErrorDescriptionAndException(Thread.CurrentThread.ManagedThreadId, TheError, TheDescription);
    }

    public static void AddErrorDescriptionAndException(
      int ThreadId,
      ZR_ClassLibMessages.LastErrors TheError,
      string TheDescription)
    {
      ZR_ClassLibMessages.AddErrorDescription(ThreadId, TheError, TheDescription);
      throw new Exception(TheDescription);
    }

    public static bool AddErrorDescription(ZR_ClassLibMessages.LastErrors TheError)
    {
      return ZR_ClassLibMessages.AddErrorDescription(Thread.CurrentThread.ManagedThreadId, TheError);
    }

    public static bool AddErrorDescription(int ThreadId, ZR_ClassLibMessages.LastErrors TheError)
    {
      ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        messageList.LastError = TheError;
        if (messageList.ErrorDescription.Length > 0)
          messageList.ErrorDescription.Insert(0, TheError.ToString() + ZR_Constants.SystemNewLine + ZR_Constants.SystemNewLine);
        else
          messageList.ErrorDescription.Append(TheError.ToString());
      }
      return false;
    }

    public static bool AddErrorDescription(string TheDescription, Logger theLogger)
    {
      theLogger.Error(TheDescription);
      return ZR_ClassLibMessages.AddErrorDescription(Thread.CurrentThread.ManagedThreadId, TheDescription);
    }

    public static bool AddErrorDescription(string TheDescription)
    {
      return ZR_ClassLibMessages.AddErrorDescription(Thread.CurrentThread.ManagedThreadId, TheDescription);
    }

    public static bool AddErrorDescription(Exception ex)
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine("Exception:");
      stringBuilder.AppendLine(ex.ToString());
      for (Exception innerException = ex.InnerException; innerException != null; innerException = innerException.InnerException)
      {
        stringBuilder.AppendLine("Inner exception:");
        stringBuilder.AppendLine(innerException.ToString());
      }
      return ZR_ClassLibMessages.AddErrorDescription(Thread.CurrentThread.ManagedThreadId, stringBuilder.ToString());
    }

    public static bool AddErrorDescription(int ThreadId, string TheDescription)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        if (messageList.ErrorDescription.Length > 0)
        {
          if (messageList.ErrorDescription.ToString().IndexOf(TheDescription) >= 0)
            return false;
          messageList.ErrorDescription.Insert(0, TheDescription + ZR_Constants.SystemNewLine);
        }
        else
          messageList.ErrorDescription.Append(TheDescription);
      }
      return false;
    }

    public static bool AddErrorDescription(
      ZR_ClassLibMessages.LastErrors TheError,
      string TheDescription,
      Logger theLogger)
    {
      theLogger.Error(TheDescription);
      return ZR_ClassLibMessages.AddErrorDescription(Thread.CurrentThread.ManagedThreadId, TheError, TheDescription);
    }

    public static bool AddErrorDescription(
      ZR_ClassLibMessages.LastErrors TheError,
      string TheDescription)
    {
      return ZR_ClassLibMessages.AddErrorDescription(Thread.CurrentThread.ManagedThreadId, TheError, TheDescription);
    }

    public static bool AddErrorDescription(
      int ThreadId,
      ZR_ClassLibMessages.LastErrors TheError,
      string TheDescription)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        if (messageList.LastError != ZR_ClassLibMessages.LastErrors.NoError && messageList.LastError != TheError)
        {
          messageList.ErrorDescription.Append(ZR_Constants.SystemNewLine);
          messageList.ErrorDescription.Append("LastError changed from: '" + ZR_ClassLibMessages.ZR_ClassMessage.GetString(messageList.LastError.ToString()));
          messageList.LastError = TheError;
          messageList.ErrorDescription.Append("' to: '" + ZR_ClassLibMessages.ZR_ClassMessage.GetString(messageList.LastError.ToString()));
          messageList.ErrorDescription.Append("'" + ZR_Constants.SystemNewLine);
        }
        else
          messageList.LastError = TheError;
        if (messageList.ErrorDescription.Length > 0)
        {
          if (messageList.ErrorDescription.ToString().IndexOf(TheDescription) >= 0)
            return false;
          messageList.ErrorDescription.Insert(0, TheDescription + ZR_Constants.SystemNewLine + ZR_Constants.SystemNewLine);
        }
        else
          messageList.ErrorDescription.Append(TheDescription);
      }
      return false;
    }

    public static void AddWarning(string warning)
    {
      ZR_ClassLibMessages.AddWarning(Thread.CurrentThread.ManagedThreadId, warning, (string) null, (Logger) null);
    }

    public static void AddWarning(string warning, Logger theLogger)
    {
      ZR_ClassLibMessages.AddWarning(Thread.CurrentThread.ManagedThreadId, warning, (string) null, theLogger);
    }

    public static void AddWarning(int ThreadId, string warning)
    {
      ZR_ClassLibMessages.AddWarning(ThreadId, warning, (string) null, (Logger) null);
    }

    public static void AddWarning(int ThreadId, string warning, Logger theLogger)
    {
      ZR_ClassLibMessages.AddWarning(ThreadId, warning, (string) null, theLogger);
    }

    public static void AddWarning(string warning, string unhandledData)
    {
      ZR_ClassLibMessages.AddWarning(Thread.CurrentThread.ManagedThreadId, warning, unhandledData, (Logger) null);
    }

    public static void AddWarning(int ThreadId, string warning, string unhandledData)
    {
      ZR_ClassLibMessages.AddWarning(ThreadId, warning, unhandledData, (Logger) null);
    }

    public static void AddWarning(
      int ThreadId,
      string warning,
      string unhandledData,
      Logger theLogger)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        if (theLogger != null)
        {
          theLogger.Info(warning);
          if (!string.IsNullOrEmpty(unhandledData))
            theLogger.Info("unhandeld: " + unhandledData);
        }
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        if (!string.IsNullOrEmpty(unhandledData))
        {
          messageList.UnhandledData.Append(unhandledData + ZR_Constants.SystemNewLine);
          messageList.LastError = ZR_ClassLibMessages.LastErrors.UnhandledData;
        }
        if (messageList.Warnings.Length > 0)
          messageList.Warnings.Insert(0, warning + ZR_Constants.SystemNewLine);
        else
          messageList.Warnings.Append(warning);
      }
    }

    public static void AddException(Exception exc)
    {
      ZR_ClassLibMessages.AddException(Thread.CurrentThread.ManagedThreadId, exc);
    }

    public static void AddException(int ThreadId, Exception exc)
    {
      string exceptionMessages = ZR_ClassLibMessages.GetAggregateExceptionMessages(exc);
      ZR_ClassLibMessages.AddErrorDescription(ThreadId, exceptionMessages);
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        messageList.LastException = exc;
        messageList.LastError = ZR_ClassLibMessages.LastErrors.Exception;
      }
    }

    private static string GetAggregateExceptionMessages(Exception exc)
    {
      if (!(exc is AggregateException))
        return exc.Message + Environment.NewLine;
      AggregateException aggregateException = (AggregateException) exc;
      string empty = string.Empty;
      for (int index = 0; index < aggregateException.InnerExceptions.Count; ++index)
        empty += ZR_ClassLibMessages.GetAggregateExceptionMessages(aggregateException.InnerExceptions[index]);
      return empty;
    }

    public static void AddInfo(string Info)
    {
      ZR_ClassLibMessages.AddInfo(Thread.CurrentThread.ManagedThreadId, Info);
    }

    public static void AddInfo(int ThreadId, string Info)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        if (messageList.Infos.Length > 0)
          messageList.Infos.Insert(0, Info + ZR_Constants.SystemNewLine);
        else
          messageList.Infos.Append(Info);
      }
    }

    public static ZR_ClassLibMessages.LastErrors GetLastError()
    {
      return ZR_ClassLibMessages.GetLastError(Thread.CurrentThread.ManagedThreadId);
    }

    public static ZR_ClassLibMessages.LastErrors GetLastError(int ThreadId)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
        return ZR_ClassLibMessages.GetMessageList(ThreadId).LastError;
    }

    public static string GetLastErrorStringTranslated()
    {
      return ZR_ClassLibMessages.GetLastErrorStringTranslated(Thread.CurrentThread.ManagedThreadId);
    }

    public static string GetLastErrorStringTranslated(int ThreadId)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        return ZR_ClassLibMessages.ZR_ClassMessage.GetString(messageList.LastError.ToString());
      }
    }

    public static string GetLastErrorMessageAndClearError()
    {
      return ZR_ClassLibMessages.GetLastErrorMessageAndClearError(Thread.CurrentThread.ManagedThreadId);
    }

    public static string GetLastErrorMessageAndClearError(int ThreadId)
    {
      string errorText = ZR_ClassLibMessages.GetErrorText(ThreadId);
      ZR_ClassLibMessages.ClearErrors(ThreadId);
      return errorText;
    }

    public static ZR_ClassLibMessages.LastErrorInfo GetLastErrorAndClearError()
    {
      return ZR_ClassLibMessages.GetLastErrorAndClearError(Thread.CurrentThread.ManagedThreadId);
    }

    public static ZR_ClassLibMessages.LastErrorInfo GetLastErrorAndClearError(int ThreadId)
    {
      ZR_ClassLibMessages.LastErrorInfo lastErrorInfo = ZR_ClassLibMessages.GetLastErrorInfo(ThreadId);
      ZR_ClassLibMessages.ClearErrors(ThreadId);
      return lastErrorInfo;
    }

    public static ZR_ClassLibMessages.LastErrorInfo GetLastErrorInfo()
    {
      return ZR_ClassLibMessages.GetLastErrorInfo(Thread.CurrentThread.ManagedThreadId);
    }

    public static ZR_ClassLibMessages.LastErrorInfo GetLastErrorInfo(int ThreadId)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        return new ZR_ClassLibMessages.LastErrorInfo(messageList.LastError, messageList.ErrorDescription.ToString(), messageList.Warnings.ToString(), messageList.Infos.ToString(), messageList.UnhandledData.ToString(), messageList.LastException);
      }
    }

    private static string GetErrorText()
    {
      return ZR_ClassLibMessages.GetErrorText(Thread.CurrentThread.ManagedThreadId);
    }

    private static string GetErrorText(int ThreadId)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        if (messageList.LastError == ZR_ClassLibMessages.LastErrors.NoError && messageList.Warnings.Length == 0 && messageList.Infos.Length == 0)
          return string.Empty;
      }
      StringBuilder stringBuilder = new StringBuilder();
      string str = " -------------------- ";
      ZR_ClassLibMessages.LastErrorInfo lastErrorInfo = ZR_ClassLibMessages.GetLastErrorInfo(ThreadId);
      if (lastErrorInfo.LastError != 0)
      {
        stringBuilder.Append(str);
        stringBuilder.Append(ZR_ClassLibMessages.ZR_ClassMessage.GetString("LastError"));
        stringBuilder.Append(str);
        stringBuilder.Append(ZR_Constants.SystemNewLine);
        stringBuilder.Append(lastErrorInfo.LastErrorAsTranslatedString + ZR_Constants.SystemNewLine);
      }
      if (lastErrorInfo.LastErrorDescription.Length > 0)
      {
        stringBuilder.Append(ZR_Constants.SystemNewLine);
        stringBuilder.Append(str);
        stringBuilder.Append(ZR_ClassLibMessages.ZR_ClassMessage.GetString("LastErrorDescription"));
        stringBuilder.Append(str);
        stringBuilder.Append(ZR_Constants.SystemNewLine);
        stringBuilder.Append(lastErrorInfo.LastErrorDescription);
      }
      if (lastErrorInfo.LastWarnings.Length > 0)
      {
        stringBuilder.Append(ZR_Constants.SystemNewLine);
        stringBuilder.Append(str);
        stringBuilder.Append(ZR_ClassLibMessages.ZR_ClassMessage.GetString("LastWarnings"));
        stringBuilder.Append(str);
        stringBuilder.Append(ZR_Constants.SystemNewLine);
        stringBuilder.Append(lastErrorInfo.LastWarnings);
      }
      if (lastErrorInfo.LastInfos.Length > 0)
      {
        stringBuilder.Append(ZR_Constants.SystemNewLine);
        stringBuilder.Append(str);
        stringBuilder.Append(ZR_ClassLibMessages.ZR_ClassMessage.GetString("LastInfos"));
        stringBuilder.Append(str);
        stringBuilder.Append(ZR_Constants.SystemNewLine);
        stringBuilder.Append(lastErrorInfo.LastInfos);
      }
      return stringBuilder.ToString();
    }

    public static void ShowAndClearErrors()
    {
      ZR_ClassLibMessages.ShowAndClearErrors(Thread.CurrentThread.ManagedThreadId);
    }

    public static void ShowAndClearErrors(int ThreadId)
    {
      ZR_ClassLibMessages.ShowAndClearErrors(ThreadId, string.Empty, string.Empty);
    }

    public static void ShowAndClearErrors(string Caption)
    {
      ZR_ClassLibMessages.ShowAndClearErrors(Thread.CurrentThread.ManagedThreadId, Caption, string.Empty);
    }

    public static void ShowAndClearErrors(int ThreadId, string Caption)
    {
      ZR_ClassLibMessages.ShowAndClearErrors(ThreadId, Caption, string.Empty);
    }

    public static void ShowAndClearErrors(string Caption, string FirstLineText)
    {
      ZR_ClassLibMessages.ShowAndClearErrors(Thread.CurrentThread.ManagedThreadId, Caption, FirstLineText);
    }

    public static void ShowAndClearErrors(int ThreadId, string Caption, string FirstLineText)
    {
      if (ZR_ClassLibMessages.ThreadErrorMsgLists == null)
        ZR_ClassLibMessages.RegisterThreadErrorMsgList();
      lock (ZR_ClassLibMessages.ThreadErrorMsgLists)
      {
        ZR_ClassLibMessages messageList = ZR_ClassLibMessages.GetMessageList(ThreadId);
        if (messageList.LastError == ZR_ClassLibMessages.LastErrors.NoError && messageList.Warnings.Length == 0 && messageList.Infos.Length == 0)
          return;
      }
      StringBuilder stringBuilder = new StringBuilder();
      if (FirstLineText != null && FirstLineText.Length > 0)
      {
        stringBuilder.Append(FirstLineText + ZR_Constants.SystemNewLine);
        stringBuilder.Append(ZR_Constants.SystemNewLine);
      }
      stringBuilder.Append(ZR_ClassLibMessages.GetErrorText(ThreadId));
      ZR_ClassLibMessages.ClearErrors();
      int num = (int) GMM_MessageBox.ShowMessage(Caption, stringBuilder.ToString(), true);
    }

    public static void ShowException(string headerText, Exception ex)
    {
      StringBuilder stringBuilder1 = new StringBuilder();
      int index = 0;
      StringBuilder stringBuilder2 = new StringBuilder();
      if (!string.IsNullOrEmpty(headerText))
      {
        stringBuilder2.AppendLine(headerText);
        stringBuilder2.AppendLine("==========================================");
        index = stringBuilder2.Length;
        stringBuilder2.AppendLine();
      }
      string messageAndClearError = ZR_ClassLibMessages.GetLastErrorMessageAndClearError();
      if (!string.IsNullOrEmpty(messageAndClearError))
      {
        stringBuilder2.AppendLine("GMM message:");
        stringBuilder2.AppendLine(messageAndClearError);
        stringBuilder2.AppendLine("==========================================");
        stringBuilder2.AppendLine();
      }
      Exception exception = ex;
      while (exception != null)
      {
        int? fromLanguageText = Ot.GetMessageNumberFromLanguageText(exception.Message);
        if (fromLanguageText.HasValue)
        {
          if (stringBuilder1.Length > 0)
            stringBuilder1.Append(';');
          stringBuilder1.Append(fromLanguageText.ToString());
        }
        stringBuilder2.AppendLine(exception.Message);
        if (exception.InnerException != null)
        {
          exception = exception.InnerException;
          stringBuilder2.AppendLine("------------------------------------------");
          stringBuilder2.AppendLine();
        }
        else
          exception = (Exception) null;
      }
      if (stringBuilder1.Length > 0)
        stringBuilder2.Insert(index, "Message tree: " + stringBuilder1.ToString() + Environment.NewLine);
      stringBuilder2.AppendLine();
      stringBuilder2.AppendLine("++++++++++++++++++++++++++++++++++++++++++");
      stringBuilder2.AppendLine(ex.ToString());
      int num = (int) GMM_MessageBox.ShowMessage("Exception", stringBuilder2.ToString(), true);
    }

    public enum LastErrors
    {
      NoError,
      Timeout,
      FunctionNotImplemented,
      NoPermission,
      InternalError,
      LoadComponentError,
      DeviceNotFound,
      CommunicationError,
      FramingError,
      MissingData,
      OperationCancelled,
      IllegalData,
      ComOpenError,
      UnhandledData,
      DatabaseError,
      NAK_Received,
      Exception,
      TimeoutReceiveIncomplete,
    }

    public class LastErrorInfo
    {
      public readonly ZR_ClassLibMessages.LastErrors LastError;
      public readonly string LastErrorAsTranslatedString;
      public readonly string LastErrorDescription;
      public readonly string LastWarnings;
      public readonly string LastInfos;
      public readonly string LastUnhandledData;
      public readonly Exception LastErrorException;

      public LastErrorInfo(
        ZR_ClassLibMessages.LastErrors LastError,
        string LastErrorDescription,
        string LastWarnings,
        string LastInfos,
        string LastUnhandledData,
        Exception LastErrorException)
      {
        this.LastError = LastError;
        this.LastErrorAsTranslatedString = ZR_ClassLibMessages.ZR_ClassMessage.GetString(LastError.ToString());
        this.LastErrorDescription = LastErrorDescription;
        this.LastWarnings = LastWarnings;
        this.LastInfos = LastInfos;
        this.LastUnhandledData = LastUnhandledData;
        this.LastErrorException = LastErrorException;
      }
    }
  }
}


--- ZR_Component.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ZR_Component
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ZR_Component
  {
    public static ZR_Component CommonGmmInterface;
    public SortedList<GMM_Components, object> LoadedComponentsList = new SortedList<GMM_Components, object>();
    public object DeviceManager;
    private static string[] ComponentNames;
    private static bool[] InstalledComponents;
    private static bool[] UserEnabledComponents;

    public event ZR_Component.GarantComponentLoadedFunction OnGarantComponentLoaded;

    public ZR_Component()
    {
      if (ZR_Component.ComponentNames != null)
        return;
      ZR_Component.ComponentNames = Util.GetNamesOfEnum(typeof (GMM_Components));
      ZR_Component.InstalledComponents = new bool[ZR_Component.ComponentNames.Length];
      ZR_Component.UserEnabledComponents = new bool[ZR_Component.ComponentNames.Length];
      this.CreateInstalledComponentsInformation();
    }

    public static void Dispose()
    {
      if (ZR_Component.CommonGmmInterface != null)
        ZR_Component.CommonGmmInterface.OnGarantComponentLoaded = (ZR_Component.GarantComponentLoadedFunction) null;
      ZR_Component.ComponentNames = (string[]) null;
      ZR_Component.InstalledComponents = (bool[]) null;
      ZR_Component.UserEnabledComponents = (bool[]) null;
      ZR_Component.CommonGmmInterface = (ZR_Component) null;
    }

    public bool GarantComponentLoaded(GMM_Components TheComponent)
    {
      if (this.IsComponentLoaded(TheComponent))
        return true;
      if (this.OnGarantComponentLoaded == null)
        return false;
      this.OnGarantComponentLoaded(TheComponent);
      return this.IsComponentLoaded(TheComponent);
    }

    public bool IsComponentLoaded(GMM_Components TheComponent)
    {
      return this.LoadedComponentsList.ContainsKey(TheComponent);
    }

    public bool IsComponentInstalled(GMM_Components TheComponent)
    {
      return ZR_Component.InstalledComponents[(int) TheComponent];
    }

    public bool IsComponentUserEnabled(GMM_Components TheComponent)
    {
      return ZR_Component.UserEnabledComponents[(int) TheComponent];
    }

    public string GetInstalledComponentsNameString()
    {
      StringBuilder stringBuilder = new StringBuilder("GMM");
      for (int index = 0; index < ZR_Component.InstalledComponents.Length; ++index)
      {
        if (ZR_Component.InstalledComponents[index])
          stringBuilder.Append(" " + ZR_Component.ComponentNames[index]);
      }
      return stringBuilder.ToString();
    }

    public string[] GetUserEnabledComponentsNameList()
    {
      int length = 0;
      for (int index = 0; index < ZR_Component.UserEnabledComponents.Length; ++index)
      {
        if (ZR_Component.UserEnabledComponents[index])
          ++length;
      }
      string[] componentsNameList = new string[length];
      int num = 0;
      for (int index = 0; index < ZR_Component.InstalledComponents.Length; ++index)
      {
        if (ZR_Component.UserEnabledComponents[index])
          componentsNameList[num++] = ZR_Component.ComponentNames[index];
      }
      return componentsNameList;
    }

    private void CreateInstalledComponentsInformation()
    {
      string directoryName = Path.GetDirectoryName(Application.ExecutablePath);
      try
      {
        ZR_Component.InstalledComponents[0] = true;
        ZR_Component.InstalledComponents[1] = true;
        string str1 = directoryName;
        char directorySeparatorChar = Path.DirectorySeparatorChar;
        string str2 = directorySeparatorChar.ToString();
        if (File.Exists(str1 + str2 + "MeterInstaller.dll"))
          ZR_Component.InstalledComponents[8] = true;
        string str3 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str4 = directorySeparatorChar.ToString();
        if (File.Exists(str3 + str4 + "MeterReader.dll"))
          ZR_Component.InstalledComponents[7] = true;
        string str5 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str6 = directorySeparatorChar.ToString();
        if (File.Exists(str5 + str6 + "MeterData.dll"))
          ZR_Component.InstalledComponents[9] = true;
        string str7 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str8 = directorySeparatorChar.ToString();
        if (File.Exists(str7 + str8 + "Designer.dll"))
          ZR_Component.InstalledComponents[5] = true;
        string str9 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str10 = directorySeparatorChar.ToString();
        if (File.Exists(str9 + str10 + "Configurator.dll"))
          ZR_Component.InstalledComponents[21] = true;
        string str11 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str12 = directorySeparatorChar.ToString();
        if (File.Exists(str11 + str12 + "gmm_handler.dll"))
          ZR_Component.InstalledComponents[6] = true;
        string str13 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str14 = directorySeparatorChar.ToString();
        if (File.Exists(str13 + str14 + "wf_handler.dll"))
          ZR_Component.InstalledComponents[10] = true;
        string str15 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str16 = directorySeparatorChar.ToString();
        if (File.Exists(str15 + str16 + "MinolHandler.dll"))
          ZR_Component.InstalledComponents[20] = true;
        string str17 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str18 = directorySeparatorChar.ToString();
        if (File.Exists(str17 + str18 + "MinomatHandler.dll"))
          ZR_Component.InstalledComponents[24] = true;
        string str19 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str20 = directorySeparatorChar.ToString();
        if (File.Exists(str19 + str20 + "EDC_Handler.dll"))
          ZR_Component.InstalledComponents[25] = true;
        string str21 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str22 = directorySeparatorChar.ToString();
        if (File.Exists(str21 + str22 + "PDC_Handler.dll"))
          ZR_Component.InstalledComponents[28] = true;
        string str23 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str24 = directorySeparatorChar.ToString();
        if (File.Exists(str23 + str24 + "SmokeDetectorHandler.dll"))
          ZR_Component.InstalledComponents[27] = true;
        string str25 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str26 = directorySeparatorChar.ToString();
        if (File.Exists(str25 + str26 + "EDC_Testbench.dll"))
          ZR_Component.InstalledComponents[26] = true;
        string str27 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str28 = directorySeparatorChar.ToString();
        if (File.Exists(str27 + str28 + "S3_Handler.dll"))
          ZR_Component.InstalledComponents[22] = true;
        string str29 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str30 = directorySeparatorChar.ToString();
        if (File.Exists(str29 + str30 + "DeviceCollector.dll"))
          ZR_Component.InstalledComponents[4] = true;
        string str31 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str32 = directorySeparatorChar.ToString();
        if (File.Exists(str31 + str32 + "AsyncCom.dll"))
          ZR_Component.InstalledComponents[3] = true;
        string str33 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str34 = directorySeparatorChar.ToString();
        if (File.Exists(str33 + str34 + "PDASynchronizer.dll"))
          ZR_Component.InstalledComponents[18] = true;
        string str35 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str36 = directorySeparatorChar.ToString();
        if (File.Exists(str35 + str36 + "MeterFactory.dll"))
          ZR_Component.InstalledComponents[11] = true;
        string str37 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str38 = directorySeparatorChar.ToString();
        if (File.Exists(str37 + str38 + "FactoryPrinter.dll"))
          ZR_Component.InstalledComponents[12] = true;
        string str39 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str40 = directorySeparatorChar.ToString();
        if (File.Exists(str39 + str40 + "MeterProtocol.dll"))
          ZR_Component.InstalledComponents[13] = true;
        string str41 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str42 = directorySeparatorChar.ToString();
        if (File.Exists(str41 + str42 + "HardwareTest.dll"))
          ZR_Component.InstalledComponents[16] = true;
        string str43 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str44 = directorySeparatorChar.ToString();
        if (File.Exists(str43 + str44 + "EnergieTestbench.dll"))
          ZR_Component.InstalledComponents[15] = true;
        string str45 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str46 = directorySeparatorChar.ToString();
        if (File.Exists(str45 + str46 + "WaterTestbench.dll"))
          ZR_Component.InstalledComponents[14] = true;
        string str47 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str48 = directorySeparatorChar.ToString();
        if (File.Exists(str47 + str48 + "CapsuleTest.dll"))
          ZR_Component.InstalledComponents[17] = true;
        string str49 = directoryName;
        directorySeparatorChar = Path.DirectorySeparatorChar;
        string str50 = directorySeparatorChar.ToString();
        if (!File.Exists(str49 + str50 + "TestComponent.dll"))
          return;
        ZR_Component.InstalledComponents[23] = true;
      }
      catch
      {
        int num = (int) MessageBox.Show("DLL Path error");
      }
    }

    public void CreateUserEnabledComponents()
    {
      for (int index = 0; index < ZR_Component.UserEnabledComponents.Length; ++index)
        ZR_Component.UserEnabledComponents[index] = false;
      ZR_Component.UserEnabledComponents[1] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.MeterInstaller) && this.IsComponentInstalled(GMM_Components.MeterInstaller))
        ZR_Component.UserEnabledComponents[8] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.MeterReader) && this.IsComponentInstalled(GMM_Components.MeterReader))
        ZR_Component.UserEnabledComponents[7] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.MeterData) && this.IsComponentInstalled(GMM_Components.MeterData))
        ZR_Component.UserEnabledComponents[9] = true;
      if ((UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Designer) || UserRights.GlobalUserRights.CheckRight(UserRights.Rights.DesignerChangeMenu)) && this.IsComponentInstalled(GMM_Components.Designer))
        ZR_Component.UserEnabledComponents[5] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Configurator) && this.IsComponentInstalled(GMM_Components.Configurator))
        ZR_Component.UserEnabledComponents[21] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Designer) && UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Developer) && this.IsComponentInstalled(GMM_Components.GMM_Handler))
        ZR_Component.UserEnabledComponents[6] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Developer) && this.IsComponentInstalled(GMM_Components.WF_Handler))
        ZR_Component.UserEnabledComponents[10] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.MinolExpertHandler) && this.IsComponentInstalled(GMM_Components.MinolHandler))
        ZR_Component.UserEnabledComponents[20] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.EDC_Handler) && this.IsComponentInstalled(GMM_Components.EDC_Handler))
        ZR_Component.UserEnabledComponents[25] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.PDC_Handler) && this.IsComponentInstalled(GMM_Components.PDC_Handler))
        ZR_Component.UserEnabledComponents[28] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.EDC_Testbench) && this.IsComponentInstalled(GMM_Components.EDC_Testbench))
        ZR_Component.UserEnabledComponents[26] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Developer) || UserRights.GlobalUserRights.CheckRight(UserRights.Rights.ProfessionalConfig) && UserRights.GlobalUserRights.CheckRight(UserRights.Rights.MinomatV4) && this.IsComponentInstalled(GMM_Components.MinomatHandler))
        ZR_Component.UserEnabledComponents[24] = true;
      if ((UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Developer) || UserRights.GlobalUserRights.CheckRight(UserRights.Rights.S3_Handler)) && this.IsComponentInstalled(GMM_Components.S3_Handler))
        ZR_Component.UserEnabledComponents[22] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.DeviceCollector) && this.IsComponentInstalled(GMM_Components.DeviceCollector))
        ZR_Component.UserEnabledComponents[4] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.AsyncCom) && this.IsComponentInstalled(GMM_Components.AsyncCom))
        ZR_Component.UserEnabledComponents[3] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.PDASynchronizer) && this.IsComponentInstalled(GMM_Components.PDASynchronizer))
        ZR_Component.UserEnabledComponents[18] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.MeterFactory) && this.IsComponentInstalled(GMM_Components.MeterFactory))
        ZR_Component.UserEnabledComponents[11] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.FactoryPrinter) && this.IsComponentInstalled(GMM_Components.FactoryPrinter))
        ZR_Component.UserEnabledComponents[12] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.FactoryPrinter) && this.IsComponentInstalled(GMM_Components.MeterProtocol))
        ZR_Component.UserEnabledComponents[13] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.WaterTestbench) && this.IsComponentInstalled(GMM_Components.WaterTestbench))
        ZR_Component.UserEnabledComponents[14] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.HardwareTest) && this.IsComponentInstalled(GMM_Components.HardwareTest))
        ZR_Component.UserEnabledComponents[16] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.EnergieTestbench) && this.IsComponentInstalled(GMM_Components.EnergieTestbench))
        ZR_Component.UserEnabledComponents[15] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.CapsuleTest) && this.IsComponentInstalled(GMM_Components.CapsuleTest))
        ZR_Component.UserEnabledComponents[17] = true;
      if (UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Developer) && this.IsComponentInstalled(GMM_Components.TestComponent))
        ZR_Component.UserEnabledComponents[23] = true;
      if (!UserRights.GlobalUserRights.CheckRight(UserRights.Rights.SmokeDetectorHandler) || !this.IsComponentInstalled(GMM_Components.SmokeDetectorHandler))
        return;
      ZR_Component.UserEnabledComponents[27] = true;
    }

    public delegate void GarantComponentLoadedFunction(GMM_Components TheComponent);
  }
}


--- ZR_Constants.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ZR_Constants
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ZR_Constants
  {
    public const string GMM_MainThreadName = "GMM main";
    public static string SystemNewLine = Environment.NewLine;
    public const int EEPADR_SERIALNR = 6;
    public const int EEPADR_MBUSSERIALNR = 10;
    public const int EEPADR_MBUSMANUFACTURER = 14;
    public const int EEPADR_MBUSMETERTYPE = 16;
    public const int EEPADR_MBUSMEDIUM = 17;
    public const int EEPADR_METERID = 18;
    public const int EEPADR_METERINFOID = 22;
    public const int EEPADR_STATICCHECKSUM = 54;
    public const int EEPADR_HEADERCHECKSUM = 56;
    public const int EEPADR_BACKUPCHECKSUM = 58;
    public const int HEADERSIZE = 76;
    public const int HEADERVARCOUNT = 7;
    public string[] HeaderVarNames = new string[7];
    public int[,] HeaderVarsAddr = new int[7, 2];
    public const byte ZR_FUNCTIONTABLE_VERSION = 3;
    public const int MAXEEPLENGTH = 8196;
    public const int MAXFUTABLELEN = 500;
    public const string NewLine = "<r>";
    public const string FixTextLine = "<C>";
    public const int ZR_PM_EPROMVARS = 1;
    public const int ZR_PM_PARAMETER = 2;
    public const int ZR_PM_RUNTIMEVARS = 3;
    public const int ZR_PM_RAMPARAMETER = 4;
    public const int ZR_PM_BACKUP = 5;
    public const int ZR_PM_STATIC = 6;
    public const int ZR_PM_FIXEDPARAM = 7;
    public const int ZR_PM_MBUS = 8;
    public const int ZR_PM_DATALOGGER = 9;
    public const int ZR_PM_WRITEPERMTABLE = 10;
    public const int ZR_PM_DISPLAYCODE = 11;
    public const int ZR_PM_RUNTIMECODE = 12;
    public const int ZR_PM_EPROMRUNTIME = 13;
    public const int ZR_PM_FUNCTIONTABLE = 14;
    public const int ZR_PM_LOGGERSTORE = 15;
    public const int ZR_PM_RESETRUNTIMECODE = 16;
    public const int ZR_PM_INTERVALRUNTIMECODE = 17;
    public const int ZR_PM_MESUREMENTCODE = 18;
    public const int ZR_PM_MBUSCODE = 19;
    public const int ZR_PM_EEPINTERVALRUNTIMECODE = 20;
    public const int ZR_PM_EVENTRUNTIMECODE = 21;
    public const int ZR_PM_STATIC_BACKUP = 22;
    public const int Bl_HEADER = 0;
    public const int Bl_RAMPARAMETER = 4;
    public const int Bl_PARAMETER = 2;
    public const int Bl_EPROMVARS = 1;
    public const int Bl_RUNTIMEVARS = 3;
    public const int Bl_BACKUP = 5;
    public const int Bl_STATIC = 6;
    public const int Bl_FIXEDPARAM = 7;
    public const int Bl_MBUS = 8;
    public const int Bl_DATALOGGER = 9;
    public const int Bl_WRITEPERMTABLE = 10;
    public const int Bl_DISPLAYCODE = 11;
    public const int Bl_RUNTIMECODE = 12;
    public const int Bl_EPROMRUNTIME = 13;
    public const int Bl_FUNCTIONTABLE = 14;
    public const int Bl_LOGGERSTORE = 15;
    public const int Bl_RESETRUNTIMECODE = 16;
    public const int BL_INTERVALRUNTIMECODE = 17;
    public const int Bl_MESUREMENTRUNTIMECODE = 18;
    public const int Bl_MBUSRUNTIMECODE = 19;
    public const int Bl_EEPINTERVALRUNTIMECODE = 20;
    public const int Bl_EVENTRUNTIMECODE = 21;
    public const int Bl_MBUSMINLIST = 22;
    public const int Bl_MBUSEXLIST = 23;
    public const int Bl_MBUS_DATALOGGER_MINLIST = 24;
    public const int Bl_MBUS_DATALOGGER_EXLIST = 25;
    public const byte P_MBUSENABLE = 4;
    public const byte P_MBUSLONGLIST = 1;
    public const byte P_MBUSSHORTLIST = 2;
    public const int ZR_FU_NORMAL = 1;
    public const int ZR_FU_FIRST = 2;
    public const int ZR_FU_MAIN = 3;
    public const int ZR_FU_INVISIBLE = 4;
    public const int ZR_FU_SYSTEM = 9;
    public const int ZR_ACC_PASSWORDLENGTH = 5;
    public const int ZR_FU_LOCKED = 1;
    public const int ZR_FU_UNLOCKED = 2;
    public const int MAX_MENU_ROW = 40;
    public const int MAX_MENU_COLUMN = 3;
    public const int SYSTEM_MENU_COLUMN = 3;
    public const int ZR_P_VALUE = 0;
    public const int ZR_P_PREPAIDFILE = 1;
    public const int ZR_P_INTERVALPOINT = 2;
    public const int ZR_P_INTERVAL = 3;
    public const int ZR_P_INTERVALOFFSET = 4;
    public const int ZR_P_STARTADDRESS = 5;
    public const int ZR_P_ENDADDRESS = 6;
    public const int ZR_P_WRITEPTR = 7;
    public const int ZR_P_FLAGS = 8;
    public const int ZR_P_COUNTERVAR = 9;
    public const int ZR_P_BYTEARRAY = 10;
    public const int ZR_P_TIMEPOINT = 11;
    public const int ZR_P_LENGTH = 20;
    public const int ZR_LOGGER_0 = 0;
    public const int ZR_LOGGER_1 = 1;
    public const int ZR_LOGGER_2 = 2;
    public const int ZR_LOGGER_3 = 3;
    public const int ZR_LOGGER_4 = 4;
    public const int ZR_LOGGER_5 = 5;
    public const int PA_INIT_PCINIT = 1;
    public const int PA_INIT_TYPEINIT = 2;
    public const int PA_INIT_PCACTUAL = 4;
    public const int PA_INIT_IDENT = 8;
    public const int PA_INIT_CALIB = 16;
    public const int PA_INIT_DV_LOAD = 32;
    public const int PA_INIT_UNCHANGED = 64;
    public const int PA_INIT_DV_LOADBASIC = 128;
    public const int PA_INIT_CHECKEQUAL = 256;
    public const int PA_INIT_ALL = -1;
    public const int ZR_NO_CONNECTIONERROR = 0;
    public const int ZR_COUNTER_CONNECTION = 1;
    public const int ZR_DB_CONNECTION = 2;
    public const int ZR_NOACTION = 3;
    public const int ZR_NEWHARDWARE = 4;
    public const int ZR_NEWMETERTYPE = 5;
    public const int ZR_METERTYPEEDIT = 6;
    public const int ZR_COUNTER_CONNECTION_TO_METERTYPE = 7;
    public const int ZR_COUNTER_CONNECTION_FOR_METERTYPE_PROGRAMMING = 8;
    public const int ZR_COUNTER_CONNECTION_SELECTIVE = 9;
    public const int ZR_COUNTER_ONLYCOMPILE = 10;
    public const byte ZR_Comp_NOTYPE = 99;
    public const byte ZR_Comp_BYTE = 0;
    public const byte ZR_Comp_WORD = 1;
    public const byte ZR_Comp_LONG = 2;
    public const byte ZR_Comp_PPTR = 3;
    public const byte ZR_Comp_EPTR = 4;
    public const byte ZR_Comp_MPTR = 5;
    public const byte ZR_Comp_SPTR = 6;
    public const byte ZR_Comp_CPTR = 7;
    public const byte ZR_Comp_ePTR = 8;
    public const byte ZR_Comp_iPTR = 9;
    public const string ZR_Comp_POINTER = "ePTR,iPTR";
    public const string ZR_Comp_INTTYPES = "BYTE;INT;LONG";
    public const string Serie3Resource = ";Serie3;";
    public const int MAXSYNCROWS = 5000;
    public const int ERRNO = 0;
    public const int ERRCONNECT = 1;
    public const int ERRDB = 2;
    public const int ERRSYSVAR = 4;
    public const int ERRNOTAVAILABLE = 8;
    public const int ERRNODATA = 16;
    public const int ERRNOTALLOWED = 32;
    public const int ERRCHECKSUM = 64;
    public const int ERRVERIFY = 128;
    public const int ERREOFFUTAB = 256;
    public const int ERRIDENT = 512;
    public const int ERRNOTFOUND = 1024;
    public const int ERRCONVERT = 2048;
    public const int ERRPROG = 4096;
    public const int ERREICHBIT = 8192;
    public const int ERROUTOFRANGE = 16384;
    public const int ERRREAD = 32768;
    public const int ERRNORESOURCES = 65536;
    public const int ERRINTERVALTIME = 131072;
    public const int ERREMPTYSTRING = 262144;
    public const int ERRUNKNOWNMENU = 67108864;
    public const int ERRNOALLOWEDPARAM = 134217728;
    public const int ERRNOPARAM = 268435456;
    public const int ERRLASTPARAM = 536870912;
    public const int ERRUNKNOWN = 1073741824;

    public ZR_Constants()
    {
      this.HeaderVarNames[0] = "SerialNr";
      this.HeaderVarNames[1] = "MBusSerialNr";
      this.HeaderVarNames[2] = "MBusManufacturer";
      this.HeaderVarNames[3] = "MBusMeterType";
      this.HeaderVarNames[4] = "MBusMedium";
      this.HeaderVarNames[5] = "MeterID";
      this.HeaderVarNames[6] = "MeterInfoID";
      this.HeaderVarsAddr[0, 0] = 6;
      this.HeaderVarsAddr[1, 0] = 10;
      this.HeaderVarsAddr[2, 0] = 14;
      this.HeaderVarsAddr[3, 0] = 16;
      this.HeaderVarsAddr[4, 0] = 17;
      this.HeaderVarsAddr[5, 0] = 18;
      this.HeaderVarsAddr[6, 0] = 22;
      this.HeaderVarsAddr[0, 1] = 4;
      this.HeaderVarsAddr[1, 1] = 4;
      this.HeaderVarsAddr[2, 1] = 2;
      this.HeaderVarsAddr[3, 1] = 1;
      this.HeaderVarsAddr[4, 1] = 1;
      this.HeaderVarsAddr[5, 1] = 4;
      this.HeaderVarsAddr[6, 1] = 4;
    }

    public enum DataState
    {
      NoData,
      Connect,
      DeviceIdent,
      DeviceOK,
      DeviceMenuChanged,
      DeviceMenuChangedOK,
      MeterLoad,
      MeterIdent,
      Type,
      TypeOK,
      TypeDeviceConnect,
      TypeDeviceIdent,
      TypeDeviceIdentAssigned,
      TypeDeviceOK,
      TypeDevMenuChanged,
      TypeDeviceMenuChangedOK,
      TypeMeterLoad,
      TypeMeterIdent,
      TypeLoad,
      TypeIdent,
      TypeDevice,
      TypeMenuChanged,
      TypeMenuChangedOK,
      DTypeDevice,
      DBOpen,
      DBDeviceLoad,
      DBDeviceIdent,
      DBOK,
      DBMenuChanged,
      DBMenuChangedOK,
      DBMeterLoad,
      DBMeterIdent,
      DBDevice,
      DBDevDevice,
      Device,
      DTypeSaved,
      DBDevDeviceSaved,
      DBDeviceSaved,
      TypeSaved,
      DevParamChanged,
      DTypeParamChanged,
      DBDevParamChanged,
      DBParamChanged,
      TypeParamChanged,
      DeviceDMChanged,
      DeviceDPMChanged,
      DeviceDPChanged,
      TypeDPChanged,
      TypeDMChanged,
      TypeDPMChanged,
    }

    public enum FrameNames
    {
      VolumeFrame = 0,
      FlowFrame = 2,
      EnergyFrame = 3,
      PowerFrame = 6,
      FrameCode = 7,
      Input1Frame = 8,
      Input2Frame = 9,
      Input1ImpValFrame = 10, // 0x0000000A
      Input2ImpValFrame = 11, // 0x0000000B
      BCFrame = 12, // 0x0000000C
      ImpulsValueFrame = 13, // 0x0000000D
      FrameNamesSize = 14, // 0x0000000E
    }
  }
}


--- ZR_PlaySound.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ZR_PlaySound
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System.IO;
using System.Runtime.InteropServices;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ZR_PlaySound
  {
    [DllImport("winmm.dll", CharSet = CharSet.Auto)]
    private static extern int PlaySound(string pszSound, int hmod, int falgs);

    public static void PlaySound(string pszSound)
    {
      try
      {
        if (!(pszSound != string.Empty) || !File.Exists(pszSound))
          return;
        ZR_PlaySound.PlaySound(pszSound, 0, 139264);
      }
      catch
      {
      }
    }

    public static void PlayOKSound()
    {
      try
      {
        string str = Path.Combine(SystemValues.AppPath, "OK.wav");
        if (!(str != string.Empty) || !File.Exists(str))
          return;
        ZR_PlaySound.PlaySound(str, 0, 139265);
      }
      catch
      {
      }
    }

    public static void PlayERRORSound()
    {
      try
      {
        string str = Path.Combine(SystemValues.AppPath, "ERROR.wav");
        if (!(str != string.Empty) || !File.Exists(str))
          return;
        ZR_PlaySound.PlaySound(str, 0, 139265);
      }
      catch
      {
      }
    }

    public static void PlaySoundEvent(string pszSound)
    {
      try
      {
        ZR_PlaySound.PlaySound(pszSound, 0, 73728);
      }
      catch
      {
      }
    }

    public enum SND
    {
      SND_SYNC = 0,
      SND_ASYNC = 1,
      SND_NODEFAULT = 2,
      SND_MEMORY = 4,
      SND_LOOP = 8,
      SND_NOSTOP = 16, // 0x00000010
      SND_PURGE = 64, // 0x00000040
      SND_APPLICATION = 128, // 0x00000080
      SND_NOWAIT = 8192, // 0x00002000
      SND_ALIAS = 65536, // 0x00010000
      SND_FILENAME = 131072, // 0x00020000
      SND_RESOURCE = 262148, // 0x00040004
      SND_ALIAS_ID = 1114112, // 0x00110000
    }
  }
}


--- ZR_ProgMessage.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ZR_ProgMessage
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Drawing;
using System.Resources;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ZR_ProgMessage : Form
  {
    private PictureBox pictureBox1;
    private Label label1;
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;

    public ZR_ProgMessage()
    {
      this.InitializeComponent();
      this.Cursor = Cursors.WaitCursor;
    }

    protected override void Dispose(bool disposing)
    {
      this.Cursor = Cursors.Default;
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ResourceManager resourceManager = new ResourceManager(typeof (ZR_ProgMessage));
      this.pictureBox1 = new PictureBox();
      this.label1 = new Label();
      this.SuspendLayout();
      this.pictureBox1.AccessibleDescription = resourceManager.GetString("pictureBox1.AccessibleDescription");
      this.pictureBox1.AccessibleName = resourceManager.GetString("pictureBox1.AccessibleName");
      this.pictureBox1.Anchor = (AnchorStyles) resourceManager.GetObject("pictureBox1.Anchor");
      this.pictureBox1.BackColor = Color.Transparent;
      this.pictureBox1.BackgroundImage = (Image) resourceManager.GetObject("pictureBox1.BackgroundImage");
      this.pictureBox1.Dock = (DockStyle) resourceManager.GetObject("pictureBox1.Dock");
      this.pictureBox1.Enabled = (bool) resourceManager.GetObject("pictureBox1.Enabled");
      this.pictureBox1.Font = (Font) resourceManager.GetObject("pictureBox1.Font");
      this.pictureBox1.Image = (Image) resourceManager.GetObject("pictureBox1.Image");
      this.pictureBox1.ImeMode = (ImeMode) resourceManager.GetObject("pictureBox1.ImeMode");
      this.pictureBox1.Location = (Point) resourceManager.GetObject("pictureBox1.Location");
      this.pictureBox1.Name = "pictureBox1";
      this.pictureBox1.RightToLeft = (RightToLeft) resourceManager.GetObject("pictureBox1.RightToLeft");
      this.pictureBox1.Size = (Size) resourceManager.GetObject("pictureBox1.Size");
      this.pictureBox1.SizeMode = (PictureBoxSizeMode) resourceManager.GetObject("pictureBox1.SizeMode");
      this.pictureBox1.TabIndex = (int) resourceManager.GetObject("pictureBox1.TabIndex");
      this.pictureBox1.TabStop = false;
      this.pictureBox1.Text = resourceManager.GetString("pictureBox1.Text");
      this.pictureBox1.Visible = (bool) resourceManager.GetObject("pictureBox1.Visible");
      this.pictureBox1.Click += new System.EventHandler(this.pictureBox1_Click);
      this.label1.AccessibleDescription = resourceManager.GetString("label1.AccessibleDescription");
      this.label1.AccessibleName = resourceManager.GetString("label1.AccessibleName");
      this.label1.Anchor = (AnchorStyles) resourceManager.GetObject("label1.Anchor");
      this.label1.AutoSize = (bool) resourceManager.GetObject("label1.AutoSize");
      this.label1.BackColor = Color.White;
      this.label1.Dock = (DockStyle) resourceManager.GetObject("label1.Dock");
      this.label1.Enabled = (bool) resourceManager.GetObject("label1.Enabled");
      this.label1.Font = (Font) resourceManager.GetObject("label1.Font");
      this.label1.ForeColor = Color.Red;
      this.label1.Image = (Image) resourceManager.GetObject("label1.Image");
      this.label1.ImageAlign = (ContentAlignment) resourceManager.GetObject("label1.ImageAlign");
      this.label1.ImageIndex = (int) resourceManager.GetObject("label1.ImageIndex");
      this.label1.ImeMode = (ImeMode) resourceManager.GetObject("label1.ImeMode");
      this.label1.Location = (Point) resourceManager.GetObject("label1.Location");
      this.label1.Name = "label1";
      this.label1.RightToLeft = (RightToLeft) resourceManager.GetObject("label1.RightToLeft");
      this.label1.Size = (Size) resourceManager.GetObject("label1.Size");
      this.label1.TabIndex = (int) resourceManager.GetObject("label1.TabIndex");
      this.label1.Text = resourceManager.GetString("label1.Text");
      this.label1.TextAlign = (ContentAlignment) resourceManager.GetObject("label1.TextAlign");
      this.label1.Visible = (bool) resourceManager.GetObject("label1.Visible");
      this.label1.Click += new System.EventHandler(this.label1_Click);
      this.AccessibleDescription = resourceManager.GetString("$this.AccessibleDescription");
      this.AccessibleName = resourceManager.GetString("$this.AccessibleName");
      this.AutoScaleBaseSize = (Size) resourceManager.GetObject("$this.AutoScaleBaseSize");
      this.AutoScroll = (bool) resourceManager.GetObject("$this.AutoScroll");
      this.AutoScrollMargin = (Size) resourceManager.GetObject("$this.AutoScrollMargin");
      this.AutoScrollMinSize = (Size) resourceManager.GetObject("$this.AutoScrollMinSize");
      this.BackColor = Color.White;
      this.BackgroundImage = (Image) resourceManager.GetObject("$this.BackgroundImage");
      this.ClientSize = (Size) resourceManager.GetObject("$this.ClientSize");
      this.ControlBox = false;
      this.Controls.Add((Control) this.pictureBox1);
      this.Controls.Add((Control) this.label1);
      this.Enabled = (bool) resourceManager.GetObject("$this.Enabled");
      this.Font = (Font) resourceManager.GetObject("$this.Font");
      this.Icon = (Icon) resourceManager.GetObject("$this.Icon");
      this.ImeMode = (ImeMode) resourceManager.GetObject("$this.ImeMode");
      this.Location = (Point) resourceManager.GetObject("$this.Location");
      this.MaximizeBox = false;
      this.MaximumSize = (Size) resourceManager.GetObject("$this.MaximumSize");
      this.MinimizeBox = false;
      this.MinimumSize = (Size) resourceManager.GetObject("$this.MinimumSize");
      this.Name = nameof (ZR_ProgMessage);
      this.RightToLeft = (RightToLeft) resourceManager.GetObject("$this.RightToLeft");
      this.ShowInTaskbar = false;
      this.StartPosition = (FormStartPosition) resourceManager.GetObject("$this.StartPosition");
      this.Text = resourceManager.GetString("$this.Text");
      this.ResumeLayout(false);
    }

    private void pictureBox1_Click(object sender, EventArgs e)
    {
    }

    private void label1_Click(object sender, EventArgs e)
    {
    }
  }
}


--- ZR_ReadMessage.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ZR_ClassLibrary.ZR_ReadMessage
// Assembly: ZR_ClassLibrary, Version=6.16.22.24524, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: EF8F26C8-41DE-4472-B020-D54F7F8B6357
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ZR_ClassLibrary.dll

using System;
using System.Drawing;
using System.Resources;
using System.Windows.Forms;

#nullable disable
namespace ZR_ClassLibrary
{
  public class ZR_ReadMessage : Form
  {
    private Label label1;
    private PictureBox pictureBox1;
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;

    public ZR_ReadMessage()
    {
      this.InitializeComponent();
      this.Cursor = Cursors.WaitCursor;
    }

    protected override void Dispose(bool disposing)
    {
      this.Cursor = Cursors.Default;
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ResourceManager resourceManager = new ResourceManager(typeof (ZR_ReadMessage));
      this.label1 = new Label();
      this.pictureBox1 = new PictureBox();
      this.SuspendLayout();
      this.label1.AccessibleDescription = resourceManager.GetString("label1.AccessibleDescription");
      this.label1.AccessibleName = resourceManager.GetString("label1.AccessibleName");
      this.label1.Anchor = (AnchorStyles) resourceManager.GetObject("label1.Anchor");
      this.label1.AutoSize = (bool) resourceManager.GetObject("label1.AutoSize");
      this.label1.BackColor = Color.Transparent;
      this.label1.Dock = (DockStyle) resourceManager.GetObject("label1.Dock");
      this.label1.Enabled = (bool) resourceManager.GetObject("label1.Enabled");
      this.label1.Font = (Font) resourceManager.GetObject("label1.Font");
      this.label1.Image = (Image) resourceManager.GetObject("label1.Image");
      this.label1.ImageAlign = (ContentAlignment) resourceManager.GetObject("label1.ImageAlign");
      this.label1.ImageIndex = (int) resourceManager.GetObject("label1.ImageIndex");
      this.label1.ImeMode = (ImeMode) resourceManager.GetObject("label1.ImeMode");
      this.label1.Location = (Point) resourceManager.GetObject("label1.Location");
      this.label1.Name = "label1";
      this.label1.RightToLeft = (RightToLeft) resourceManager.GetObject("label1.RightToLeft");
      this.label1.Size = (Size) resourceManager.GetObject("label1.Size");
      this.label1.TabIndex = (int) resourceManager.GetObject("label1.TabIndex");
      this.label1.Text = resourceManager.GetString("label1.Text");
      this.label1.TextAlign = (ContentAlignment) resourceManager.GetObject("label1.TextAlign");
      this.label1.Visible = (bool) resourceManager.GetObject("label1.Visible");
      this.label1.Click += new System.EventHandler(this.label1_Click);
      this.pictureBox1.AccessibleDescription = resourceManager.GetString("pictureBox1.AccessibleDescription");
      this.pictureBox1.AccessibleName = resourceManager.GetString("pictureBox1.AccessibleName");
      this.pictureBox1.Anchor = (AnchorStyles) resourceManager.GetObject("pictureBox1.Anchor");
      this.pictureBox1.BackgroundImage = (Image) resourceManager.GetObject("pictureBox1.BackgroundImage");
      this.pictureBox1.Dock = (DockStyle) resourceManager.GetObject("pictureBox1.Dock");
      this.pictureBox1.Enabled = (bool) resourceManager.GetObject("pictureBox1.Enabled");
      this.pictureBox1.Font = (Font) resourceManager.GetObject("pictureBox1.Font");
      this.pictureBox1.Image = (Image) resourceManager.GetObject("pictureBox1.Image");
      this.pictureBox1.ImeMode = (ImeMode) resourceManager.GetObject("pictureBox1.ImeMode");
      this.pictureBox1.Location = (Point) resourceManager.GetObject("pictureBox1.Location");
      this.pictureBox1.Name = "pictureBox1";
      this.pictureBox1.RightToLeft = (RightToLeft) resourceManager.GetObject("pictureBox1.RightToLeft");
      this.pictureBox1.Size = (Size) resourceManager.GetObject("pictureBox1.Size");
      this.pictureBox1.SizeMode = (PictureBoxSizeMode) resourceManager.GetObject("pictureBox1.SizeMode");
      this.pictureBox1.TabIndex = (int) resourceManager.GetObject("pictureBox1.TabIndex");
      this.pictureBox1.TabStop = false;
      this.pictureBox1.Text = resourceManager.GetString("pictureBox1.Text");
      this.pictureBox1.Visible = (bool) resourceManager.GetObject("pictureBox1.Visible");
      this.pictureBox1.Click += new System.EventHandler(this.pictureBox1_Click);
      this.AccessibleDescription = resourceManager.GetString("$this.AccessibleDescription");
      this.AccessibleName = resourceManager.GetString("$this.AccessibleName");
      this.AutoScaleBaseSize = (Size) resourceManager.GetObject("$this.AutoScaleBaseSize");
      this.AutoScroll = (bool) resourceManager.GetObject("$this.AutoScroll");
      this.AutoScrollMargin = (Size) resourceManager.GetObject("$this.AutoScrollMargin");
      this.AutoScrollMinSize = (Size) resourceManager.GetObject("$this.AutoScrollMinSize");
      this.BackColor = Color.White;
      this.BackgroundImage = (Image) resourceManager.GetObject("$this.BackgroundImage");
      this.ClientSize = (Size) resourceManager.GetObject("$this.ClientSize");
      this.ControlBox = false;
      this.Controls.Add((Control) this.pictureBox1);
      this.Controls.Add((Control) this.label1);
      this.Enabled = (bool) resourceManager.GetObject("$this.Enabled");
      this.Font = (Font) resourceManager.GetObject("$this.Font");
      this.Icon = (Icon) resourceManager.GetObject("$this.Icon");
      this.ImeMode = (ImeMode) resourceManager.GetObject("$this.ImeMode");
      this.Location = (Point) resourceManager.GetObject("$this.Location");
      this.MaximizeBox = false;
      this.MaximumSize = (Size) resourceManager.GetObject("$this.MaximumSize");
      this.MinimizeBox = false;
      this.MinimumSize = (Size) resourceManager.GetObject("$this.MinimumSize");
      this.Name = nameof (ZR_ReadMessage);
      this.RightToLeft = (RightToLeft) resourceManager.GetObject("$this.RightToLeft");
      this.StartPosition = (FormStartPosition) resourceManager.GetObject("$this.StartPosition");
      this.Text = resourceManager.GetString("$this.Text");
      this.ResumeLayout(false);
    }

    private void label1_Click(object sender, EventArgs e)
    {
    }

    private void pictureBox1_Click(object sender, EventArgs e)
    {
    }
  }
}

